diff -ruN base/client/mysqldump.c mysql40gpl/client/mysqldump.c
--- base/client/mysqldump.c	2005-09-02 15:38:01.000000000 -0700
+++ mysql40gpl/client/mysqldump.c	2007-04-21 09:56:36.000000000 -0700
@@ -80,6 +80,7 @@
   opt_delete_master_logs=0, tty_password=0,
   opt_single_transaction=0, opt_comments= 0,
   opt_hex_blob;
+static my_bool opt_lossless_fp;
 static ulong opt_max_allowed_packet, opt_net_buffer_length;
 static MYSQL  mysql_connection,*sock=0;
 static char  insert_pat[12 * 1024],*opt_password=0,*current_user=0,
@@ -256,6 +257,10 @@
     (gptr*) &opt_net_buffer_length, (gptr*) &opt_net_buffer_length, 0,
     GET_ULONG, REQUIRED_ARG, 1024*1024L-1025, 4096, 16*1024L*1024L,
     MALLOC_OVERHEAD-1024, 1024, 0},
+  {"lossless-fp", 'L',
+   "Convert double and float to decimal with extra precision so the reinserted values will be equal to the original values.",
+   (gptr*) &opt_lossless_fp, (gptr*) &opt_lossless_fp, 0, GET_BOOL, NO_ARG, 0, 0, 0, 0, 0, 0},
+
   {0, 0, 0, 0, 0, 0, GET_NO_ARG, NO_ARG, 0, 0, 0, 0, 0, 0}
 };
 
@@ -611,6 +616,96 @@
   return buff;
 }
 
+/*
+  getSelectList - returns the select list in select_buf. Columns with type
+  double and float are wrapped with the function call IEEE754_TO_STRING.
+  Other columns are not wrapped with the function call. This is only needed
+  when --lossless-fp has been set.
+  RETURN
+    0 on success
+*/
+
+static uint getSelectList(char *table, char *select_buf)
+{
+  char query_buf[1024];
+  const char *func = "IEEE754_TO_STRING";
+  // Include space for '(' and ')'
+  const int func_len = sizeof(func) + 2;
+  char quoted_table_name[NAME_LEN*2+3];
+  char* quoted_table_ptr;
+
+  quoted_table_ptr = quote_name(table, quoted_table_name, 1);
+
+  // Use this to determine the datatypes and names of the fetched columns.
+  sprintf(query_buf, "SELECT * from %s limit 0", quoted_table_ptr);
+
+  if (verbose)
+    fprintf(stderr, "-- Building select list from %s\n", query_buf);
+
+  if (!mysql_query(sock, query_buf)) {
+    MYSQL_RES *query_result = mysql_store_result(sock);
+    MYSQL_ROW row;
+    int field_ix;
+    int num_fields;
+    int select_len = 0;
+    int select_ix = 0;
+
+    if (!query_result) {
+      fprintf(stderr,
+              "-- Cannot get column types for table %s, mysql_store_result returns NULL: %s",
+              table, mysql_error(sock));
+      mysql_free_result(query_result);
+      return 1;
+    }
+    if (mysql_errno(sock)) {
+      fprintf(stderr,
+              "-- Cannot get column types for table %s, error in mysql_store_result: %s",
+              table, mysql_error(sock));
+      mysql_free_result(query_result);
+      return 1;
+    }
+    num_fields = mysql_num_fields(query_result);
+    if (num_fields <= 0) {
+      fprintf(stderr,
+              "-- Cannot get column types for table %s, no fields fetched",
+              table);
+      mysql_free_result(query_result);
+      return 1;
+    }
+
+    // Determine the size of the select list.
+    for (field_ix = 0; field_ix < num_fields; ++field_ix) {
+      MYSQL_FIELD *field = mysql_fetch_field_direct(query_result, field_ix);
+      char quoted_name[NAME_LEN*2+3];
+      char *name = quote_name(field->name, quoted_name, 0);
+      select_len += strlen(name) + 2;
+      if (field->type == FIELD_TYPE_FLOAT || field->type == FIELD_TYPE_DOUBLE)
+        select_len += func_len;
+    }
+
+    // Generate the select list.
+    for (field_ix = 0; field_ix < num_fields; ++field_ix) {
+      MYSQL_FIELD *field = mysql_fetch_field_direct(query_result, field_ix);
+      char quoted_name[NAME_LEN*2+3];
+      char *name = quote_name(field->name, quoted_name, 0);
+      if (field->type == FIELD_TYPE_FLOAT || field->type == FIELD_TYPE_DOUBLE)
+        select_ix += sprintf(select_buf + select_ix, "%s(%s)", func, name);
+      else
+        select_ix += sprintf(select_buf + select_ix, "%s", name);
+      if (field_ix < (num_fields - 1))
+        select_ix += sprintf(select_buf + select_ix, ", ");
+    }
+
+    mysql_free_result(query_result);
+
+    if (verbose)
+      fprintf(stderr, "The select list for %s is %s", table, select_buf);
+    return 0;
+  } else {
+    fprintf(stderr, "Metadata query for %s failed: %s", table, mysql_error(sock));
+    return 1;
+  }
+}
 
 /*
   getStructure -- retrievs database structure, prints out corresponding
@@ -990,6 +1085,7 @@
   ulong		rownr, row_break, total_length, init_length;
   const char    *table_type;
   int error= 0;
+  char          select_list[QUERY_LENGTH];
 
   result_table= quote_name(table,table_buff, 1);
   opt_quoted_table= quote_name(table, table_buff2, 0);
@@ -1004,6 +1100,11 @@
     return;
   }
 
+  if (opt_lossless_fp) {
+    if (getSelectList(table, select_list))
+      exit(EX_MYSQLERR);
+  }
+
   if (verbose)
     fprintf(stderr, "-- Sending SELECT query...\n");
   if (path)
@@ -1015,8 +1116,13 @@
     my_delete(filename, MYF(0)); /* 'INTO OUTFILE' doesn't work, if
 				    filename wasn't deleted */
     to_unix_path(filename);
-    sprintf(query, "SELECT /*!40001 SQL_NO_CACHE */ * INTO OUTFILE '%s'",
-	    filename);
+    if (!opt_lossless_fp) {
+      sprintf(query, "SELECT /*!40001 SQL_NO_CACHE */ * INTO OUTFILE '%s'",
+              filename);
+    } else {
+      sprintf(query, "SELECT /*!40001 SQL_NO_CACHE */ %s INTO OUTFILE '%s'",
+              select_list, filename);
+    }
     end= strend(query);
     if (replace)
       end= strmov(end, " REPLACE");
@@ -1050,8 +1156,13 @@
     if (!opt_xml && opt_comments)
       fprintf(md_result_file,"\n--\n-- Dumping data for table %s\n--\n",
 	      result_table);
-    sprintf(query, "SELECT /*!40001 SQL_NO_CACHE */ * FROM %s",
-	    result_table);
+    if (!opt_lossless_fp) {
+      sprintf(query, "SELECT /*!40001 SQL_NO_CACHE */ * FROM %s",
+              result_table);
+    } else {
+      sprintf(query, "SELECT /*!40001 SQL_NO_CACHE */ %s FROM %s",
+              select_list, result_table);
+    }
     if (where)
     {
       if (!opt_xml && opt_comments)
diff -ruN base/configure mysql40gpl/configure
--- base/configure	2005-09-02 15:38:41.000000000 -0700
+++ mysql40gpl/configure	2007-04-21 09:56:38.000000000 -0700
@@ -24767,8 +24767,8 @@
 # Some system specific hacks
 #
 
-MAX_C_OPTIMIZE="-O3"
-MAX_CXX_OPTIMIZE="-O3"
+MAX_C_OPTIMIZE="-O2"
+MAX_CXX_OPTIMIZE="-O2"
 
 # workaround for Sun Forte/x86 see BUG#4681
 case $SYSTEM_TYPE-$MACHINE_TYPE-$ac_cv_c_compiler_gnu in
diff -ruN base/configure.in mysql40gpl/configure.in
--- base/configure.in	2005-09-02 15:38:03.000000000 -0700
+++ mysql40gpl/configure.in	2007-04-21 09:56:38.000000000 -0700
@@ -941,8 +941,8 @@
 # Some system specific hacks
 #
 
-MAX_C_OPTIMIZE="-O3"
-MAX_CXX_OPTIMIZE="-O3"
+MAX_C_OPTIMIZE="-O2"
+MAX_CXX_OPTIMIZE="-O2"
 
 # workaround for Sun Forte/x86 see BUG#4681
 case $SYSTEM_TYPE-$MACHINE_TYPE-$ac_cv_prog_gcc in
diff -ruN base/include/hash.h mysql40gpl/include/hash.h
--- base/include/hash.h	2005-09-02 15:38:00.000000000 -0700
+++ mysql40gpl/include/hash.h	2007-04-21 09:56:39.000000000 -0700
@@ -43,10 +43,11 @@
   uint (*calc_hashnr)(const byte *key,uint length);
 } HASH;
 
-#define hash_init(A,B,C,D,E,F,G) _hash_init(A,B,C,D,E,F,G CALLER_INFO)
-my_bool _hash_init(HASH *hash,uint default_array_elements, uint key_offset,
-		  uint key_length, hash_get_key get_key,
-		  void (*free_element)(void*), uint flags CALLER_INFO_PROTO);
+#define hash_init(A,B,C,D,E,F,G) _hash_init(A,B,0,C,D,E,F,G CALLER_INFO)
+#define hash_init2(A,B,C,D,E,F,G,H) _hash_init(A,B,C,D,E,F,G,H CALLER_INFO)
+my_bool _hash_init(HASH *hash,uint default_array_elements, uint growth_size,
+                   uint key_offset, uint key_length, hash_get_key get_key,
+                   void (*free_element)(void*), uint flags CALLER_INFO_PROTO);
 void hash_free(HASH *tree);
 byte *hash_element(HASH *hash,uint idx);
 gptr hash_search(HASH *info,const byte *key,uint length);
diff -ruN base/include/my_global.h mysql40gpl/include/my_global.h
--- base/include/my_global.h	2005-09-02 15:37:55.000000000 -0700
+++ mysql40gpl/include/my_global.h	2007-04-21 09:56:40.000000000 -0700
@@ -388,7 +388,10 @@
 #define my_reinterpret_cast(A) (A)
 #define my_const_cast(A) (A)
 #endif
-#if !defined(__attribute__) && (defined(__cplusplus) || !defined(__GNUC__)  || __GNUC__ == 2 && __GNUC_MINOR__ < 8)
+#if !defined(__attribute__) && \
+       (!defined(__GNUC__)  || \
+             (__GNUC__ == 2 && __GNUC_MINOR__ < 8) || \
+             (defined(__cplusplus) && (__GNUC__ < 3 || __GNUC__ == 3 && __GNUC_MINOR__ < 4)))
 #define __attribute__(A)
 #endif
 
diff -ruN base/include/mysql_com.h mysql40gpl/include/mysql_com.h
--- base/include/mysql_com.h	2005-09-02 15:38:09.000000000 -0700
+++ mysql40gpl/include/mysql_com.h	2007-04-21 12:28:27.000000000 -0700
@@ -71,6 +71,8 @@
 					   thread */
 #define REFRESH_MASTER          128     /* Remove all bin logs in the index
 					   and truncate the index */
+#define REFRESH_TABLE_STATS     256     /* Refresh table stats hash table */
+#define REFRESH_INDEX_STATS     512    /* Refresh index stats hash table */
 
 /* The following can't be set with mysql_refresh() */
 #define REFRESH_READ_LOCK	16384	/* Lock tables for read */
@@ -81,6 +83,7 @@
 #define REFRESH_QUERY_CACHE_FREE 0x20000L /* pack query cache */
 #define REFRESH_DES_KEY_FILE	0x40000L
 #define REFRESH_USER_RESOURCES	0x80000L
+#define REFRESH_NO_PURGE_BINLOG	0x100000L
 
 #define CLIENT_LONG_PASSWORD	1	/* new more secure passwords */
 #define CLIENT_FOUND_ROWS	2	/* Found instead of affected rows */
diff -ruN base/innobase/btr/btr0cur.c mysql40gpl/innobase/btr/btr0cur.c
--- base/innobase/btr/btr0cur.c	2005-09-02 15:38:02.000000000 -0700
+++ mysql40gpl/innobase/btr/btr0cur.c	2007-04-21 09:56:40.000000000 -0700
@@ -54,7 +54,7 @@
 
 /* When estimating number of different kay values in an index sample
 this many index pages */
-#define BTR_KEY_VAL_ESTIMATE_N_PAGES	8
+ulong btr_key_val_estimate_n_pages = 8;
 
 /* The structure of a BLOB part header */
 /*--------------------------------------*/
@@ -2652,8 +2652,10 @@
 	ulint		i;
 	ulint		j;
 	ulint		add_on;
+        ulint           n_sample_pages;
 	mtr_t		mtr;
 
+        n_sample_pages = btr_key_val_estimate_n_pages;
 	n_cols = dict_index_get_n_unique(index);
 
 	n_diff = mem_alloc((n_cols + 1) * sizeof(ib_longlong));
@@ -2664,7 +2666,7 @@
 
 	/* We sample some pages in the index to get an estimate */
 	
-	for (i = 0; i < BTR_KEY_VAL_ESTIMATE_N_PAGES; i++) {
+	for (i = 0; i < n_sample_pages; i++) {
 		mtr_start(&mtr);
 
 		btr_cur_open_at_rnd_pos(index, BTR_SEARCH_LEAF, &cursor, &mtr);
@@ -2732,7 +2734,7 @@
 	}
 
 	/* If we saw k borders between different key values on
-	BTR_KEY_VAL_ESTIMATE_N_PAGES leaf pages, we can estimate how many
+	n_sample_pages leaf pages, we can estimate how many
 	there will be in index->stat_n_leaf_pages */
 	
 	/* We must take into account that our sample actually represents
@@ -2743,25 +2745,25 @@
 		index->stat_n_diff_key_vals[j] =
 				(n_diff[j]
 				 * (ib_longlong)index->stat_n_leaf_pages
-				 + BTR_KEY_VAL_ESTIMATE_N_PAGES - 1
+				 + n_sample_pages - 1
 				 + total_external_size
 				 + not_empty_flag)
-		                	/ (BTR_KEY_VAL_ESTIMATE_N_PAGES
+		                	/ (n_sample_pages
 		                	   + total_external_size);
 	
 		/* If the tree is small, smaller than <
-		10 * BTR_KEY_VAL_ESTIMATE_N_PAGES + total_external_size, then
+		10 * n_sample_pages + total_external_size, then
 		the above estimate is ok. For bigger trees it is common that we
 		do not see any borders between key values in the few pages
-		we pick. But still there may be BTR_KEY_VAL_ESTIMATE_N_PAGES
+		we pick. But still there may be n_sample_pages
 		different key values, or even more. Let us try to approximate
 		that: */
 
 		add_on = index->stat_n_leaf_pages /
-		   (10 * (BTR_KEY_VAL_ESTIMATE_N_PAGES + total_external_size));
+		   (10 * (n_sample_pages + total_external_size));
 
-		if (add_on > BTR_KEY_VAL_ESTIMATE_N_PAGES) {
-			add_on = BTR_KEY_VAL_ESTIMATE_N_PAGES;
+		if (add_on > n_sample_pages) {
+			add_on = n_sample_pages;
 		}
 		
 		index->stat_n_diff_key_vals[j] += add_on;
diff -ruN base/innobase/buf/buf0flu.c mysql40gpl/innobase/buf/buf0flu.c
--- base/innobase/buf/buf0flu.c	2005-09-02 15:38:01.000000000 -0700
+++ mysql40gpl/innobase/buf/buf0flu.c	2007-04-21 09:56:40.000000000 -0700
@@ -323,7 +323,7 @@
 
 	/* Now flush the doublewrite buffer data to disk */
 
-	fil_flush(TRX_SYS_SPACE);
+	fil_flush(TRX_SYS_SPACE, FLUSH_FROM_DIRTY_BUFFER);
 
 	/* We know that the writes have been flushed to disk now
 	and in recovery we will find them in the doublewrite buffer
@@ -362,7 +362,7 @@
 
 	/* Now we flush the data to disk (for example, with fsync) */
 
-	fil_flush_file_spaces(FIL_TABLESPACE);
+	fil_flush_file_spaces(FIL_TABLESPACE, FLUSH_FROM_DIRTY_BUFFER);
 
 	/* We can now reuse the doublewrite memory buffer: */
 
@@ -469,7 +469,8 @@
 		stderr);
 #else
 	/* Force the log to the disk before writing the modified block */
-	log_write_up_to(block->newest_modification, LOG_WAIT_ALL_GROUPS, TRUE);
+	log_write_up_to(block->newest_modification, LOG_WAIT_ALL_GROUPS, TRUE,
+                        LOG_WRITE_FROM_DIRTY_BUFFER);
 #endif	
 	buf_flush_init_for_writing(block->frame, block->newest_modification,
 						block->space, block->offset);
diff -ruN base/innobase/fil/fil0fil.c mysql40gpl/innobase/fil/fil0fil.c
--- base/innobase/fil/fil0fil.c	2005-09-02 15:37:59.000000000 -0700
+++ mysql40gpl/innobase/fil/fil0fil.c	2007-04-21 09:56:40.000000000 -0700
@@ -154,6 +154,7 @@
 					n_open_pending < max_n_open */
 	UT_LIST_BASE_NODE_T(fil_space_t) space_list;
 					/* list of all file spaces */
+        ulint flush_types[FLUSH_FROM_NUMBER];/* calls to fil_flush by caller */
 };
 
 /* The file system. This variable is NULL before the module is initialized. */
@@ -442,6 +443,11 @@
 
 	UT_LIST_INIT(system->space_list);
 
+        {
+          int x;
+          for (x = 0; x < FLUSH_FROM_NUMBER; ++x)
+            system->flush_types[x] = 0;
+        }
 	return(system);
 }
 
@@ -459,6 +465,23 @@
 }
 
 /********************************************************************
+Prints internal counters */
+
+void
+fil_print(FILE *file)
+{
+        fprintf(file,
+                "fsync callers: %lu buffer pool, %lu other, %lu checkpoint, "
+                "%lu log aio, %lu log sync, %lu archive\n",
+                fil_system->flush_types[FLUSH_FROM_DIRTY_BUFFER],
+                fil_system->flush_types[FLUSH_FROM_OTHER],
+                fil_system->flush_types[FLUSH_FROM_CHECKPOINT],
+                fil_system->flush_types[FLUSH_FROM_LOG_IO_COMPLETE],
+                fil_system->flush_types[FLUSH_FROM_LOG_WRITE_UP_TO],
+                fil_system->flush_types[FLUSH_FROM_ARCHIVE]);
+}
+
+/********************************************************************
 Writes the flushed lsn to the header of each file space. */
 
 void
@@ -1047,7 +1070,7 @@
 
 	*actual_increase = i * ((1024 * 1024) / UNIV_PAGE_SIZE);
 
-	fil_flush(0);
+	fil_flush(0, FLUSH_FROM_OTHER);
 
 	srv_data_file_sizes[srv_n_data_files - 1] += *actual_increase;
 
@@ -1372,8 +1395,9 @@
 void
 fil_flush(
 /*======*/
-	ulint	space_id)	/* in: file space id (this can be a group of
+	ulint	space_id,	/* in: file space id (this can be a group of
 				log files or a tablespace of the database) */
+        flush_from_type flush_type)/* in: identifies the caller */
 {
 	fil_system_t*	system	= fil_system;
 	fil_space_t*	space;
@@ -1381,7 +1405,6 @@
 	os_file_t	file;
 
 	mutex_enter(&(system->mutex));
-	
 	HASH_SEARCH(hash, system->spaces, space_id, space,
 						space->id == space_id);
 	ut_a(space);
@@ -1411,6 +1434,7 @@
 			/* fprintf(stderr, "Flushing to file %s\n",
 				node->name); */
 
+                        system->flush_types[flush_type]++;	
 			os_file_flush(file);
 			
 			mutex_enter(&(system->mutex));
@@ -1435,7 +1459,8 @@
 void
 fil_flush_file_spaces(
 /*==================*/
-	ulint	purpose)	/* in: FIL_TABLESPACE, FIL_LOG */
+	ulint	purpose,	/* in: FIL_TABLESPACE, FIL_LOG */
+        flush_from_type flush_type)/* in: identifies the caller */
 {
 	fil_system_t*	system	= fil_system;
 	fil_space_t*	space;
@@ -1448,7 +1473,7 @@
 		if (space->purpose == purpose) {
 			mutex_exit(&(system->mutex));
 
-			fil_flush(space->id);
+			fil_flush(space->id, flush_type);
 
 			mutex_enter(&(system->mutex));
 		}
diff -ruN base/innobase/include/fil0fil.h mysql40gpl/innobase/include/fil0fil.h
--- base/innobase/include/fil0fil.h	2005-09-02 15:37:55.000000000 -0700
+++ mysql40gpl/innobase/include/fil0fil.h	2007-04-21 09:56:42.000000000 -0700
@@ -119,6 +119,13 @@
 /*=====*/
 	ulint	max_n_open);	/* in: max number of open files */
 /********************************************************************
+Prints internal counters. */
+
+void
+fil_print(
+/*=====*/
+        FILE* file); /* in: output stream */
+/********************************************************************
 Initializes the ibuf indexes at a database start. This can be called
 after the file space headers have been created and the dictionary system
 has been initialized. */
@@ -327,13 +334,25 @@
 	ulint	segment);	/* in: the number of the segment in the aio
 				array to wait for */ 
 /**************************************************************************
+Identifies the caller of fil_flush. */
+typedef enum {
+  FLUSH_FROM_DIRTY_BUFFER,
+  FLUSH_FROM_OTHER,
+  FLUSH_FROM_CHECKPOINT,
+  FLUSH_FROM_LOG_IO_COMPLETE,
+  FLUSH_FROM_LOG_WRITE_UP_TO,
+  FLUSH_FROM_ARCHIVE,
+  FLUSH_FROM_NUMBER
+} flush_from_type;
+/**************************************************************************
 Flushes to disk possible writes cached by the OS. */
 
 void
 fil_flush(
 /*======*/
-	ulint	space_id);	/* in: file space id (this can be a group of
+	ulint	space_id, 	/* in: file space id (this can be a group of
 				log files or a tablespace of the database) */
+        flush_from_type flush_type);/* in: identifies the caller */
 /**************************************************************************
 Flushes to disk writes in file spaces of the given type possibly cached by
 the OS. */
@@ -341,7 +360,8 @@
 void
 fil_flush_file_spaces(
 /*==================*/
-	ulint	purpose);	/* in: FIL_TABLESPACE, FIL_LOG */
+	ulint	purpose, 	/* in: FIL_TABLESPACE, FIL_LOG */
+        flush_from_type flush_type);/* in: identifies the caller */
 /**********************************************************************
 Checks the consistency of the file system. */
 
diff -ruN base/innobase/include/log0log.h mysql40gpl/innobase/include/log0log.h
--- base/innobase/include/log0log.h	2005-09-02 15:37:55.000000000 -0700
+++ mysql40gpl/innobase/include/log0log.h	2007-04-21 09:56:42.000000000 -0700
@@ -142,6 +142,22 @@
 log_io_complete(
 /*============*/
 	log_group_t*	group);	/* in: log group */
+
+/**********************************************************
+Describes the caller of log_write_up_to. */
+
+typedef enum {
+        LOG_WRITE_FROM_DIRTY_BUFFER,
+        LOG_WRITE_FROM_BACKGROUND_SYNC,
+        LOG_WRITE_FROM_BACKGROUND_ASYNC,
+        LOG_WRITE_FROM_INTERNAL,
+        LOG_WRITE_FROM_CHECKPOINT_SYNC,
+        LOG_WRITE_FROM_CHECKPOINT_ASYNC,
+        LOG_WRITE_FROM_LOG_ARCHIVE,
+        LOG_WRITE_FROM_COMMIT_SYNC,
+        LOG_WRITE_FROM_COMMIT_ASYNC,
+        LOG_WRITE_FROM_NUMBER
+} log_sync_type;
 /**********************************************************
 This function is called, e.g., when a transaction wants to commit. It checks
 that the log has been written to the log file up to the last log entry written
@@ -155,9 +171,10 @@
 			be written, ut_dulint_max if not specified */
 	ulint	wait,	/* in: LOG_NO_WAIT, LOG_WAIT_ONE_GROUP,
 			or LOG_WAIT_ALL_GROUPS */
-	ibool	flush_to_disk);
+	ibool	flush_to_disk,
 			/* in: TRUE if we want the written log also to be
 			flushed to disk */
+        log_sync_type caller);/* in: identifies the caller */
 /********************************************************************
 Does a syncronous flush of the log buffer to disk. */
 
@@ -165,6 +182,13 @@
 log_buffer_flush_to_disk(void);
 /*==========================*/
 /********************************************************************
+Flushes the log buffer. Forces it to disk depending on the value of
+the configuration parameter innodb_flush_log_at_trx_commit. */
+
+void
+log_buffer_flush_maybe_sync(void);
+/*==========================*/
+/********************************************************************
 Advances the smallest lsn for which there are unflushed dirty blocks in the
 buffer pool and also may make a new checkpoint. NOTE: this function may only
 be called if the calling thread owns no synchronization objects! */
@@ -734,6 +758,14 @@
 					AND flushed to disk */
 	ulint		n_pending_writes;/* number of currently pending flushes
 					or writes */
+        ulint           log_sync_callers[LOG_WRITE_FROM_NUMBER];
+                                        /* counts calls to log_write_up_to */
+        ulint           log_sync_syncers[LOG_WRITE_FROM_NUMBER];
+                                        /* counts calls to log_write_up_to when
+                                        a sync of the log file is done */
+        ulint           n_syncs;        /* number of times fsync was done for
+                                        the log file */
+        ulint           n_checkpoints;  /* number of calls to log_checkpoint */
 	/* NOTE on the 'flush' in names of the fields below: starting from
 	4.0.14, we separate the write of the log file and the actual fsync()
 	or other method to flush it to disk. The names below shhould really
diff -ruN base/innobase/include/os0file.h mysql40gpl/innobase/include/os0file.h
--- base/innobase/include/os0file.h	2005-09-02 15:38:01.000000000 -0700
+++ mysql40gpl/innobase/include/os0file.h	2007-04-21 09:56:42.000000000 -0700
@@ -292,22 +292,17 @@
 				offset */
 	ulint		n);	/* in: number of bytes to write */	
 /****************************************************************************
-Initializes the asynchronous io system. Creates separate aio array for
-non-ibuf read and write, a third aio array for the ibuf i/o, with just one
-segment, two aio arrays for log reads and writes with one segment, and a
-synchronous aio array of the specified size. The combined number of segments
-in the three first aio arrays is the parameter n_segments given to the
-function. The caller must create an i/o handler thread for each segment in
-the four first arrays, but not for the sync aio array. */
+Initializes the asynchronous io system. */
 
-void
+ulint
 os_aio_init(
 /*========*/
-	ulint	n,		/* in: maximum number of pending aio operations
-				allowed; n must be divisible by n_segments */
-	ulint	n_segments,	/* in: combined number of segments in the four
-				first aio arrays; must be >= 4 */
-	ulint	n_slots_sync);	/* in: number of slots in the sync aio array */
+                                /* out: number of AIO handler threads */
+        ulint	ios_per_array,	/* in: maximum number of pending aio operations
+                                   allowed per IO array */
+        ulint	n_read_threads,	/* in: number of read threads */
+        ulint	n_write_threads, /* in: number of write threads */
+        ulint	n_slots_sync);	/* in: number of slots in the sync aio array */
 /***********************************************************************
 Requests an asynchronous i/o operation. */
 
diff -ruN base/innobase/include/srv0srv.h mysql40gpl/innobase/include/srv0srv.h
--- base/innobase/include/srv0srv.h	2005-09-02 15:37:59.000000000 -0700
+++ mysql40gpl/innobase/include/srv0srv.h	2007-04-21 09:56:43.000000000 -0700
@@ -73,6 +73,8 @@
 extern ulint	srv_lock_table_size;
 
 extern ulint	srv_n_file_io_threads;
+extern ulint    srv_n_read_io_threads;
+extern ulint    srv_n_write_io_threads;
 
 extern ibool	srv_archive_recovery;
 extern dulint	srv_archive_recovery_limit_lsn;
@@ -426,4 +428,3 @@
 extern ulint	srv_n_threads_active[];
 
 #endif
-
diff -ruN base/innobase/include/trx0sys.h mysql40gpl/innobase/include/trx0sys.h
--- base/innobase/include/trx0sys.h	2005-09-02 15:38:00.000000000 -0700
+++ mysql40gpl/innobase/include/trx0sys.h	2007-04-21 09:56:44.000000000 -0700
@@ -36,11 +36,13 @@
 trx_sys_mark_downgraded_from_4_1_1(void);
 /*====================================*/
 
-/* In a MySQL replication slave, in crash recovery we store the master log
-file name and position here. We have successfully got the updates to InnoDB
+/* In a MySQL replication slave, in crash recovery we have to store the relay
+log file name and position here. We have successfully got the updates to InnoDB
 up to this position. If .._pos is -1, it means no crash recovery was needed,
-or there was no master log position info inside InnoDB. */
+or there was no relay-log position info inside InnoDB. */
 
+extern char		trx_sys_mysql_relay_log_name[];
+extern ib_longlong	trx_sys_mysql_relay_log_pos;
 extern char 		trx_sys_mysql_master_log_name[];
 extern ib_longlong	trx_sys_mysql_master_log_pos;
 
@@ -261,6 +263,21 @@
 	ulint		field,	/* in: offset of the MySQL log info field in
 				the trx sys header */
 	mtr_t*		mtr);	/* in: mtr */
+
+/*********************************************************************
+In a MySQL replication slave updates the latest relay log and master
+log position up to which replication has proceeded. */
+void
+trx_sys_update_mysql_relay_offset(
+/*===============================*/
+	const char*	relaylog_name,     /* in: relay-log file name */
+	ib_longlong	relaylog_pos,      /* in: position in relay-log file */
+	const char*	masterlog_name,    /* in: relay-log file name */
+	ib_longlong	masterlog_pos,     /* in: position in relay-log file */
+	ulint		field,	/* in: offset of the MySQL log info field in
+                                   the trx sys header */
+	mtr_t*		mtr);   /* in: mtr */
+
 /*********************************************************************
 Prints to stderr the MySQL binlog offset info in the trx system header if
 the magic number shows it valid. */
@@ -279,12 +296,18 @@
 	byte*	page);	/* in: buffer containing the trx system header page,
 			i.e., page number TRX_SYS_PAGE_NO in the tablespace */
 #endif /* UNIV_HOTBACKUP */
+
 /*********************************************************************
-Prints to stderr the MySQL master log offset info in the trx system header if
-the magic number shows it valid. */
+Prints to stderr the MySQL relay-log/master-log offset info in the trx system
+header if the magic number shows it valid.
+
+Only when print_msg is TRUE, we print the offset to stderr.  Otherwise, we
+only retrieve the offset from the transaction log.
+*/
 
 void
-trx_sys_print_mysql_master_log_pos(void);
+trx_sys_print_mysql_relay_log_pos(ibool print_msg);
+
 /*====================================*/
 
 /* The automatically created system rollback segment has this id */
@@ -325,7 +348,54 @@
 
 /* The offset of the MySQL replication info in the trx system header;
 this contains the same fields as TRX_SYS_MYSQL_LOG_INFO below */
-#define TRX_SYS_MYSQL_MASTER_LOG_INFO	(UNIV_PAGE_SIZE - 2000)
+#define TRX_SYS_MYSQL_RELAY_LOG_INFO	(UNIV_PAGE_SIZE - 2000)
+
+#define TRX_SYS_MYSQL_RELAY_INFO	(UNIV_PAGE_SIZE - 2000)
+
+/* We change the layout of writing relay-log information a little:
+ *  offset 0:   magic number
+ *  offset 4:   0xfffffffe magic number indicating the format that
+ *              contains both relay-log and master-log information
+ *              (we need the four bytes to indicate the difference to the
+ *               old innodb relay-log only format because we want to
+ *               keep the first magic number unchanged).
+ *  offset 8:   relay-log position high 4 byte
+ *  offset 12:  relay-log position low  4 byte
+ *  offset 16:  master-log position high 4 byte
+ *  offset 20:  master-log position low  4 byte
+ *  offset 24:  relay-log filename
+ *  offset 274: master-log filename
+ * Each filename's length is limited to 250 bytes, which should be more than
+ * enough for most applications.  We will fail during MySQL replication if
+ * the filename is too long so that users can adjust.
+ */
+#define	TRX_SYS_MYSQL_RELAYLOG_MAGIC_N_FLD  0
+#define TRX_SYS_MYSQL_RELAYMASTER_MAGIC_NUM  0xfffffffe
+#define TRX_SYS_MYSQL_RELAYMASTER_MAGIC_OFF  4  /* the magic number indicating
+                                                   both relay-log and master-log
+                                                   information */
+#define TRX_SYS_MYSQL_RELAYLOG_POS_HIGH  8    /* high 4 bytes of the offset
+                                                within relay-log file */
+#define TRX_SYS_MYSQL_RELAYLOG_POS_LOW   12   /* low 4 bytes of the offset
+                                                within relay-log file */
+#define TRX_SYS_MYSQL_MASTERLOG_POS_HIGH 16   /* high 4 bytes of the offset
+                                                 within master-log file */
+#define TRX_SYS_MYSQL_MASTERLOG_POS_LOW  20   /* low 4 bytes of the offset
+                                                  within relay-log file */
+#define TRX_SYS_MYSQL_RELAYLOG_NAME_OFF  24   /* relay-log filename */
+#define TRX_SYS_MYSQL_MASTERLOG_NAME_OFF 274  /* master-log filename */
+
+#define TRX_SYS_MYSQL_RELAY_NAME_LEN	 250
+/* All relay-log related information should end at offset 520 */
+
+
+#define TRX_SYS_MYSQL_LOG_NAME_LEN	512
+
+#define TRX_SYS_MYSQL_LOG_OFFSET_HIGH	4	/* high 4 bytes of the offset
+						within that file */
+#define TRX_SYS_MYSQL_LOG_OFFSET_LOW	8	/* low 4 bytes of the offset
+						within that file */
+#define TRX_SYS_MYSQL_LOG_NAME		12	/* MySQL log file name */
 
 /* The offset of the MySQL binlog offset info in the trx system header */
 #define TRX_SYS_MYSQL_LOG_INFO		(UNIV_PAGE_SIZE - 1000)
diff -ruN base/innobase/include/trx0trx.h mysql40gpl/innobase/include/trx0trx.h
--- base/innobase/include/trx0trx.h	2005-09-02 15:38:01.000000000 -0700
+++ mysql40gpl/innobase/include/trx0trx.h	2007-04-21 09:56:44.000000000 -0700
@@ -311,7 +311,7 @@
 when the session is freed; in addition there may be session-less transactions
 rolling back after a database recovery */
 
-struct trx_struct{
+struct trx_struct {
 	ulint		magic_n;
 	/* All the next fields are protected by the kernel mutex, except the
 	undo logs which are protected by undo_mutex */
@@ -532,6 +532,36 @@
 	trx_undo_arr_t*	undo_no_arr;	/* array of undo numbers of undo log
 					records which are currently processed
 					by a rollback operation */
+
+	const char*	mysql_relay_log_file_name;
+					/* if the database server is a MySQL
+					replication slave, we have here the
+					relay-log name up to which
+					replication has processed; otherwise
+					this is a pointer to a null
+					character */
+	ib_longlong	mysql_relay_log_pos;
+					/* if the database server is a MySQL
+					replication slave, this is the
+					position in the relay-log up to which
+					replication has processed */
+
+        ibool		always_enter_innodb;
+                                        /* thread always enter innodb without
+                                        considering ticket limit; this is only
+                                        used for replication sql thread. */
+
+        ibool		clear_replication_status;
+                                        /* we need to clear the replication
+                                           status stored in transaction log */
+
+        char*           repl_wait_binlog_name;
+                                        /* semi-synchronous binlog waiting
+                                           filename */
+
+        ib_longlong     repl_wait_binlog_pos;
+                                        /* semi-synchronous binlog waiting
+                                           log position. */
 };
 
 #define TRX_MAX_N_THREADS	32	/* maximum number of concurrent
diff -ruN base/innobase/log/log0log.c mysql40gpl/innobase/log/log0log.c
--- base/innobase/log/log0log.c	2005-09-02 15:37:59.000000000 -0700
+++ mysql40gpl/innobase/log/log0log.c	2007-04-21 09:56:44.000000000 -0700
@@ -747,6 +747,15 @@
 	log_sys->written_to_all_lsn = log_sys->lsn;
 	
 	log_sys->n_pending_writes = 0;
+        {
+                int x;
+                for (x = 0; x < LOG_WRITE_FROM_NUMBER; ++x) {
+                        log_sys->log_sync_callers[x] = 0;
+                        log_sys->log_sync_syncers[x] = 0;
+                }
+        }
+	log_sys->n_syncs = 0;
+        log_sys->n_checkpoints = 0;
 
 	log_sys->no_flush_event = os_event_create(NULL);
 
@@ -1015,7 +1024,7 @@
 		if (srv_unix_file_flush_method != SRV_UNIX_O_DSYNC
 		   && srv_unix_file_flush_method != SRV_UNIX_NOSYNC) {
 		
-		        fil_flush(group->space_id);
+		        fil_flush(group->space_id, FLUSH_FROM_LOG_IO_COMPLETE);
 		}
 
 		if (log_debug_writes) {
@@ -1036,7 +1045,7 @@
 	    && srv_unix_file_flush_method != SRV_UNIX_NOSYNC
 	    && srv_flush_log_at_trx_commit != 2) {
 
-	        fil_flush(group->space_id);
+	        fil_flush(group->space_id, FLUSH_FROM_LOG_IO_COMPLETE);
 	}
 
 	mutex_enter(&(log_sys->mutex));
@@ -1234,9 +1243,10 @@
 			be written, ut_dulint_max if not specified */
 	ulint	wait,	/* in: LOG_NO_WAIT, LOG_WAIT_ONE_GROUP,
 			or LOG_WAIT_ALL_GROUPS */
-	ibool	flush_to_disk)
+	ibool	flush_to_disk,
 			/* in: TRUE if we want the written log also to be
 			flushed to disk */
+        log_sync_type caller) /* in: identifies caller */
 {
 	log_group_t*	group;
 	ulint		start_offset;
@@ -1246,6 +1256,7 @@
 	ulint		loop_count;
 	ulint		unlock;
 
+        log_sys->log_sync_callers[caller]++;
 	if (recv_no_ibuf_operations) {
 		/* Recovery is running and no operations on the log files are
 		allowed yet (the variable name .._no_ibuf_.. is misleading) */
@@ -1395,13 +1406,17 @@
 		so we have also flushed to disk what we have written */
 
 		log_sys->flushed_to_disk_lsn = log_sys->write_lsn;
+                log_sys->n_syncs++;
+                log_sys->log_sync_syncers[caller]++;
 
 	} else if (flush_to_disk) {
 
 		group = UT_LIST_GET_FIRST(log_sys->log_groups);
 
-	        fil_flush(group->space_id);
+	        fil_flush(group->space_id, FLUSH_FROM_LOG_WRITE_UP_TO);
 		log_sys->flushed_to_disk_lsn = log_sys->write_lsn;
+                log_sys->n_syncs++;
+                log_sys->log_sync_syncers[caller]++;
 	}
 
 	mutex_enter(&(log_sys->mutex));
@@ -1450,10 +1465,34 @@
 
 	mutex_exit(&(log_sys->mutex));
 
-	log_write_up_to(lsn, LOG_WAIT_ALL_GROUPS, TRUE);
+	log_write_up_to(lsn, LOG_WAIT_ALL_GROUPS, TRUE,
+                        LOG_WRITE_FROM_BACKGROUND_SYNC);
 }
 
 /********************************************************************
+Flush the log buffer. Force it to disk depending on the value of
+innodb_flush_log_at_trx_commit. */
+
+void
+log_buffer_flush_maybe_sync(void)
+/*==========================*/
+{
+	dulint	lsn;
+
+	mutex_enter(&(log_sys->mutex));
+
+	lsn = log_sys->lsn;
+
+	mutex_exit(&(log_sys->mutex));
+
+        // Force log buffer to disk when innodb_flush_log_at_trx_commit = 1.
+	log_write_up_to(lsn, LOG_WAIT_ALL_GROUPS,
+                        srv_flush_log_at_trx_commit == 1 ? TRUE : FALSE,
+                        srv_flush_log_at_trx_commit == 1 ? 
+                                LOG_WRITE_FROM_BACKGROUND_SYNC :
+                                LOG_WRITE_FROM_BACKGROUND_ASYNC);
+}
+/********************************************************************
 Tries to establish a big enough margin of free space in the log buffer, such
 that a new log entry can be catenated without an immediate need for a flush. */
 static
@@ -1481,7 +1520,8 @@
 	mutex_exit(&(log->mutex));
 
 	if (do_flush) {
-		log_write_up_to(lsn, LOG_NO_WAIT, FALSE);
+		log_write_up_to(lsn, LOG_NO_WAIT, FALSE,
+                                LOG_WRITE_FROM_INTERNAL);
 	}
 }
 
@@ -1840,11 +1880,11 @@
 	}
 
 	if (srv_unix_file_flush_method != SRV_UNIX_NOSYNC) {
-	        fil_flush_file_spaces(FIL_TABLESPACE);
+	        fil_flush_file_spaces(FIL_TABLESPACE, FLUSH_FROM_CHECKPOINT);
 	}
 
 	mutex_enter(&(log_sys->mutex));
-
+        log_sys->n_checkpoints++;
 	oldest_lsn = log_buf_pool_get_oldest_modification();
 
 	mutex_exit(&(log_sys->mutex));
@@ -1857,7 +1897,8 @@
 	write-ahead-logging algorithm ensures that the log has been flushed
 	up to oldest_lsn. */
 
-	log_write_up_to(oldest_lsn, LOG_WAIT_ALL_GROUPS, TRUE);
+	log_write_up_to(oldest_lsn, LOG_WAIT_ALL_GROUPS, TRUE,
+                        LOG_WRITE_FROM_CHECKPOINT_SYNC);
 
 	mutex_enter(&(log_sys->mutex));
 
@@ -2482,7 +2523,7 @@
 
 	mutex_exit(&(log_sys->mutex));
 
-	fil_flush(group->archive_space_id);
+	fil_flush(group->archive_space_id, FLUSH_FROM_ARCHIVE);
 	
 	mutex_enter(&(log_sys->mutex));
 	
@@ -2563,7 +2604,8 @@
 
 		mutex_exit(&(log_sys->mutex));
 	
-		log_write_up_to(limit_lsn, LOG_WAIT_ALL_GROUPS, TRUE);
+		log_write_up_to(limit_lsn, LOG_WAIT_ALL_GROUPS, TRUE,
+                                LOG_WRITE_FROM_LOG_ARCHIVE);
 
 		calc_new_limit = FALSE;
 
@@ -3046,8 +3088,8 @@
 	}
 	mutex_exit(&kernel_mutex);
 
-	fil_flush_file_spaces(FIL_TABLESPACE);
-	fil_flush_file_spaces(FIL_LOG);
+	fil_flush_file_spaces(FIL_TABLESPACE, FLUSH_FROM_OTHER);
+	fil_flush_file_spaces(FIL_LOG, FLUSH_FROM_OTHER);
 
 	/* The next fil_write_... will pass the buffer pool: therefore
 	it is essential that the buffer pool has been completely flushed
@@ -3081,7 +3123,7 @@
 
 	fil_write_flushed_lsn_to_data_files(lsn, arch_log_no);	
 
-	fil_flush_file_spaces(FIL_TABLESPACE);
+	fil_flush_file_spaces(FIL_TABLESPACE, FLUSH_FROM_OTHER);
 
 	/* Make some checks that the server really is quiet */
 	ut_a(srv_n_threads_active[SRV_MASTER] == 0);
@@ -3194,15 +3236,47 @@
 					log_sys->last_printout_time);
 	fprintf(file,
 	"%lu pending log writes, %lu pending chkp writes\n"
-	"%lu log i/o's done, %.2f log i/o's/second\n",
+	"%lu log i/o's done, %.2f log i/o's/second, %lu syncs, %lu checkpoints\n",
 	log_sys->n_pending_writes,
 	log_sys->n_pending_checkpoint_writes,
 	log_sys->n_log_ios,
-	(log_sys->n_log_ios - log_sys->n_log_ios_old) / time_elapsed);
+	(log_sys->n_log_ios - log_sys->n_log_ios_old) / time_elapsed,
+        log_sys->n_syncs,
+        log_sys->n_checkpoints);
 
 	log_sys->n_log_ios_old = log_sys->n_log_ios;
 	log_sys->last_printout_time = current_time;
 
+        fprintf(file,
+                "log sync callers: %lu buffer pool, "
+                "background %lu sync and %lu async, "
+                "%lu internal, checkpoint %lu sync and %lu async, %lu archive, "
+                "commit %lu sync and %lu async\n",
+                log_sys->log_sync_callers[LOG_WRITE_FROM_DIRTY_BUFFER],
+                log_sys->log_sync_callers[LOG_WRITE_FROM_BACKGROUND_SYNC],
+                log_sys->log_sync_callers[LOG_WRITE_FROM_BACKGROUND_ASYNC],
+                log_sys->log_sync_callers[LOG_WRITE_FROM_INTERNAL],
+                log_sys->log_sync_callers[LOG_WRITE_FROM_CHECKPOINT_SYNC],
+                log_sys->log_sync_callers[LOG_WRITE_FROM_CHECKPOINT_ASYNC],
+                log_sys->log_sync_callers[LOG_WRITE_FROM_LOG_ARCHIVE],
+                log_sys->log_sync_callers[LOG_WRITE_FROM_COMMIT_SYNC],
+                log_sys->log_sync_callers[LOG_WRITE_FROM_COMMIT_ASYNC]);
+
+        fprintf(file,
+                "log sync syncers: %lu buffer pool, "
+                "background %lu sync and %lu async, "
+                "%lu internal, checkpoint %lu sync and %lu async, %lu archive, "
+                "commit %lu sync and %lu async\n",
+                log_sys->log_sync_syncers[LOG_WRITE_FROM_DIRTY_BUFFER],
+                log_sys->log_sync_syncers[LOG_WRITE_FROM_BACKGROUND_SYNC],
+                log_sys->log_sync_syncers[LOG_WRITE_FROM_BACKGROUND_ASYNC],
+                log_sys->log_sync_syncers[LOG_WRITE_FROM_INTERNAL],
+                log_sys->log_sync_syncers[LOG_WRITE_FROM_CHECKPOINT_SYNC],
+                log_sys->log_sync_syncers[LOG_WRITE_FROM_CHECKPOINT_ASYNC],
+                log_sys->log_sync_syncers[LOG_WRITE_FROM_LOG_ARCHIVE],
+                log_sys->log_sync_syncers[LOG_WRITE_FROM_COMMIT_SYNC],
+                log_sys->log_sync_syncers[LOG_WRITE_FROM_COMMIT_ASYNC]);
+
 	mutex_exit(&(log_sys->mutex));
 }
 
diff -ruN base/innobase/log/log0recv.c mysql40gpl/innobase/log/log0recv.c
--- base/innobase/log/log0recv.c	2005-09-02 15:37:59.000000000 -0700
+++ mysql40gpl/innobase/log/log0recv.c	2007-04-21 09:56:44.000000000 -0700
@@ -2703,6 +2703,8 @@
 	return(DB_SUCCESS);
 }
 
+extern my_bool rpl_transaction_enabled;
+
 /************************************************************
 Completes recovery from a checkpoint. */
 
@@ -2723,13 +2725,22 @@
 		recv_apply_hashed_log_recs(TRUE);
 	}
 
+        if (rpl_transaction_enabled || recv_needed_recovery) {
+
+          trx_sys_print_mysql_relay_log_pos(TRUE);
+          if (recv_needed_recovery) {
+            fprintf(stderr,
+                    " InnoDB: recv_recovery_from_checkpoint_finish()"
+                    " - recovery is needed.\n");
+          }
+        }
+
 	if (log_debug_writes) {
 		fprintf(stderr,
 		"InnoDB: Log records applied to the database\n");
 	}
 
 	if (recv_needed_recovery) {
-		trx_sys_print_mysql_master_log_pos();
 		trx_sys_print_mysql_binlog_offset();
 	}
 
diff -ruN base/innobase/os/os0file.c mysql40gpl/innobase/os/os0file.c
--- base/innobase/os/os0file.c	2005-09-02 15:38:00.000000000 -0700
+++ mysql40gpl/innobase/os/os0file.c	2007-04-21 09:56:45.000000000 -0700
@@ -14,6 +14,8 @@
 #include "fil0fil.h"
 #include "buf0buf.h"
 
+extern long innobase_max_merged_io;
+
 #undef HAVE_FDATASYNC
 
 #ifdef POSIX_ASYNC_IO
@@ -52,6 +54,28 @@
 
 ibool	os_aio_print_debug	= FALSE;
 
+/* State for the state of an IO request in simulated AIO.
+   Protocol for simulated aio:
+     client requests IO: find slot with reserved = FALSE. Add entry with
+                         status = OS_AIO_NOT_ISSUED.
+     IO thread wakes: find adjacent slots with reserved = TRUE and status =
+                      OS_AIO_NOT_ISSUED. Change status for slots to
+                      OS_AIO_ISSUED.
+     IO operation completes: set status for slots to OS_AIO_DONE. set status
+                             for the first slot to OS_AIO_CLAIMED and return
+                             result for that slot.
+   When there are multiple read and write threads, they all compete to execute
+   the requests in the array (os_aio_array_t). This avoids the need to load
+   balance requests at the time the request is made at the cost of waking all
+   threads when a request is available.
+*/
+typedef enum {
+        OS_AIO_NOT_ISSUED, /* Available to be processed by an IO thread. */
+        OS_AIO_ISSUED,     /* Being processed by an IO thread. */
+        OS_AIO_DONE,       /* Request processed. */
+        OS_AIO_CLAIMED     /* Result being returned to client. */
+} os_aio_status;
+
 /* The aio array slot structure */
 typedef struct os_aio_slot_struct	os_aio_slot_t;
 
@@ -60,6 +84,9 @@
 	ulint		pos;		/* index of the slot in the aio
 					array */
 	ibool		reserved;	/* TRUE if this slot is reserved */
+        os_aio_status   status;         /* Status for current request. Valid
+                                        when reserved = TRUE. Used only in
+                                        simulated aio. */
 	time_t		reservation_time;/* time when reserved */
 	ulint		len;		/* length of the block to read or
 					write */
@@ -70,11 +97,6 @@
 	ulint		offset_high;	/* 32 high bits of file offset */
 	os_file_t	file;		/* file where to read or write */
 	char*		name;		/* file name or path */
-	ibool		io_already_done;/* used only in simulated aio:
-					TRUE if the physical i/o already
-					made and only the slot message
-					needs to be passed to the caller
-					of os_aio_simulated_handle */
 	void*		message1;	/* message which is given by the */
 	void*		message2;	/* the requester of an aio operation
 					and which can be used to identify
@@ -104,9 +126,6 @@
 				  in this array */
 	ulint		n_slots;  /* Total number of slots in the aio array.
 				  This must be divisible by n_threads. */
-	ulint		n_segments;/* Number of segments in the aio array of
-				  pending aio requests. A thread can wait
-				  separately for any one of the segments. */
 	ulint		n_reserved;/* Number of reserved slots in the
 				  aio array outside the ibuf segment */
 	os_aio_slot_t* 	slots;	  /* Pointer to the slots in the array */
@@ -123,6 +142,17 @@
 /* Array of events used in simulated aio */
 os_event_t*	os_aio_segment_wait_events	= NULL;
 
+/* Number of threads for reading and writing. */
+ulint os_aio_read_threads = 0;
+ulint os_aio_write_threads = 0;
+
+/* Number for the first global segment for reading. */
+const ulint os_aio_first_read_segment = 2;
+
+/* Number for the first global segment for writing. Set to
+2 + os_aio_read_write_threads. */
+ulint os_aio_first_write_segment = 0;
+
 /* The aio arrays for non-ibuf i/o and ibuf i/o, as well as sync aio. These
 are NULL when the module has not yet been initialized. */
 os_aio_array_t*	os_aio_read_array	= NULL;
@@ -131,10 +161,35 @@
 os_aio_array_t*	os_aio_log_array	= NULL;
 os_aio_array_t*	os_aio_sync_array	= NULL;
 
+/* Per thread buffer used for merged IO requests. Used by
+os_aio_simulated_handle so that a buffer doesn't have to be allocated
+for each request. */
+static char* os_aio_thread_buffer[SRV_MAX_N_IO_THREADS];
+static ulint os_aio_thread_buffer_size[SRV_MAX_N_IO_THREADS];
+
+/* Count pages read and written per thread */
+static ulint os_aio_thread_io_reads[SRV_MAX_N_IO_THREADS];
+static ulint os_aio_thread_io_writes[SRV_MAX_N_IO_THREADS];
+
+/* Number of IO operations done. One request can be for N pages. */
+static ulint os_aio_thread_io_requests[SRV_MAX_N_IO_THREADS];
+
+/* usecs spent blocked on an IO request */
+static double os_aio_thread_io_wait[SRV_MAX_N_IO_THREADS];
+/* max usecs spent blocked on an IO request */
+static double os_aio_thread_max_io_wait[SRV_MAX_N_IO_THREADS];
+
+/* Number of IO global segments. An IO handler thread is created for each
+global segment, except for the segment associated with os_aio_sync_array.
+Several segments can be associated with os_aio_{read,write}_array. One
+segment is created for each of the other arrays. This is also the number
+of valid entries in srv_io_thread_reads, srv_io_thread_writes,
+srv_io_thread_op_info, srv_io_thread_function and os_aio_segment_wait_events. */
 ulint	os_aio_n_segments	= ULINT_UNDEFINED;
 
-/* If the following is TRUE, read i/o handler threads try to
-wait until a batch of new read requests have been posted */
+/* Set to TRUE to temporarily block reads from being scheduled while a batch
+of read requests is added to allow them to be merged by the IO handler thread
+if they are adjacent. */
 ibool	os_aio_recommend_sleep_for_read_threads	= FALSE;
 
 ulint	os_n_file_reads		= 0;
@@ -154,6 +209,19 @@
 ulint	os_file_n_pending_preads  = 0;
 ulint	os_file_n_pending_pwrites = 0;
 
+static double timeusecs() {
+#ifdef __WIN__
+  return 0.0;
+#else
+  struct timeval tv;
+  if (gettimeofday(&tv, NULL))
+    return 0;
+  else {
+    return tv.tv_sec * 1000000.0 + tv.tv_usec;
+  }
+#endif
+}
+
 
 /***************************************************************************
 Gets the operating system version. Currently works only on Windows. */
@@ -828,7 +896,7 @@
 	if (type != OS_LOG_FILE
 	    && srv_unix_file_flush_method == SRV_UNIX_O_DIRECT) {
 
-/*		fprintf(stderr, "Using O_DIRECT for file %s\n", name); */
+		fprintf(stderr, "Using O_DIRECT for file %s\n", name);
 
 	        create_flag = create_flag | O_DIRECT;
 	}
@@ -1115,13 +1183,21 @@
 #else
 	int	ret;
 
+
+        if (srv_unix_file_flush_method != SRV_UNIX_NOSYNC) {
 #ifdef HAVE_FDATASYNC
-	ret = fdatasync(file);
+	        ret = fdatasync(file);
 #else
 /*	fprintf(stderr, "Flushing to file %p\n", file); */
-	ret = fsync(file);
+	        ret = fsync(file);
 #endif
-	os_n_fsyncs++;
+	        os_n_fsyncs++;
+        } else {
+                /* It is dangerous to set this option. If the server crashes,
+                it is likely that the InnoDB datafile will be corrupt. It can be
+                used during restore. */
+                ret = 0;
+        }
 
 	if (ret == 0) {
 		return(TRUE);
@@ -1397,6 +1473,9 @@
 
 		return(TRUE);
 	}
+	fprintf(stderr,
+"InnoDB: error: os_file_pread wanted %lu and got %lu.\n",
+                (ulint) n, (ulint) ret);
 #endif	
 #ifdef __WIN__
 error_handling:
@@ -1605,9 +1684,8 @@
 os_aio_array_create(
 /*================*/
 				/* out, own: aio array */
-	ulint	n,		/* in: maximum number of pending aio operations
-				allowed; n must be divisible by n_segments */
-	ulint	n_segments) 	/* in: number of segments in the aio array */
+	ulint	n)		/* in: maximum number of pending aio operations
+                                 allowed */
 {
 	os_aio_array_t*	array;
 	ulint		i;
@@ -1616,7 +1694,6 @@
 	OVERLAPPED*	over;
 #endif	
 	ut_a(n > 0);
-	ut_a(n_segments > 0);
 
 	array = ut_malloc(sizeof(os_aio_array_t));
 
@@ -1627,7 +1704,6 @@
 	os_event_set(array->is_empty);
 	
 	array->n_slots  	= n;
-	array->n_segments	= n_segments;
 	array->n_reserved	= 0;
 	array->slots		= ut_malloc(n * sizeof(os_aio_slot_t));
 #ifdef __WIN__
@@ -1654,70 +1730,75 @@
 
 /****************************************************************************
 Initializes the asynchronous io system. Calls also os_io_init_simple.
-Creates a separate aio array for
-non-ibuf read and write, a third aio array for the ibuf i/o, with just one
-segment, two aio arrays for log reads and writes with one segment, and a
-synchronous aio array of the specified size. The combined number of segments
-in the three first aio arrays is the parameter n_segments given to the
-function. The caller must create an i/o handler thread for each segment in
-the four first arrays, but not for the sync aio array. */
+Creates an aio array for each of non-ibuf read, non-ibuf write, ibuf IO,
+log IO, and synchronous IO. The caller must create i/o handler thread for all
+but the synchronous aio array. Multiple threads can access the same array for
+the non-ibuf read (prefetch) and write (flush dirty buffer pages) arrays.
+Return the number of AIO handler threads. */
 
-void
+ulint
 os_aio_init(
 /*========*/
-	ulint	n,		/* in: maximum number of pending aio operations
-				allowed; n must be divisible by n_segments */
-	ulint	n_segments,	/* in: combined number of segments in the four
-				first aio arrays; must be >= 4 */
+	ulint	ios_per_array,	/* in: maximum number of pending aio operations
+                                allowed per array */
+	ulint	n_read_threads, /* in: number of read threads */
+	ulint	n_write_threads, /* in: number of write threads */
 	ulint	n_slots_sync)	/* in: number of slots in the sync aio array */
 {
-	ulint	n_read_segs;
-	ulint	n_write_segs;
-	ulint	n_per_seg;
 	ulint	i;
+        ulint   n_segments = 2 + n_read_threads + n_write_threads;
 #ifdef POSIX_ASYNC_IO
 	sigset_t   sigset;
 #endif
-	ut_ad(n % n_segments == 0);
-	ut_ad(n_segments >= 4);
+        ut_a(ios_per_array >= OS_AIO_N_PENDING_IOS_PER_THREAD);
+	ut_a(n_read_threads >= 1 && n_read_threads <= 64);
+	ut_a(n_write_threads >= 1 && n_write_threads <= 64);
 
 	os_io_init_simple();
 
 	for (i = 0; i < n_segments; i++) {
 	        srv_set_io_thread_op_info(i, "not started yet");
+                os_aio_thread_io_reads[i] = 0;
+                os_aio_thread_io_writes[i] = 0;
+                os_aio_thread_io_requests[i] = 0;
+                os_aio_thread_buffer[i] = 0;
+                os_aio_thread_buffer_size[i] = 0;
+                os_aio_thread_io_wait[i] = 0;
+                os_aio_thread_max_io_wait[i] = 0;
 	}
 
-	n_per_seg = n / n_segments;
-	n_write_segs = (n_segments - 2) / 2;
-	n_read_segs = n_segments - 2 - n_write_segs;
-	
-	/* fprintf(stderr, "Array n per seg %lu\n", n_per_seg); */
+        os_aio_read_threads = n_read_threads;
+        os_aio_write_threads = n_write_threads;
+        os_aio_first_write_segment = os_aio_first_read_segment +
+                                     os_aio_read_threads;
+
+	fprintf(stderr,
+                "InnoDB: ios_per_array %lu read threads %lu write threads %lu\n",
+                ios_per_array, os_aio_read_threads, os_aio_write_threads);
 
-	os_aio_ibuf_array = os_aio_array_create(n_per_seg, 1);
+	os_aio_ibuf_array = os_aio_array_create(ios_per_array);
 
 	srv_io_thread_function[0] = "insert buffer thread";
 
-	os_aio_log_array = os_aio_array_create(n_per_seg, 1);
+	os_aio_log_array = os_aio_array_create(ios_per_array);
 
 	srv_io_thread_function[1] = "log thread";
 
-	os_aio_read_array = os_aio_array_create(n_read_segs * n_per_seg,
-							n_read_segs);
-	for (i = 2; i < 2 + n_read_segs; i++) {
+	os_aio_read_array = os_aio_array_create(ios_per_array);
+	for (i = os_aio_first_read_segment; i < os_aio_first_write_segment; i++) {
 		ut_a(i < SRV_MAX_N_IO_THREADS);
 	        srv_io_thread_function[i] = "read thread";
 	}
 
-	os_aio_write_array = os_aio_array_create(n_write_segs * n_per_seg,
-							n_write_segs);
-	for (i = 2 + n_read_segs; i < n_segments; i++) {
+        os_aio_write_array = os_aio_array_create(ios_per_array);
+	for (i = os_aio_first_write_segment; i < n_segments; i++) {
 		ut_a(i < SRV_MAX_N_IO_THREADS);
 	        srv_io_thread_function[i] = "write thread";
 	}
 
-	os_aio_sync_array = os_aio_array_create(n_slots_sync, 1);
+	os_aio_sync_array = os_aio_array_create(n_slots_sync);
 
-	os_aio_n_segments = n_segments;
+	os_aio_n_segments = 2 + os_aio_read_threads + os_aio_write_threads;
 
 	os_aio_validate();
 
@@ -1745,6 +1826,7 @@
 
 	pthread_sigmask(SIG_BLOCK, &sigset, NULL); */
 #endif
+        return os_aio_n_segments;
 }
 
 #ifdef WIN_ASYNC_IO
@@ -1802,77 +1884,32 @@
 	os_event_wait(os_aio_write_array->is_empty);
 }
 
-/**************************************************************************
-Calculates segment number for a slot. */
-static
-ulint
-os_aio_get_segment_no_from_slot(
-/*============================*/
-				/* out: segment number (which is the number
-				used by, for example, i/o-handler threads) */
-	os_aio_array_t*	array,	/* in: aio wait array */
-	os_aio_slot_t*	slot)	/* in: slot in this array */
-{
-	ulint	segment;
-	ulint	seg_len;
-
-	if (array == os_aio_ibuf_array) {
-		segment = 0;
-
-	} else if (array == os_aio_log_array) {
-		segment = 1;
-		
-	} else if (array == os_aio_read_array) {
-		seg_len = os_aio_read_array->n_slots /
-				os_aio_read_array->n_segments;
-
-		segment = 2 + slot->pos / seg_len;
-	} else {
-		ut_a(array == os_aio_write_array);
-		seg_len = os_aio_write_array->n_slots /
-				os_aio_write_array->n_segments;
-
-		segment = os_aio_read_array->n_segments + 2
-				+ slot->pos / seg_len;
-	}
-
-	return(segment);
-}
 
 /**************************************************************************
-Calculates local segment number and aio array from global segment number. */
+Calculates aio array from global segment number. */
 static
-ulint
-os_aio_get_array_and_local_segment(
+os_aio_array_t*
+os_aio_get_array(
 /*===============================*/
-					/* out: local segment number within
-					the aio array */
-	os_aio_array_t** array,		/* out: aio wait array */
+	/* out: aio wait array */
 	ulint		 global_segment)/* in: global segment number */
 {
-	ulint	segment;
 
 	ut_a(global_segment < os_aio_n_segments);	
 
 	if (global_segment == 0) {
-		*array = os_aio_ibuf_array;
-		segment = 0;
+                return os_aio_ibuf_array;
 
 	} else if (global_segment == 1) {
-		*array = os_aio_log_array;
-		segment = 0;
+		return os_aio_log_array;
 		
-	} else if (global_segment < os_aio_read_array->n_segments + 2) {
-		*array = os_aio_read_array;
+	} else if (global_segment < os_aio_first_write_segment) {
+		return os_aio_read_array;
 
-		segment = global_segment - 2;
 	} else {
-		*array = os_aio_write_array;
+		return os_aio_write_array;
 
-		segment = global_segment - (os_aio_read_array->n_segments + 2);
 	}
-
-	return(segment);
 }
 
 /***********************************************************************
@@ -2016,7 +2053,7 @@
 	slot->buf      = buf;
 	slot->offset   = offset;
 	slot->offset_high = offset_high;
-	slot->io_already_done = FALSE;
+	slot->status   = OS_AIO_NOT_ISSUED;
 	
 #ifdef WIN_ASYNC_IO		
 	control = &(slot->control);
@@ -2067,8 +2104,9 @@
 	os_mutex_enter(array->mutex);
 
 	ut_ad(slot->reserved);
-	
+
 	slot->reserved = FALSE;
+        slot->status = OS_AIO_NOT_ISSUED;
 
 	array->n_reserved--;
 
@@ -2097,24 +2135,23 @@
 {
 	os_aio_array_t*	array;
 	os_aio_slot_t*	slot;
-	ulint		segment;
 	ulint		n;
 	ulint		i;
 
 	ut_ad(!os_aio_use_native_aio);
 
-	segment = os_aio_get_array_and_local_segment(&array, global_segment);
+	array = os_aio_get_array(global_segment);
 
-	n = array->n_slots / array->n_segments;
+	n = array->n_slots;
 
-	/* Look through n slots after the segment * n'th slot */
+	/* Look through n slots */
 
 	os_mutex_enter(array->mutex);
 
 	for (i = 0; i < n; i++) {
-		slot = os_aio_array_get_nth_slot(array, i + segment * n);
+		slot = os_aio_array_get_nth_slot(array, i );
 
-		if (slot->reserved) {
+		if (slot->status == OS_AIO_NOT_ISSUED) {
 			/* Found an i/o request */
 			
 			break;
@@ -2151,6 +2188,33 @@
 }
 
 /**************************************************************************
+Wake all handler threads for a given array. */
+static
+void
+os_aio_simulated_wake_handler_threads_for_array(
+/*============================*/
+	os_aio_array_t*	array)	/* in: aio wait array */
+{
+	if (array == os_aio_ibuf_array) {
+                os_aio_simulated_wake_handler_thread(0);
+
+	} else if (array == os_aio_log_array) {
+                os_aio_simulated_wake_handler_thread(1);
+
+	} else if (array == os_aio_read_array) {
+                ulint	x;
+                for (x = os_aio_first_read_segment; x < os_aio_first_write_segment; x++)
+                      os_aio_simulated_wake_handler_thread(x);
+
+	} else {
+		ut_a(array == os_aio_write_array);
+                ulint	x;
+                for (x = os_aio_first_write_segment; x < os_aio_n_segments; x++)
+                      os_aio_simulated_wake_handler_thread(x);
+	}
+}
+
+/**************************************************************************
 This function can be called if one wants to post a batch of reads and
 prefers an i/o-handler thread to handle them all at once later. You must
 call os_aio_simulated_wake_handler_threads later to ensure the threads
@@ -2160,18 +2224,13 @@
 os_aio_simulated_put_read_threads_to_sleep(void)
 /*============================================*/
 {
-	os_aio_array_t*	array;
 	ulint		g;
 
+        /* TODO(mcallaghan): provide similar function for write? */
 	os_aio_recommend_sleep_for_read_threads	= TRUE;
 
-	for (g = 0; g < os_aio_n_segments; g++) {
-		os_aio_get_array_and_local_segment(&array, g);
-
-		if (array == os_aio_read_array) {
-		
-			os_event_reset(os_aio_segment_wait_events[g]);
-		}
+	for (g = os_aio_first_read_segment; g < os_aio_first_write_segment; g++) {
+                os_event_reset(os_aio_segment_wait_events[g]);
 	}
 }
 
@@ -2301,8 +2360,7 @@
 #endif
 		} else {
 			if (!wake_later) {
-				os_aio_simulated_wake_handler_thread(
-				 os_aio_get_segment_no_from_slot(array, slot));
+                          os_aio_simulated_wake_handler_threads_for_array(array);
 			}
 		}
 	} else if (type == OS_FILE_WRITE) {
@@ -2318,8 +2376,7 @@
 #endif
 		} else {
 			if (!wake_later) {
-				os_aio_simulated_wake_handler_thread(
-				 os_aio_get_segment_no_from_slot(array, slot));
+                          os_aio_simulated_wake_handler_threads_for_array(array);
 			}
 		}
 	} else {
@@ -2382,7 +2439,7 @@
 os_aio_windows_handle(
 /*==================*/
 				/* out: TRUE if the aio operation succeeded */
-	ulint	segment,	/* in: the number of the segment in the aio
+	ulint	global_segment,	/* in: the number of the segment in the aio
 				arrays to wait for; segment 0 is the ibuf
 				i/o thread, segment 1 the log i/o thread,
 				then follow the non-ibuf read threads, and as
@@ -2400,7 +2457,6 @@
 	void**	message2,
 	ulint*	type)		/* out: OS_FILE_WRITE or ..._READ */
 {
-	ulint		orig_seg	= segment;
 	os_aio_array_t*	array;
 	os_aio_slot_t*	slot;
 	ulint		n;
@@ -2409,33 +2465,30 @@
 	BOOL		ret;
 	DWORD		len;
 
-	if (segment == ULINT_UNDEFINED) {
+	if (global_segment == ULINT_UNDEFINED) {
 		array = os_aio_sync_array;
-		segment = 0;
 	} else {
-		segment = os_aio_get_array_and_local_segment(&array, segment);
+                array = os_aio_get_array(global_segment);
 	}
 	
 	/* NOTE! We only access constant fields in os_aio_array. Therefore
 	we do not have to acquire the protecting mutex yet */
 
 	ut_ad(os_aio_validate());
-	ut_ad(segment < array->n_segments);
 
-	n = array->n_slots / array->n_segments;
+	n = array->n_slots;
 
 	if (array == os_aio_sync_array) {
 		os_event_wait(os_aio_array_get_nth_slot(array, pos)->event);
 		i = pos;
 	} else {
-		srv_set_io_thread_op_info(orig_seg, "wait Windows aio");
-		i = os_event_wait_multiple(n,
-				(array->native_events) + segment * n);
+		srv_set_io_thread_op_info(global_segment, "wait Windows aio");
+		i = os_event_wait_multiple(n, (array->native_events));
 	}
 
 	os_mutex_enter(array->mutex);
 
-	slot = os_aio_array_get_nth_slot(array, i + segment * n);
+	slot = os_aio_array_get_nth_slot(array, i);
 
 	ut_a(slot->reserved);
 
@@ -2573,7 +2626,6 @@
 	ulint*	type)		/* out: OS_FILE_WRITE or ..._READ */
 {
 	os_aio_array_t*	array;
-	ulint		segment;
 	os_aio_slot_t*	slot;
 	os_aio_slot_t*	slot2;
 	os_aio_slot_t*	consecutive_ios[OS_AIO_MERGE_N_CONSECUTIVE];
@@ -2589,8 +2641,10 @@
 	ulint		n;
 	ulint		i;
 	ulint		len2;
-	
-	segment = os_aio_get_array_and_local_segment(&array, global_segment);
+	double          start_usecs, stop_usecs;
+        time_t          now;
+
+	array = os_aio_get_array(global_segment);
 	
 restart:
 	/* NOTE! We only access constant fields in os_aio_array. Therefore
@@ -2599,11 +2653,10 @@
 	srv_set_io_thread_op_info(global_segment,
 					"looking for i/o requests (a)");
 	ut_ad(os_aio_validate());
-	ut_ad(segment < array->n_segments);
 
-	n = array->n_slots / array->n_segments;
+	n = array->n_slots;
 
-	/* Look through n slots after the segment * n'th slot */
+	/* Look through n slots */
 
 	if (array == os_aio_read_array
 	    && os_aio_recommend_sleep_for_read_threads) {
@@ -2623,9 +2676,9 @@
 	done */
 	
 	for (i = 0; i < n; i++) {
-		slot = os_aio_array_get_nth_slot(array, i + segment * n);
+		slot = os_aio_array_get_nth_slot(array, i);
 
-		if (slot->reserved && slot->io_already_done) {
+		if (slot->reserved && slot->status == OS_AIO_DONE) {
 
 			if (os_aio_print_debug) {
 				fprintf(stderr,
@@ -2647,12 +2700,12 @@
 	biggest_age = 0;
 	lowest_offset = ULINT_MAX;
 
+        now = time(NULL);
 	for (i = 0; i < n; i++) {
-		slot = os_aio_array_get_nth_slot(array, i + segment * n);
+		slot = os_aio_array_get_nth_slot(array, i);
 
-		if (slot->reserved) {
-		        age = (ulint)difftime(time(NULL),
-						slot->reservation_time);
+		if (slot->reserved && slot->status == OS_AIO_NOT_ISSUED) {
+		        age = (ulint)difftime(now, slot->reservation_time);
 
 			if ((age >= 2 && age > biggest_age)
 			    || (age >= 2 && age == biggest_age
@@ -2677,10 +2730,11 @@
 		lowest_offset = ULINT_MAX;
 	
 		for (i = 0; i < n; i++) {
-		        slot = os_aio_array_get_nth_slot(array,
-							i + segment * n);
+                        slot = os_aio_array_get_nth_slot(array, i);
 
-			if (slot->reserved && slot->offset < lowest_offset) {
+			if (slot->reserved
+                            && slot->offset < lowest_offset
+                            && slot->status == OS_AIO_NOT_ISSUED) {
 
 			        /* Found an i/o request */
 				consecutive_ios[0] = slot;
@@ -2705,7 +2759,7 @@
 
 consecutive_loop:	
 	for (i = 0; i < n; i++) {
-		slot2 = os_aio_array_get_nth_slot(array, i + segment * n);
+		slot2 = os_aio_array_get_nth_slot(array, i);
 
 		if (slot2->reserved && slot2 != slot
 		    && slot2->offset == slot->offset + slot->len
@@ -2713,7 +2767,8 @@
 						sum does not wrap over */
 		    && slot2->offset_high == slot->offset_high
 		    && slot2->type == slot->type
-		    && slot2->file == slot->file) {
+		    && slot2->file == slot->file
+                    && slot2->status == OS_AIO_NOT_ISSUED) { 
 
 			/* Found a consecutive i/o request */
 
@@ -2722,7 +2777,8 @@
 
 			slot = slot2;
 
-			if (n_consecutive < OS_AIO_MERGE_N_CONSECUTIVE) {
+			if (n_consecutive < OS_AIO_MERGE_N_CONSECUTIVE
+                            && n_consecutive < innobase_max_merged_io) {
 			
 				goto consecutive_loop;
 			} else {
@@ -2742,13 +2798,27 @@
 	
 	for (i = 0; i < n_consecutive; i++) {
 		total_len += consecutive_ios[i]->len;
+                ut_a(consecutive_ios[i]->status == OS_AIO_NOT_ISSUED);
+                consecutive_ios[i]->status = OS_AIO_ISSUED;
 	}
 
 	if (n_consecutive == 1) {
 		/* We can use the buffer of the i/o request */
 		combined_buf = slot->buf;
 	} else {
-		combined_buf2 = ut_malloc(total_len + UNIV_PAGE_SIZE);
+                if ((total_len + UNIV_PAGE_SIZE) >
+                    os_aio_thread_buffer_size[global_segment]) {
+
+		        if (os_aio_thread_buffer[global_segment])
+                                ut_free(os_aio_thread_buffer[global_segment]);
+
+		        os_aio_thread_buffer[global_segment] =
+                                ut_malloc(total_len + UNIV_PAGE_SIZE);
+
+		        os_aio_thread_buffer_size[global_segment] =
+		                total_len + UNIV_PAGE_SIZE;
+                }
+		combined_buf2 = os_aio_thread_buffer[global_segment];
 
 		ut_a(combined_buf2);
 
@@ -2759,6 +2829,9 @@
 	this assumes that there is just one i/o-handler thread serving
 	a single segment of slots! */
 
+	ut_a(slot->reserved);
+        ut_a(slot->status == OS_AIO_ISSUED);
+
 	os_mutex_exit(array->mutex);
 
 	if (slot->type == OS_FILE_WRITE && n_consecutive > 1) {
@@ -2784,6 +2857,7 @@
 
 	/* Do the i/o with ordinary, synchronous i/o functions: */
 	if (slot->type == OS_FILE_WRITE) {
+                os_aio_thread_io_writes[global_segment] += n_consecutive;
 		if (array == os_aio_write_array) {
 			if ((total_len % UNIV_PAGE_SIZE != 0)
 			    || (slot->offset % UNIV_PAGE_SIZE != 0)) {
@@ -2817,13 +2891,21 @@
 				}
 			}
 		}
-	
+                start_usecs = timeusecs();
 		ret = os_file_write(slot->name, slot->file, combined_buf,
 				slot->offset, slot->offset_high, total_len);
+                stop_usecs = timeusecs();
 	} else {
+                start_usecs = timeusecs();
+                os_aio_thread_io_reads[global_segment] += n_consecutive;
 		ret = os_file_read(slot->file, combined_buf,
 				slot->offset, slot->offset_high, total_len);
+                stop_usecs = timeusecs();
 	}
+        if ((stop_usecs - start_usecs) > os_aio_thread_max_io_wait[global_segment])
+                os_aio_thread_max_io_wait[global_segment] = stop_usecs - start_usecs;
+        os_aio_thread_io_wait[global_segment] += stop_usecs - start_usecs;
+        os_aio_thread_io_requests[global_segment]++;
 
 	ut_a(ret);
 	srv_set_io_thread_op_info(global_segment, "file i/o done");
@@ -2844,25 +2926,24 @@
 		}
 	}
 
-	if (n_consecutive > 1) {
-		ut_free(combined_buf2);
-	}
-
 	os_mutex_enter(array->mutex);
 
 	/* Mark the i/os done in slots */
 
 	for (i = 0; i < n_consecutive; i++) {
-		consecutive_ios[i]->io_already_done = TRUE;
+                ut_a(consecutive_ios[i]->status == OS_AIO_ISSUED);
+		consecutive_ios[i]->status = OS_AIO_DONE;
 	}
 
 	/* We return the messages for the first slot now, and if there were
 	several slots, the messages will be returned with subsequent calls
 	of this function */
-	
+
 slot_io_done:
 
 	ut_a(slot->reserved);
+        ut_a(slot->status == OS_AIO_DONE);
+        slot->status = OS_AIO_CLAIMED;
 
 	*message1 = slot->message1;
 	*message2 = slot->message2;
@@ -2917,7 +2998,6 @@
 	os_mutex_enter(array->mutex);
 
 	ut_a(array->n_slots > 0);
-	ut_a(array->n_segments > 0);
 	
 	for (i = 0; i < array->n_slots; i++) {
 		slot = os_aio_array_get_nth_slot(array, i);
@@ -2968,10 +3048,18 @@
 	double		avg_bytes_read;
 	ulint		i;
 
-	for (i = 0; i < srv_n_file_io_threads; i++) {
-		fprintf(file, "I/O thread %lu state: %s (%s)", i,
-					srv_io_thread_op_info[i],
-					srv_io_thread_function[i]);
+	for (i = 0; i < os_aio_n_segments; i++) {
+          fprintf(file,
+                  "I/O thread %lu state: %s (%s) reads %lu writes %lu "
+                  "requests %lu io secs %lf io msecs/request %lf max_io_wait %lf",
+                  i, srv_io_thread_op_info[i], srv_io_thread_function[i],
+                  os_aio_thread_io_reads[i], os_aio_thread_io_writes[i],
+                  os_aio_thread_io_requests[i],
+                  os_aio_thread_io_wait[i] / 1000000.0,
+                  os_aio_thread_io_requests[i] ?
+                  os_aio_thread_io_wait[i] / os_aio_thread_io_requests[i] / 1000.0
+                  : 0.0,
+                  os_aio_thread_max_io_wait[i] / 1000.0);
 
 #ifndef __WIN__
         	if (os_aio_segment_wait_events[i]->is_set) {
@@ -2991,7 +3079,6 @@
 	os_mutex_enter(array->mutex);
 
 	ut_a(array->n_slots > 0);
-	ut_a(array->n_segments > 0);
 	
 	n_reserved = 0;
 
diff -ruN base/innobase/srv/srv0srv.c mysql40gpl/innobase/srv/srv0srv.c
--- base/innobase/srv/srv0srv.c	2005-09-02 15:37:58.000000000 -0700
+++ mysql40gpl/innobase/srv/srv0srv.c	2007-04-21 09:56:45.000000000 -0700
@@ -150,12 +150,17 @@
 ulint	srv_lock_table_size	= ULINT_MAX;
 
 ulint	srv_n_file_io_threads	= ULINT_MAX;
+ulint   srv_n_read_io_threads   = ULINT_MAX;
+ulint   srv_n_write_io_threads  = ULINT_MAX;
 
 ibool	srv_archive_recovery	= 0;
 dulint	srv_archive_recovery_limit_lsn;
 
 ulint	srv_lock_wait_timeout	= 1024 * 1024 * 1024;
 
+// Counts number of lock wait timeouts.
+ulint inno_lock_wait_timeouts = 0;
+
 char*   srv_file_flush_method_str = NULL;
 ulint   srv_unix_file_flush_method = SRV_UNIX_FDATASYNC;
 ulint   srv_win_file_flush_method = SRV_WIN_IO_UNBUFFERED;
@@ -309,6 +314,23 @@
 ulint	srv_main_thread_process_no	= 0;
 ulint	srv_main_thread_id		= 0;
 
+// The following count work done by srv_master_thread.
+
+// Iterations by the 'once per second' loop.
+ulint   srv_main_1_second_loops         = 0;
+// Calls to sleep by the 'once per second' loop.
+ulint   srv_main_sleeps                 = 0;
+// Iterations by the 'once per 10 seconds' loop.
+ulint   srv_main_10_second_loops        = 0;
+// Iterations of the loop bounded by the 'background_loop' label.
+ulint   srv_main_background_loops       = 0;
+// Iterations of the loop bounded by the 'flush_loop' label.
+ulint   srv_main_flush_loops            = 0;
+// Calls to log_buffer_flush_to_disk.
+ulint   srv_sync_flush                  = 0;
+// Calls to log_buffer_flush_maybe_sync.
+ulint   srv_async_flush                 = 0;
+
 /*
 	IMPLEMENTATION OF THE SERVER MAIN PROGRAM
 	=========================================
@@ -529,6 +551,24 @@
 ulint	srv_n_threads[SRV_MASTER + 1];
 
 /*************************************************************************
+Prints counters for work done by srv_master_thread. */
+
+static
+void
+srv_print_extra(
+/*===================*/
+        FILE  *file)    /* in: output stream */
+{
+        fprintf(file, "srv_master_thread loops: %lu 1_second, %lu sleeps, "
+                "%lu 10_second, %lu background, %lu flush\n",
+                srv_main_1_second_loops, srv_main_sleeps,
+                srv_main_10_second_loops, srv_main_background_loops,
+                srv_main_flush_loops);
+        fprintf(file, "srv_master_thread log flush: %lu sync, %lu async\n",
+                srv_sync_flush, srv_async_flush);
+}
+
+/*************************************************************************
 Sets the info describing an i/o thread current state. */
 
 void
@@ -933,7 +973,7 @@
 
 	/* Too many threads inside: put the current thread to a queue */
 
-	for (i = 0; i < OS_THREAD_MAX_N; i++) {
+	for (i = 0; i < OS_THREAD_MAX_N && !trx->always_enter_innodb; i++) {
 		slot = srv_conc_slots + i;
 
 		if (!slot->reserved) {
@@ -941,13 +981,21 @@
 		}
 	}
 
-	if (i == OS_THREAD_MAX_N) {
-		/* Could not find a free wait slot, we must let the
+	if (i == OS_THREAD_MAX_N || trx->always_enter_innodb) {
+		/* Could not find a free wait slot, OR we want the sql thread
+                to always enter innodb to improve replication, we must let the
 		thread enter */
 
 		srv_conc_n_threads++;
 		trx->declared_to_be_inside_innodb = TRUE;
-		trx->n_tickets_to_enter_innodb = 0;
+
+                /* If the transaction can always enter innodb, give it enough
+                 * tickets so that we would not check it again soon afterwards.
+                 */
+                if (trx->always_enter_innodb)
+                  trx->n_tickets_to_enter_innodb = SRV_FREE_TICKETS_TO_ENTER;
+                else
+                  trx->n_tickets_to_enter_innodb = 0;
 
 		os_fast_mutex_unlock(&srv_conc_mutex);
 
@@ -1452,8 +1500,15 @@
 		(ulong)time_elapsed);
 
 	fputs("----------\n"
+		"BACKGROUND THREAD\n"
+		"----------\n", file);
+        srv_print_extra(file);
+        fil_print(file);
+
+	fputs("----------\n"
 		"SEMAPHORES\n"
 		"----------\n", file);
+        fprintf(file, "Lock wait timeouts %lu\n", inno_lock_wait_timeouts);
 	sync_print(file);
 
 	/* Conceptually, srv_innodb_monitor_mutex has a very high latching
@@ -1472,7 +1527,6 @@
 
 	mutex_exit(&dict_foreign_err_mutex);
 
-	lock_print_info(file);
 	fputs("--------\n"
 		"FILE I/O\n"
 		"--------\n", file);
@@ -1553,6 +1607,8 @@
 	srv_n_rows_deleted_old = srv_n_rows_deleted;
 	srv_n_rows_read_old = srv_n_rows_read;
 
+	lock_print_info(file);
+
 	fputs("----------------------------\n"
 		       "END OF INNODB MONITOR OUTPUT\n"
 		"============================\n", file);
@@ -1702,6 +1758,7 @@
 			        if (thr_get_trx(slot->thr)->wait_lock) {
 				        lock_cancel_waiting_and_release(
 				          thr_get_trx(slot->thr)->wait_lock);
+                                        ++inno_lock_wait_timeouts;
 			        }
 			}
 		}
@@ -1938,11 +1995,13 @@
 		n_ios_old = log_sys->n_log_ios + buf_pool->n_pages_read
 						+ buf_pool->n_pages_written;
 		srv_main_thread_op_info = (char*)"sleeping";
-		
+                srv_main_1_second_loops++;
+
 		if (!skip_sleep) {
 
 		        os_thread_sleep(1000000);
-		}
+                        srv_main_sleeps++;
+                }
 
 		skip_sleep = FALSE;
 
@@ -1968,6 +2027,7 @@
 
 		srv_main_thread_op_info = (char*)"flushing log";
 		log_buffer_flush_to_disk();
+                srv_sync_flush++;
 
 		/* If there were less than 5 i/os during the
 		one second sleep, we assume that there is free
@@ -1984,8 +2044,9 @@
 			ibuf_contract_for_n_pages(TRUE, 5);
 
 			srv_main_thread_op_info = (char*)"flushing log";
-
-			log_buffer_flush_to_disk();
+                        // Avoid fsync when srv_flush_log_at_trx_commit != 1
+			log_buffer_flush_maybe_sync();
+                        srv_async_flush++;
 		}
 
 		if (buf_get_modified_ratio_pct() >
@@ -2016,6 +2077,7 @@
 
 	/* ---- We perform the following code approximately once per
 	10 seconds when there is database activity */
+        srv_main_10_second_loops++;
 
 #ifdef MEM_PERIODIC_CHECK
 	/* Check magic numbers of every allocated mem block once in 10
@@ -2035,7 +2097,9 @@
 		buf_flush_batch(BUF_FLUSH_LIST, 100, ut_dulint_max);
 
 		srv_main_thread_op_info = (char*) "flushing log";
-		log_buffer_flush_to_disk();
+                // Avoid fsync when srv_flush_log_at_trx_commit != 1.
+		log_buffer_flush_maybe_sync();
+                srv_async_flush++;
 	}
 
 	/* We run a batch of insert buffer merge every 10 seconds,
@@ -2045,15 +2109,16 @@
 	ibuf_contract_for_n_pages(TRUE, 5);
 
 	srv_main_thread_op_info = (char*)"flushing log";
-	log_buffer_flush_to_disk();
+        // Avoid fsync when srv_flush_log_at_trx_commit != 1.
+	log_buffer_flush_maybe_sync();
+        last_flush_time = time(NULL);
+        srv_async_flush++;
 
 	/* We run a full purge every 10 seconds, even if the server
 	were active */
 	
 	n_pages_purged = 1;
 
-	last_flush_time = time(NULL);
-
 	while (n_pages_purged) {
 
 		if (srv_fast_shutdown && srv_shutdown_state > 0) {
@@ -2071,6 +2136,7 @@
 
 		        log_buffer_flush_to_disk();
 			last_flush_time = current_time;
+                        srv_sync_flush++;
 		}
 	}
 	
@@ -2124,7 +2190,7 @@
 
 	/* The server has been quiet for a while: start running background
 	operations */
-		
+        srv_main_background_loops++;		
 	srv_main_thread_op_info = (char*)"doing background drop tables";
 
 	n_tables_to_drop = row_drop_tables_for_mysql_in_background();
@@ -2144,7 +2210,7 @@
 	
 	n_pages_purged = 1;
 
-	last_flush_time = time(NULL);
+        last_flush_time = time(NULL);
 
 	while (n_pages_purged) {
 		if (srv_fast_shutdown && srv_shutdown_state > 0) {
@@ -2162,6 +2228,7 @@
 
 		        log_buffer_flush_to_disk();
 			last_flush_time = current_time;
+                        srv_sync_flush++;
 		}
 	}
 
@@ -2179,7 +2246,11 @@
 	if (srv_fast_shutdown && srv_shutdown_state > 0) {
 	        n_bytes_merged = 0;
 	} else {
-	        n_bytes_merged = ibuf_contract_for_n_pages(TRUE, 20);
+                // This should do an amount of IO similar to the number of
+                // dirty pages that will be flushed in the call to
+                // buf_flush_batch below. Otherwise, the system favors
+                // clean pages over cleanup throughput.
+	        n_bytes_merged = ibuf_contract_for_n_pages(TRUE, 100);
 	}
 
 	srv_main_thread_op_info = (char*)"reserving kernel mutex";
@@ -2192,6 +2263,7 @@
 	mutex_exit(&kernel_mutex);
 	
 flush_loop:
+        srv_main_flush_loops++;		
 	srv_main_thread_op_info = (char*)"flushing buffer pool pages";
 	n_pages_flushed = buf_flush_batch(BUF_FLUSH_LIST, 100, ut_dulint_max);
 
@@ -2210,7 +2282,17 @@
 
 	srv_main_thread_op_info = (char*) "flushing log";
 
-	log_buffer_flush_to_disk();
+	current_time = time(NULL);
+	if (difftime(current_time, last_flush_time) > 1) {
+		srv_main_thread_op_info = (char*) "flushing log";
+	        log_buffer_flush_to_disk();
+		last_flush_time = current_time;
+                srv_sync_flush++;
+	} else {
+                // Avoid fsync when srv_flush_log_at_trx_commit != 1.
+                log_buffer_flush_maybe_sync();
+                srv_async_flush++;
+        }
 
 	srv_main_thread_op_info = (char*)"making checkpoint";
 
diff -ruN base/innobase/srv/srv0start.c mysql40gpl/innobase/srv/srv0start.c
--- base/innobase/srv/srv0start.c	2005-09-02 15:37:55.000000000 -0700
+++ mysql40gpl/innobase/srv/srv0start.c	2007-04-21 09:56:45.000000000 -0700
@@ -893,6 +893,7 @@
 	ulint	i;
 	ulint	k;
 	mtr_t   mtr;
+        ulint   n_threads;
 
 #ifdef UNIV_DEBUG
 	fprintf(stderr,
@@ -1059,25 +1060,28 @@
 	}
 
 	/* Restrict the maximum number of file i/o threads */
-	if (srv_n_file_io_threads > SRV_MAX_N_IO_THREADS) {
+	if (srv_n_read_io_threads > SRV_MAX_N_IO_THREADS) {
 
-		srv_n_file_io_threads = SRV_MAX_N_IO_THREADS;
+		srv_n_read_io_threads = SRV_MAX_N_IO_THREADS;
 	}
+	/* Restrict the maximum number of file i/o threads */
+	if (srv_n_write_io_threads > SRV_MAX_N_IO_THREADS) {
 
-	if (!os_aio_use_native_aio) {
- 		/* In simulated aio we currently have use only for 4 threads */
-
-		srv_n_file_io_threads = 4;
+		srv_n_write_io_threads = SRV_MAX_N_IO_THREADS;
+	}
 
-		os_aio_init(8 * SRV_N_PENDING_IOS_PER_THREAD
-						* srv_n_file_io_threads,
-					srv_n_file_io_threads,
-					SRV_MAX_N_PENDING_SYNC_IOS);
+	if (!os_aio_use_native_aio) {
+ 		/* More than 4 threads are now supported. */
+		n_threads = os_aio_init(8 * SRV_N_PENDING_IOS_PER_THREAD,
+                                        srv_n_read_io_threads,
+                                        srv_n_write_io_threads,
+                                        SRV_MAX_N_PENDING_SYNC_IOS);
 	} else {
-		os_aio_init(SRV_N_PENDING_IOS_PER_THREAD
-						* srv_n_file_io_threads,
-					srv_n_file_io_threads,
-					SRV_MAX_N_PENDING_SYNC_IOS);
+                /* Might need more slots here. Alas, I don't have windows. */
+                n_threads = os_aio_init(SRV_N_PENDING_IOS_PER_THREAD,
+                                        srv_n_read_io_threads,
+                                        srv_n_write_io_threads,
+                                        SRV_MAX_N_PENDING_SYNC_IOS);
 	}
 	
 	fil_init(SRV_MAX_N_OPEN_FILES);
@@ -1091,10 +1095,9 @@
 
 	/* Create i/o-handler threads: */
 
-	for (i = 0; i < srv_n_file_io_threads; i++) {
+	for (i = 0; i < n_threads; i++) {
 		n[i] = i;
 
-
 		os_thread_create(io_handler_thread, n + i, thread_ids + i);
     	}
 
diff -ruN base/innobase/trx/trx0roll.c mysql40gpl/innobase/trx/trx0roll.c
--- base/innobase/trx/trx0roll.c	2005-09-02 15:38:01.000000000 -0700
+++ mysql40gpl/innobase/trx/trx0roll.c	2007-04-21 09:56:45.000000000 -0700
@@ -36,6 +36,12 @@
 /* Auxiliary variable which tells the previous progress % we printed */
 ulint		trx_roll_progress_printed_pct;
 
+extern char *mysql_data_home;
+extern char reg_ext[];
+
+/* Delete .frm schema file for the specified table. */
+static void mysql_delete_table_schema_file(const char *full_table_name);
+
 /***********************************************************************
 Rollback a transaction used in MySQL. */
 
@@ -348,7 +354,7 @@
 	int		err;
 
 	mutex_enter(&kernel_mutex);
-	
+
 	/* Open a dummy session */
 
 	if (!trx_dummy_sess) {
@@ -473,6 +479,8 @@
 			err = row_drop_table_for_mysql(table->name, trx, TRUE);
 
 			ut_a(err == (int) DB_SUCCESS);
+
+                        mysql_delete_table_schema_file(table->name);
 		}
 	}
 
@@ -487,7 +495,7 @@
 
 	goto loop;
 }
-	
+
 /***********************************************************************
 Creates an undo number array. */
 
@@ -1245,3 +1253,24 @@
 	
 	return(thr);
 }
+
+/* Delete .frm schema file for the specified table. */
+static void mysql_delete_table_schema_file(const char *full_table_name) {
+  char  frm_filename[1000];
+
+  fprintf(stderr, "InnoDB: mysql dropping schema file for %s\n",
+          full_table_name);
+  if (strlen(full_table_name) + strlen(mysql_data_home) + strlen(reg_ext)
+      >= 1000) {
+    fprintf(stderr, "InnoDB: illegal table name.\n");
+    return;
+  }
+
+  /* Create the filename based on the database/table name. */
+  sprintf(frm_filename, "%s/%s%s", mysql_data_home, full_table_name, reg_ext);
+
+  fprintf(stderr, "InnoDB: unlink file %s\n", frm_filename);
+  if (unlink(frm_filename) != 0)
+    fprintf(stderr, "InnoDB: failed dropping schema file, %d.\n", errno);
+}
+
diff -ruN base/innobase/trx/trx0sys.c mysql40gpl/innobase/trx/trx0sys.c
--- base/innobase/trx/trx0sys.c	2005-09-02 15:38:00.000000000 -0700
+++ mysql40gpl/innobase/trx/trx0sys.c	2007-04-21 09:56:45.000000000 -0700
@@ -26,12 +26,15 @@
 trx_sys_t*		trx_sys 	= NULL;
 trx_doublewrite_t*	trx_doublewrite = NULL;
 
-/* In a MySQL replication slave, in crash recovery we store the master log
-file name and position here. We have successfully got the updates to InnoDB
+
+/* In a MySQL replication slave, in crash recovery we have to store the relay
+log file name and position here. We have successfully got the updates to InnoDB
 up to this position. If .._pos is -1, it means no crash recovery was needed,
-or there was no master log position info inside InnoDB. */
+or there was no relay-log position info inside InnoDB. */
 
-char 		trx_sys_mysql_master_log_name[TRX_SYS_MYSQL_LOG_NAME_LEN];
+char		trx_sys_mysql_relay_log_name[TRX_SYS_MYSQL_RELAY_NAME_LEN];
+char		trx_sys_mysql_master_log_name[TRX_SYS_MYSQL_RELAY_NAME_LEN];
+ib_longlong	trx_sys_mysql_relay_log_pos     = -1;
 ib_longlong	trx_sys_mysql_master_log_pos	= -1;
 
 /* Do NOT merge this to the 4.1 code base! */
@@ -481,7 +484,7 @@
 		page += UNIV_PAGE_SIZE;
 	}
 
-	fil_flush_file_spaces(FIL_TABLESPACE);
+	fil_flush_file_spaces(FIL_TABLESPACE, FLUSH_FROM_OTHER);
 	
 leave_func:
 	ut_free(unaligned_read_buf);
@@ -600,6 +603,86 @@
 }
 
 /*********************************************************************
+In a MySQL replication slave updates the latest relay log and master
+log position up to which replication has proceeded. */
+
+void
+trx_sys_update_mysql_relay_offset(
+/*===============================*/
+	const char*	relaylog_name,     /* in: relay-log file name */
+	ib_longlong	relaylog_pos,      /* in: position in relay-log file */
+	const char*	masterlog_name,    /* in: relay-log file name */
+	ib_longlong	masterlog_pos,     /* in: position in relay-log file */
+	ulint		field,	/* in: offset of the MySQL log info field in
+                                   the trx sys header */
+	mtr_t*		mtr)	/* in: mtr */
+{
+  trx_sysf_t*	sys_header;
+
+  if (ut_strlen(relaylog_name) >= TRX_SYS_MYSQL_RELAY_NAME_LEN ||
+      ut_strlen(masterlog_name) >= TRX_SYS_MYSQL_RELAY_NAME_LEN) {
+    /* Each filename's length is limited to 250 bytes, which should be more
+     * than enough for most applications.  We will fail during MySQL replication
+     * if the filename is too long so that users can adjust.
+     */
+    fprintf(stderr,
+            " InnoDB: trx_sys_update_mysql_relay_offset() filename is too long "
+            "- relay(%s), master(%s)", relaylog_name, masterlog_name);
+    return;
+  }
+
+  sys_header = trx_sysf_get(mtr);
+  if (mach_read_from_4(sys_header + field + TRX_SYS_MYSQL_RELAYLOG_MAGIC_N_FLD)
+      != TRX_SYS_MYSQL_LOG_MAGIC_N) {
+    mlog_write_ulint(sys_header + field + TRX_SYS_MYSQL_RELAYLOG_MAGIC_N_FLD,
+                     TRX_SYS_MYSQL_LOG_MAGIC_N, MLOG_4BYTES, mtr);
+  }
+
+  if (mach_read_from_4(sys_header + field + TRX_SYS_MYSQL_RELAYMASTER_MAGIC_OFF)
+      != TRX_SYS_MYSQL_RELAYMASTER_MAGIC_NUM) {
+    mlog_write_ulint(sys_header + field + TRX_SYS_MYSQL_RELAYMASTER_MAGIC_OFF,
+                     TRX_SYS_MYSQL_RELAYMASTER_MAGIC_NUM, MLOG_4BYTES, mtr);
+  }
+
+  /* write relay-log related information */
+  if (0 != strcmp((char*) (sys_header + field +
+                           TRX_SYS_MYSQL_RELAYLOG_NAME_OFF), relaylog_name)) {
+    mlog_write_string(sys_header + field + TRX_SYS_MYSQL_RELAYLOG_NAME_OFF,
+                      (byte*) relaylog_name, 1 + ut_strlen(relaylog_name),
+                      mtr);
+  }
+  if (mach_read_from_4(sys_header + field
+                       + TRX_SYS_MYSQL_RELAYLOG_POS_HIGH) > 0
+      || (relaylog_pos >> 32) > 0) {
+    mlog_write_ulint(sys_header + field
+                     + TRX_SYS_MYSQL_RELAYLOG_POS_HIGH,
+                     (ulint)(relaylog_pos >> 32),
+                     MLOG_4BYTES, mtr);
+  }
+  mlog_write_ulint(sys_header + field + TRX_SYS_MYSQL_RELAYLOG_POS_LOW,
+                   (ulint)(relaylog_pos & 0xFFFFFFFFUL), MLOG_4BYTES, mtr);
+
+  /* write master-log related information */
+  if (0 != strcmp((char*) (sys_header + field +
+                           TRX_SYS_MYSQL_MASTERLOG_NAME_OFF),
+                  masterlog_name)) {
+    mlog_write_string(sys_header + field + TRX_SYS_MYSQL_MASTERLOG_NAME_OFF,
+                      (byte*) masterlog_name, 1 + ut_strlen(masterlog_name),
+                      mtr);
+  }
+  if (mach_read_from_4(sys_header + field
+                       + TRX_SYS_MYSQL_MASTERLOG_POS_HIGH) > 0
+      || (masterlog_pos >> 32) > 0) {
+    mlog_write_ulint(sys_header + field
+                     + TRX_SYS_MYSQL_MASTERLOG_POS_HIGH,
+                     (ulint)(masterlog_pos >> 32),
+                     MLOG_4BYTES, mtr);
+  }
+  mlog_write_ulint(sys_header + field + TRX_SYS_MYSQL_MASTERLOG_POS_LOW,
+                   (ulint)(masterlog_pos & 0xFFFFFFFFUL), MLOG_4BYTES, mtr);
+}
+
+/*********************************************************************
 Prints to stderr the MySQL binlog info in the system header if the
 magic number shows it valid. */
 
@@ -663,55 +746,78 @@
 }
 
 /*********************************************************************
-Prints to stderr the MySQL master log offset info in the trx system header if
-the magic number shows it valid. */
+Prints to stderr the MySQL relay-log/master-log offset info in the trx system
+header if the magic number shows it valid. */
 
 void
-trx_sys_print_mysql_master_log_pos(void)
+trx_sys_print_mysql_relay_log_pos(ibool print_msg)
 /*====================================*/
 {
-	trx_sysf_t*	sys_header;
-	mtr_t		mtr;
-	
-	mtr_start(&mtr);
-
-	sys_header = trx_sysf_get(&mtr);
-
-	if (mach_read_from_4(sys_header + TRX_SYS_MYSQL_MASTER_LOG_INFO
-					+ TRX_SYS_MYSQL_LOG_MAGIC_N_FLD)
-	   != TRX_SYS_MYSQL_LOG_MAGIC_N) {
-
-		mtr_commit(&mtr);
+  trx_sysf_t*	sys_header;
+  mtr_t		mtr;
 
-		return;
-	}
+  mtr_start(&mtr);
 
-	fprintf(stderr,
-"InnoDB: In a MySQL replication slave the last master binlog file\n"
-"InnoDB: position %lu %lu, file name %s\n",
-		mach_read_from_4(sys_header + TRX_SYS_MYSQL_MASTER_LOG_INFO
-					+ TRX_SYS_MYSQL_LOG_OFFSET_HIGH),
-		mach_read_from_4(sys_header + TRX_SYS_MYSQL_MASTER_LOG_INFO
-					+ TRX_SYS_MYSQL_LOG_OFFSET_LOW),
-		sys_header + TRX_SYS_MYSQL_MASTER_LOG_INFO
-						+ TRX_SYS_MYSQL_LOG_NAME);
-	/* Copy the master log position info to global variables we can
-	use in ha_innobase.cc to initialize glob_mi to right values */
-
-	ut_memcpy(trx_sys_mysql_master_log_name,
-		sys_header + TRX_SYS_MYSQL_MASTER_LOG_INFO
-						+ TRX_SYS_MYSQL_LOG_NAME,
-			TRX_SYS_MYSQL_LOG_NAME_LEN);
-
-	trx_sys_mysql_master_log_pos = 
-		(((ib_longlong)mach_read_from_4(
-			sys_header + TRX_SYS_MYSQL_MASTER_LOG_INFO
-					+ TRX_SYS_MYSQL_LOG_OFFSET_HIGH))
-		<< 32)
-		+ (ib_longlong)
-		mach_read_from_4(sys_header + TRX_SYS_MYSQL_MASTER_LOG_INFO
-					+ TRX_SYS_MYSQL_LOG_OFFSET_LOW);
-	mtr_commit(&mtr);
+  sys_header = trx_sysf_get(&mtr);
+  ulint magic_num = mach_read_from_4(sys_header + TRX_SYS_MYSQL_RELAY_INFO
+                                     + TRX_SYS_MYSQL_RELAYLOG_MAGIC_N_FLD);
+  if (magic_num != TRX_SYS_MYSQL_LOG_MAGIC_N) {
+    mtr_commit(&mtr);
+    fprintf(stderr,
+            " InnoDB: Incorrect magic number(%d) for relay-log information\n",
+            magic_num);
+    return;
+  }
+
+  magic_num = mach_read_from_4(sys_header + TRX_SYS_MYSQL_RELAY_INFO
+                               + TRX_SYS_MYSQL_RELAYMASTER_MAGIC_OFF);
+  if (magic_num != TRX_SYS_MYSQL_RELAYMASTER_MAGIC_NUM) {
+    mtr_commit(&mtr);
+    fprintf(stderr,
+            " InnoDB: Old magic number(%d) for relay-log information\n",
+            magic_num);
+    return;
+  }
+
+  /* We need the relay-log related information in ha_innobase.cc to initialize
+   * glob_mi to right values.
+   */
+
+  /* Copy the relay-log log position info to global variables */
+  ut_memcpy(trx_sys_mysql_relay_log_name,
+            sys_header + TRX_SYS_MYSQL_RELAY_INFO
+                       + TRX_SYS_MYSQL_RELAYLOG_NAME_OFF,
+            TRX_SYS_MYSQL_RELAY_NAME_LEN);
+  trx_sys_mysql_relay_log_pos =
+    (((ib_longlong)mach_read_from_4(
+          sys_header + TRX_SYS_MYSQL_RELAY_INFO
+                     + TRX_SYS_MYSQL_RELAYLOG_POS_HIGH)) << 32)
+    + ((ib_longlong)mach_read_from_4(sys_header + TRX_SYS_MYSQL_RELAY_INFO
+                                     + TRX_SYS_MYSQL_RELAYLOG_POS_LOW));
+
+  /* Copy the master-log log position info to global variables */
+  ut_memcpy(trx_sys_mysql_master_log_name,
+            sys_header + TRX_SYS_MYSQL_RELAY_INFO
+                       + TRX_SYS_MYSQL_MASTERLOG_NAME_OFF,
+            TRX_SYS_MYSQL_RELAY_NAME_LEN);
+  trx_sys_mysql_master_log_pos =
+    (((ib_longlong)mach_read_from_4(
+          sys_header + TRX_SYS_MYSQL_RELAY_INFO
+                     + TRX_SYS_MYSQL_MASTERLOG_POS_HIGH)) << 32)
+    + ((ib_longlong)mach_read_from_4(sys_header + TRX_SYS_MYSQL_RELAY_INFO
+                                     + TRX_SYS_MYSQL_MASTERLOG_POS_LOW));
+
+  mtr_commit(&mtr);
+
+  if (print_msg) {
+    ut_print_timestamp(stderr);
+    fprintf(stderr,
+" InnoDB: In a MySQL replication slave the last relay-log file\n"
+"                InnoDB: relay-log - filename %s, position (%lld)\n"
+"                InnoDB: master-log - filename %s, position (%lld)\n",
+            trx_sys_mysql_relay_log_name, trx_sys_mysql_relay_log_pos,
+            trx_sys_mysql_master_log_name, trx_sys_mysql_master_log_pos);
+  }
 }
 
 /********************************************************************
diff -ruN base/innobase/trx/trx0trx.c mysql40gpl/innobase/trx/trx0trx.c
--- base/innobase/trx/trx0trx.c	2005-09-02 15:37:59.000000000 -0700
+++ mysql40gpl/innobase/trx/trx0trx.c	2007-04-21 09:56:45.000000000 -0700
@@ -110,6 +110,8 @@
 	trx->mysql_log_offset = 0;
 	trx->mysql_master_log_file_name = (char*) "";
 	trx->mysql_master_log_pos = 0;
+	trx->mysql_relay_log_file_name = "";
+	trx->mysql_relay_log_pos = 0;
 	
 	mutex_create(&(trx->undo_mutex));
 	mutex_set_level(&(trx->undo_mutex), SYNC_TRX_UNDO);
@@ -157,6 +159,12 @@
 	trx->read_view_heap = mem_heap_create(256);
 	trx->read_view = NULL;
 
+        trx->always_enter_innodb = FALSE;
+        trx->clear_replication_status = FALSE;
+
+        trx->repl_wait_binlog_name = NULL;
+        trx->repl_wait_binlog_pos  = NULL;
+
 	return(trx);
 }
 
@@ -295,6 +303,9 @@
 	}
 
 	ut_a(trx->read_view == NULL);
+
+        if (trx->repl_wait_binlog_name != NULL)
+          mem_free(trx->repl_wait_binlog_name);
 	
 	mem_free(trx);
 }
@@ -696,14 +707,21 @@
 			trx->mysql_log_file_name = NULL;
 		}
 
-		if (trx->mysql_master_log_file_name[0] != '\0') {
-			/* This database server is a MySQL replication slave */ 
-			trx_sys_update_mysql_binlog_offset(
+                if (trx->clear_replication_status) {
+                        /* Clear the replication status. */
+                        trx_sys_update_mysql_relay_offset(
+                            "", -1, "", -1, 
+                            TRX_SYS_MYSQL_RELAY_INFO, &mtr);
+                } else if (trx->mysql_relay_log_file_name[0] != '\0') {
+			/* This database server is a MySQL replication slave */
+			trx_sys_update_mysql_relay_offset(
+				trx->mysql_relay_log_file_name,
+				trx->mysql_relay_log_pos,
 				trx->mysql_master_log_file_name,
 				trx->mysql_master_log_pos,
-				TRX_SYS_MYSQL_MASTER_LOG_INFO, &mtr);
+				TRX_SYS_MYSQL_RELAY_INFO, &mtr);
 		}
-				
+
 		/* If we did not take the shortcut, the following call
 		commits the mini-transaction, making the whole transaction
 		committed in the file-based world at this log sequence number;
@@ -808,18 +826,21 @@
                         if (srv_unix_file_flush_method == SRV_UNIX_NOSYNC) {
                                /* Write the log but do not flush it to disk */
 
-                               log_write_up_to(lsn, LOG_WAIT_ONE_GROUP, FALSE);
+                               log_write_up_to(lsn, LOG_WAIT_ONE_GROUP, FALSE,
+                                               LOG_WRITE_FROM_COMMIT_ASYNC);
                         } else {
                                /* Write the log to the log files AND flush
                                them to disk */
 
-                               log_write_up_to(lsn, LOG_WAIT_ONE_GROUP, TRUE);
+                               log_write_up_to(lsn, LOG_WAIT_ONE_GROUP, TRUE,
+                                               LOG_WRITE_FROM_COMMIT_SYNC);
                         }
                 } else if (srv_flush_log_at_trx_commit == 2) {
 
                         /* Write the log but do not flush it to disk */
 
-                        log_write_up_to(lsn, LOG_WAIT_ONE_GROUP, FALSE);
+                        log_write_up_to(lsn, LOG_WAIT_ONE_GROUP, FALSE,
+                                        LOG_WRITE_FROM_COMMIT_ASYNC);
                 } else {
                         ut_error;
                 }
@@ -1528,18 +1549,21 @@
                 if (srv_unix_file_flush_method == SRV_UNIX_NOSYNC) {
                         /* Write the log but do not flush it to disk */
 
-                        log_write_up_to(lsn, LOG_WAIT_ONE_GROUP, FALSE);
+                        log_write_up_to(lsn, LOG_WAIT_ONE_GROUP, FALSE,
+                                        LOG_WRITE_FROM_COMMIT_ASYNC);
                 } else {
                         /* Write the log to the log files AND flush them to
                         disk */
 
-                        log_write_up_to(lsn, LOG_WAIT_ONE_GROUP, TRUE);
+                        log_write_up_to(lsn, LOG_WAIT_ONE_GROUP, TRUE,
+                                        LOG_WRITE_FROM_COMMIT_SYNC);
                 }
         } else if (srv_flush_log_at_trx_commit == 2) {
 
                 /* Write the log but do not flush it to disk */
 
-                log_write_up_to(lsn, LOG_WAIT_ONE_GROUP, FALSE);
+                log_write_up_to(lsn, LOG_WAIT_ONE_GROUP, FALSE,
+                                LOG_WRITE_FROM_COMMIT_ASYNC);
         } else {
                 ut_error;
         }
diff -ruN base/libmysqld/Makefile.am mysql40gpl/libmysqld/Makefile.am
--- base/libmysqld/Makefile.am	2005-09-02 15:38:01.000000000 -0700
+++ mysql40gpl/libmysqld/Makefile.am	2007-04-21 13:19:24.000000000 -0700
@@ -53,7 +53,8 @@
 	sql_rename.cc sql_repl.cc sql_select.cc sql_do.cc sql_show.cc \
 	sql_string.cc sql_table.cc sql_test.cc sql_udf.cc \
 	sql_update.cc sql_yacc.cc table.cc thr_malloc.cc time.cc \
-	unireg.cc uniques.cc stacktrace.c sql_union.cc hash_filo.cc
+	unireg.cc uniques.cc stacktrace.c sql_union.cc hash_filo.cc \
+	hash_64.cc repl_semi_sync.cc repl_mule.cc
 
 EXTRA_DIST = lib_vio.c
 
diff -ruN base/libmysqld/Makefile.in mysql40gpl/libmysqld/Makefile.in
--- base/libmysqld/Makefile.in	2005-09-02 15:38:32.000000000 -0700
+++ mysql40gpl/libmysqld/Makefile.in	2007-04-21 13:22:37.000000000 -0700
@@ -108,7 +108,8 @@
 	sql_update.$(OBJEXT) sql_yacc.$(OBJEXT) table.$(OBJEXT) \
 	thr_malloc.$(OBJEXT) time.$(OBJEXT) unireg.$(OBJEXT) \
 	uniques.$(OBJEXT) stacktrace.$(OBJEXT) sql_union.$(OBJEXT) \
-	hash_filo.$(OBJEXT)
+	hash_filo.$(OBJEXT) \
+	hash_64.$(OBJEXT) repl_mule.$(OBJEXT) repl_semi_sync.$(OBJEXT)
 am_libmysqld_int_a_OBJECTS = $(am__objects_1) $(am__objects_2) \
 	$(am__objects_3)
 libmysqld_int_a_OBJECTS = $(am_libmysqld_int_a_OBJECTS)
@@ -159,7 +160,10 @@
 @AMDEP_TRUE@	./$(DEPDIR)/sql_update.Po ./$(DEPDIR)/sql_yacc.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/stacktrace.Po ./$(DEPDIR)/table.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/thr_malloc.Po ./$(DEPDIR)/time.Po \
-@AMDEP_TRUE@	./$(DEPDIR)/uniques.Po ./$(DEPDIR)/unireg.Po
+@AMDEP_TRUE@	./$(DEPDIR)/uniques.Po ./$(DEPDIR)/unireg.Po \
+@AMDEP_TRUE@	./$(DEPDIR)/hash_64.Po \
+@AMDEP_TRUE@	./$(DEPDIR)/repl_semi_sync.Po \
+@AMDEP_TRUE@	./$(DEPDIR)/repl_mule.Po 
 COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
 	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
 LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) \
@@ -442,7 +446,8 @@
 	sql_rename.cc sql_repl.cc sql_select.cc sql_do.cc sql_show.cc \
 	sql_string.cc sql_table.cc sql_test.cc sql_udf.cc \
 	sql_update.cc sql_yacc.cc table.cc thr_malloc.cc time.cc \
-	unireg.cc uniques.cc stacktrace.c sql_union.cc hash_filo.cc
+	unireg.cc uniques.cc stacktrace.c sql_union.cc hash_filo.cc \
+	repl_mule.cc repl_semi_sync.cc hash_64.cc
 
 EXTRA_DIST = lib_vio.c
 libmysqld_int_a_SOURCES = $(libmysqld_sources) $(libmysqlsources) $(sqlsources)
@@ -614,6 +619,9 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/time.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/uniques.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/unireg.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hash_64.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/repl_semi_sync.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/repl_mule.Po@am__quote@
 
 .c.o:
 @am__fastdepCC_TRUE@	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
diff -ruN base/mysql-test/mysql-test-run.sh mysql40gpl/mysql-test/mysql-test-run.sh
--- base/mysql-test/mysql-test-run.sh	2005-09-02 15:38:00.000000000 -0700
+++ mysql40gpl/mysql-test/mysql-test-run.sh	2007-04-21 09:56:49.000000000 -0700
@@ -180,6 +180,7 @@
 SYST=0
 REALT=0
 FAST_START=""
+SLAVE_INNODB=0
 MYSQL_TMP_DIR=$MYSQL_TEST_DIR/var/tmp
 SLAVE_LOAD_TMPDIR=../../var/tmp #needs to be same length to test logging
 RES_SPACE="      "
@@ -388,6 +389,9 @@
     --fast)
       FAST_START=1
       ;;
+    --slave-innodb)
+      SLAVE_INNODB=1
+      ;;
     -- )  shift; break ;;
     --* ) $ECHO "Unrecognized option: $1"; exit 1 ;;
     * ) break ;;
@@ -977,6 +981,11 @@
    slave_datadir="$SLAVE_MYDDIR/../$slave_ident-data/"
    slave_pid="$MYRUN_DIR/mysqld-$slave_ident.pid"
    slave_sock="$SLAVE_MYSOCK-$1"
+
+   slave_master_info_file_x="$slave_master_info_file-$1"
+   if [ -f $slave_master_info_file_x ] ; then
+     SLAVE_MASTER_INFO=`$CAT $slave_master_info_file_x`
+   fi
   else
    slave_server_id=2
    slave_rpl_rank=2
@@ -986,7 +995,7 @@
    slave_datadir=$SLAVE_MYDDIR
    slave_pid=$SLAVE_MYPID
    slave_sock="$SLAVE_MYSOCK"
- fi
+  fi
   # Remove stale binary logs and old master.info files
   $RM -f $MYSQL_TEST_DIR/var/log/$slave_ident-*bin.*
   $RM -f $slave_datadir/master.info $slave_datadir/relay-log.info
@@ -1004,16 +1013,35 @@
           --master-password="" \
           --master-port=$MASTER_MYPORT \
           --server-id=$slave_server_id --rpl-recovery-rank=$slave_rpl_rank"
- else
-   master_info=$SLAVE_MASTER_INFO
- fi
+  else
+    master_info=$SLAVE_MASTER_INFO
+  fi
 
   $RM -f $slave_datadir/log.*
-  slave_args="--no-defaults $master_info \
-  	    --exit-info=256 \
+
+  slave_args="--no-defaults"
+
+  # rpl_mirror_binlog.test disables update binlog inside replicas.
+  SLAVE_NO_BINLOG=`$EXPR \( \( $tname : rpl_mirror_binlog \) != 0 \) \| \( \( $tname : rpl_mirror_binlog_stop \) != 0 \)`
+
+  if [ x${SLAVE_NO_BINLOG} = x0 ] ; then
+    slave_args="$slave_args \
           --log-bin=$MYSQL_TEST_DIR/var/log/$slave_ident-bin \
+          --log-slave-updates"
+  fi
+
+  if [ x${SLAVE_INNODB} = x0 ] ; then
+    slave_args="$slave_args \
+          --skip-innodb"
+  else
+    slave_args="$slave_args \
+          --default-table-type=innodb \
+          --transaction-isolation=READ-COMMITTED"
+  fi
+
+  slave_args="$slave_args $master_info \
+  	  --exit-info=256 \
           --relay-log=$MYSQL_TEST_DIR/var/log/$slave_ident-relay-bin \
-          --log-slave-updates \
           --log=$slave_log \
           --basedir=$MY_BASEDIR \
           --datadir=$slave_datadir \
@@ -1025,7 +1053,7 @@
           --core --init-rpl-role=slave \
           --tmpdir=$MYSQL_TMP_DIR \
           --language=$LANGUAGE \
-          --skip-innodb --skip-slave-start \
+          --skip-slave-start \
           --slave-load-tmpdir=$SLAVE_LOAD_TMPDIR \
           --report-host=127.0.0.1 --report-user=root \
           --report-port=$slave_port \
@@ -1033,6 +1061,7 @@
           -O slave_net_timeout=10 \
            $SMALL_SERVER \
            $EXTRA_SLAVE_OPT $EXTRA_SLAVE_MYSQLD_OPT"
+
   CUR_MYERR=$slave_err
   CUR_MYSOCK=$slave_sock
 
@@ -1176,6 +1205,8 @@
 mysql_loadstd () {
 
     # cp $STD_DATA/*.frm $STD_DATA/*.MRG $MASTER_MYDDIR/test
+    # Data files must be readable by all or in the data directory.
+    chmod a+r $STD_DATA/*.dat
     return 1
 }
 
@@ -1192,7 +1223,7 @@
  echo $tname > $CURRENT_TEST
  SKIP_SLAVE=`$EXPR \( $tname : rpl \) = 0`
  if [ $USE_MANAGER = 1 ] ; then
-  many_slaves=`$EXPR \( \( $tname : rpl_failsafe \) != 0 \) \| \( \( $tname : rpl_chain_temp_table \) != 0 \)`
+   many_slaves=`$EXPR \( \( $tname : rpl_failsafe \) != 0 \) \| \( \( $tname : rpl_chain_temp_table \) != 0 \) \| \( \( $tname : rpl_mirror_binlog \) != 0 \) \| \( \( $tname : rpl_mirror_binlog_stop \) != 0 \)`
  fi
 
  if [ -n "$SKIP_TEST" ] ; then
@@ -1301,6 +1332,7 @@
  if [ -f $tf ] ; then
     $RM -f r/$tname.*reject
     mysql_test_args="-R r/$result_file.result $EXTRA_MYSQL_TEST_OPT"
+
     if [ -z "$DO_CLIENT_GDB" ] ; then
       `$MYSQL_TEST  $mysql_test_args < $tf 2> $TIMEFILE`;
     else
diff -ruN base/mysql-test/r/checksum1.result mysql40gpl/mysql-test/r/checksum1.result
--- base/mysql-test/r/checksum1.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/r/checksum1.result	2007-04-21 09:56:50.000000000 -0700
@@ -0,0 +1,105 @@
+drop table if exists t1;
+create table t1(i int, i1 int, c1 char(1), c2 char(2), f float, d double, vc varchar(10));
+insert into t1 values (1, 3, '1', '1', 1, 1, '1');
+insert into t1 values (2, 2, '2', '2', 2, 2, '2');
+insert into t1 values (3, 1, '3', '22', 3, 3, '22');
+select hash(i) from t1 order by i;
+hash(i)
+12125821063809463359
+7897639797670528794
+3669458531531594229
+select hash(c1) from t1 order by i;
+hash(c1)
+8691557201380153181
+8691557201380153182
+8691557201380153183
+select hash(c2) from t1 order by i;
+hash(c2)
+8691557201380153181
+8691557201380153182
+3899139583912260744
+select hash(f) from t1 order by i;
+hash(f)
+16354266212739168523
+16354002329948397860
+16353993533855372172
+select hash(d) from t1 order by i;
+hash(d)
+16354266212739168523
+16354002329948397860
+16353993533855372172
+select hash(vc) from t1 order by i;
+hash(vc)
+8691557201380153181
+8691557201380153182
+3899139583912260744
+select hash(i, c1, c2, f, d, vc) from t1 order by i;
+hash(i, c1, c2, f, d, vc)
+8260664520004307694
+4271355524914459424
+7874794455587051588
+select '1: not match1', unordered_checksum(i, c1, c2, f, d, vc) from t1;
+1: not match1	unordered_checksum(i, c1, c2, f, d, vc)
+1: not match1	11569713724669558126
+select '1: not match2', unordered_checksum(i1, c1, c2, f, d, vc) from t1;
+1: not match2	unordered_checksum(i1, c1, c2, f, d, vc)
+1: not match2	15606142839496559570
+select '2: not match1', ordered_checksum(i, c1, c2, f, d, vc) from t1;
+2: not match1	ordered_checksum(i, c1, c2, f, d, vc)
+2: not match1	4192927915844138010
+select '2: not match2', ordered_checksum(i1, c1, c2, f, d, vc) from t1;
+2: not match2	ordered_checksum(i1, c1, c2, f, d, vc)
+2: not match2	4145976810685705126
+select '3: match1', unordered_checksum(i) from t1;
+3: match1	unordered_checksum(i)
+3: match1	8292030422173955636
+select '3: match2', unordered_checksum(i1) from t1;
+3: match2	unordered_checksum(i1)
+3: match2	8292030422173955636
+select '4: not match1', ordered_checksum(i) from t1;
+4: not match1	ordered_checksum(i)
+4: not match1	6859764282969517028
+select '4: not match2', ordered_checksum(i1) from t1;
+4: not match2	ordered_checksum(i1)
+4: not match2	6074163440810017764
+select '5: not match1', unordered_checksum(i, c1, c2, f, d, vc) from t1 group by i1 order by i;
+5: not match1	unordered_checksum(i, c1, c2, f, d, vc)
+5: not match1	17762730987931112970
+5: not match1	13791363591642755012
+5: not match1	16819467897398740128
+select '5: not match2', unordered_checksum(i1, c1, c2, f, d, vc) from t1 group by i order by i;
+5: not match2	unordered_checksum(i1, c1, c2, f, d, vc)
+5: not match2	9841470782680298596
+5: not match2	13791363591642755012
+5: not match2	17249632850956161138
+select '6: not match1', unordered_checksum(i) from t1 group by i1 order by i;
+6: not match1	unordered_checksum(i)
+6: not match1	3199157890669439195
+6: not match1	16841262108792413182
+6: not match1	13172653091998467345
+select '6: not match2', unordered_checksum(i1) from t1 group by i order by i;
+6: not match2	unordered_checksum(i1)
+6: not match2	13172653091998467345
+6: not match2	16841262108792413182
+6: not match2	3199157890669439195
+select '7: match1', ordered_checksum(i, c1, c2, f, d, vc) from t1 group by i1 order by i;
+7: match1	ordered_checksum(i, c1, c2, f, d, vc)
+7: match1	8260664520004307694
+7: match1	4271355524914459424
+7: match1	7874794455587051588
+select '7: match2', ordered_checksum(i1, c1, c2, f, d, vc) from t1 group by i order by i;
+7: match2	ordered_checksum(i1, c1, c2, f, d, vc)
+7: match2	914739442277279872
+7: match2	4271355524914459424
+7: match2	7728496414611999894
+select '8: match1', ordered_checksum(i) from t1 group by i1 order by i;
+8: match1	ordered_checksum(i)
+8: match1	12125821063809463359
+8: match1	7897639797670528794
+8: match1	3669458531531594229
+select '8: match2', ordered_checksum(i1) from t1 group by i order by i;
+8: match2	ordered_checksum(i1)
+8: match2	3669458531531594229
+8: match2	7897639797670528794
+8: match2	12125821063809463359
+drop table t1;
diff -ruN base/mysql-test/r/checksum2.result mysql40gpl/mysql-test/r/checksum2.result
--- base/mysql-test/r/checksum2.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/r/checksum2.result	2007-04-21 09:56:50.000000000 -0700
@@ -0,0 +1,55 @@
+drop table if exists t2;
+create table t2(dt datetime, da date, ti time, ts timestamp, y year);
+insert into t2 values ('2006-01-01 10:00:00', '2006-01-01', '10:00:00', '20060101100000', 2006);
+insert into t2 values ('2007-01-01 11:00:00', '2007-01-01', '11:00:00', '20060101110000', 2007);
+select hash(dt) from t2;
+hash(dt)
+1124811441346647439
+6624559493394817197
+select hash(da) from t2;
+hash(da)
+17033052262703112724
+32887120971591149
+select hash(ti) from t2;
+hash(ti)
+6465380211724811991
+2265808870231976098
+select hash(ts) from t2;
+hash(ts)
+16880677880901653011
+4067825358518885486
+select hash(y) from t2;
+hash(y)
+12909222668951978241
+1610365786966397462
+select unordered_checksum(dt) from t2;
+unordered_checksum(dt)
+15010824031073790406
+select unordered_checksum(da) from t2;
+unordered_checksum(da)
+7509606444104536861
+select unordered_checksum(ti) from t2;
+unordered_checksum(ti)
+14045112056351017617
+select unordered_checksum(ts) from t2;
+unordered_checksum(ts)
+6203081360941601433
+select unordered_checksum(y) from t2;
+unordered_checksum(y)
+2404303847799132147
+select ordered_checksum(dt) from t2;
+ordered_checksum(dt)
+7656421153328024636
+select ordered_checksum(da) from t2;
+ordered_checksum(da)
+10643334536526376669
+select ordered_checksum(ti) from t2;
+ordered_checksum(ti)
+17104658564235541997
+select ordered_checksum(ts) from t2;
+ordered_checksum(ts)
+12430433059171515385
+select ordered_checksum(y) from t2;
+ordered_checksum(y)
+6515068423295669075
+drop table t2;
diff -ruN base/mysql-test/r/checksum3.result mysql40gpl/mysql-test/r/checksum3.result
--- base/mysql-test/r/checksum3.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/r/checksum3.result	2007-04-21 09:56:50.000000000 -0700
@@ -0,0 +1,45 @@
+drop table if exists t3;
+create table t3(bi binary(20), vb varbinary(20), bl blob, t text);
+insert into t3 values ('abc', 'def', 'ghi', 'jkl');
+insert into t3 values ('abc1', 'def1', 'ghi1', 'jkl1');
+select hash(bi) from t3;
+hash(bi)
+12869841847494858668
+16176128574998051189
+select hash(vb) from t3;
+hash(vb)
+12865066668494484353
+13061924616633172994
+select hash(bl) from t3;
+hash(bl)
+12867869323634226642
+14876206763629245415
+select hash(t) from t3;
+hash(t)
+12863085348540826711
+11754429369170763748
+select unordered_checksum(bi) from t3;
+unordered_checksum(bi)
+15476014181871530557
+select unordered_checksum(vb) from t3;
+unordered_checksum(vb)
+9506678692596656999
+select unordered_checksum(bl) from t3;
+unordered_checksum(bl)
+17925204920421440209
+select unordered_checksum(t) from t3;
+unordered_checksum(t)
+10772865288369850199
+select ordered_checksum(bi) from t3;
+ordered_checksum(bi)
+1086334759476996029
+select ordered_checksum(vb) from t3;
+ordered_checksum(vb)
+9124841169666920627
+select ordered_checksum(bl) from t3;
+ordered_checksum(bl)
+12967862498748221529
+select ordered_checksum(t) from t3;
+ordered_checksum(t)
+18134691941644832235
+drop table t3;
diff -ruN base/mysql-test/r/checksum4.result mysql40gpl/mysql-test/r/checksum4.result
--- base/mysql-test/r/checksum4.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/r/checksum4.result	2007-04-21 09:56:50.000000000 -0700
@@ -0,0 +1,25 @@
+drop table if exists t4;
+create table t4(e enum('1', '2'), s set('1', '2', '3'));
+insert into t4 values('1', '1,2');
+insert into t4 values('2', '2,3');
+select hash(e) from t4;
+hash(e)
+8691557201380153181
+8691557201380153182
+select hash(s) from t4;
+hash(s)
+12946304085128770083
+12947181495407893201
+select unordered_checksum(e) from t4;
+unordered_checksum(e)
+9521211207457086695
+select unordered_checksum(s) from t4;
+unordered_checksum(s)
+9522018248992175126
+select ordered_checksum(e) from t4;
+ordered_checksum(e)
+3899138484400632629
+select ordered_checksum(s) from t4;
+ordered_checksum(s)
+13528951836076377140
+drop table t4;
diff -ruN base/mysql-test/r/distinguish_privilege.result mysql40gpl/mysql-test/r/distinguish_privilege.result
--- base/mysql-test/r/distinguish_privilege.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/r/distinguish_privilege.result	2007-04-21 09:56:50.000000000 -0700
@@ -0,0 +1,30 @@
+drop database if exists mysqltest;
+create database mysqltest;
+create table mysqltest.t1 (a int) engine = InnoDB;
+insert into mysqltest.t1 values (3);
+create table mysqltest.t2 (a int) engine = InnoDB;
+insert into mysqltest.t2 values (3);
+delete from mysql.user where user like 'mysqltest\_%';
+delete from mysql.db where user like 'mysqltest\_%';
+delete from mysql.tables_priv where user like 'mysqltest\_%';
+delete from mysql.columns_priv where user like 'mysqltest\_%';
+flush privileges;
+grant all on mysqltest.t1 to mysqltest_1@localhost;
+flush user_resources;
+select * from t1;
+a
+3
+select * from t2;
+SELECT command denied to user: 'mysqltest_1@localhost' for table 't2'
+desc t2;
+SELECT command denied to user: 'mysqltest_1@localhost' for table 't2'
+select * from t3;
+Table 'mysqltest.t3' doesn't exist
+desc t3;
+Table 'mysqltest.t3' doesn't exist
+delete from mysql.user where user like 'mysqltest\_%';
+delete from mysql.db where user like 'mysqltest\_%';
+delete from mysql.tables_priv where user like 'mysqltest\_%';
+delete from mysql.columns_priv where user like 'mysqltest\_%';
+flush privileges;
+drop database mysqltest;
diff -ruN base/mysql-test/r/flush.result mysql40gpl/mysql-test/r/flush.result
--- base/mysql-test/r/flush.result	2005-09-02 15:50:38.000000000 -0700
+++ mysql40gpl/mysql-test/r/flush.result	2007-04-21 09:56:50.000000000 -0700
@@ -28,3 +28,9 @@
 n
 345
 drop table t1;
+flush table_statistics;
+show table_statistics;
+Table	Rows_read	Rows_changed	Rows_changed_x_#indexes
+flush index_statistics;
+show index_statistics;
+Index	Rows_read
diff -ruN base/mysql-test/r/ieee754_to_string.result mysql40gpl/mysql-test/r/ieee754_to_string.result
--- base/mysql-test/r/ieee754_to_string.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/r/ieee754_to_string.result	2007-04-21 09:56:51.000000000 -0700
@@ -0,0 +1,19 @@
+drop table if exists t1,t2;
+CREATE TABLE t1 (d double, i int);
+CREATE TABLE t2 (v varchar(30), i int);
+INSERT INTO t1 VALUES (1.7976931348623157e+308, 0);
+INSERT INTO t1 VALUES (NULL, 0);
+INSERT INTO t1 VALUES ('inf', 0);
+INSERT INTO t1 VALUES ('nan', 0);
+INSERT INTO t1 VALUES (-0e0, 0);
+INSERT INTO t2 SELECT IEEE754_TO_STRING(d), i from t1;
+INSERT INTO t1 SELECT * from t2;
+SELECT COUNT(*), d from t1 group by d order by d;
+COUNT(*)	d
+2	NULL
+2	-0
+2	1.79769313486232e+308
+2	inf
+2	nan
+DROP TABLE t1;
+DROP TABLE t2;
diff -ruN base/mysql-test/r/order_by_fp.result mysql40gpl/mysql-test/r/order_by_fp.result
--- base/mysql-test/r/order_by_fp.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/r/order_by_fp.result	2007-04-21 09:56:52.000000000 -0700
@@ -0,0 +1,12 @@
+drop table if exists t1;
+CREATE TABLE t1 (d double);
+INSERT INTO t1 VALUES (-0E0), (+0E0), (1E308), (-1E308), (1), (-1);
+SELECT 2 * d AS e FROM t1 ORDER BY e;
+e
+-inf
+-2
+-0
+0
+2
+inf
+DROP TABLE t1;
diff -ruN base/mysql-test/r/rpl000015.result mysql40gpl/mysql-test/r/rpl000015.result
--- base/mysql-test/r/rpl000015.result	2005-09-02 15:50:38.000000000 -0700
+++ mysql40gpl/mysql-test/r/rpl000015.result	2007-04-21 09:56:52.000000000 -0700
@@ -4,20 +4,20 @@
 master-bin.001	79		
 reset slave;
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
 change master to master_host='127.0.0.1';
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	test	MASTER_PORT	7		4	slave-relay-bin.001	4		No	No			0		0	0	4
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	test	MASTER_PORT	7		4	slave-relay-bin.001	4		No	No			0		0	0	4	None		0
 change master to master_host='127.0.0.1',master_user='root',
 master_password='',master_port=MASTER_PORT;
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	7		4	slave-relay-bin.001	4		No	No			0		0	0	4
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	7		4	slave-relay-bin.001	4		No	No			0		0	0	4	None		0
 slave start;
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	7	master-bin.001	79	slave-relay-bin.001	120	master-bin.001	Yes	Yes			0		0	79	120
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	7	master-bin.001	79	slave-relay-bin.001	120	master-bin.001	Yes	Yes			0		0	79	120	None		0
 drop table if exists t1;
 create table t1 (n int);
 insert into t1 values (10),(45),(90);
diff -ruN base/mysql-test/r/rpl_change_master.result mysql40gpl/mysql-test/r/rpl_change_master.result
--- base/mysql-test/r/rpl_change_master.result	2005-09-02 15:50:38.000000000 -0700
+++ mysql40gpl/mysql-test/r/rpl_change_master.result	2007-04-21 09:56:52.000000000 -0700
@@ -15,12 +15,12 @@
 n
 1
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_MYPORT	1	master-bin.001	273	slave-relay-bin.002	255	master-bin.001	No	No			0		0	214	314
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_MYPORT	1	master-bin.001	273	slave-relay-bin.002	255	master-bin.001	No	No			0		0	214	314	None		0
 change master to master_user='root';
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_MYPORT	1	master-bin.001	214	slave-relay-bin.001	4	master-bin.001	No	No			0		0	214	4
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_MYPORT	1	master-bin.001	214	slave-relay-bin.001	4	master-bin.001	No	No			0		0	214	4	None		0
 select release_lock("a");
 release_lock("a")
 1
diff -ruN base/mysql-test/r/rpl_empty_master_crash.result mysql40gpl/mysql-test/r/rpl_empty_master_crash.result
--- base/mysql-test/r/rpl_empty_master_crash.result	2005-09-02 15:50:38.000000000 -0700
+++ mysql40gpl/mysql-test/r/rpl_empty_master_crash.result	2007-04-21 09:56:52.000000000 -0700
@@ -6,7 +6,7 @@
 slave start;
 drop table if exists t1;
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
 load table t1 from master;
 Error connecting to master: Master is not configured
 load table t1 from master;
diff -ruN base/mysql-test/r/rpl_error_ignored_table.result mysql40gpl/mysql-test/r/rpl_error_ignored_table.result
--- base/mysql-test/r/rpl_error_ignored_table.result	2005-09-02 15:50:38.000000000 -0700
+++ mysql40gpl/mysql-test/r/rpl_error_ignored_table.result	2007-04-21 09:56:52.000000000 -0700
@@ -8,8 +8,8 @@
 insert into t1 values (1),(1);
 Duplicate entry '1' for key 1
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	1	master-bin.001	213	slave-relay-bin.002	254	master-bin.001	Yes	Yes			0		0	213	254
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	213	slave-relay-bin.002	254	master-bin.001	Yes	Yes			0		0	213	254	None		0
 show tables like 't1';
 Tables_in_test (t1)
 drop table t1;
diff -ruN base/mysql-test/r/rpl_flush_log_loop.result mysql40gpl/mysql-test/r/rpl_flush_log_loop.result
--- base/mysql-test/r/rpl_flush_log_loop.result	2005-09-02 15:50:38.000000000 -0700
+++ mysql40gpl/mysql-test/r/rpl_flush_log_loop.result	2007-04-21 09:56:52.000000000 -0700
@@ -13,5 +13,5 @@
 slave start;
 flush logs;
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	SLAVE_PORT	60	slave-bin.001	79	relay-log.002	4	slave-bin.001	Yes	Yes			0		0	79	4
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	SLAVE_PORT	60	slave-bin.001	79	relay-log.002	4	slave-bin.001	Yes	Yes			0		0	79	4	None		0
diff -ruN base/mysql-test/r/rpl_innodb_clear_status.result mysql40gpl/mysql-test/r/rpl_innodb_clear_status.result
--- base/mysql-test/r/rpl_innodb_clear_status.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/r/rpl_innodb_clear_status.result	2007-04-21 09:56:52.000000000 -0700
@@ -0,0 +1,33 @@
+create database mysqltest;
+delete from mysql.user where user like 'mysqltest\_%';
+delete from mysql.db where user like 'mysqltest\_%';
+delete from mysql.tables_priv where user like 'mysqltest\_%';
+delete from mysql.columns_priv where user like 'mysqltest\_%';
+flush privileges;
+grant all on mysqltest.t1 to mysqltest_1@localhost;
+flush user_resources;
+show variables like "innodb_clear_replication_status";
+Variable_name	Value
+innodb_clear_replication_status	OFF
+SET innodb_clear_replication_status = 1;
+Access denied. You need the SUPER privilege for this operation
+drop table if exists t1;
+show variables like "innodb_clear_replication_status";
+Variable_name	Value
+innodb_clear_replication_status	OFF
+SET innodb_clear_replication_status = 1;
+show variables like "innodb_clear_replication_status";
+Variable_name	Value
+innodb_clear_replication_status	ON
+create table t1 (a int) Engine = InnoDB;
+SET innodb_clear_replication_status = 0;
+show variables like "innodb_clear_replication_status";
+Variable_name	Value
+innodb_clear_replication_status	OFF
+drop table t1;
+delete from mysql.user where user like 'mysqltest\_%';
+delete from mysql.db where user like 'mysqltest\_%';
+delete from mysql.tables_priv where user like 'mysqltest\_%';
+delete from mysql.columns_priv where user like 'mysqltest\_%';
+flush privileges;
+drop database mysqltest;
diff -ruN base/mysql-test/r/rpl_loaddata.result mysql40gpl/mysql-test/r/rpl_loaddata.result
--- base/mysql-test/r/rpl_loaddata.result	2005-09-02 15:50:38.000000000 -0700
+++ mysql40gpl/mysql-test/r/rpl_loaddata.result	2007-04-21 09:56:52.000000000 -0700
@@ -32,8 +32,8 @@
 set global sql_slave_skip_counter=1;
 start slave;
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	1	master-bin.001	1311	slave-relay-bin.002	1352	master-bin.001	Yes	Yes			0		0	1311	1352
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	1311	slave-relay-bin.002	1352	master-bin.001	Yes	Yes			0		0	1311	1352	None		0
 set sql_log_bin=0;
 delete from t1;
 set sql_log_bin=1;
@@ -42,8 +42,8 @@
 change master to master_user='test';
 change master to master_user='root';
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	1	master-bin.001	1419	slave-relay-bin.001	4	master-bin.001	No	No			0		0	1419	4
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	1419	slave-relay-bin.001	4	master-bin.001	No	No			0		0	1419	4	None		0
 set global sql_slave_skip_counter=1;
 start slave;
 set sql_log_bin=0;
@@ -53,8 +53,8 @@
 stop slave;
 reset slave;
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	1		4	slave-relay-bin.001	4		No	No			0		0	0	4
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1		4	slave-relay-bin.001	4		No	No			0		0	0	4	None		0
 reset master;
 create table t2 (day date,id int(9),category enum('a','b','c'),name varchar(60),
 unique(day));
diff -ruN base/mysql-test/r/rpl_log_pos.result mysql40gpl/mysql-test/r/rpl_log_pos.result
--- base/mysql-test/r/rpl_log_pos.result	2005-09-02 15:50:38.000000000 -0700
+++ mysql40gpl/mysql-test/r/rpl_log_pos.result	2007-04-21 09:56:52.000000000 -0700
@@ -8,26 +8,26 @@
 File	Position	Binlog_do_db	Binlog_ignore_db
 master-bin.001	79		
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	1	master-bin.001	79	slave-relay-bin.002	120	master-bin.001	Yes	Yes			0		0	79	120
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	79	slave-relay-bin.002	120	master-bin.001	Yes	Yes			0		0	79	120	None		0
 slave stop;
 change master to master_log_pos=73;
 slave start;
 slave stop;
 change master to master_log_pos=73;
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	1	master-bin.001	73	slave-relay-bin.001	4	master-bin.001	No	No			0		0	73	4
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	73	slave-relay-bin.001	4	master-bin.001	No	No			0		0	73	4	None		0
 slave start;
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	1	master-bin.001	73	slave-relay-bin.001	45	master-bin.001	No	Yes			0		0	73	45
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	73	slave-relay-bin.001	45	master-bin.001	No	Yes			0		0	73	45	None		0
 slave stop;
 change master to master_log_pos=173;
 slave start;
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	1	master-bin.001	173	slave-relay-bin.001	4	master-bin.001	No	Yes			0		0	173	4
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	173	slave-relay-bin.001	4	master-bin.001	No	Yes			0		0	173	4	None		0
 show master status;
 File	Position	Binlog_do_db	Binlog_ignore_db
 master-bin.001	79		
diff -ruN base/mysql-test/r/rpl_log.result mysql40gpl/mysql-test/r/rpl_log.result
--- base/mysql-test/r/rpl_log.result	2005-09-02 15:50:38.000000000 -0700
+++ mysql40gpl/mysql-test/r/rpl_log.result	2007-04-21 09:56:52.000000000 -0700
@@ -95,7 +95,7 @@
 slave-bin.002	62	Query	1	62	use `test`; insert into t1 values (1)
 slave-bin.002	122	Query	1	122	use `test`; drop table t1
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	1	master-bin.002	276	slave-relay-bin.003	211	master-bin.002	Yes	Yes			0		0	276	211
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.002	276	slave-relay-bin.003	211	master-bin.002	Yes	Yes			0		0	276	211	None		0
 show binlog events in 'slave-bin.005' from 4;
 Error when executing command SHOW BINLOG EVENTS: Could not find target log
diff -ruN base/mysql-test/r/rpl_make_master.result mysql40gpl/mysql-test/r/rpl_make_master.result
--- base/mysql-test/r/rpl_make_master.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/r/rpl_make_master.result	2007-04-21 09:56:52.000000000 -0700
@@ -0,0 +1,27 @@
+drop database if exists mysqltest;
+create database mysqltest;
+create table mysqltest.t1 (a int) engine = InnoDB;
+insert into mysqltest.t1 values (3);
+create table mysqltest.t2 (a int) engine = InnoDB;
+insert into mysqltest.t2 values (3);
+delete from mysql.user where user like 'mysqltest\_%';
+delete from mysql.db where user like 'mysqltest\_%';
+delete from mysql.tables_priv where user like 'mysqltest\_%';
+delete from mysql.columns_priv where user like 'mysqltest\_%';
+flush privileges;
+grant all on mysqltest.t1 to mysqltest_1@localhost;
+flush user_resources;
+select * from mysqltest.t1;
+a
+3
+make master revoke session with kill;
+make master grant session;
+select * from mysqltest.t1;
+a
+3
+delete from mysql.user where user like 'mysqltest\_%';
+delete from mysql.db where user like 'mysqltest\_%';
+delete from mysql.tables_priv where user like 'mysqltest\_%';
+delete from mysql.columns_priv where user like 'mysqltest\_%';
+flush privileges;
+drop database mysqltest;
diff -ruN base/mysql-test/r/rpl_max_relay_size.result mysql40gpl/mysql-test/r/rpl_max_relay_size.result
--- base/mysql-test/r/rpl_max_relay_size.result	2005-09-02 15:50:38.000000000 -0700
+++ mysql40gpl/mysql-test/r/rpl_max_relay_size.result	2007-04-21 09:56:53.000000000 -0700
@@ -15,8 +15,8 @@
 4096
 start slave;
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	1	master-bin.001	50477	slave-relay-bin.014	1221	master-bin.001	Yes	Yes			0		0	50477	1221
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	50477	slave-relay-bin.014	1221	master-bin.001	Yes	Yes			0		0	50477	1221	None		0
 stop slave;
 reset slave;
 set global max_relay_log_size=(5*4096);
@@ -25,8 +25,8 @@
 20480
 start slave;
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	1	master-bin.001	50477	slave-relay-bin.004	9457	master-bin.001	Yes	Yes			0		0	50477	#
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	50477	slave-relay-bin.004	9457	master-bin.001	Yes	Yes			0		0	50477	#	None		0
 stop slave;
 reset slave;
 set global max_relay_log_size=0;
@@ -35,26 +35,26 @@
 0
 start slave;
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	1	master-bin.001	50477	slave-relay-bin.008	1283	master-bin.001	Yes	Yes			0		0	50477	1283
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	50477	slave-relay-bin.008	1283	master-bin.001	Yes	Yes			0		0	50477	1283	None		0
 stop slave;
 reset slave;
 flush logs;
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	1		4	slave-relay-bin.001	4		No	No			0		0	0	4
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1		4	slave-relay-bin.001	4		No	No			0		0	0	4	None		0
 reset slave;
 start slave;
 flush logs;
 create table t1 (a int);
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	1	master-bin.001	50535	slave-relay-bin.009	62	master-bin.001	Yes	Yes			0		0	50535	62
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	50535	slave-relay-bin.009	62	master-bin.001	Yes	Yes			0		0	50535	62	None		0
 flush logs;
 drop table t1;
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	1	master-bin.001	50583	slave-relay-bin.010	52	master-bin.001	Yes	Yes			0		0	50583	52
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	50583	slave-relay-bin.010	52	master-bin.001	Yes	Yes			0		0	50583	52	None		0
 flush logs;
 show master status;
 File	Position	Binlog_do_db	Binlog_ignore_db
diff -ruN base/mysql-test/r/rpl_mirror_binlog.result mysql40gpl/mysql-test/r/rpl_mirror_binlog.result
--- base/mysql-test/r/rpl_mirror_binlog.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/r/rpl_mirror_binlog.result	2007-04-21 09:56:53.000000000 -0700
@@ -0,0 +1,522 @@
+slave stop;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+reset master;
+reset slave;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+slave start;
+drop table if exists t1;
+create table t1(n int) engine = InnoDB;
+insert into t1 values (300);
+insert into t1 values (299);
+insert into t1 values (298);
+insert into t1 values (297);
+insert into t1 values (296);
+insert into t1 values (295);
+insert into t1 values (294);
+insert into t1 values (293);
+insert into t1 values (292);
+insert into t1 values (291);
+insert into t1 values (290);
+insert into t1 values (289);
+insert into t1 values (288);
+insert into t1 values (287);
+insert into t1 values (286);
+insert into t1 values (285);
+insert into t1 values (284);
+insert into t1 values (283);
+insert into t1 values (282);
+insert into t1 values (281);
+insert into t1 values (280);
+insert into t1 values (279);
+insert into t1 values (278);
+insert into t1 values (277);
+insert into t1 values (276);
+insert into t1 values (275);
+insert into t1 values (274);
+insert into t1 values (273);
+insert into t1 values (272);
+insert into t1 values (271);
+insert into t1 values (270);
+insert into t1 values (269);
+insert into t1 values (268);
+insert into t1 values (267);
+insert into t1 values (266);
+insert into t1 values (265);
+insert into t1 values (264);
+insert into t1 values (263);
+insert into t1 values (262);
+insert into t1 values (261);
+insert into t1 values (260);
+insert into t1 values (259);
+insert into t1 values (258);
+insert into t1 values (257);
+insert into t1 values (256);
+insert into t1 values (255);
+insert into t1 values (254);
+insert into t1 values (253);
+insert into t1 values (252);
+insert into t1 values (251);
+insert into t1 values (250);
+insert into t1 values (249);
+insert into t1 values (248);
+insert into t1 values (247);
+insert into t1 values (246);
+insert into t1 values (245);
+insert into t1 values (244);
+insert into t1 values (243);
+insert into t1 values (242);
+insert into t1 values (241);
+insert into t1 values (240);
+insert into t1 values (239);
+insert into t1 values (238);
+insert into t1 values (237);
+insert into t1 values (236);
+insert into t1 values (235);
+insert into t1 values (234);
+insert into t1 values (233);
+insert into t1 values (232);
+insert into t1 values (231);
+insert into t1 values (230);
+insert into t1 values (229);
+insert into t1 values (228);
+insert into t1 values (227);
+insert into t1 values (226);
+insert into t1 values (225);
+insert into t1 values (224);
+insert into t1 values (223);
+insert into t1 values (222);
+insert into t1 values (221);
+insert into t1 values (220);
+insert into t1 values (219);
+insert into t1 values (218);
+insert into t1 values (217);
+insert into t1 values (216);
+insert into t1 values (215);
+insert into t1 values (214);
+insert into t1 values (213);
+insert into t1 values (212);
+insert into t1 values (211);
+insert into t1 values (210);
+insert into t1 values (209);
+insert into t1 values (208);
+insert into t1 values (207);
+insert into t1 values (206);
+insert into t1 values (205);
+insert into t1 values (204);
+insert into t1 values (203);
+insert into t1 values (202);
+insert into t1 values (201);
+insert into t1 values (200);
+insert into t1 values (199);
+insert into t1 values (198);
+insert into t1 values (197);
+insert into t1 values (196);
+insert into t1 values (195);
+insert into t1 values (194);
+insert into t1 values (193);
+insert into t1 values (192);
+insert into t1 values (191);
+insert into t1 values (190);
+insert into t1 values (189);
+insert into t1 values (188);
+insert into t1 values (187);
+insert into t1 values (186);
+insert into t1 values (185);
+insert into t1 values (184);
+insert into t1 values (183);
+insert into t1 values (182);
+insert into t1 values (181);
+insert into t1 values (180);
+insert into t1 values (179);
+insert into t1 values (178);
+insert into t1 values (177);
+insert into t1 values (176);
+insert into t1 values (175);
+insert into t1 values (174);
+insert into t1 values (173);
+insert into t1 values (172);
+insert into t1 values (171);
+insert into t1 values (170);
+insert into t1 values (169);
+insert into t1 values (168);
+insert into t1 values (167);
+insert into t1 values (166);
+insert into t1 values (165);
+insert into t1 values (164);
+insert into t1 values (163);
+insert into t1 values (162);
+insert into t1 values (161);
+insert into t1 values (160);
+insert into t1 values (159);
+insert into t1 values (158);
+insert into t1 values (157);
+insert into t1 values (156);
+insert into t1 values (155);
+insert into t1 values (154);
+insert into t1 values (153);
+insert into t1 values (152);
+insert into t1 values (151);
+insert into t1 values (150);
+insert into t1 values (149);
+insert into t1 values (148);
+insert into t1 values (147);
+insert into t1 values (146);
+insert into t1 values (145);
+insert into t1 values (144);
+insert into t1 values (143);
+insert into t1 values (142);
+insert into t1 values (141);
+insert into t1 values (140);
+insert into t1 values (139);
+insert into t1 values (138);
+insert into t1 values (137);
+insert into t1 values (136);
+insert into t1 values (135);
+insert into t1 values (134);
+insert into t1 values (133);
+insert into t1 values (132);
+insert into t1 values (131);
+insert into t1 values (130);
+insert into t1 values (129);
+insert into t1 values (128);
+insert into t1 values (127);
+insert into t1 values (126);
+insert into t1 values (125);
+insert into t1 values (124);
+insert into t1 values (123);
+insert into t1 values (122);
+insert into t1 values (121);
+insert into t1 values (120);
+insert into t1 values (119);
+insert into t1 values (118);
+insert into t1 values (117);
+insert into t1 values (116);
+insert into t1 values (115);
+insert into t1 values (114);
+insert into t1 values (113);
+insert into t1 values (112);
+insert into t1 values (111);
+insert into t1 values (110);
+insert into t1 values (109);
+insert into t1 values (108);
+insert into t1 values (107);
+insert into t1 values (106);
+insert into t1 values (105);
+insert into t1 values (104);
+insert into t1 values (103);
+insert into t1 values (102);
+insert into t1 values (101);
+insert into t1 values (100);
+insert into t1 values (99);
+insert into t1 values (98);
+insert into t1 values (97);
+insert into t1 values (96);
+insert into t1 values (95);
+insert into t1 values (94);
+insert into t1 values (93);
+insert into t1 values (92);
+insert into t1 values (91);
+insert into t1 values (90);
+insert into t1 values (89);
+insert into t1 values (88);
+insert into t1 values (87);
+insert into t1 values (86);
+insert into t1 values (85);
+insert into t1 values (84);
+insert into t1 values (83);
+insert into t1 values (82);
+insert into t1 values (81);
+insert into t1 values (80);
+insert into t1 values (79);
+insert into t1 values (78);
+insert into t1 values (77);
+insert into t1 values (76);
+insert into t1 values (75);
+insert into t1 values (74);
+insert into t1 values (73);
+insert into t1 values (72);
+insert into t1 values (71);
+insert into t1 values (70);
+insert into t1 values (69);
+insert into t1 values (68);
+insert into t1 values (67);
+insert into t1 values (66);
+insert into t1 values (65);
+insert into t1 values (64);
+insert into t1 values (63);
+insert into t1 values (62);
+insert into t1 values (61);
+insert into t1 values (60);
+insert into t1 values (59);
+insert into t1 values (58);
+insert into t1 values (57);
+insert into t1 values (56);
+insert into t1 values (55);
+insert into t1 values (54);
+insert into t1 values (53);
+insert into t1 values (52);
+insert into t1 values (51);
+insert into t1 values (50);
+insert into t1 values (49);
+insert into t1 values (48);
+insert into t1 values (47);
+insert into t1 values (46);
+insert into t1 values (45);
+insert into t1 values (44);
+insert into t1 values (43);
+insert into t1 values (42);
+insert into t1 values (41);
+insert into t1 values (40);
+insert into t1 values (39);
+insert into t1 values (38);
+insert into t1 values (37);
+insert into t1 values (36);
+insert into t1 values (35);
+insert into t1 values (34);
+insert into t1 values (33);
+insert into t1 values (32);
+insert into t1 values (31);
+insert into t1 values (30);
+insert into t1 values (29);
+insert into t1 values (28);
+insert into t1 values (27);
+insert into t1 values (26);
+insert into t1 values (25);
+insert into t1 values (24);
+insert into t1 values (23);
+insert into t1 values (22);
+insert into t1 values (21);
+insert into t1 values (20);
+insert into t1 values (19);
+insert into t1 values (18);
+insert into t1 values (17);
+insert into t1 values (16);
+insert into t1 values (15);
+insert into t1 values (14);
+insert into t1 values (13);
+insert into t1 values (12);
+insert into t1 values (11);
+insert into t1 values (10);
+insert into t1 values (9);
+insert into t1 values (8);
+insert into t1 values (7);
+insert into t1 values (6);
+insert into t1 values (5);
+insert into t1 values (4);
+insert into t1 values (3);
+insert into t1 values (2);
+insert into t1 values (1);
+show status like 'Rpl_mirror_binlog_clients';
+Variable_name	Value
+Rpl_mirror_binlog_clients	1
+select "The following are SLAVE.";
+The following are SLAVE.
+The following are SLAVE.
+show status like 'Rpl_mirror_binlog_status';
+Variable_name	Value
+Rpl_mirror_binlog_status	1
+show variables like 'log_bin';
+Variable_name	Value
+log_bin	OFF
+select count(distinct n) from t1;
+count(distinct n)
+300
+select min(n) from t1;
+min(n)
+1
+select max(n) from t1;
+max(n)
+300
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	9306	1	master-bin.005	2252	slave-relay-bin.002	19013	master-bin.005	Yes	Yes			0		0	2252	19013	None		0
+select "The following are SLAVE1.";
+The following are SLAVE1.
+The following are SLAVE1.
+start slave;
+select count(distinct n) from t1;
+count(distinct n)
+300
+select min(n) from t1;
+min(n)
+1
+select max(n) from t1;
+max(n)
+300
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	9307	1	master-bin.005	2252	slave1-relay-bin.001	#	master-bin.005	Yes	Yes			0		0	2252	#	None		0
+select "The following are SLAVE2.";
+The following are SLAVE2.
+The following are SLAVE2.
+start slave;
+stop slave;
+select count(distinct n) from t1;
+count(distinct n)
+300
+select min(n) from t1;
+min(n)
+1
+select max(n) from t1;
+max(n)
+300
+select "The following are SLAVE.";
+The following are SLAVE.
+The following are SLAVE.
+show master status;
+File	Position	Binlog_do_db	Binlog_ignore_db
+master-bin.005	2252		
+MAKE MASTER MASTER_LOG_FILE='master-bin',
+MASTER_SERVER_ID=2,
+INDEX='replication-log';
+Could not initialize master info structure, more error messages can be found in the MySQL error log
+stop slave;
+select "The following are SLAVE.";
+The following are SLAVE.
+The following are SLAVE.
+MAKE MASTER MASTER_LOG_FILE='master-bin',
+MASTER_SERVER_ID=2,
+INDEX='replication_log';
+Could not initialize master info structure, more error messages can be found in the MySQL error log
+MAKE MASTER REVOKE SESSION WITH KILL;
+MAKE MASTER MASTER_LOG_FILE='master-bin',
+MASTER_SERVER_ID=2,
+INDEX='replication_log'
+            WITH BINLOG;
+MAKE MASTER GRANT SESSION;
+show master status;
+File	Position	Binlog_do_db	Binlog_ignore_db
+master-bin.006	4		
+delete from t1 where n > 250;
+select count(distinct n) from t1;
+count(distinct n)
+250
+select "The following are SLAVE1.";
+The following are SLAVE1.
+The following are SLAVE1.
+show variables like 'server_id';
+Variable_name	Value
+server_id	3
+select count(distinct n) from t1;
+count(distinct n)
+250
+select min(n) from t1;
+min(n)
+1
+select max(n) from t1;
+max(n)
+250
+select "The following are SLAVE2.";
+The following are SLAVE2.
+The following are SLAVE2.
+show variables like 'server_id';
+Variable_name	Value
+server_id	4
+CHANGE MASTER TO
+MASTER_HOST='127.0.0.1',
+MASTER_USER='root',
+MASTER_PASSWORD='',
+MASTER_PORT=9307,
+MASTER_LOG_FILE='master-bin.006',
+MASTER_LOG_POS=4;
+start slave;
+select count(distinct n) from t1;
+count(distinct n)
+250
+select min(n) from t1;
+min(n)
+1
+select max(n) from t1;
+max(n)
+250
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	9307	1	master-bin.006	67	slave2-relay-bin.001	#	master-bin.006	Yes	Yes			0		0	67	#	None		0
+drop table t1;
+show status like 'Rpl_mirror_binlog_clients';
+Variable_name	Value
+Rpl_mirror_binlog_clients	2
+show status like 'Rpl_mirror_binlog_status';
+Variable_name	Value
+Rpl_mirror_binlog_status	0
+drop table t1;
+select "The following are SLAVE1.";
+The following are SLAVE1.
+The following are SLAVE1.
+master-bin.001
+master-bin.002
+master-bin.003
+master-bin.004
+master-bin.005
+master-bin.006
+master.info
+mysql
+relay-log.info
+replication_log.index
+test
+stop slave;
+reset slave no purge binlog;
+master-bin.001
+master-bin.002
+master-bin.003
+master-bin.004
+master-bin.005
+master-bin.006
+mysql
+replication_log.index
+test
+reset slave;
+mysql
+test
+select "The following are SLAVE.";
+The following are SLAVE.
+The following are SLAVE.
+show variables like 'log_bin';
+Variable_name	Value
+log_bin	ON
+show master logs;
+Log_name
+master-bin.001
+master-bin.002
+master-bin.003
+master-bin.004
+master-bin.005
+master-bin.006
+show master status;
+File	Position	Binlog_do_db	Binlog_ignore_db
+master-bin.006	115		
+select "The following are SLAVE2.";
+The following are SLAVE2.
+The following are SLAVE2.
+show master logs;
+Log_name
+master-bin.001
+master-bin.002
+master-bin.003
+master-bin.004
+master-bin.005
+master-bin.006
+purge master logs to 'master-bin.006';
+show master logs;
+Log_name
+master-bin.006
+reset master;
+Binlog closed, cannot RESET MASTER
+stop slave;
+master-bin.006
+master.info
+mysql
+relay-log.info
+replication_log.index
+test
+CHANGE MASTER TO
+MASTER_HOST='127.0.0.1',
+MASTER_USER='root',
+MASTER_PASSWORD='',
+MASTER_PORT=9307,
+MASTER_LOG_FILE='master-bin.001',
+MASTER_LOG_POS=4;
+master.info
+mysql
+relay-log.info
+test
diff -ruN base/mysql-test/r/rpl_mirror_binlog_stop.result mysql40gpl/mysql-test/r/rpl_mirror_binlog_stop.result
--- base/mysql-test/r/rpl_mirror_binlog_stop.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/r/rpl_mirror_binlog_stop.result	2007-04-21 09:56:53.000000000 -0700
@@ -0,0 +1,730 @@
+slave stop;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+reset master;
+reset slave;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+slave start;
+drop table if exists t1;
+create table t1(n int) engine = InnoDB;
+insert into t1 values (100);
+insert into t1 values (99);
+insert into t1 values (98);
+insert into t1 values (97);
+insert into t1 values (96);
+insert into t1 values (95);
+insert into t1 values (94);
+insert into t1 values (93);
+insert into t1 values (92);
+insert into t1 values (91);
+insert into t1 values (90);
+insert into t1 values (89);
+insert into t1 values (88);
+insert into t1 values (87);
+insert into t1 values (86);
+insert into t1 values (85);
+insert into t1 values (84);
+insert into t1 values (83);
+insert into t1 values (82);
+insert into t1 values (81);
+insert into t1 values (80);
+insert into t1 values (79);
+insert into t1 values (78);
+insert into t1 values (77);
+insert into t1 values (76);
+insert into t1 values (75);
+insert into t1 values (74);
+insert into t1 values (73);
+insert into t1 values (72);
+insert into t1 values (71);
+insert into t1 values (70);
+insert into t1 values (69);
+insert into t1 values (68);
+insert into t1 values (67);
+insert into t1 values (66);
+insert into t1 values (65);
+insert into t1 values (64);
+insert into t1 values (63);
+insert into t1 values (62);
+insert into t1 values (61);
+insert into t1 values (60);
+insert into t1 values (59);
+insert into t1 values (58);
+insert into t1 values (57);
+insert into t1 values (56);
+insert into t1 values (55);
+insert into t1 values (54);
+insert into t1 values (53);
+insert into t1 values (52);
+insert into t1 values (51);
+insert into t1 values (50);
+insert into t1 values (49);
+insert into t1 values (48);
+insert into t1 values (47);
+insert into t1 values (46);
+insert into t1 values (45);
+insert into t1 values (44);
+insert into t1 values (43);
+insert into t1 values (42);
+insert into t1 values (41);
+insert into t1 values (40);
+insert into t1 values (39);
+insert into t1 values (38);
+insert into t1 values (37);
+insert into t1 values (36);
+insert into t1 values (35);
+insert into t1 values (34);
+insert into t1 values (33);
+insert into t1 values (32);
+insert into t1 values (31);
+insert into t1 values (30);
+insert into t1 values (29);
+insert into t1 values (28);
+insert into t1 values (27);
+insert into t1 values (26);
+insert into t1 values (25);
+insert into t1 values (24);
+insert into t1 values (23);
+insert into t1 values (22);
+insert into t1 values (21);
+insert into t1 values (20);
+insert into t1 values (19);
+insert into t1 values (18);
+insert into t1 values (17);
+insert into t1 values (16);
+insert into t1 values (15);
+insert into t1 values (14);
+insert into t1 values (13);
+insert into t1 values (12);
+insert into t1 values (11);
+insert into t1 values (10);
+insert into t1 values (9);
+insert into t1 values (8);
+insert into t1 values (7);
+insert into t1 values (6);
+insert into t1 values (5);
+insert into t1 values (4);
+insert into t1 values (3);
+insert into t1 values (2);
+insert into t1 values (1);
+show status like 'Rpl_mirror_binlog_clients';
+Variable_name	Value
+Rpl_mirror_binlog_clients	1
+select "The following are SLAVE.";
+The following are SLAVE.
+The following are SLAVE.
+show status like 'Rpl_mirror_binlog_status';
+Variable_name	Value
+Rpl_mirror_binlog_status	1
+show status like 'Rpl_mirror_binlog_clients';
+Variable_name	Value
+Rpl_mirror_binlog_clients	0
+select count(distinct n) from t1;
+count(distinct n)
+100
+select min(n) from t1;
+min(n)
+1
+select max(n) from t1;
+max(n)
+100
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	9306	1	master-bin.002	2130	slave-relay-bin.002	6367	master-bin.002	Yes	Yes			0		0	2130	6367	None		0
+select "The following are SLAVE1.";
+The following are SLAVE1.
+The following are SLAVE1.
+start slave;
+select count(distinct n) from t1;
+count(distinct n)
+100
+select min(n) from t1;
+min(n)
+1
+select max(n) from t1;
+max(n)
+100
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	9307	1	master-bin.002	2130	slave1-relay-bin.001	#	master-bin.002	Yes	Yes			0		0	2130	#	None		0
+select "The following are SLAVE.";
+The following are SLAVE.
+The following are SLAVE.
+stop slave;
+set global rpl_mirror_binlog_enabled=0;
+start slave;
+insert into t1 values (200);
+insert into t1 values (199);
+insert into t1 values (198);
+insert into t1 values (197);
+insert into t1 values (196);
+insert into t1 values (195);
+insert into t1 values (194);
+insert into t1 values (193);
+insert into t1 values (192);
+insert into t1 values (191);
+insert into t1 values (190);
+insert into t1 values (189);
+insert into t1 values (188);
+insert into t1 values (187);
+insert into t1 values (186);
+insert into t1 values (185);
+insert into t1 values (184);
+insert into t1 values (183);
+insert into t1 values (182);
+insert into t1 values (181);
+insert into t1 values (180);
+insert into t1 values (179);
+insert into t1 values (178);
+insert into t1 values (177);
+insert into t1 values (176);
+insert into t1 values (175);
+insert into t1 values (174);
+insert into t1 values (173);
+insert into t1 values (172);
+insert into t1 values (171);
+insert into t1 values (170);
+insert into t1 values (169);
+insert into t1 values (168);
+insert into t1 values (167);
+insert into t1 values (166);
+insert into t1 values (165);
+insert into t1 values (164);
+insert into t1 values (163);
+insert into t1 values (162);
+insert into t1 values (161);
+insert into t1 values (160);
+insert into t1 values (159);
+insert into t1 values (158);
+insert into t1 values (157);
+insert into t1 values (156);
+insert into t1 values (155);
+insert into t1 values (154);
+insert into t1 values (153);
+insert into t1 values (152);
+insert into t1 values (151);
+insert into t1 values (150);
+insert into t1 values (149);
+insert into t1 values (148);
+insert into t1 values (147);
+insert into t1 values (146);
+insert into t1 values (145);
+insert into t1 values (144);
+insert into t1 values (143);
+insert into t1 values (142);
+insert into t1 values (141);
+insert into t1 values (140);
+insert into t1 values (139);
+insert into t1 values (138);
+insert into t1 values (137);
+insert into t1 values (136);
+insert into t1 values (135);
+insert into t1 values (134);
+insert into t1 values (133);
+insert into t1 values (132);
+insert into t1 values (131);
+insert into t1 values (130);
+insert into t1 values (129);
+insert into t1 values (128);
+insert into t1 values (127);
+insert into t1 values (126);
+insert into t1 values (125);
+insert into t1 values (124);
+insert into t1 values (123);
+insert into t1 values (122);
+insert into t1 values (121);
+insert into t1 values (120);
+insert into t1 values (119);
+insert into t1 values (118);
+insert into t1 values (117);
+insert into t1 values (116);
+insert into t1 values (115);
+insert into t1 values (114);
+insert into t1 values (113);
+insert into t1 values (112);
+insert into t1 values (111);
+insert into t1 values (110);
+insert into t1 values (109);
+insert into t1 values (108);
+insert into t1 values (107);
+insert into t1 values (106);
+insert into t1 values (105);
+insert into t1 values (104);
+insert into t1 values (103);
+insert into t1 values (102);
+insert into t1 values (101);
+insert into t1 values (100);
+insert into t1 values (99);
+insert into t1 values (98);
+insert into t1 values (97);
+insert into t1 values (96);
+insert into t1 values (95);
+insert into t1 values (94);
+insert into t1 values (93);
+insert into t1 values (92);
+insert into t1 values (91);
+insert into t1 values (90);
+insert into t1 values (89);
+insert into t1 values (88);
+insert into t1 values (87);
+insert into t1 values (86);
+insert into t1 values (85);
+insert into t1 values (84);
+insert into t1 values (83);
+insert into t1 values (82);
+insert into t1 values (81);
+insert into t1 values (80);
+insert into t1 values (79);
+insert into t1 values (78);
+insert into t1 values (77);
+insert into t1 values (76);
+insert into t1 values (75);
+insert into t1 values (74);
+insert into t1 values (73);
+insert into t1 values (72);
+insert into t1 values (71);
+insert into t1 values (70);
+insert into t1 values (69);
+insert into t1 values (68);
+insert into t1 values (67);
+insert into t1 values (66);
+insert into t1 values (65);
+insert into t1 values (64);
+insert into t1 values (63);
+insert into t1 values (62);
+insert into t1 values (61);
+insert into t1 values (60);
+insert into t1 values (59);
+insert into t1 values (58);
+insert into t1 values (57);
+insert into t1 values (56);
+insert into t1 values (55);
+insert into t1 values (54);
+insert into t1 values (53);
+insert into t1 values (52);
+insert into t1 values (51);
+insert into t1 values (50);
+insert into t1 values (49);
+insert into t1 values (48);
+insert into t1 values (47);
+insert into t1 values (46);
+insert into t1 values (45);
+insert into t1 values (44);
+insert into t1 values (43);
+insert into t1 values (42);
+insert into t1 values (41);
+insert into t1 values (40);
+insert into t1 values (39);
+insert into t1 values (38);
+insert into t1 values (37);
+insert into t1 values (36);
+insert into t1 values (35);
+insert into t1 values (34);
+insert into t1 values (33);
+insert into t1 values (32);
+insert into t1 values (31);
+insert into t1 values (30);
+insert into t1 values (29);
+insert into t1 values (28);
+insert into t1 values (27);
+insert into t1 values (26);
+insert into t1 values (25);
+insert into t1 values (24);
+insert into t1 values (23);
+insert into t1 values (22);
+insert into t1 values (21);
+insert into t1 values (20);
+insert into t1 values (19);
+insert into t1 values (18);
+insert into t1 values (17);
+insert into t1 values (16);
+insert into t1 values (15);
+insert into t1 values (14);
+insert into t1 values (13);
+insert into t1 values (12);
+insert into t1 values (11);
+insert into t1 values (10);
+insert into t1 values (9);
+insert into t1 values (8);
+insert into t1 values (7);
+insert into t1 values (6);
+insert into t1 values (5);
+insert into t1 values (4);
+insert into t1 values (3);
+insert into t1 values (2);
+insert into t1 values (1);
+select "The following are SLAVE.";
+The following are SLAVE.
+The following are SLAVE.
+show status like 'Rpl_mirror_binlog_status';
+Variable_name	Value
+Rpl_mirror_binlog_status	0
+show status like 'Rpl_mirror_binlog_clients';
+Variable_name	Value
+Rpl_mirror_binlog_clients	0
+select count(distinct n) from t1;
+count(distinct n)
+200
+select min(n) from t1;
+min(n)
+1
+select max(n) from t1;
+max(n)
+200
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+select "The following are SLAVE1.";
+The following are SLAVE1.
+The following are SLAVE1.
+select count(distinct n) from t1;
+count(distinct n)
+100
+select min(n) from t1;
+min(n)
+1
+select max(n) from t1;
+max(n)
+100
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	9307	1	master-bin.002	2130	slave1-relay-bin.001	#	master-bin.002	Yes	Yes			0		0	2130	#	None		0
+select "The following are SLAVE.";
+The following are SLAVE.
+The following are SLAVE.
+stop slave;
+set global rpl_mirror_binlog_enabled=1;
+start slave;
+insert into t1 values (300);
+insert into t1 values (299);
+insert into t1 values (298);
+insert into t1 values (297);
+insert into t1 values (296);
+insert into t1 values (295);
+insert into t1 values (294);
+insert into t1 values (293);
+insert into t1 values (292);
+insert into t1 values (291);
+insert into t1 values (290);
+insert into t1 values (289);
+insert into t1 values (288);
+insert into t1 values (287);
+insert into t1 values (286);
+insert into t1 values (285);
+insert into t1 values (284);
+insert into t1 values (283);
+insert into t1 values (282);
+insert into t1 values (281);
+insert into t1 values (280);
+insert into t1 values (279);
+insert into t1 values (278);
+insert into t1 values (277);
+insert into t1 values (276);
+insert into t1 values (275);
+insert into t1 values (274);
+insert into t1 values (273);
+insert into t1 values (272);
+insert into t1 values (271);
+insert into t1 values (270);
+insert into t1 values (269);
+insert into t1 values (268);
+insert into t1 values (267);
+insert into t1 values (266);
+insert into t1 values (265);
+insert into t1 values (264);
+insert into t1 values (263);
+insert into t1 values (262);
+insert into t1 values (261);
+insert into t1 values (260);
+insert into t1 values (259);
+insert into t1 values (258);
+insert into t1 values (257);
+insert into t1 values (256);
+insert into t1 values (255);
+insert into t1 values (254);
+insert into t1 values (253);
+insert into t1 values (252);
+insert into t1 values (251);
+insert into t1 values (250);
+insert into t1 values (249);
+insert into t1 values (248);
+insert into t1 values (247);
+insert into t1 values (246);
+insert into t1 values (245);
+insert into t1 values (244);
+insert into t1 values (243);
+insert into t1 values (242);
+insert into t1 values (241);
+insert into t1 values (240);
+insert into t1 values (239);
+insert into t1 values (238);
+insert into t1 values (237);
+insert into t1 values (236);
+insert into t1 values (235);
+insert into t1 values (234);
+insert into t1 values (233);
+insert into t1 values (232);
+insert into t1 values (231);
+insert into t1 values (230);
+insert into t1 values (229);
+insert into t1 values (228);
+insert into t1 values (227);
+insert into t1 values (226);
+insert into t1 values (225);
+insert into t1 values (224);
+insert into t1 values (223);
+insert into t1 values (222);
+insert into t1 values (221);
+insert into t1 values (220);
+insert into t1 values (219);
+insert into t1 values (218);
+insert into t1 values (217);
+insert into t1 values (216);
+insert into t1 values (215);
+insert into t1 values (214);
+insert into t1 values (213);
+insert into t1 values (212);
+insert into t1 values (211);
+insert into t1 values (210);
+insert into t1 values (209);
+insert into t1 values (208);
+insert into t1 values (207);
+insert into t1 values (206);
+insert into t1 values (205);
+insert into t1 values (204);
+insert into t1 values (203);
+insert into t1 values (202);
+insert into t1 values (201);
+insert into t1 values (200);
+insert into t1 values (199);
+insert into t1 values (198);
+insert into t1 values (197);
+insert into t1 values (196);
+insert into t1 values (195);
+insert into t1 values (194);
+insert into t1 values (193);
+insert into t1 values (192);
+insert into t1 values (191);
+insert into t1 values (190);
+insert into t1 values (189);
+insert into t1 values (188);
+insert into t1 values (187);
+insert into t1 values (186);
+insert into t1 values (185);
+insert into t1 values (184);
+insert into t1 values (183);
+insert into t1 values (182);
+insert into t1 values (181);
+insert into t1 values (180);
+insert into t1 values (179);
+insert into t1 values (178);
+insert into t1 values (177);
+insert into t1 values (176);
+insert into t1 values (175);
+insert into t1 values (174);
+insert into t1 values (173);
+insert into t1 values (172);
+insert into t1 values (171);
+insert into t1 values (170);
+insert into t1 values (169);
+insert into t1 values (168);
+insert into t1 values (167);
+insert into t1 values (166);
+insert into t1 values (165);
+insert into t1 values (164);
+insert into t1 values (163);
+insert into t1 values (162);
+insert into t1 values (161);
+insert into t1 values (160);
+insert into t1 values (159);
+insert into t1 values (158);
+insert into t1 values (157);
+insert into t1 values (156);
+insert into t1 values (155);
+insert into t1 values (154);
+insert into t1 values (153);
+insert into t1 values (152);
+insert into t1 values (151);
+insert into t1 values (150);
+insert into t1 values (149);
+insert into t1 values (148);
+insert into t1 values (147);
+insert into t1 values (146);
+insert into t1 values (145);
+insert into t1 values (144);
+insert into t1 values (143);
+insert into t1 values (142);
+insert into t1 values (141);
+insert into t1 values (140);
+insert into t1 values (139);
+insert into t1 values (138);
+insert into t1 values (137);
+insert into t1 values (136);
+insert into t1 values (135);
+insert into t1 values (134);
+insert into t1 values (133);
+insert into t1 values (132);
+insert into t1 values (131);
+insert into t1 values (130);
+insert into t1 values (129);
+insert into t1 values (128);
+insert into t1 values (127);
+insert into t1 values (126);
+insert into t1 values (125);
+insert into t1 values (124);
+insert into t1 values (123);
+insert into t1 values (122);
+insert into t1 values (121);
+insert into t1 values (120);
+insert into t1 values (119);
+insert into t1 values (118);
+insert into t1 values (117);
+insert into t1 values (116);
+insert into t1 values (115);
+insert into t1 values (114);
+insert into t1 values (113);
+insert into t1 values (112);
+insert into t1 values (111);
+insert into t1 values (110);
+insert into t1 values (109);
+insert into t1 values (108);
+insert into t1 values (107);
+insert into t1 values (106);
+insert into t1 values (105);
+insert into t1 values (104);
+insert into t1 values (103);
+insert into t1 values (102);
+insert into t1 values (101);
+insert into t1 values (100);
+insert into t1 values (99);
+insert into t1 values (98);
+insert into t1 values (97);
+insert into t1 values (96);
+insert into t1 values (95);
+insert into t1 values (94);
+insert into t1 values (93);
+insert into t1 values (92);
+insert into t1 values (91);
+insert into t1 values (90);
+insert into t1 values (89);
+insert into t1 values (88);
+insert into t1 values (87);
+insert into t1 values (86);
+insert into t1 values (85);
+insert into t1 values (84);
+insert into t1 values (83);
+insert into t1 values (82);
+insert into t1 values (81);
+insert into t1 values (80);
+insert into t1 values (79);
+insert into t1 values (78);
+insert into t1 values (77);
+insert into t1 values (76);
+insert into t1 values (75);
+insert into t1 values (74);
+insert into t1 values (73);
+insert into t1 values (72);
+insert into t1 values (71);
+insert into t1 values (70);
+insert into t1 values (69);
+insert into t1 values (68);
+insert into t1 values (67);
+insert into t1 values (66);
+insert into t1 values (65);
+insert into t1 values (64);
+insert into t1 values (63);
+insert into t1 values (62);
+insert into t1 values (61);
+insert into t1 values (60);
+insert into t1 values (59);
+insert into t1 values (58);
+insert into t1 values (57);
+insert into t1 values (56);
+insert into t1 values (55);
+insert into t1 values (54);
+insert into t1 values (53);
+insert into t1 values (52);
+insert into t1 values (51);
+insert into t1 values (50);
+insert into t1 values (49);
+insert into t1 values (48);
+insert into t1 values (47);
+insert into t1 values (46);
+insert into t1 values (45);
+insert into t1 values (44);
+insert into t1 values (43);
+insert into t1 values (42);
+insert into t1 values (41);
+insert into t1 values (40);
+insert into t1 values (39);
+insert into t1 values (38);
+insert into t1 values (37);
+insert into t1 values (36);
+insert into t1 values (35);
+insert into t1 values (34);
+insert into t1 values (33);
+insert into t1 values (32);
+insert into t1 values (31);
+insert into t1 values (30);
+insert into t1 values (29);
+insert into t1 values (28);
+insert into t1 values (27);
+insert into t1 values (26);
+insert into t1 values (25);
+insert into t1 values (24);
+insert into t1 values (23);
+insert into t1 values (22);
+insert into t1 values (21);
+insert into t1 values (20);
+insert into t1 values (19);
+insert into t1 values (18);
+insert into t1 values (17);
+insert into t1 values (16);
+insert into t1 values (15);
+insert into t1 values (14);
+insert into t1 values (13);
+insert into t1 values (12);
+insert into t1 values (11);
+insert into t1 values (10);
+insert into t1 values (9);
+insert into t1 values (8);
+insert into t1 values (7);
+insert into t1 values (6);
+insert into t1 values (5);
+insert into t1 values (4);
+insert into t1 values (3);
+insert into t1 values (2);
+insert into t1 values (1);
+select "The following are SLAVE.";
+The following are SLAVE.
+The following are SLAVE.
+show status like 'Rpl_mirror_binlog_status';
+Variable_name	Value
+Rpl_mirror_binlog_status	0
+show status like 'Rpl_mirror_binlog_clients';
+Variable_name	Value
+Rpl_mirror_binlog_clients	1
+select count(distinct n) from t1;
+count(distinct n)
+300
+select min(n) from t1;
+min(n)
+1
+select max(n) from t1;
+max(n)
+300
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+select "The following are SLAVE1.";
+The following are SLAVE1.
+The following are SLAVE1.
+select count(distinct n) from t1;
+count(distinct n)
+300
+select min(n) from t1;
+min(n)
+1
+select max(n) from t1;
+max(n)
+300
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	9307	1	master-bin.010	4	slave1-relay-bin.001	#	master-bin.010	Yes	Yes			0		0	4	#	None		0
diff -ruN base/mysql-test/r/rpl_redirect.result mysql40gpl/mysql-test/r/rpl_redirect.result
--- base/mysql-test/r/rpl_redirect.result	2005-09-02 15:50:38.000000000 -0700
+++ mysql40gpl/mysql-test/r/rpl_redirect.result	2007-04-21 09:56:53.000000000 -0700
@@ -5,7 +5,7 @@
 drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
 slave start;
 SHOW SLAVE STATUS;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
 SHOW SLAVE HOSTS;
 Server_id	Host	Port	Rpl_recovery_rank	Master_id
 2	127.0.0.1	SLAVE_PORT	2	1
diff -ruN base/mysql-test/r/rpl_reset_slave.result mysql40gpl/mysql-test/r/rpl_reset_slave.result
--- base/mysql-test/r/rpl_reset_slave.result	2005-09-02 15:50:38.000000000 -0700
+++ mysql40gpl/mysql-test/r/rpl_reset_slave.result	2007-04-21 09:56:53.000000000 -0700
@@ -5,21 +5,21 @@
 drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
 slave start;
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	1	master-bin.001	79	slave-relay-bin.002	120	master-bin.001	Yes	Yes			0		0	79	120
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	79	slave-relay-bin.002	120	master-bin.001	Yes	Yes			0		0	79	120	None		0
 stop slave;
 change master to master_user='test';
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	test	MASTER_PORT	1	master-bin.001	79	slave-relay-bin.001	4	master-bin.001	No	No			0		0	79	4
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	test	MASTER_PORT	1	master-bin.001	79	slave-relay-bin.001	4	master-bin.001	No	No			0		0	79	4	None		0
 reset slave;
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	1		4	slave-relay-bin.001	4		No	No			0		0	0	4
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1		4	slave-relay-bin.001	4		No	No			0		0	0	4	None		0
 start slave;
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	1	master-bin.001	79	slave-relay-bin.002	120	master-bin.001	Yes	Yes			0		0	79	120
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	79	slave-relay-bin.002	120	master-bin.001	Yes	Yes			0		0	79	120	None		0
 stop slave;
 reset slave;
 start slave;
diff -ruN base/mysql-test/r/rpl_rotate_logs.result mysql40gpl/mysql-test/r/rpl_rotate_logs.result
--- base/mysql-test/r/rpl_rotate_logs.result	2005-09-02 15:50:38.000000000 -0700
+++ mysql40gpl/mysql-test/r/rpl_rotate_logs.result	2007-04-21 09:56:53.000000000 -0700
@@ -15,8 +15,8 @@
 create table t1 (s text);
 insert into t1 values('Could not break slave'),('Tried hard');
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	60	master-bin.001	417	slave-relay-bin.001	458	master-bin.001	Yes	Yes			0		0	417	#
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	60	master-bin.001	417	slave-relay-bin.001	458	master-bin.001	Yes	Yes			0		0	417	#	None		0
 select * from t1;
 s
 Could not break slave
@@ -46,8 +46,8 @@
 master-bin.003
 insert into t2 values (65);
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	60	master-bin.003	290	slave-relay-bin.001	1073	master-bin.003	Yes	Yes			0		0	290	#
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	60	master-bin.003	290	slave-relay-bin.001	1073	master-bin.003	Yes	Yes			0		0	290	#	None		0
 select * from t2;
 m
 34
@@ -73,8 +73,8 @@
 a
 testing temporary tables part 2
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	MASTER_PORT	60	master-bin.004	2886	slave-relay-bin.001	7870	master-bin.004	Yes	Yes			0		0	2886	#
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	60	master-bin.004	2886	slave-relay-bin.001	7870	master-bin.004	Yes	Yes			0		0	2886	#	None		0
 lock tables t3 read;
 select count(*) from t3 where n >= 4;
 count(*)
diff -ruN base/mysql-test/r/rpl_semi_sync.result mysql40gpl/mysql-test/r/rpl_semi_sync.result
--- base/mysql-test/r/rpl_semi_sync.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/r/rpl_semi_sync.result	2007-04-21 09:56:53.000000000 -0700
@@ -0,0 +1,400 @@
+slave stop;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+reset master;
+reset slave;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+slave start;
+show status like 'Rpl_semi_sync_no_tx';
+Variable_name	Value
+Rpl_semi_sync_no_tx	0
+show status like 'Rpl_semi_sync_yes_tx';
+Variable_name	Value
+Rpl_semi_sync_yes_tx	0
+stop slave;
+start slave;
+show status like 'Rpl_semi_sync_clients';
+Variable_name	Value
+Rpl_semi_sync_clients	1
+drop table if exists t1;
+create table t1(n int) engine = InnoDB;
+insert into t1 values (300);
+insert into t1 values (299);
+insert into t1 values (298);
+insert into t1 values (297);
+insert into t1 values (296);
+insert into t1 values (295);
+insert into t1 values (294);
+insert into t1 values (293);
+insert into t1 values (292);
+insert into t1 values (291);
+insert into t1 values (290);
+insert into t1 values (289);
+insert into t1 values (288);
+insert into t1 values (287);
+insert into t1 values (286);
+insert into t1 values (285);
+insert into t1 values (284);
+insert into t1 values (283);
+insert into t1 values (282);
+insert into t1 values (281);
+insert into t1 values (280);
+insert into t1 values (279);
+insert into t1 values (278);
+insert into t1 values (277);
+insert into t1 values (276);
+insert into t1 values (275);
+insert into t1 values (274);
+insert into t1 values (273);
+insert into t1 values (272);
+insert into t1 values (271);
+insert into t1 values (270);
+insert into t1 values (269);
+insert into t1 values (268);
+insert into t1 values (267);
+insert into t1 values (266);
+insert into t1 values (265);
+insert into t1 values (264);
+insert into t1 values (263);
+insert into t1 values (262);
+insert into t1 values (261);
+insert into t1 values (260);
+insert into t1 values (259);
+insert into t1 values (258);
+insert into t1 values (257);
+insert into t1 values (256);
+insert into t1 values (255);
+insert into t1 values (254);
+insert into t1 values (253);
+insert into t1 values (252);
+insert into t1 values (251);
+insert into t1 values (250);
+insert into t1 values (249);
+insert into t1 values (248);
+insert into t1 values (247);
+insert into t1 values (246);
+insert into t1 values (245);
+insert into t1 values (244);
+insert into t1 values (243);
+insert into t1 values (242);
+insert into t1 values (241);
+insert into t1 values (240);
+insert into t1 values (239);
+insert into t1 values (238);
+insert into t1 values (237);
+insert into t1 values (236);
+insert into t1 values (235);
+insert into t1 values (234);
+insert into t1 values (233);
+insert into t1 values (232);
+insert into t1 values (231);
+insert into t1 values (230);
+insert into t1 values (229);
+insert into t1 values (228);
+insert into t1 values (227);
+insert into t1 values (226);
+insert into t1 values (225);
+insert into t1 values (224);
+insert into t1 values (223);
+insert into t1 values (222);
+insert into t1 values (221);
+insert into t1 values (220);
+insert into t1 values (219);
+insert into t1 values (218);
+insert into t1 values (217);
+insert into t1 values (216);
+insert into t1 values (215);
+insert into t1 values (214);
+insert into t1 values (213);
+insert into t1 values (212);
+insert into t1 values (211);
+insert into t1 values (210);
+insert into t1 values (209);
+insert into t1 values (208);
+insert into t1 values (207);
+insert into t1 values (206);
+insert into t1 values (205);
+insert into t1 values (204);
+insert into t1 values (203);
+insert into t1 values (202);
+insert into t1 values (201);
+insert into t1 values (200);
+insert into t1 values (199);
+insert into t1 values (198);
+insert into t1 values (197);
+insert into t1 values (196);
+insert into t1 values (195);
+insert into t1 values (194);
+insert into t1 values (193);
+insert into t1 values (192);
+insert into t1 values (191);
+insert into t1 values (190);
+insert into t1 values (189);
+insert into t1 values (188);
+insert into t1 values (187);
+insert into t1 values (186);
+insert into t1 values (185);
+insert into t1 values (184);
+insert into t1 values (183);
+insert into t1 values (182);
+insert into t1 values (181);
+insert into t1 values (180);
+insert into t1 values (179);
+insert into t1 values (178);
+insert into t1 values (177);
+insert into t1 values (176);
+insert into t1 values (175);
+insert into t1 values (174);
+insert into t1 values (173);
+insert into t1 values (172);
+insert into t1 values (171);
+insert into t1 values (170);
+insert into t1 values (169);
+insert into t1 values (168);
+insert into t1 values (167);
+insert into t1 values (166);
+insert into t1 values (165);
+insert into t1 values (164);
+insert into t1 values (163);
+insert into t1 values (162);
+insert into t1 values (161);
+insert into t1 values (160);
+insert into t1 values (159);
+insert into t1 values (158);
+insert into t1 values (157);
+insert into t1 values (156);
+insert into t1 values (155);
+insert into t1 values (154);
+insert into t1 values (153);
+insert into t1 values (152);
+insert into t1 values (151);
+insert into t1 values (150);
+insert into t1 values (149);
+insert into t1 values (148);
+insert into t1 values (147);
+insert into t1 values (146);
+insert into t1 values (145);
+insert into t1 values (144);
+insert into t1 values (143);
+insert into t1 values (142);
+insert into t1 values (141);
+insert into t1 values (140);
+insert into t1 values (139);
+insert into t1 values (138);
+insert into t1 values (137);
+insert into t1 values (136);
+insert into t1 values (135);
+insert into t1 values (134);
+insert into t1 values (133);
+insert into t1 values (132);
+insert into t1 values (131);
+insert into t1 values (130);
+insert into t1 values (129);
+insert into t1 values (128);
+insert into t1 values (127);
+insert into t1 values (126);
+insert into t1 values (125);
+insert into t1 values (124);
+insert into t1 values (123);
+insert into t1 values (122);
+insert into t1 values (121);
+insert into t1 values (120);
+insert into t1 values (119);
+insert into t1 values (118);
+insert into t1 values (117);
+insert into t1 values (116);
+insert into t1 values (115);
+insert into t1 values (114);
+insert into t1 values (113);
+insert into t1 values (112);
+insert into t1 values (111);
+insert into t1 values (110);
+insert into t1 values (109);
+insert into t1 values (108);
+insert into t1 values (107);
+insert into t1 values (106);
+insert into t1 values (105);
+insert into t1 values (104);
+insert into t1 values (103);
+insert into t1 values (102);
+insert into t1 values (101);
+insert into t1 values (100);
+insert into t1 values (99);
+insert into t1 values (98);
+insert into t1 values (97);
+insert into t1 values (96);
+insert into t1 values (95);
+insert into t1 values (94);
+insert into t1 values (93);
+insert into t1 values (92);
+insert into t1 values (91);
+insert into t1 values (90);
+insert into t1 values (89);
+insert into t1 values (88);
+insert into t1 values (87);
+insert into t1 values (86);
+insert into t1 values (85);
+insert into t1 values (84);
+insert into t1 values (83);
+insert into t1 values (82);
+insert into t1 values (81);
+insert into t1 values (80);
+insert into t1 values (79);
+insert into t1 values (78);
+insert into t1 values (77);
+insert into t1 values (76);
+insert into t1 values (75);
+insert into t1 values (74);
+insert into t1 values (73);
+insert into t1 values (72);
+insert into t1 values (71);
+insert into t1 values (70);
+insert into t1 values (69);
+insert into t1 values (68);
+insert into t1 values (67);
+insert into t1 values (66);
+insert into t1 values (65);
+insert into t1 values (64);
+insert into t1 values (63);
+insert into t1 values (62);
+insert into t1 values (61);
+insert into t1 values (60);
+insert into t1 values (59);
+insert into t1 values (58);
+insert into t1 values (57);
+insert into t1 values (56);
+insert into t1 values (55);
+insert into t1 values (54);
+insert into t1 values (53);
+insert into t1 values (52);
+insert into t1 values (51);
+insert into t1 values (50);
+insert into t1 values (49);
+insert into t1 values (48);
+insert into t1 values (47);
+insert into t1 values (46);
+insert into t1 values (45);
+insert into t1 values (44);
+insert into t1 values (43);
+insert into t1 values (42);
+insert into t1 values (41);
+insert into t1 values (40);
+insert into t1 values (39);
+insert into t1 values (38);
+insert into t1 values (37);
+insert into t1 values (36);
+insert into t1 values (35);
+insert into t1 values (34);
+insert into t1 values (33);
+insert into t1 values (32);
+insert into t1 values (31);
+insert into t1 values (30);
+insert into t1 values (29);
+insert into t1 values (28);
+insert into t1 values (27);
+insert into t1 values (26);
+insert into t1 values (25);
+insert into t1 values (24);
+insert into t1 values (23);
+insert into t1 values (22);
+insert into t1 values (21);
+insert into t1 values (20);
+insert into t1 values (19);
+insert into t1 values (18);
+insert into t1 values (17);
+insert into t1 values (16);
+insert into t1 values (15);
+insert into t1 values (14);
+insert into t1 values (13);
+insert into t1 values (12);
+insert into t1 values (11);
+insert into t1 values (10);
+insert into t1 values (9);
+insert into t1 values (8);
+insert into t1 values (7);
+insert into t1 values (6);
+insert into t1 values (5);
+insert into t1 values (4);
+insert into t1 values (3);
+insert into t1 values (2);
+insert into t1 values (1);
+show master status;
+File	Position	Binlog_do_db	Binlog_ignore_db
+master-bin.000001	18644		
+show status like 'Rpl_semi_sync_slave_status';
+Variable_name	Value
+Rpl_semi_sync_slave_status	1
+select count(distinct n) from t1;
+count(distinct n)
+300
+select min(n) from t1;
+min(n)
+1
+select max(n) from t1;
+max(n)
+300
+stop slave;
+show status like 'Rpl_semi_sync_status';
+Variable_name	Value
+Rpl_semi_sync_status	1
+show status like 'Rpl_semi_sync_no_tx';
+Variable_name	Value
+Rpl_semi_sync_no_tx	0
+show status like 'Rpl_semi_sync_yes_tx';
+Variable_name	Value
+Rpl_semi_sync_yes_tx	301
+show status like 'Rpl_semi_sync_clients';
+Variable_name	Value
+Rpl_semi_sync_clients	1
+begin;
+insert into t1 values (500);
+delete from t1 where n < 500;
+commit;
+insert into t1 values (100);
+show status like 'Rpl_semi_sync_status';
+Variable_name	Value
+Rpl_semi_sync_status	0
+show status like 'Rpl_semi_sync_no_tx';
+Variable_name	Value
+Rpl_semi_sync_no_tx	2
+show status like 'Rpl_semi_sync_yes_tx';
+Variable_name	Value
+Rpl_semi_sync_yes_tx	301
+show status like 'Rpl_semi_sync_slave_status';
+Variable_name	Value
+Rpl_semi_sync_slave_status	0
+start slave;
+show status like 'Rpl_semi_sync_slave_status';
+Variable_name	Value
+Rpl_semi_sync_slave_status	1
+select count(distinct n) from t1;
+count(distinct n)
+2
+select min(n) from t1;
+min(n)
+100
+select max(n) from t1;
+max(n)
+500
+drop table t1;
+show status like 'Rpl_semi_sync_status';
+Variable_name	Value
+Rpl_semi_sync_status	1
+show status like 'Rpl_semi_sync_no_tx';
+Variable_name	Value
+Rpl_semi_sync_no_tx	2
+show status like 'Rpl_semi_sync_yes_tx';
+Variable_name	Value
+Rpl_semi_sync_yes_tx	302
+show master logs;
+Log_name
+master-bin.000001
+show variables like 'rpl_semi_sync_enabled';
+Variable_name	Value
+rpl_semi_sync_enabled	1
+set global rpl_semi_sync_enabled=0;
+show variables like 'rpl_semi_sync_enabled';
+Variable_name	Value
+rpl_semi_sync_enabled	0
+show status like 'Rpl_semi_sync_status';
+Variable_name	Value
+Rpl_semi_sync_status	0
diff -ruN base/mysql-test/r/rpl_server_id1.result mysql40gpl/mysql-test/r/rpl_server_id1.result
--- base/mysql-test/r/rpl_server_id1.result	2005-09-02 15:50:38.000000000 -0700
+++ mysql40gpl/mysql-test/r/rpl_server_id1.result	2007-04-21 09:56:53.000000000 -0700
@@ -10,8 +10,8 @@
 stop slave;
 change master to master_port=SLAVE_PORT;
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	SLAVE_PORT	1		4	slave-relay-bin.001	4		No	No			0		0	0	#
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	SLAVE_PORT	1		4	slave-relay-bin.001	4		No	No			0		0	0	#	None		0
 start slave;
 insert into t1 values (1);
 show status like "slave_running";
diff -ruN base/mysql-test/r/rpl_server_id2.result mysql40gpl/mysql-test/r/rpl_server_id2.result
--- base/mysql-test/r/rpl_server_id2.result	2005-09-02 15:50:38.000000000 -0700
+++ mysql40gpl/mysql-test/r/rpl_server_id2.result	2007-04-21 09:56:53.000000000 -0700
@@ -9,8 +9,8 @@
 stop slave;
 change master to master_port=SLAVE_PORT;
 show slave status;
-Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space
-127.0.0.1	root	SLAVE_PORT	1		4	slave-relay-bin.001	4		No	No			0		0	0	#
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	SLAVE_PORT	1		4	slave-relay-bin.001	4		No	No			0		0	0	#	None		0
 start slave;
 insert into t1 values (1);
 select * from t1;
diff -ruN base/mysql-test/r/rpl_show_processlist.result mysql40gpl/mysql-test/r/rpl_show_processlist.result
--- base/mysql-test/r/rpl_show_processlist.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/r/rpl_show_processlist.result	2007-04-21 09:56:53.000000000 -0700
@@ -0,0 +1,323 @@
+slave stop;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+reset master;
+reset slave;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+slave start;
+drop table if exists t1;
+create table t1(n int);
+insert into t1 values (300);
+insert into t1 values (299);
+insert into t1 values (298);
+insert into t1 values (297);
+insert into t1 values (296);
+insert into t1 values (295);
+insert into t1 values (294);
+insert into t1 values (293);
+insert into t1 values (292);
+insert into t1 values (291);
+insert into t1 values (290);
+insert into t1 values (289);
+insert into t1 values (288);
+insert into t1 values (287);
+insert into t1 values (286);
+insert into t1 values (285);
+insert into t1 values (284);
+insert into t1 values (283);
+insert into t1 values (282);
+insert into t1 values (281);
+insert into t1 values (280);
+insert into t1 values (279);
+insert into t1 values (278);
+insert into t1 values (277);
+insert into t1 values (276);
+insert into t1 values (275);
+insert into t1 values (274);
+insert into t1 values (273);
+insert into t1 values (272);
+insert into t1 values (271);
+insert into t1 values (270);
+insert into t1 values (269);
+insert into t1 values (268);
+insert into t1 values (267);
+insert into t1 values (266);
+insert into t1 values (265);
+insert into t1 values (264);
+insert into t1 values (263);
+insert into t1 values (262);
+insert into t1 values (261);
+insert into t1 values (260);
+insert into t1 values (259);
+insert into t1 values (258);
+insert into t1 values (257);
+insert into t1 values (256);
+insert into t1 values (255);
+insert into t1 values (254);
+insert into t1 values (253);
+insert into t1 values (252);
+insert into t1 values (251);
+insert into t1 values (250);
+insert into t1 values (249);
+insert into t1 values (248);
+insert into t1 values (247);
+insert into t1 values (246);
+insert into t1 values (245);
+insert into t1 values (244);
+insert into t1 values (243);
+insert into t1 values (242);
+insert into t1 values (241);
+insert into t1 values (240);
+insert into t1 values (239);
+insert into t1 values (238);
+insert into t1 values (237);
+insert into t1 values (236);
+insert into t1 values (235);
+insert into t1 values (234);
+insert into t1 values (233);
+insert into t1 values (232);
+insert into t1 values (231);
+insert into t1 values (230);
+insert into t1 values (229);
+insert into t1 values (228);
+insert into t1 values (227);
+insert into t1 values (226);
+insert into t1 values (225);
+insert into t1 values (224);
+insert into t1 values (223);
+insert into t1 values (222);
+insert into t1 values (221);
+insert into t1 values (220);
+insert into t1 values (219);
+insert into t1 values (218);
+insert into t1 values (217);
+insert into t1 values (216);
+insert into t1 values (215);
+insert into t1 values (214);
+insert into t1 values (213);
+insert into t1 values (212);
+insert into t1 values (211);
+insert into t1 values (210);
+insert into t1 values (209);
+insert into t1 values (208);
+insert into t1 values (207);
+insert into t1 values (206);
+insert into t1 values (205);
+insert into t1 values (204);
+insert into t1 values (203);
+insert into t1 values (202);
+insert into t1 values (201);
+insert into t1 values (200);
+insert into t1 values (199);
+insert into t1 values (198);
+insert into t1 values (197);
+insert into t1 values (196);
+insert into t1 values (195);
+insert into t1 values (194);
+insert into t1 values (193);
+insert into t1 values (192);
+insert into t1 values (191);
+insert into t1 values (190);
+insert into t1 values (189);
+insert into t1 values (188);
+insert into t1 values (187);
+insert into t1 values (186);
+insert into t1 values (185);
+insert into t1 values (184);
+insert into t1 values (183);
+insert into t1 values (182);
+insert into t1 values (181);
+insert into t1 values (180);
+insert into t1 values (179);
+insert into t1 values (178);
+insert into t1 values (177);
+insert into t1 values (176);
+insert into t1 values (175);
+insert into t1 values (174);
+insert into t1 values (173);
+insert into t1 values (172);
+insert into t1 values (171);
+insert into t1 values (170);
+insert into t1 values (169);
+insert into t1 values (168);
+insert into t1 values (167);
+insert into t1 values (166);
+insert into t1 values (165);
+insert into t1 values (164);
+insert into t1 values (163);
+insert into t1 values (162);
+insert into t1 values (161);
+insert into t1 values (160);
+insert into t1 values (159);
+insert into t1 values (158);
+insert into t1 values (157);
+insert into t1 values (156);
+insert into t1 values (155);
+insert into t1 values (154);
+insert into t1 values (153);
+insert into t1 values (152);
+insert into t1 values (151);
+insert into t1 values (150);
+insert into t1 values (149);
+insert into t1 values (148);
+insert into t1 values (147);
+insert into t1 values (146);
+insert into t1 values (145);
+insert into t1 values (144);
+insert into t1 values (143);
+insert into t1 values (142);
+insert into t1 values (141);
+insert into t1 values (140);
+insert into t1 values (139);
+insert into t1 values (138);
+insert into t1 values (137);
+insert into t1 values (136);
+insert into t1 values (135);
+insert into t1 values (134);
+insert into t1 values (133);
+insert into t1 values (132);
+insert into t1 values (131);
+insert into t1 values (130);
+insert into t1 values (129);
+insert into t1 values (128);
+insert into t1 values (127);
+insert into t1 values (126);
+insert into t1 values (125);
+insert into t1 values (124);
+insert into t1 values (123);
+insert into t1 values (122);
+insert into t1 values (121);
+insert into t1 values (120);
+insert into t1 values (119);
+insert into t1 values (118);
+insert into t1 values (117);
+insert into t1 values (116);
+insert into t1 values (115);
+insert into t1 values (114);
+insert into t1 values (113);
+insert into t1 values (112);
+insert into t1 values (111);
+insert into t1 values (110);
+insert into t1 values (109);
+insert into t1 values (108);
+insert into t1 values (107);
+insert into t1 values (106);
+insert into t1 values (105);
+insert into t1 values (104);
+insert into t1 values (103);
+insert into t1 values (102);
+insert into t1 values (101);
+insert into t1 values (100);
+insert into t1 values (99);
+insert into t1 values (98);
+insert into t1 values (97);
+insert into t1 values (96);
+insert into t1 values (95);
+insert into t1 values (94);
+insert into t1 values (93);
+insert into t1 values (92);
+insert into t1 values (91);
+insert into t1 values (90);
+insert into t1 values (89);
+insert into t1 values (88);
+insert into t1 values (87);
+insert into t1 values (86);
+insert into t1 values (85);
+insert into t1 values (84);
+insert into t1 values (83);
+insert into t1 values (82);
+insert into t1 values (81);
+insert into t1 values (80);
+insert into t1 values (79);
+insert into t1 values (78);
+insert into t1 values (77);
+insert into t1 values (76);
+insert into t1 values (75);
+insert into t1 values (74);
+insert into t1 values (73);
+insert into t1 values (72);
+insert into t1 values (71);
+insert into t1 values (70);
+insert into t1 values (69);
+insert into t1 values (68);
+insert into t1 values (67);
+insert into t1 values (66);
+insert into t1 values (65);
+insert into t1 values (64);
+insert into t1 values (63);
+insert into t1 values (62);
+insert into t1 values (61);
+insert into t1 values (60);
+insert into t1 values (59);
+insert into t1 values (58);
+insert into t1 values (57);
+insert into t1 values (56);
+insert into t1 values (55);
+insert into t1 values (54);
+insert into t1 values (53);
+insert into t1 values (52);
+insert into t1 values (51);
+insert into t1 values (50);
+insert into t1 values (49);
+insert into t1 values (48);
+insert into t1 values (47);
+insert into t1 values (46);
+insert into t1 values (45);
+insert into t1 values (44);
+insert into t1 values (43);
+insert into t1 values (42);
+insert into t1 values (41);
+insert into t1 values (40);
+insert into t1 values (39);
+insert into t1 values (38);
+insert into t1 values (37);
+insert into t1 values (36);
+insert into t1 values (35);
+insert into t1 values (34);
+insert into t1 values (33);
+insert into t1 values (32);
+insert into t1 values (31);
+insert into t1 values (30);
+insert into t1 values (29);
+insert into t1 values (28);
+insert into t1 values (27);
+insert into t1 values (26);
+insert into t1 values (25);
+insert into t1 values (24);
+insert into t1 values (23);
+insert into t1 values (22);
+insert into t1 values (21);
+insert into t1 values (20);
+insert into t1 values (19);
+insert into t1 values (18);
+insert into t1 values (17);
+insert into t1 values (16);
+insert into t1 values (15);
+insert into t1 values (14);
+insert into t1 values (13);
+insert into t1 values (12);
+insert into t1 values (11);
+insert into t1 values (10);
+insert into t1 values (9);
+insert into t1 values (8);
+insert into t1 values (7);
+insert into t1 values (6);
+insert into t1 values (5);
+insert into t1 values (4);
+insert into t1 values (3);
+insert into t1 values (2);
+insert into t1 values (1);
+show processlist;
+Id	User	Host	db	Command	Time	State	Info
+#	root	#	test	Sleep	#		NULL
+#	root	#	test	Query	#	NULL	show processlist
+#	root	#	test	Sleep	#		NULL
+#	root	#	NULL	Binlog Dump	#	Has sent all binlog to slave; waiting for binlog to be updated :master-bin.001:18628:	NULL
+delete from t1 where n > 50;
+delete from t1 where n > 25;
+drop table t1;
+show processlist;
+Id	User	Host	db	Command	Time	State	Info
+#	root	#	test	Sleep	#		NULL
+#	root	#	test	Query	#	NULL	show processlist
+#	root	#	test	Sleep	#		NULL
+#	root	#	NULL	Binlog Dump	#	Has sent all binlog to slave; waiting for binlog to be updated :master-bin.001:18800:	NULL
diff -ruN base/mysql-test/r/variables.result mysql40gpl/mysql-test/r/variables.result
--- base/mysql-test/r/variables.result	2005-09-02 15:50:38.000000000 -0700
+++ mysql40gpl/mysql-test/r/variables.result	2007-04-21 09:56:54.000000000 -0700
@@ -100,6 +100,26 @@
 show variables like 'concurrent_insert';
 Variable_name	Value
 concurrent_insert	ON
+set global innodb_btr_estimate_n_pages=1;
+show variables like 'innodb_btr_estimate_n_pages';
+Variable_name	Value
+innodb_btr_estimate_n_pages	1
+set global innodb_btr_estimate_n_pages=0;
+show variables like 'innodb_btr_estimate_n_pages';
+Variable_name	Value
+innodb_btr_estimate_n_pages	1
+set global innodb_btr_estimate_n_pages=100;
+show variables like 'innodb_btr_estimate_n_pages';
+Variable_name	Value
+innodb_btr_estimate_n_pages	100
+set global innodb_btr_estimate_n_pages=10000;
+show variables like 'innodb_btr_estimate_n_pages';
+Variable_name	Value
+innodb_btr_estimate_n_pages	2048
+set global innodb_btr_estimate_n_pages=DEFAULT;
+show variables like 'innodb_btr_estimate_n_pages';
+Variable_name	Value
+innodb_btr_estimate_n_pages	8
 set table_type=MYISAM, table_type="HEAP", global table_type="INNODB";
 show local variables like 'table_type';
 Variable_name	Value
@@ -282,7 +302,7 @@
 set join_buffer_size=100;
 set last_insert_id=1;
 set global local_infile=1;
-set long_query_time=100;
+set global long_query_time=100;
 set low_priority_updates=1;
 set max_allowed_packet=100;
 set global max_binlog_cache_size=100;
@@ -290,6 +310,7 @@
 set global max_connect_errors=100;
 set global max_connections=100;
 set global max_delayed_threads=100;
+set global reserved_super_connections=10;
 set max_heap_table_size=100;
 set max_join_size=100;
 set max_sort_length=100;
diff -ruN base/mysql-test/rpl_transaction_test/r/rpl000003.result mysql40gpl/mysql-test/rpl_transaction_test/r/rpl000003.result
--- base/mysql-test/rpl_transaction_test/r/rpl000003.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/rpl_transaction_test/r/rpl000003.result	2007-04-21 09:56:54.000000000 -0700
@@ -0,0 +1,15 @@
+slave stop;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+reset master;
+reset slave;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+slave start;
+drop table if exists t1;
+create table t1(n int primary key);
+insert into t1 values (1),(2),(2);
+Duplicate entry '2' for key 1
+insert into t1 values (3);
+select * from t1;
+n
+3
+drop table t1;
diff -ruN base/mysql-test/rpl_transaction_test/r/rpl000015.result mysql40gpl/mysql-test/rpl_transaction_test/r/rpl000015.result
--- base/mysql-test/rpl_transaction_test/r/rpl000015.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/rpl_transaction_test/r/rpl000015.result	2007-04-21 09:56:54.000000000 -0700
@@ -0,0 +1,29 @@
+reset master;
+show master status;
+File	Position	Binlog_do_db	Binlog_ignore_db
+master-bin.001	79		
+reset slave;
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+change master to master_host='127.0.0.1';
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	test	MASTER_PORT	7		4	slave-relay-bin.001	4		No	No			0		0	0	4	None		0
+change master to master_host='127.0.0.1',master_user='root',
+master_password='',master_port=MASTER_PORT;
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	7		4	slave-relay-bin.001	4		No	No			0		0	0	4	None		0
+slave start;
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	7	master-bin.001	79	slave-relay-bin.001	120	master-bin.001	Yes	Yes			0		0	79	120	None		0
+drop table if exists t1;
+create table t1 (n int);
+insert into t1 values (10),(45),(90);
+select * from t1;
+n
+10
+45
+90
+drop table t1;
diff -ruN base/mysql-test/rpl_transaction_test/r/rpl_change_master.result mysql40gpl/mysql-test/rpl_transaction_test/r/rpl_change_master.result
--- base/mysql-test/rpl_transaction_test/r/rpl_change_master.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/rpl_transaction_test/r/rpl_change_master.result	2007-04-21 09:56:54.000000000 -0700
@@ -0,0 +1,32 @@
+slave stop;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+reset master;
+reset slave;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+slave start;
+select get_lock("a",5);
+get_lock("a",5)
+1
+create table t1(n int);
+insert into t1 values(1+get_lock("a",15)*0);
+insert into t1 values(2);
+stop slave;
+select * from t1;
+n
+1
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_MYPORT	1	master-bin.001	273	slave-relay-bin.002	255	master-bin.001	No	No			0		0	214	318	None		0
+change master to master_user='root';
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_MYPORT	1	master-bin.001	214	slave-relay-bin.001	4	master-bin.001	No	No			0		0	214	4	None		0
+select release_lock("a");
+release_lock("a")
+1
+start slave;
+select * from t1;
+n
+1
+2
+drop table t1;
diff -ruN base/mysql-test/rpl_transaction_test/r/rpl_error_ignored_table.result mysql40gpl/mysql-test/rpl_transaction_test/r/rpl_error_ignored_table.result
--- base/mysql-test/rpl_transaction_test/r/rpl_error_ignored_table.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/rpl_transaction_test/r/rpl_error_ignored_table.result	2007-04-21 09:56:54.000000000 -0700
@@ -0,0 +1,40 @@
+slave stop;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+reset master;
+reset slave;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+slave start;
+create table t1 (a int primary key);
+insert into t1 values (1),(1);
+Duplicate entry '1' for key 1
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	213	slave-relay-bin.002	254	master-bin.001	Yes	Yes			0		0	213	258	None		0
+show tables like 't1';
+Tables_in_test (t1)
+drop table t1;
+select get_lock('crash_lock%20C', 10);
+get_lock('crash_lock%20C', 10)
+1
+create table t2 (a int primary key);
+insert into t2 values(1);
+create table t3 (id int);
+insert into t3 values(connection_id());
+ update t2 set a = a + 1 + get_lock('crash_lock%20C', 10);
+select (@id := id) - id from t3;
+(@id := id) - id
+0
+kill @id;
+drop table t2,t3;
+Got one of the listed errors
+show binlog events from 79;
+Log_name	Pos	Event_type	Server_id	Orig_log_pos	Info
+master-bin.001	79	Query	1	79	use `test`; create table t1 (a int primary key)
+master-bin.001	149	Query	1	149	use `test`; insert into t1 values (1),(1)
+master-bin.001	213	Query	1	213	use `test`; drop table t1
+master-bin.001	261	Query	1	261	use `test`; create table t2 (a int primary key)
+master-bin.001	331	Query	1	331	use `test`; insert into t2 values(1)
+master-bin.001	390	Query	1	390	use `test`; create table t3 (id int)
+master-bin.001	449	Query	1	449	use `test`; insert into t3 values(connection_id())
+master-bin.001	522	Query	1	522	use `test`; update t2 set a = a + 1 + get_lock('crash_lock%20C', 10)
+master-bin.001	613	Query	1	613	use `test`; drop table t2,t3
diff -ruN base/mysql-test/rpl_transaction_test/r/rpl_flush_log_loop.result mysql40gpl/mysql-test/rpl_transaction_test/r/rpl_flush_log_loop.result
--- base/mysql-test/rpl_transaction_test/r/rpl_flush_log_loop.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/rpl_transaction_test/r/rpl_flush_log_loop.result	2007-04-21 09:56:54.000000000 -0700
@@ -0,0 +1,17 @@
+slave stop;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+reset master;
+reset slave;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+slave start;
+change master to master_host='127.0.0.1',master_user='root',
+master_password='',master_port=MASTER_PORT;
+slave start;
+slave stop;
+change master to master_host='127.0.0.1',master_user='root',
+master_password='',master_port=SLAVE_PORT;
+slave start;
+flush logs;
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	SLAVE_PORT	60	slave-bin.001	79	relay-log.002	44	slave-bin.001	Yes	Yes			0		0	79	163	None		0
diff -ruN base/mysql-test/rpl_transaction_test/r/rpl_loaddata.result mysql40gpl/mysql-test/rpl_transaction_test/r/rpl_loaddata.result
--- base/mysql-test/rpl_transaction_test/r/rpl_loaddata.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/rpl_transaction_test/r/rpl_loaddata.result	2007-04-21 09:56:54.000000000 -0700
@@ -0,0 +1,68 @@
+slave stop;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+reset master;
+reset slave;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+slave start;
+reset master;
+create table t1(a int not null auto_increment, b int, primary key(a) );
+load data infile '../../std_data/rpl_loaddata.dat' into table t1;
+create temporary table t2 (day date,id int(9),category enum('a','b','c'),name varchar(60));
+load data infile '../../std_data/rpl_loaddata2.dat' into table t2 fields terminated by ',' optionally enclosed by '%' escaped by '@' lines terminated by '\n##\n' starting by '>' ignore 1 lines;
+create table t3 (day date,id int(9),category enum('a','b','c'),name varchar(60));
+insert into t3 select * from t2;
+select * from t1;
+a	b
+1	10
+2	15
+select * from t3;
+day	id	category	name
+2003-02-22	2461	b	a a a @ %  ' " a
+2003-03-22	2161	c	asdf
+2003-03-22	2416	a	bbbbb
+show master status;
+File	Position	Binlog_do_db	Binlog_ignore_db
+slave-bin.001	964		
+drop table t1;
+drop table t2;
+drop table t3;
+create table t1(a int, b int, unique(b));
+insert into t1 values(1,10);
+load data infile '../../std_data/rpl_loaddata.dat' into table t1;
+set global sql_slave_skip_counter=1;
+start slave;
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	1311	slave-relay-bin.002	1352	master-bin.001	Yes	Yes			0		0	1311	1356	None		0
+set sql_log_bin=0;
+delete from t1;
+set sql_log_bin=1;
+load data infile '../../std_data/rpl_loaddata.dat' into table t1;
+stop slave;
+change master to master_user='test';
+change master to master_user='root';
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	1419	slave-relay-bin.001	4	master-bin.001	No	No			0		0	1419	4	None		0
+set global sql_slave_skip_counter=1;
+start slave;
+set sql_log_bin=0;
+delete from t1;
+set sql_log_bin=1;
+load data infile '../../std_data/rpl_loaddata.dat' into table t1;
+stop slave;
+reset slave;
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1		4	slave-relay-bin.001	4		No	No			0		0	0	4	None		0
+reset master;
+create table t2 (day date,id int(9),category enum('a','b','c'),name varchar(60),
+unique(day));
+load data infile '../../std_data/rpl_loaddata2.dat' into table t2 fields
+terminated by ',' optionally enclosed by '%' escaped by '@' lines terminated by
+'\n##\n' starting by '>' ignore 1 lines;
+Duplicate entry '2003-03-22' for key 1
+show master status;
+File	Position	Binlog_do_db	Binlog_ignore_db
+master-bin.001	491		
+drop table t2;
diff -ruN base/mysql-test/rpl_transaction_test/r/rpl_log_pos.result mysql40gpl/mysql-test/rpl_transaction_test/r/rpl_log_pos.result
--- base/mysql-test/rpl_transaction_test/r/rpl_log_pos.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/rpl_transaction_test/r/rpl_log_pos.result	2007-04-21 09:56:54.000000000 -0700
@@ -0,0 +1,46 @@
+slave stop;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+reset master;
+reset slave;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+slave start;
+show master status;
+File	Position	Binlog_do_db	Binlog_ignore_db
+master-bin.001	79		
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	79	slave-relay-bin.002	120	master-bin.001	Yes	Yes			0		0	79	124	None		0
+slave stop;
+change master to master_log_pos=73;
+slave start;
+slave stop;
+change master to master_log_pos=73;
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	73	slave-relay-bin.001	4	master-bin.001	No	No			0		0	73	4	None		0
+slave start;
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	73	slave-relay-bin.001	86	master-bin.001	No	Yes			0		0	73	45	None		0
+slave stop;
+change master to master_log_pos=173;
+slave start;
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	173	slave-relay-bin.001	45	master-bin.001	No	Yes			0		0	173	4	None		0
+show master status;
+File	Position	Binlog_do_db	Binlog_ignore_db
+master-bin.001	79		
+create table if not exists t1 (n int);
+drop table if exists t1;
+create table t1 (n int);
+insert into t1 values (1),(2),(3);
+slave stop;
+change master to master_log_pos=79;
+slave start;
+select * from t1;
+n
+1
+2
+3
+drop table t1;
diff -ruN base/mysql-test/rpl_transaction_test/r/rpl_log.result mysql40gpl/mysql-test/rpl_transaction_test/r/rpl_log.result
--- base/mysql-test/rpl_transaction_test/r/rpl_log.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/rpl_transaction_test/r/rpl_log.result	2007-04-21 09:56:54.000000000 -0700
@@ -0,0 +1,101 @@
+slave stop;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+reset master;
+reset slave;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+slave start;
+slave stop;
+reset master;
+reset slave;
+reset master;
+create table t1(n int not null auto_increment primary key);
+insert into t1 values (NULL);
+drop table t1;
+create table t1 (word char(20) not null);
+load data infile '../../std_data/words.dat' into table t1 ignore 1 lines;
+select count(*) from t1;
+count(*)
+69
+drop table t1;
+show binlog events;
+Log_name	Pos	Event_type	Server_id	Orig_log_pos	Info
+master-bin.001	4	Start	1	4	Server ver: VERSION, Binlog ver: 3
+master-bin.001	79	Query	1	79	use `test`; create table t1(n int not null auto_increment primary key)
+master-bin.001	172	Intvar	1	172	INSERT_ID=1
+master-bin.001	200	Query	1	200	use `test`; insert into t1 values (NULL)
+master-bin.001	263	Query	1	263	use `test`; drop table t1
+master-bin.001	311	Query	1	311	use `test`; create table t1 (word char(20) not null)
+master-bin.001	386	Create_file	1	386	db=test;table=t1;file_id=1;block_len=581
+master-bin.001	1056	Exec_load	1	1056	;file_id=1
+master-bin.001	1079	Query	1	1079	use `test`; drop table t1
+show binlog events from 79 limit 1;
+Log_name	Pos	Event_type	Server_id	Orig_log_pos	Info
+master-bin.001	79	Query	1	79	use `test`; create table t1(n int not null auto_increment primary key)
+show binlog events from 79 limit 2;
+Log_name	Pos	Event_type	Server_id	Orig_log_pos	Info
+master-bin.001	79	Query	1	79	use `test`; create table t1(n int not null auto_increment primary key)
+master-bin.001	172	Intvar	1	172	INSERT_ID=1
+show binlog events from 79 limit 2,1;
+Log_name	Pos	Event_type	Server_id	Orig_log_pos	Info
+master-bin.001	200	Query	1	200	use `test`; insert into t1 values (NULL)
+flush logs;
+create table t5 (a int);
+drop table t5;
+slave start;
+flush logs;
+slave stop;
+create table t1 (n int);
+insert into t1 values (1);
+drop table t1;
+show binlog events;
+Log_name	Pos	Event_type	Server_id	Orig_log_pos	Info
+master-bin.001	4	Start	1	4	Server ver: VERSION, Binlog ver: 3
+master-bin.001	79	Query	1	79	use `test`; create table t1(n int not null auto_increment primary key)
+master-bin.001	172	Intvar	1	172	INSERT_ID=1
+master-bin.001	200	Query	1	200	use `test`; insert into t1 values (NULL)
+master-bin.001	263	Query	1	263	use `test`; drop table t1
+master-bin.001	311	Query	1	311	use `test`; create table t1 (word char(20) not null)
+master-bin.001	386	Create_file	1	386	db=test;table=t1;file_id=1;block_len=581
+master-bin.001	1056	Exec_load	1	1056	;file_id=1
+master-bin.001	1079	Query	1	1079	use `test`; drop table t1
+master-bin.001	1127	Rotate	1	1127	master-bin.002;pos=4
+show binlog events in 'master-bin.002';
+Log_name	Pos	Event_type	Server_id	Orig_log_pos	Info
+master-bin.002	4	Query	1	4	use `test`; create table t5 (a int)
+master-bin.002	62	Query	1	62	use `test`; drop table t5
+master-bin.002	110	Query	1	110	use `test`; create table t1 (n int)
+master-bin.002	168	Query	1	168	use `test`; insert into t1 values (1)
+master-bin.002	228	Query	1	228	use `test`; drop table t1
+show master logs;
+Log_name
+master-bin.001
+master-bin.002
+slave start;
+show master logs;
+Log_name
+slave-bin.001
+slave-bin.002
+show binlog events in 'slave-bin.001' from 4;
+Log_name	Pos	Event_type	Server_id	Orig_log_pos	Info
+slave-bin.001	4	Start	2	4	Server ver: VERSION, Binlog ver: 3
+slave-bin.001	79	Query	1	79	use `test`; create table t1(n int not null auto_increment primary key)
+slave-bin.001	172	Intvar	1	172	INSERT_ID=1
+slave-bin.001	200	Query	1	200	use `test`; insert into t1 values (NULL)
+slave-bin.001	263	Query	1	263	use `test`; drop table t1
+slave-bin.001	311	Query	1	311	use `test`; create table t1 (word char(20) not null)
+slave-bin.001	386	Create_file	1	386	db=test;table=t1;file_id=1;block_len=581
+slave-bin.001	1065	Exec_load	1	1065	;file_id=1
+slave-bin.001	1088	Query	1	1088	use `test`; drop table t1
+slave-bin.001	1136	Query	1	1136	use `test`; create table t5 (a int)
+slave-bin.001	1194	Query	1	1194	use `test`; drop table t5
+slave-bin.001	1242	Rotate	2	1242	slave-bin.002;pos=4
+show binlog events in 'slave-bin.002' from 4;
+Log_name	Pos	Event_type	Server_id	Orig_log_pos	Info
+slave-bin.002	4	Query	1	4	use `test`; create table t1 (n int)
+slave-bin.002	62	Query	1	62	use `test`; insert into t1 values (1)
+slave-bin.002	122	Query	1	122	use `test`; drop table t1
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.002	276	slave-relay-bin.003	252	master-bin.002	Yes	Yes			0		0	276	1612	None		0
+show binlog events in 'slave-bin.005' from 4;
+Error when executing command SHOW BINLOG EVENTS: Could not find target log
diff -ruN base/mysql-test/rpl_transaction_test/r/rpl_max_relay_size.result mysql40gpl/mysql-test/rpl_transaction_test/r/rpl_max_relay_size.result
--- base/mysql-test/rpl_transaction_test/r/rpl_max_relay_size.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/rpl_transaction_test/r/rpl_max_relay_size.result	2007-04-21 09:56:54.000000000 -0700
@@ -0,0 +1,61 @@
+slave stop;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+reset master;
+reset slave;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+slave start;
+stop slave;
+create table t1 (a int);
+drop table t1;
+reset slave;
+set global max_binlog_size=8192;
+set global max_relay_log_size=8192-1;
+select @@global.max_relay_log_size;
+@@global.max_relay_log_size
+4096
+start slave;
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	50477	slave-relay-bin.014	1386	master-bin.001	Yes	Yes			0		0	50477	1390	None		0
+stop slave;
+reset slave;
+set global max_relay_log_size=(5*4096);
+select @@global.max_relay_log_size;
+@@global.max_relay_log_size
+20480
+start slave;
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	50477	slave-relay-bin.004	9561	master-bin.001	Yes	Yes			0		0	50477	#	None		0
+stop slave;
+reset slave;
+set global max_relay_log_size=0;
+select @@global.max_relay_log_size;
+@@global.max_relay_log_size
+0
+start slave;
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	50477	slave-relay-bin.008	1386	master-bin.001	Yes	Yes			0		0	50477	1390	None		0
+stop slave;
+reset slave;
+flush logs;
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1		4	slave-relay-bin.001	4		No	No			0		0	0	4	None		0
+reset slave;
+start slave;
+flush logs;
+create table t1 (a int);
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	50535	slave-relay-bin.009	103	master-bin.001	Yes	Yes			0		0	50535	1493	None		0
+flush logs;
+drop table t1;
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	50583	slave-relay-bin.010	93	master-bin.001	Yes	Yes			0		0	50583	1483	None		0
+flush logs;
+show master status;
+File	Position	Binlog_do_db	Binlog_ignore_db
+master-bin.002	4		
diff -ruN base/mysql-test/rpl_transaction_test/r/rpl_reset_slave.result mysql40gpl/mysql-test/rpl_transaction_test/r/rpl_reset_slave.result
--- base/mysql-test/rpl_transaction_test/r/rpl_reset_slave.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/rpl_transaction_test/r/rpl_reset_slave.result	2007-04-21 09:56:54.000000000 -0700
@@ -0,0 +1,32 @@
+slave stop;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+reset master;
+reset slave;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+slave start;
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	79	slave-relay-bin.002	120	master-bin.001	Yes	Yes			0		0	79	124	None		0
+stop slave;
+change master to master_user='test';
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	test	MASTER_PORT	1	master-bin.001	79	slave-relay-bin.001	4	master-bin.001	No	No			0		0	79	4	None		0
+reset slave;
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1		4	slave-relay-bin.001	4		No	No			0		0	0	4	None		0
+start slave;
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	1	master-bin.001	79	slave-relay-bin.002	120	master-bin.001	Yes	Yes			0		0	79	124	None		0
+stop slave;
+reset slave;
+start slave;
+create temporary table t1 (a int);
+stop slave;
+reset slave;
+start slave;
+show status like 'slave_open_temp_tables';
+Variable_name	Value
+Slave_open_temp_tables	1
diff -ruN base/mysql-test/rpl_transaction_test/r/rpl_rotate_logs.result mysql40gpl/mysql-test/rpl_transaction_test/r/rpl_rotate_logs.result
--- base/mysql-test/rpl_transaction_test/r/rpl_rotate_logs.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/rpl_transaction_test/r/rpl_rotate_logs.result	2007-04-21 09:56:54.000000000 -0700
@@ -0,0 +1,83 @@
+drop table if exists t1, t2, t3, t4;
+drop table if exists t1, t2, t3, t4;
+slave start;
+Could not initialize master info structure, more error messages can be found in the MySQL error log
+slave start;
+Could not initialize master info structure, more error messages can be found in the MySQL error log
+change master to master_host='127.0.0.1',master_port=MASTER_PORT, master_user='root';
+Could not initialize master info structure, more error messages can be found in the MySQL error log
+reset slave;
+change master to master_host='127.0.0.1',master_port=MASTER_PORT, master_user='root';
+reset master;
+slave start;
+create temporary table temp_table (a char(80) not null);
+insert into temp_table values ("testing temporary tables");
+create table t1 (s text);
+insert into t1 values('Could not break slave'),('Tried hard');
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	60	master-bin.001	417	slave-relay-bin.001	458	master-bin.001	Yes	Yes			0		0	417	#	None		0
+select * from t1;
+s
+Could not break slave
+Tried hard
+flush logs;
+create table t2(m int not null auto_increment primary key);
+insert into t2 values (34),(67),(123);
+flush logs;
+show master logs;
+Log_name
+master-bin.001
+master-bin.002
+master-bin.003
+create table t3 select * from temp_table;
+select * from t3;
+a
+testing temporary tables
+drop table temp_table, t3;
+insert into t2 values(1234);
+set insert_id=1234;
+insert into t2 values(NULL);
+set global sql_slave_skip_counter=1;
+slave start;
+purge master logs to 'master-bin.003';
+show master logs;
+Log_name
+master-bin.003
+insert into t2 values (65);
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	60	master-bin.003	290	slave-relay-bin.001	1073	master-bin.003	Yes	Yes			0		0	290	#	None		0
+select * from t2;
+m
+34
+65
+67
+123
+1234
+create temporary table temp_table (a char(80) not null);
+insert into temp_table values ("testing temporary tables part 2");
+create table t3 (n int);
+select count(*) from t3 where n >= 4;
+count(*)
+100
+create table t4 select * from temp_table;
+show master logs;
+Log_name
+master-bin.003
+master-bin.004
+show master status;
+File	Position	Binlog_do_db	Binlog_ignore_db
+master-bin.004	2886		
+select * from t4;
+a
+testing temporary tables part 2
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	MASTER_PORT	60	master-bin.004	2886	slave-relay-bin.001	7870	master-bin.004	Yes	Yes			0		0	2886	#	None		0
+lock tables t3 read;
+select count(*) from t3 where n >= 4;
+count(*)
+100
+unlock tables;
+drop table if exists t1,t2,t3,t4;
diff -ruN base/mysql-test/rpl_transaction_test/r/rpl_transaction_001.result mysql40gpl/mysql-test/rpl_transaction_test/r/rpl_transaction_001.result
--- base/mysql-test/rpl_transaction_test/r/rpl_transaction_001.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/rpl_transaction_test/r/rpl_transaction_001.result	2007-04-21 09:56:54.000000000 -0700
@@ -0,0 +1,143 @@
+slave stop;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+reset master;
+reset slave;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+slave start;
+drop table if exists t1;
+create table t1(n int primary key);
+drop database if exists ignore_db;
+create database ignore_db;
+use test;
+insert into t1 values (700);
+use ignore_db;
+create table ign1(n int primary key);
+insert into ign1 values (70);
+insert into ign1 values (69);
+insert into ign1 values (68);
+insert into ign1 values (67);
+insert into ign1 values (66);
+insert into ign1 values (65);
+insert into ign1 values (64);
+insert into ign1 values (63);
+insert into ign1 values (62);
+insert into ign1 values (61);
+insert into ign1 values (60);
+insert into ign1 values (59);
+insert into ign1 values (58);
+insert into ign1 values (57);
+insert into ign1 values (56);
+insert into ign1 values (55);
+insert into ign1 values (54);
+insert into ign1 values (53);
+insert into ign1 values (52);
+insert into ign1 values (51);
+insert into ign1 values (50);
+insert into ign1 values (49);
+insert into ign1 values (48);
+insert into ign1 values (47);
+insert into ign1 values (46);
+insert into ign1 values (45);
+insert into ign1 values (44);
+insert into ign1 values (43);
+insert into ign1 values (42);
+insert into ign1 values (41);
+insert into ign1 values (40);
+insert into ign1 values (39);
+insert into ign1 values (38);
+insert into ign1 values (37);
+insert into ign1 values (36);
+insert into ign1 values (35);
+insert into ign1 values (34);
+insert into ign1 values (33);
+insert into ign1 values (32);
+insert into ign1 values (31);
+insert into ign1 values (30);
+insert into ign1 values (29);
+insert into ign1 values (28);
+insert into ign1 values (27);
+insert into ign1 values (26);
+insert into ign1 values (25);
+insert into ign1 values (24);
+insert into ign1 values (23);
+insert into ign1 values (22);
+insert into ign1 values (21);
+insert into ign1 values (20);
+insert into ign1 values (19);
+insert into ign1 values (18);
+insert into ign1 values (17);
+insert into ign1 values (16);
+insert into ign1 values (15);
+insert into ign1 values (14);
+insert into ign1 values (13);
+insert into ign1 values (12);
+insert into ign1 values (11);
+insert into ign1 values (10);
+insert into ign1 values (9);
+insert into ign1 values (8);
+insert into ign1 values (7);
+insert into ign1 values (6);
+insert into ign1 values (5);
+insert into ign1 values (4);
+insert into ign1 values (3);
+insert into ign1 values (2);
+insert into ign1 values (1);
+use test;
+insert into t1 values (701);
+insert into t1 values (50);
+insert into t1 values (49);
+insert into t1 values (48);
+insert into t1 values (47);
+insert into t1 values (46);
+insert into t1 values (45);
+insert into t1 values (44);
+insert into t1 values (43);
+insert into t1 values (42);
+insert into t1 values (41);
+insert into t1 values (40);
+insert into t1 values (39);
+insert into t1 values (38);
+insert into t1 values (37);
+insert into t1 values (36);
+insert into t1 values (35);
+insert into t1 values (34);
+insert into t1 values (33);
+insert into t1 values (32);
+insert into t1 values (31);
+insert into t1 values (30);
+insert into t1 values (29);
+insert into t1 values (28);
+insert into t1 values (27);
+insert into t1 values (26);
+insert into t1 values (25);
+insert into t1 values (24);
+insert into t1 values (23);
+insert into t1 values (22);
+insert into t1 values (21);
+insert into t1 values (20);
+insert into t1 values (19);
+insert into t1 values (18);
+insert into t1 values (17);
+insert into t1 values (16);
+insert into t1 values (15);
+insert into t1 values (14);
+insert into t1 values (13);
+insert into t1 values (12);
+insert into t1 values (11);
+insert into t1 values (10);
+insert into t1 values (9);
+insert into t1 values (8);
+insert into t1 values (7);
+insert into t1 values (6);
+insert into t1 values (5);
+insert into t1 values (4);
+insert into t1 values (3);
+insert into t1 values (2);
+insert into t1 values (1);
+select count(*) from t1;
+count(*)
+52
+select * from ign1;
+Table 'test.ign1' doesn't exist
+drop table t1;
+drop database ignore_db;
diff -ruN base/mysql-test/rpl_transaction_test/r/rpl_transaction_002.result mysql40gpl/mysql-test/rpl_transaction_test/r/rpl_transaction_002.result
--- base/mysql-test/rpl_transaction_test/r/rpl_transaction_002.result	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/rpl_transaction_test/r/rpl_transaction_002.result	2007-04-21 09:56:54.000000000 -0700
@@ -0,0 +1,264 @@
+slave stop;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+reset master;
+reset slave;
+drop table if exists t1,t2,t3,t4,t5,t6,t7,t8,t9;
+slave start;
+drop table if exists t1;
+create table t1(n int) engine = InnoDB;
+use test;
+begin;
+insert into t1 values (300);
+insert into t1 values (299);
+insert into t1 values (298);
+insert into t1 values (297);
+insert into t1 values (296);
+insert into t1 values (295);
+insert into t1 values (294);
+insert into t1 values (293);
+insert into t1 values (292);
+insert into t1 values (291);
+insert into t1 values (290);
+insert into t1 values (289);
+insert into t1 values (288);
+insert into t1 values (287);
+insert into t1 values (286);
+insert into t1 values (285);
+insert into t1 values (284);
+insert into t1 values (283);
+insert into t1 values (282);
+insert into t1 values (281);
+insert into t1 values (280);
+insert into t1 values (279);
+insert into t1 values (278);
+insert into t1 values (277);
+insert into t1 values (276);
+insert into t1 values (275);
+insert into t1 values (274);
+insert into t1 values (273);
+insert into t1 values (272);
+insert into t1 values (271);
+insert into t1 values (270);
+insert into t1 values (269);
+insert into t1 values (268);
+insert into t1 values (267);
+insert into t1 values (266);
+insert into t1 values (265);
+insert into t1 values (264);
+insert into t1 values (263);
+insert into t1 values (262);
+insert into t1 values (261);
+insert into t1 values (260);
+insert into t1 values (259);
+insert into t1 values (258);
+insert into t1 values (257);
+insert into t1 values (256);
+insert into t1 values (255);
+insert into t1 values (254);
+insert into t1 values (253);
+insert into t1 values (252);
+insert into t1 values (251);
+insert into t1 values (250);
+insert into t1 values (249);
+insert into t1 values (248);
+insert into t1 values (247);
+insert into t1 values (246);
+insert into t1 values (245);
+insert into t1 values (244);
+insert into t1 values (243);
+insert into t1 values (242);
+insert into t1 values (241);
+insert into t1 values (240);
+insert into t1 values (239);
+insert into t1 values (238);
+insert into t1 values (237);
+insert into t1 values (236);
+insert into t1 values (235);
+insert into t1 values (234);
+insert into t1 values (233);
+insert into t1 values (232);
+insert into t1 values (231);
+insert into t1 values (230);
+insert into t1 values (229);
+insert into t1 values (228);
+insert into t1 values (227);
+insert into t1 values (226);
+insert into t1 values (225);
+insert into t1 values (224);
+insert into t1 values (223);
+insert into t1 values (222);
+insert into t1 values (221);
+commit;
+insert into t1 values (700);
+begin;
+insert into t1 values (300);
+insert into t1 values (299);
+insert into t1 values (298);
+insert into t1 values (297);
+insert into t1 values (296);
+insert into t1 values (295);
+insert into t1 values (294);
+insert into t1 values (293);
+insert into t1 values (292);
+insert into t1 values (291);
+insert into t1 values (290);
+insert into t1 values (289);
+insert into t1 values (288);
+insert into t1 values (287);
+insert into t1 values (286);
+insert into t1 values (285);
+insert into t1 values (284);
+insert into t1 values (283);
+insert into t1 values (282);
+insert into t1 values (281);
+insert into t1 values (280);
+insert into t1 values (279);
+insert into t1 values (278);
+insert into t1 values (277);
+insert into t1 values (276);
+insert into t1 values (275);
+insert into t1 values (274);
+insert into t1 values (273);
+insert into t1 values (272);
+insert into t1 values (271);
+insert into t1 values (270);
+insert into t1 values (269);
+insert into t1 values (268);
+insert into t1 values (267);
+insert into t1 values (266);
+insert into t1 values (265);
+insert into t1 values (264);
+insert into t1 values (263);
+insert into t1 values (262);
+insert into t1 values (261);
+insert into t1 values (260);
+insert into t1 values (259);
+insert into t1 values (258);
+insert into t1 values (257);
+insert into t1 values (256);
+insert into t1 values (255);
+insert into t1 values (254);
+insert into t1 values (253);
+insert into t1 values (252);
+insert into t1 values (251);
+insert into t1 values (250);
+insert into t1 values (249);
+insert into t1 values (248);
+insert into t1 values (247);
+insert into t1 values (246);
+insert into t1 values (245);
+insert into t1 values (244);
+insert into t1 values (243);
+insert into t1 values (242);
+insert into t1 values (241);
+insert into t1 values (240);
+insert into t1 values (239);
+insert into t1 values (238);
+insert into t1 values (237);
+insert into t1 values (236);
+insert into t1 values (235);
+insert into t1 values (234);
+insert into t1 values (233);
+insert into t1 values (232);
+insert into t1 values (231);
+insert into t1 values (230);
+insert into t1 values (229);
+insert into t1 values (228);
+insert into t1 values (227);
+insert into t1 values (226);
+insert into t1 values (225);
+insert into t1 values (224);
+insert into t1 values (223);
+insert into t1 values (222);
+insert into t1 values (221);
+commit;
+select count(*) from t1;
+count(*)
+161
+select n, count(*) from t1 group by n;
+n	count(*)
+221	2
+222	2
+223	2
+224	2
+225	2
+226	2
+227	2
+228	2
+229	2
+230	2
+231	2
+232	2
+233	2
+234	2
+235	2
+236	2
+237	2
+238	2
+239	2
+240	2
+241	2
+242	2
+243	2
+244	2
+245	2
+246	2
+247	2
+248	2
+249	2
+250	2
+251	2
+252	2
+253	2
+254	2
+255	2
+256	2
+257	2
+258	2
+259	2
+260	2
+261	2
+262	2
+263	2
+264	2
+265	2
+266	2
+267	2
+268	2
+269	2
+270	2
+271	2
+272	2
+273	2
+274	2
+275	2
+276	2
+277	2
+278	2
+279	2
+280	2
+281	2
+282	2
+283	2
+284	2
+285	2
+286	2
+287	2
+288	2
+289	2
+290	2
+291	2
+292	2
+293	2
+294	2
+295	2
+296	2
+297	2
+298	2
+299	2
+300	2
+700	1
+show slave status;
+Master_Host	Master_User	Master_Port	Connect_retry	Master_Log_File	Read_Master_Log_Pos	Relay_Log_File	Relay_Log_Pos	Relay_Master_Log_File	Slave_IO_Running	Slave_SQL_Running	Replicate_do_db	Replicate_ignore_db	Last_errno	Last_error	Skip_counter	Exec_master_log_pos	Relay_log_space	Until_Condition	Until_Log_File	Until_Log_Pos
+127.0.0.1	root	9306	1	master-bin.001	10296	slave-relay-bin.004	2132	master-bin.001	Yes	Yes		ignore_db	0		0	10296	10431	None		0
+drop table t1;
diff -ruN base/mysql-test/rpl_transaction_test/README mysql40gpl/mysql-test/rpl_transaction_test/README
--- base/mysql-test/rpl_transaction_test/README	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/rpl_transaction_test/README	2007-04-21 09:56:54.000000000 -0700
@@ -0,0 +1,19 @@
+The tests under this directory is to support the transaction support for replication.
+We have to store those tests in a different place because some test results are different
+when transaction support is enabled.
+
+How to run those tests:
+  . copy all test files to their corresponding directories
+  . ./mysql-test-run --local --mysqld="--rpl_transaction_enabled=1" --slave-innodb --do-test=rpl
+
+
+rpl_transaction_001 need manual verification:
+  . ./mysql-test-run --local --mysqld="--rpl_transaction_enabled=1" --slave-innodb rpl_transaction_001
+  . slave-relay-bin.004: should be the only relay-log (slave-relay-bin.00[123] should be deleted)
+  . the first event in slave-relay-bin.004 should be (pos 8140 must correct):
+    "#070124 18:49:45 server id -1  log_pos 0        Rotate to master-bin.001  pos: 8140"
+
+rpl_transaction_002 need manual verification:
+  . ./mysql-test-run --local --mysqld="--rpl_transaction_enabled=1" --slave-innodb rpl_transaction_002
+  . slave-relay-bin.003, slave-relay-bin.004 should be left
+  . slave-relay-bin.001, slave-relay-bin.002 should be dropped
diff -ruN base/mysql-test/rpl_transaction_test/t/rpl_transaction_001-slave.opt mysql40gpl/mysql-test/rpl_transaction_test/t/rpl_transaction_001-slave.opt
--- base/mysql-test/rpl_transaction_test/t/rpl_transaction_001-slave.opt	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/rpl_transaction_test/t/rpl_transaction_001-slave.opt	2007-04-21 09:56:54.000000000 -0700
@@ -0,0 +1 @@
+-O max_binlog_size=4096 --replicate-ignore-db=ignore_db
diff -ruN base/mysql-test/rpl_transaction_test/t/rpl_transaction_001.test mysql40gpl/mysql-test/rpl_transaction_test/t/rpl_transaction_001.test
--- base/mysql-test/rpl_transaction_test/t/rpl_transaction_001.test	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/rpl_transaction_test/t/rpl_transaction_001.test	2007-04-21 09:56:54.000000000 -0700
@@ -0,0 +1,46 @@
+source include/master-slave.inc;
+
+drop table if exists t1;
+create table t1(n int primary key);
+
+drop database if exists ignore_db;
+create database ignore_db;
+
+use test;
+insert into t1 values (700);
+
+use ignore_db;
+create table ign1(n int primary key);
+let $i=70;
+while ($i)
+{
+  eval insert into ign1 values ($i);
+  dec $i;
+}
+
+use test;
+insert into t1 values (701);
+let $i=50;
+while ($i)
+{
+  eval insert into t1 values ($i);
+  dec $i;
+}
+
+
+save_master_pos;
+
+connection slave;
+sync_with_master;
+
+select count(*) from t1;                                     
+--error 1146
+select * from ign1;
+
+connection master;
+drop table t1;
+drop database ignore_db;
+save_master_pos;
+
+connection slave;
+sync_with_master;
diff -ruN base/mysql-test/rpl_transaction_test/t/rpl_transaction_002-slave.opt mysql40gpl/mysql-test/rpl_transaction_test/t/rpl_transaction_002-slave.opt
--- base/mysql-test/rpl_transaction_test/t/rpl_transaction_002-slave.opt	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/rpl_transaction_test/t/rpl_transaction_002-slave.opt	2007-04-21 09:56:54.000000000 -0700
@@ -0,0 +1 @@
+-O max_binlog_size=4096 --replicate-ignore-db=ignore_db
diff -ruN base/mysql-test/rpl_transaction_test/t/rpl_transaction_002.test mysql40gpl/mysql-test/rpl_transaction_test/t/rpl_transaction_002.test
--- base/mysql-test/rpl_transaction_test/t/rpl_transaction_002.test	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/rpl_transaction_test/t/rpl_transaction_002.test	2007-04-21 09:56:54.000000000 -0700
@@ -0,0 +1,191 @@
+source include/master-slave.inc;
+
+drop table if exists t1;
+create table t1(n int) engine = InnoDB;
+
+use test;
+
+begin;
+insert into t1 values (300);
+insert into t1 values (299);
+insert into t1 values (298);
+insert into t1 values (297);
+insert into t1 values (296);
+insert into t1 values (295);
+insert into t1 values (294);
+insert into t1 values (293);
+insert into t1 values (292);
+insert into t1 values (291);
+insert into t1 values (290);
+insert into t1 values (289);
+insert into t1 values (288);
+insert into t1 values (287);
+insert into t1 values (286);
+insert into t1 values (285);
+insert into t1 values (284);
+insert into t1 values (283);
+insert into t1 values (282);
+insert into t1 values (281);
+insert into t1 values (280);
+insert into t1 values (279);
+insert into t1 values (278);
+insert into t1 values (277);
+insert into t1 values (276);
+insert into t1 values (275);
+insert into t1 values (274);
+insert into t1 values (273);
+insert into t1 values (272);
+insert into t1 values (271);
+insert into t1 values (270);
+insert into t1 values (269);
+insert into t1 values (268);
+insert into t1 values (267);
+insert into t1 values (266);
+insert into t1 values (265);
+insert into t1 values (264);
+insert into t1 values (263);
+insert into t1 values (262);
+insert into t1 values (261);
+insert into t1 values (260);
+insert into t1 values (259);
+insert into t1 values (258);
+insert into t1 values (257);
+insert into t1 values (256);
+insert into t1 values (255);
+insert into t1 values (254);
+insert into t1 values (253);
+insert into t1 values (252);
+insert into t1 values (251);
+insert into t1 values (250);
+insert into t1 values (249);
+insert into t1 values (248);
+insert into t1 values (247);
+insert into t1 values (246);
+insert into t1 values (245);
+insert into t1 values (244);
+insert into t1 values (243);
+insert into t1 values (242);
+insert into t1 values (241);
+insert into t1 values (240);
+insert into t1 values (239);
+insert into t1 values (238);
+insert into t1 values (237);
+insert into t1 values (236);
+insert into t1 values (235);
+insert into t1 values (234);
+insert into t1 values (233);
+insert into t1 values (232);
+insert into t1 values (231);
+insert into t1 values (230);
+insert into t1 values (229);
+insert into t1 values (228);
+insert into t1 values (227);
+insert into t1 values (226);
+insert into t1 values (225);
+insert into t1 values (224);
+insert into t1 values (223);
+insert into t1 values (222);
+insert into t1 values (221);
+commit;
+
+insert into t1 values (700);
+
+begin;
+insert into t1 values (300);
+insert into t1 values (299);
+insert into t1 values (298);
+insert into t1 values (297);
+insert into t1 values (296);
+insert into t1 values (295);
+insert into t1 values (294);
+insert into t1 values (293);
+insert into t1 values (292);
+insert into t1 values (291);
+insert into t1 values (290);
+insert into t1 values (289);
+insert into t1 values (288);
+insert into t1 values (287);
+insert into t1 values (286);
+insert into t1 values (285);
+insert into t1 values (284);
+insert into t1 values (283);
+insert into t1 values (282);
+insert into t1 values (281);
+insert into t1 values (280);
+insert into t1 values (279);
+insert into t1 values (278);
+insert into t1 values (277);
+insert into t1 values (276);
+insert into t1 values (275);
+insert into t1 values (274);
+insert into t1 values (273);
+insert into t1 values (272);
+insert into t1 values (271);
+insert into t1 values (270);
+insert into t1 values (269);
+insert into t1 values (268);
+insert into t1 values (267);
+insert into t1 values (266);
+insert into t1 values (265);
+insert into t1 values (264);
+insert into t1 values (263);
+insert into t1 values (262);
+insert into t1 values (261);
+insert into t1 values (260);
+insert into t1 values (259);
+insert into t1 values (258);
+insert into t1 values (257);
+insert into t1 values (256);
+insert into t1 values (255);
+insert into t1 values (254);
+insert into t1 values (253);
+insert into t1 values (252);
+insert into t1 values (251);
+insert into t1 values (250);
+insert into t1 values (249);
+insert into t1 values (248);
+insert into t1 values (247);
+insert into t1 values (246);
+insert into t1 values (245);
+insert into t1 values (244);
+insert into t1 values (243);
+insert into t1 values (242);
+insert into t1 values (241);
+insert into t1 values (240);
+insert into t1 values (239);
+insert into t1 values (238);
+insert into t1 values (237);
+insert into t1 values (236);
+insert into t1 values (235);
+insert into t1 values (234);
+insert into t1 values (233);
+insert into t1 values (232);
+insert into t1 values (231);
+insert into t1 values (230);
+insert into t1 values (229);
+insert into t1 values (228);
+insert into t1 values (227);
+insert into t1 values (226);
+insert into t1 values (225);
+insert into t1 values (224);
+insert into t1 values (223);
+insert into t1 values (222);
+insert into t1 values (221);
+commit;
+
+save_master_pos;
+
+connection slave;
+sync_with_master;
+
+select count(*) from t1;                                     
+select n, count(*) from t1 group by n;
+
+show slave status;
+
+connection master;
+drop table t1;
+save_master_pos;
+
+connection slave;
+sync_with_master;
diff -ruN base/mysql-test/t/checksum1.test mysql40gpl/mysql-test/t/checksum1.test
--- base/mysql-test/t/checksum1.test	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/t/checksum1.test	2007-04-21 09:56:55.000000000 -0700
@@ -0,0 +1,52 @@
+# Test hash() function
+# Test unordered_checksum() and ordered_checksum() aggregate functions
+
+drop table if exists t1;
+
+create table t1(i int, i1 int, c1 char(1), c2 char(2), f float, d double, vc varchar(10));
+insert into t1 values (1, 3, '1', '1', 1, 1, '1');
+insert into t1 values (2, 2, '2', '2', 2, 2, '2');
+insert into t1 values (3, 1, '3', '22', 3, 3, '22');
+
+# For each of these queries, each hash value should be different
+select hash(i) from t1 order by i;
+select hash(c1) from t1 order by i;
+select hash(c2) from t1 order by i;
+select hash(f) from t1 order by i;
+select hash(d) from t1 order by i;
+select hash(vc) from t1 order by i;
+select hash(i, c1, c2, f, d, vc) from t1 order by i;
+
+# The results for these queries should not match
+select '1: not match1', unordered_checksum(i, c1, c2, f, d, vc) from t1;
+select '1: not match2', unordered_checksum(i1, c1, c2, f, d, vc) from t1;
+
+# The results for these queries should not match
+select '2: not match1', ordered_checksum(i, c1, c2, f, d, vc) from t1;
+select '2: not match2', ordered_checksum(i1, c1, c2, f, d, vc) from t1;
+
+# The results for these queries should match
+select '3: match1', unordered_checksum(i) from t1;
+select '3: match2', unordered_checksum(i1) from t1;
+
+# The results for these queries should not match
+select '4: not match1', ordered_checksum(i) from t1;
+select '4: not match2', ordered_checksum(i1) from t1;
+
+# The results for these queries should not match
+select '5: not match1', unordered_checksum(i, c1, c2, f, d, vc) from t1 group by i1 order by i;
+select '5: not match2', unordered_checksum(i1, c1, c2, f, d, vc) from t1 group by i order by i;
+
+# The results for these queries should not match
+select '6: not match1', unordered_checksum(i) from t1 group by i1 order by i;
+select '6: not match2', unordered_checksum(i1) from t1 group by i order by i;
+
+# The results for these queries should not match
+select '7: match1', ordered_checksum(i, c1, c2, f, d, vc) from t1 group by i1 order by i;
+select '7: match2', ordered_checksum(i1, c1, c2, f, d, vc) from t1 group by i order by i;
+
+# The results for these queries should not match
+select '8: match1', ordered_checksum(i) from t1 group by i1 order by i;
+select '8: match2', ordered_checksum(i1) from t1 group by i order by i;
+
+drop table t1;
diff -ruN base/mysql-test/t/checksum2.test mysql40gpl/mysql-test/t/checksum2.test
--- base/mysql-test/t/checksum2.test	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/t/checksum2.test	2007-04-21 09:56:55.000000000 -0700
@@ -0,0 +1,27 @@
+# Test hash() function
+# Test unordered_checksum() and ordered_checksum() aggregate functions
+
+drop table if exists t2;
+create table t2(dt datetime, da date, ti time, ts timestamp, y year);
+insert into t2 values ('2006-01-01 10:00:00', '2006-01-01', '10:00:00', '20060101100000', 2006);
+insert into t2 values ('2007-01-01 11:00:00', '2007-01-01', '11:00:00', '20060101110000', 2007);
+
+select hash(dt) from t2;
+select hash(da) from t2;
+select hash(ti) from t2;
+select hash(ts) from t2;
+select hash(y) from t2;
+
+select unordered_checksum(dt) from t2;
+select unordered_checksum(da) from t2;
+select unordered_checksum(ti) from t2;
+select unordered_checksum(ts) from t2;
+select unordered_checksum(y) from t2;
+
+select ordered_checksum(dt) from t2;
+select ordered_checksum(da) from t2;
+select ordered_checksum(ti) from t2;
+select ordered_checksum(ts) from t2;
+select ordered_checksum(y) from t2;
+
+drop table t2;
diff -ruN base/mysql-test/t/checksum3.test mysql40gpl/mysql-test/t/checksum3.test
--- base/mysql-test/t/checksum3.test	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/t/checksum3.test	2007-04-21 09:56:55.000000000 -0700
@@ -0,0 +1,24 @@
+# Test hash() function
+# Test unordered_checksum() and ordered_checksum() aggregate functions
+
+drop table if exists t3;
+create table t3(bi binary(20), vb varbinary(20), bl blob, t text);
+insert into t3 values ('abc', 'def', 'ghi', 'jkl');
+insert into t3 values ('abc1', 'def1', 'ghi1', 'jkl1');
+
+select hash(bi) from t3;
+select hash(vb) from t3;
+select hash(bl) from t3;
+select hash(t) from t3;
+
+select unordered_checksum(bi) from t3;
+select unordered_checksum(vb) from t3;
+select unordered_checksum(bl) from t3;
+select unordered_checksum(t) from t3;
+
+select ordered_checksum(bi) from t3;
+select ordered_checksum(vb) from t3;
+select ordered_checksum(bl) from t3;
+select ordered_checksum(t) from t3;
+
+drop table t3;
diff -ruN base/mysql-test/t/checksum4.test mysql40gpl/mysql-test/t/checksum4.test
--- base/mysql-test/t/checksum4.test	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/t/checksum4.test	2007-04-21 09:56:55.000000000 -0700
@@ -0,0 +1,18 @@
+# Test hash() function
+# Test unordered_checksum() and ordered_checksum() aggregate functions
+
+drop table if exists t4;
+create table t4(e enum('1', '2'), s set('1', '2', '3'));
+insert into t4 values('1', '1,2');
+insert into t4 values('2', '2,3');
+
+select hash(e) from t4;
+select hash(s) from t4;
+
+select unordered_checksum(e) from t4;
+select unordered_checksum(s) from t4;
+select ordered_checksum(e) from t4;
+select ordered_checksum(s) from t4;
+
+drop table t4;
+
diff -ruN base/mysql-test/t/distinguish_privilege.test mysql40gpl/mysql-test/t/distinguish_privilege.test
--- base/mysql-test/t/distinguish_privilege.test	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/t/distinguish_privilege.test	2007-04-21 09:56:55.000000000 -0700
@@ -0,0 +1,54 @@
+# Test behavior of correct reporting error type for Google bug[211975]
+# - Lack of Permissions looks like missing tables
+#
+
+# Requires privileges to be enabled
+-- source include/not_embedded.inc
+
+# Prepare play-ground 
+--disable_warnings
+drop database if exists mysqltest;
+--enable_warnings
+create database mysqltest;
+create table mysqltest.t1 (a int) engine = InnoDB;
+insert into mysqltest.t1 values (3);
+create table mysqltest.t2 (a int) engine = InnoDB;
+insert into mysqltest.t2 values (3);
+
+# Just be sure that nothing will bother us
+delete from mysql.user where user like 'mysqltest\_%';
+delete from mysql.db where user like 'mysqltest\_%';
+delete from mysql.tables_priv where user like 'mysqltest\_%';
+delete from mysql.columns_priv where user like 'mysqltest\_%';
+flush privileges;
+
+grant all on mysqltest.t1 to mysqltest_1@localhost;
+# This ensures that counters are reset and makes test scheduling independent
+flush user_resources;
+
+connect (user1, localhost, mysqltest_1,,mysqltest);
+connection user1;
+select * from t1;
+--error 1142
+select * from t2;
+--error 1142
+desc t2;
+--error 1146
+select * from t3;
+--error 1146
+desc t3;
+
+# cleanup
+connection default;
+
+# Just be sure that nothing will bother us
+delete from mysql.user where user like 'mysqltest\_%';
+delete from mysql.db where user like 'mysqltest\_%';
+delete from mysql.tables_priv where user like 'mysqltest\_%';
+delete from mysql.columns_priv where user like 'mysqltest\_%';
+flush privileges;
+
+disconnect user1;
+
+# Final cleanup
+drop database mysqltest;
diff -ruN base/mysql-test/t/flush.test mysql40gpl/mysql-test/t/flush.test
--- base/mysql-test/t/flush.test	2005-09-02 15:50:38.000000000 -0700
+++ mysql40gpl/mysql-test/t/flush.test	2007-04-21 09:56:55.000000000 -0700
@@ -67,3 +67,9 @@
 insert into t1 values (345);
 select * from t1;
 drop table t1;
+
+# test flush table_statistics and index_statistics
+flush table_statistics;
+show table_statistics;
+flush index_statistics;
+show index_statistics;
diff -ruN base/mysql-test/t/ieee754_to_string.test mysql40gpl/mysql-test/t/ieee754_to_string.test
--- base/mysql-test/t/ieee754_to_string.test	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/t/ieee754_to_string.test	2007-04-21 09:56:56.000000000 -0700
@@ -0,0 +1,21 @@
+#
+# Test for lossless conversion from double -> decimal -> double
+#
+
+drop table if exists t1,t2;
+
+CREATE TABLE t1 (d double, i int);
+CREATE TABLE t2 (v varchar(30), i int);
+
+INSERT INTO t1 VALUES (1.7976931348623157e+308, 0);
+INSERT INTO t1 VALUES (NULL, 0);
+INSERT INTO t1 VALUES ('inf', 0);
+INSERT INTO t1 VALUES ('nan', 0);
+INSERT INTO t1 VALUES (-0e0, 0);
+INSERT INTO t2 SELECT IEEE754_TO_STRING(d), i from t1;
+INSERT INTO t1 SELECT * from t2;
+
+SELECT COUNT(*), d from t1 group by d order by d;
+
+DROP TABLE t1;
+DROP TABLE t2;
diff -ruN base/mysql-test/t/order_by_fp.test mysql40gpl/mysql-test/t/order_by_fp.test
--- base/mysql-test/t/order_by_fp.test	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/t/order_by_fp.test	2007-04-21 09:56:56.000000000 -0700
@@ -0,0 +1,11 @@
+#
+# Test order by for floating point types
+#
+
+drop table if exists t1;
+
+CREATE TABLE t1 (d double);
+
+INSERT INTO t1 VALUES (-0E0), (+0E0), (1E308), (-1E308), (1), (-1);
+SELECT 2 * d AS e FROM t1 ORDER BY e;
+DROP TABLE t1;
diff -ruN base/mysql-test/t/rpl_innodb_clear_status.test mysql40gpl/mysql-test/t/rpl_innodb_clear_status.test
--- base/mysql-test/t/rpl_innodb_clear_status.test	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/t/rpl_innodb_clear_status.test	2007-04-21 09:56:58.000000000 -0700
@@ -0,0 +1,45 @@
+--source include/not_embedded.inc
+
+# Just be sure that nothing will bother us
+create database mysqltest;
+delete from mysql.user where user like 'mysqltest\_%';
+delete from mysql.db where user like 'mysqltest\_%';
+delete from mysql.tables_priv where user like 'mysqltest\_%';
+delete from mysql.columns_priv where user like 'mysqltest\_%';
+flush privileges;
+
+grant all on mysqltest.t1 to mysqltest_1@localhost;
+# This ensures that counters are reset and makes test scheduling independent
+flush user_resources;
+
+connect (con1,localhost,root,,);
+connect (user1, localhost, mysqltest_1,,mysqltest);
+
+connection user1;
+show variables like "innodb_clear_replication_status";
+--error 1227
+SET innodb_clear_replication_status = 1;
+
+connection con1;
+
+drop table if exists t1;
+
+show variables like "innodb_clear_replication_status";
+SET innodb_clear_replication_status = 1;
+show variables like "innodb_clear_replication_status";
+
+create table t1 (a int) Engine = InnoDB;
+SET innodb_clear_replication_status = 0;
+show variables like "innodb_clear_replication_status";
+
+drop table t1;
+
+# Just be sure that nothing will bother us
+delete from mysql.user where user like 'mysqltest\_%';
+delete from mysql.db where user like 'mysqltest\_%';
+delete from mysql.tables_priv where user like 'mysqltest\_%';
+delete from mysql.columns_priv where user like 'mysqltest\_%';
+flush privileges;
+
+disconnect user1;
+drop database mysqltest;
diff -ruN base/mysql-test/t/rpl_make_master.test mysql40gpl/mysql-test/t/rpl_make_master.test
--- base/mysql-test/t/rpl_make_master.test	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/t/rpl_make_master.test	2007-04-21 09:56:58.000000000 -0700
@@ -0,0 +1,60 @@
+#
+# Testing of make a master database in fast failover.
+#
+-- source include/not_embedded.inc
+
+connect (con1,localhost,root,,);
+
+# Prepare play-ground
+--disable_warnings
+drop database if exists mysqltest;
+--enable_warnings
+create database mysqltest;
+create table mysqltest.t1 (a int) engine = InnoDB;
+insert into mysqltest.t1 values (3);
+create table mysqltest.t2 (a int) engine = InnoDB;
+insert into mysqltest.t2 values (3);
+
+# Just be sure that nothing will bother us
+delete from mysql.user where user like 'mysqltest\_%';
+delete from mysql.db where user like 'mysqltest\_%';
+delete from mysql.tables_priv where user like 'mysqltest\_%';
+delete from mysql.columns_priv where user like 'mysqltest\_%';
+flush privileges;
+
+grant all on mysqltest.t1 to mysqltest_1@localhost;
+# This ensures that counters are reset and makes test scheduling independent
+flush user_resources;
+
+connect (user1, localhost, mysqltest_1,,mysqltest);
+
+connection user1;
+select * from mysqltest.t1;
+
+connection con1;
+make master revoke session with kill;
+
+connection user1;
+--error 2013
+ping
+select * from mysqltest.t1;
+
+connection con1;
+make master grant session;
+
+connection user1;
+select * from mysqltest.t1;
+
+connection con1;
+
+# Just be sure that nothing will bother us
+delete from mysql.user where user like 'mysqltest\_%';
+delete from mysql.db where user like 'mysqltest\_%';
+delete from mysql.tables_priv where user like 'mysqltest\_%';
+delete from mysql.columns_priv where user like 'mysqltest\_%';
+flush privileges;
+
+disconnect user1;
+
+# Final cleanup
+drop database mysqltest;
diff -ruN base/mysql-test/t/rpl_mirror_binlog-master.opt mysql40gpl/mysql-test/t/rpl_mirror_binlog-master.opt
--- base/mysql-test/t/rpl_mirror_binlog-master.opt	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/t/rpl_mirror_binlog-master.opt	2007-04-21 09:56:58.000000000 -0700
@@ -0,0 +1 @@
+-O max_binlog_size=4096
diff -ruN base/mysql-test/t/rpl_mirror_binlog.slave-mi-1 mysql40gpl/mysql-test/t/rpl_mirror_binlog.slave-mi-1
--- base/mysql-test/t/rpl_mirror_binlog.slave-mi-1	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/t/rpl_mirror_binlog.slave-mi-1	2007-04-21 09:56:58.000000000 -0700
@@ -0,0 +1 @@
+--master-user=root --master-connect-retry=1 --master-host=127.0.0.1 --master-password="" --master-port=9307 --server-id=3 
diff -ruN base/mysql-test/t/rpl_mirror_binlog.slave-mi-2 mysql40gpl/mysql-test/t/rpl_mirror_binlog.slave-mi-2
--- base/mysql-test/t/rpl_mirror_binlog.slave-mi-2	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/t/rpl_mirror_binlog.slave-mi-2	2007-04-21 09:56:58.000000000 -0700
@@ -0,0 +1 @@
+--master-user=root --master-connect-retry=1 --master-host=127.0.0.1 --master-password="" --master-port=9307 --server-id=4 
diff -ruN base/mysql-test/t/rpl_mirror_binlog-slave.opt mysql40gpl/mysql-test/t/rpl_mirror_binlog-slave.opt
--- base/mysql-test/t/rpl_mirror_binlog-slave.opt	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/t/rpl_mirror_binlog-slave.opt	2007-04-21 09:56:58.000000000 -0700
@@ -0,0 +1 @@
+--rpl_mirror_binlog_enabled=1 --log-bin-index=replication_log
diff -ruN base/mysql-test/t/rpl_mirror_binlog_stop-master.opt mysql40gpl/mysql-test/t/rpl_mirror_binlog_stop-master.opt
--- base/mysql-test/t/rpl_mirror_binlog_stop-master.opt	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/t/rpl_mirror_binlog_stop-master.opt	2007-04-21 09:56:58.000000000 -0700
@@ -0,0 +1 @@
+-O max_binlog_size=4096
diff -ruN base/mysql-test/t/rpl_mirror_binlog_stop.slave-mi-1 mysql40gpl/mysql-test/t/rpl_mirror_binlog_stop.slave-mi-1
--- base/mysql-test/t/rpl_mirror_binlog_stop.slave-mi-1	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/t/rpl_mirror_binlog_stop.slave-mi-1	2007-04-21 09:56:58.000000000 -0700
@@ -0,0 +1 @@
+--master-user=root --master-connect-retry=1 --master-host=127.0.0.1 --master-password="" --master-port=9307 --server-id=3 
diff -ruN base/mysql-test/t/rpl_mirror_binlog_stop-slave.opt mysql40gpl/mysql-test/t/rpl_mirror_binlog_stop-slave.opt
--- base/mysql-test/t/rpl_mirror_binlog_stop-slave.opt	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/t/rpl_mirror_binlog_stop-slave.opt	2007-04-21 09:56:58.000000000 -0700
@@ -0,0 +1 @@
+--rpl_mirror_binlog_enabled=1 --log-bin-index=replication_log
diff -ruN base/mysql-test/t/rpl_mirror_binlog_stop.test mysql40gpl/mysql-test/t/rpl_mirror_binlog_stop.test
--- base/mysql-test/t/rpl_mirror_binlog_stop.test	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/t/rpl_mirror_binlog_stop.test	2007-04-21 09:56:58.000000000 -0700
@@ -0,0 +1,110 @@
+require_manager;
+source include/master-slave.inc;
+connect (slave_sec,localhost,root,,test,0,slave.sock-1); 
+
+connection master;
+drop table if exists t1;
+create table t1(n int) engine = InnoDB;
+
+let $i=100;
+while ($i)
+{
+  eval insert into t1 values ($i);
+  dec $i;
+}
+
+save_master_pos;
+show status like 'Rpl_mirror_binlog_clients';
+
+connection slave;
+sync_with_master;
+
+select "The following are SLAVE.";
+show status like 'Rpl_mirror_binlog_status';
+show status like 'Rpl_mirror_binlog_clients';
+
+select count(distinct n) from t1;
+select min(n) from t1;
+select max(n) from t1;
+show slave status;
+
+connection slave_sec;
+select "The following are SLAVE1.";
+start slave;
+sync_with_master;
+
+select count(distinct n) from t1;
+select min(n) from t1;
+select max(n) from t1;
+--replace_column 8 # 18 #
+show slave status;
+
+# Stop the mirror binlog on slave, but let replication continue.
+connection slave;
+select "The following are SLAVE.";
+stop slave;
+set global rpl_mirror_binlog_enabled=0;
+start slave;
+
+connection master;
+let $i=200;
+while ($i)
+{
+  eval insert into t1 values ($i);
+  dec $i;
+}
+save_master_pos;
+
+select "The following are SLAVE.";
+show status like 'Rpl_mirror_binlog_status';
+show status like 'Rpl_mirror_binlog_clients';
+
+select count(distinct n) from t1;
+select min(n) from t1;
+select max(n) from t1;
+show slave status;
+
+connection slave_sec;
+select "The following are SLAVE1.";
+
+select count(distinct n) from t1;
+select min(n) from t1;
+select max(n) from t1;
+--replace_column 8 # 18 #
+show slave status;
+
+# Start the mirror binlog again.
+connection slave;
+select "The following are SLAVE.";
+stop slave;
+set global rpl_mirror_binlog_enabled=1;
+start slave;
+
+connection master;
+let $i=300;
+while ($i)
+{
+  eval insert into t1 values ($i);
+  dec $i;
+}
+save_master_pos;
+
+select "The following are SLAVE.";
+show status like 'Rpl_mirror_binlog_status';
+show status like 'Rpl_mirror_binlog_clients';
+
+select count(distinct n) from t1;
+select min(n) from t1;
+select max(n) from t1;
+show slave status;
+
+connection slave_sec;
+select "The following are SLAVE1.";
+sync_with_master;
+
+select count(distinct n) from t1;
+select min(n) from t1;
+select max(n) from t1;
+--replace_column 8 # 18 #
+show slave status;
+
diff -ruN base/mysql-test/t/rpl_mirror_binlog.test mysql40gpl/mysql-test/t/rpl_mirror_binlog.test
--- base/mysql-test/t/rpl_mirror_binlog.test	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/t/rpl_mirror_binlog.test	2007-04-21 09:56:58.000000000 -0700
@@ -0,0 +1,175 @@
+require_manager;
+source include/master-slave.inc;
+connect (slave_sec,localhost,root,,test,0,slave.sock-1); 
+connect (slave_ter,localhost,root,,test,0,slave.sock-2); 
+
+connection master;
+drop table if exists t1;
+create table t1(n int) engine = InnoDB;
+
+let $i=300;
+while ($i)
+{
+  eval insert into t1 values ($i);
+  dec $i;
+}
+
+save_master_pos;
+show status like 'Rpl_mirror_binlog_clients';
+
+connection slave;
+sync_with_master;
+
+select "The following are SLAVE.";
+show status like 'Rpl_mirror_binlog_status';
+show variables like 'log_bin';
+
+select count(distinct n) from t1;
+select min(n) from t1;
+select max(n) from t1;
+show slave status;
+
+connection slave_sec;
+select "The following are SLAVE1.";
+start slave;
+sync_with_master;
+
+select count(distinct n) from t1;
+select min(n) from t1;
+select max(n) from t1;
+--replace_column 8 # 18 #
+show slave status;
+
+connection slave_ter;
+select "The following are SLAVE2.";
+start slave;
+sync_with_master;
+
+# Stop here because we will use <change master>.
+stop slave;
+
+select count(distinct n) from t1;
+select min(n) from t1;
+select max(n) from t1;
+
+# make the slave the new master
+connection slave;
+select "The following are SLAVE.";
+
+# show master status during mirror binlog time
+show master status;
+
+# The first 1201 error is caused by running slave.
+--error 1201
+MAKE MASTER MASTER_LOG_FILE='master-bin',
+            MASTER_SERVER_ID=2,
+            INDEX='replication-log';
+stop slave;
+
+connection slave;
+select "The following are SLAVE.";
+
+# The second 1201 error is caused by failover mode.
+--error 1201
+MAKE MASTER MASTER_LOG_FILE='master-bin',
+            MASTER_SERVER_ID=2,
+            INDEX='replication_log';
+
+MAKE MASTER REVOKE SESSION WITH KILL;
+MAKE MASTER MASTER_LOG_FILE='master-bin',
+            MASTER_SERVER_ID=2,
+            INDEX='replication_log'
+            WITH BINLOG;
+
+MAKE MASTER GRANT SESSION;
+
+show master status;
+delete from t1 where n > 250;
+save_master_pos;
+
+select count(distinct n) from t1;
+
+connection slave_sec;
+select "The following are SLAVE1.";
+show variables like 'server_id';
+
+sync_with_master; select count(distinct n) from t1;
+select min(n) from t1;
+select max(n) from t1;
+
+connection slave_ter;
+select "The following are SLAVE2.";
+show variables like 'server_id';
+
+CHANGE MASTER TO
+  MASTER_HOST='127.0.0.1',
+  MASTER_USER='root',
+  MASTER_PASSWORD='',
+  MASTER_PORT=9307,
+  MASTER_LOG_FILE='master-bin.006',
+  MASTER_LOG_POS=4;
+start slave;
+sync_with_master;
+
+select count(distinct n) from t1;
+select min(n) from t1;
+select max(n) from t1;
+
+--replace_column 8 # 18 #
+show slave status;
+
+connection master;
+drop table t1;
+
+connection slave;
+show status like 'Rpl_mirror_binlog_clients';
+show status like 'Rpl_mirror_binlog_status';
+
+drop table t1;
+save_master_pos;
+
+connection slave_sec;
+select "The following are SLAVE1.";
+sync_with_master;
+--exec ls $MYSQL_TEST_DIR/var/slave1-data
+
+stop slave;
+reset slave no purge binlog;
+--exec ls $MYSQL_TEST_DIR/var/slave1-data
+
+reset slave;
+--exec ls $MYSQL_TEST_DIR/var/slave1-data
+
+connection slave;
+select "The following are SLAVE.";
+
+show variables like 'log_bin';
+show master logs;
+show master status;
+
+connection slave_ter;
+select "The following are SLAVE2.";
+sync_with_master;
+
+show master logs;
+purge master logs to 'master-bin.006';
+show master logs;
+--error 1186
+reset master;
+
+stop slave;
+
+--exec ls $MYSQL_TEST_DIR/var/slave2-data
+
+# This must be the last command in the test.  Never 'start slave'
+# after this.
+CHANGE MASTER TO
+  MASTER_HOST='127.0.0.1',
+  MASTER_USER='root',
+  MASTER_PASSWORD='',
+  MASTER_PORT=9307,
+  MASTER_LOG_FILE='master-bin.001',
+  MASTER_LOG_POS=4;
+
+--exec ls $MYSQL_TEST_DIR/var/slave2-data
+
diff -ruN base/mysql-test/t/rpl_semi_sync-master.opt mysql40gpl/mysql-test/t/rpl_semi_sync-master.opt
--- base/mysql-test/t/rpl_semi_sync-master.opt	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/t/rpl_semi_sync-master.opt	2007-04-21 09:57:00.000000000 -0700
@@ -0,0 +1 @@
+--rpl_semi_sync_enabled=1 --rpl_semi_sync_timeout=1000 --rpl_long_filename=1
diff -ruN base/mysql-test/t/rpl_semi_sync-slave.opt mysql40gpl/mysql-test/t/rpl_semi_sync-slave.opt
--- base/mysql-test/t/rpl_semi_sync-slave.opt	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/t/rpl_semi_sync-slave.opt	2007-04-21 09:57:00.000000000 -0700
@@ -0,0 +1 @@
+--rpl_semi_sync_slave_enabled=1
diff -ruN base/mysql-test/t/rpl_semi_sync.test mysql40gpl/mysql-test/t/rpl_semi_sync.test
--- base/mysql-test/t/rpl_semi_sync.test	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/t/rpl_semi_sync.test	2007-04-21 09:57:00.000000000 -0700
@@ -0,0 +1,91 @@
+source include/master-slave.inc;
+
+connection master;
+show status like 'Rpl_semi_sync_no_tx';
+show status like 'Rpl_semi_sync_yes_tx';
+
+connection slave;
+# Restart I/O thread to make sure that semi-sync is caught up.
+stop slave;
+start slave;
+--sleep 2
+
+connection master;
+show status like 'Rpl_semi_sync_clients';
+
+drop table if exists t1;
+create table t1(n int) engine = InnoDB;
+let $i=300;
+while ($i)
+{
+  eval insert into t1 values ($i);
+  dec $i;
+}
+
+show master status;
+save_master_pos;
+
+connection slave;
+sync_with_master;
+
+show status like 'Rpl_semi_sync_slave_status';
+
+select count(distinct n) from t1;
+select min(n) from t1;
+select max(n) from t1;
+# stop slave to let semi-sync replication fail.
+stop slave;
+
+connection master;
+
+# The first semi-sync check should be on because after slave stop,
+# there are no transactions on the master.
+show status like 'Rpl_semi_sync_status';
+show status like 'Rpl_semi_sync_no_tx';
+show status like 'Rpl_semi_sync_yes_tx';
+show status like 'Rpl_semi_sync_clients';
+
+begin;
+insert into t1 values (500);
+delete from t1 where n < 500;
+commit;
+insert into t1 values (100);
+--sleep 2
+
+# The second semi-sync check should be off because one transaction
+# times out during waiting.
+show status like 'Rpl_semi_sync_status';
+show status like 'Rpl_semi_sync_no_tx';
+show status like 'Rpl_semi_sync_yes_tx';
+save_master_pos;
+
+connection slave;
+show status like 'Rpl_semi_sync_slave_status';
+start slave;
+sync_with_master;
+show status like 'Rpl_semi_sync_slave_status';
+
+select count(distinct n) from t1;
+select min(n) from t1;
+select max(n) from t1;
+
+connection master;
+drop table t1;
+save_master_pos;
+
+# The third semi-sync check should be on again.
+show status like 'Rpl_semi_sync_status';
+show status like 'Rpl_semi_sync_no_tx';
+show status like 'Rpl_semi_sync_yes_tx';
+
+connection slave;
+sync_with_master;
+
+connection master;
+show master logs;
+show variables like 'rpl_semi_sync_enabled';
+
+# disable semi-sync on the fly
+set global rpl_semi_sync_enabled=0;
+show variables like 'rpl_semi_sync_enabled';
+show status like 'Rpl_semi_sync_status';
diff -ruN base/mysql-test/t/rpl_show_processlist.test mysql40gpl/mysql-test/t/rpl_show_processlist.test
--- base/mysql-test/t/rpl_show_processlist.test	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/mysql-test/t/rpl_show_processlist.test	2007-04-21 09:57:00.000000000 -0700
@@ -0,0 +1,39 @@
+source include/master-slave.inc;
+
+connection master;
+drop table if exists t1;
+create table t1(n int);
+
+let $i=300;
+while ($i)
+{
+  eval insert into t1 values ($i);
+  dec $i;
+}
+
+save_master_pos;
+
+connection slave;
+sync_with_master;
+
+connection master;
+--replace_column 1 # 3 # 6 #
+show processlist;
+
+delete from t1 where n > 50;
+delete from t1 where n > 25;
+save_master_pos;
+
+connection slave;
+sync_with_master;
+
+connection master;
+drop table t1;
+save_master_pos;
+
+connection slave;
+sync_with_master;
+
+connection master;
+--replace_column 1 # 3 # 6 #
+show processlist;
diff -ruN base/mysql-test/t/variables.test mysql40gpl/mysql-test/t/variables.test
--- base/mysql-test/t/variables.test	2005-09-02 15:50:38.000000000 -0700
+++ mysql40gpl/mysql-test/t/variables.test	2007-04-21 09:57:01.000000000 -0700
@@ -64,6 +64,17 @@
 set global concurrent_insert=DEFAULT;
 show variables like 'concurrent_insert';
 
+set global innodb_btr_estimate_n_pages=1;
+show variables like 'innodb_btr_estimate_n_pages';
+set global innodb_btr_estimate_n_pages=0;
+show variables like 'innodb_btr_estimate_n_pages';
+set global innodb_btr_estimate_n_pages=100;
+show variables like 'innodb_btr_estimate_n_pages';
+set global innodb_btr_estimate_n_pages=10000;
+show variables like 'innodb_btr_estimate_n_pages';
+set global innodb_btr_estimate_n_pages=DEFAULT;
+show variables like 'innodb_btr_estimate_n_pages';
+
 set table_type=MYISAM, table_type="HEAP", global table_type="INNODB";
 show local variables like 'table_type';
 show global variables like 'table_type';
@@ -184,7 +195,7 @@
 set join_buffer_size=100;
 set last_insert_id=1;
 set global local_infile=1;
-set long_query_time=100;
+set global long_query_time=100;
 set low_priority_updates=1;
 set max_allowed_packet=100;
 set global max_binlog_cache_size=100;
@@ -192,6 +203,7 @@
 set global max_connect_errors=100;
 set global max_connections=100;
 set global max_delayed_threads=100;
+set global reserved_super_connections=10;
 set max_heap_table_size=100;
 set max_join_size=100;
 set max_sort_length=100;
diff -ruN base/mysys/hash.c mysql40gpl/mysys/hash.c
--- base/mysys/hash.c	2005-09-02 15:38:07.000000000 -0700
+++ mysql40gpl/mysys/hash.c	2007-04-21 09:57:01.000000000 -0700
@@ -36,15 +36,15 @@
 static int hashcmp(HASH *hash,HASH_LINK *pos,const byte *key,uint length);
 
 
-my_bool _hash_init(HASH *hash,uint size,uint key_offset,uint key_length,
-		  hash_get_key get_key,
-		  void (*free_element)(void*),uint flags CALLER_INFO_PROTO)
+my_bool _hash_init(HASH *hash,uint size,uint growth_size,
+                   uint key_offset,uint key_length, hash_get_key get_key,
+                   void (*free_element)(void*),uint flags CALLER_INFO_PROTO)
 {
   DBUG_ENTER("hash_init");
   DBUG_PRINT("enter",("hash: %lx  size: %d",hash,size));
 
   hash->records=0;
-  if (my_init_dynamic_array_ci(&hash->array,sizeof(HASH_LINK),size,0))
+  if (my_init_dynamic_array_ci(&hash->array,sizeof(HASH_LINK),size,growth_size))
   {
     hash->free=0;				/* Allow call to hash_free */
     DBUG_RETURN(TRUE);
diff -ruN base/mysys/mf_iocache.c mysql40gpl/mysys/mf_iocache.c
--- base/mysys/mf_iocache.c	2005-09-02 15:38:01.000000000 -0700
+++ mysql40gpl/mysys/mf_iocache.c	2007-04-21 09:57:01.000000000 -0700
@@ -71,6 +71,8 @@
 #define IO_ROUND_UP(X) (((X)+IO_SIZE-1) & ~(IO_SIZE-1))
 #define IO_ROUND_DN(X) ( (X)            & ~(IO_SIZE-1))
 
+static void get_date_local(register my_string to, int flag, time_t date);
+
 
 /*
   Setup internal pointers inside IO_CACHE
@@ -397,7 +399,19 @@
   pos_in_file=info->pos_in_file+(uint) (info->read_end - info->buffer);
   if (info->seek_not_done)
   {					/* File touched, do seek */
-    VOID(my_seek(info->file,pos_in_file,MY_SEEK_SET,MYF(0)));
+    if (my_seek(info->file,pos_in_file,MY_SEEK_SET,MYF(0)) ==
+        MY_FILEPOS_ERROR) {
+      char date_buff[40];
+
+      get_date_local(date_buff, 3, 0);
+      if (info->file != -1) {
+        // An error is expected when the fd == 1. Otherwise log it.
+        fprintf(stderr,
+                "%s _my_b_read: seek error %d at fd %d for pos %lld in %s\n",
+                date_buff, my_errno, info->file, pos_in_file,
+                info->file_name ? info->file_name : "no_name");
+      }
+    }
     info->seek_not_done=0;
   }
   diff_length=(uint) (pos_in_file & (IO_SIZE-1));
@@ -1206,6 +1220,42 @@
   DBUG_RETURN(error);
 } /* end_io_cache */
 
+static void get_date_local(register my_string to, int flag, time_t date)
+{
+   reg2 struct tm *start_time;
+   time_t skr;
+#if defined(HAVE_LOCALTIME_R) && defined(_REENTRANT)
+  struct tm tm_tmp;
+#endif
+
+   skr=date ? (time_t) date : time((time_t*) 0);
+#if defined(HAVE_LOCALTIME_R) && defined(_REENTRANT)
+   localtime_r(&skr,&tm_tmp);
+   start_time= &tm_tmp;
+#else
+   start_time=localtime(&skr);
+#endif
+   if (flag & 2)
+     sprintf(to,"%02d%02d%02d",
+             start_time->tm_year % 100,
+             start_time->tm_mon+1,
+             start_time->tm_mday);
+   else
+     sprintf(to,"%d-%02d-%02d",
+             start_time->tm_year+1900,
+             start_time->tm_mon+1,
+             start_time->tm_mday);
+   if (flag & 1)
+     sprintf(strend(to)," %2d:%02d:%02d",
+             start_time->tm_hour,
+             start_time->tm_min,
+             start_time->tm_sec);
+   else if (flag & 4)
+     sprintf(strend(to),"%02d%02d%02d",
+             start_time->tm_hour,
+             start_time->tm_min,
+             start_time->tm_sec);
+} /* get_date_local */
 
 /**********************************************************************
  Testing of MF_IOCACHE
diff -ruN base/mysys/my_compress.c mysql40gpl/mysys/my_compress.c
--- base/mysys/my_compress.c	2005-09-02 15:38:04.000000000 -0700
+++ mysql40gpl/mysys/my_compress.c	2007-04-21 09:57:02.000000000 -0700
@@ -55,8 +55,8 @@
   *complen=  *len * 120 / 100 + 12;
   if (!(compbuf= (byte *) my_malloc(*complen,MYF(MY_WME))))
     return 0;					/* Not enough memory */
-  if (compress((Bytef*) compbuf,(ulong *) complen, (Bytef*) packet,
-	       (uLong) *len ) != Z_OK)
+  if (compress2((Bytef*) compbuf,(ulong *) complen, (Bytef*) packet,
+	        (uLong) *len, 1) != Z_OK)
   {
     my_free(compbuf,MYF(MY_WME));
     return 0;
diff -ruN base/mysys/safemalloc.c mysql40gpl/mysys/safemalloc.c
--- base/mysys/safemalloc.c	2005-09-02 15:38:07.000000000 -0700
+++ mysql40gpl/mysys/safemalloc.c	2007-04-21 09:57:03.000000000 -0700
@@ -156,6 +156,9 @@
 	      size, (size + 1023L) / 1024L,
 	      sf_malloc_max_memory, (sf_malloc_max_memory + 1023L) / 1024L);
       my_message(EE_OUTOFMEMORY,buff,MYF(ME_BELL+ME_WAITTANG));
+
+      /* Print the message in the trace. */
+      fprintf(stderr, "MySQL: %s\n", buff);
     }
     DBUG_PRINT("error",("Out of memory, in use: %ld at line %d, '%s'",
 			sf_malloc_max_memory,lineno, filename));
diff -ruN base/sql/filesort.cc mysql40gpl/sql/filesort.cc
--- base/sql/filesort.cc	2005-09-02 15:38:00.000000000 -0700
+++ mysql40gpl/sql/filesort.cc	2007-04-21 09:57:09.000000000 -0700
@@ -1028,6 +1028,8 @@
 #endif
     }
 #endif
+    // Order values as:
+    // -INF < negative < -0 < +0 < positive < +INF < NaN
     if (tmp[0] & 128)				/* Negative */
     {						/* make complement */
       uint i;
@@ -1035,12 +1037,8 @@
 	tmp[i]=tmp[i] ^ (uchar) 255;
     }
     else
-    {					/* Set high and move exponent one up */
-      ushort exp_part=(((ushort) tmp[0] << 8) | (ushort) tmp[1] |
-		       (ushort) 32768);
-      exp_part+= (ushort) 1 << (16-1-DBL_EXP_DIG);
-      tmp[0]= (uchar) (exp_part >> 8);
-      tmp[1]= (uchar) exp_part;
+    {					/* Set high */
+      tmp[0] |= 128;
     }
   }
 }
diff -ruN base/sql/gen_lex_hash.cc mysql40gpl/sql/gen_lex_hash.cc
--- base/sql/gen_lex_hash.cc	2005-09-02 15:38:07.000000000 -0700
+++ mysql40gpl/sql/gen_lex_hash.cc	2007-04-21 13:04:31.000000000 -0700
@@ -469,7 +469,15 @@
   int error;
 
   MY_INIT(argv[0]);
+#if 0
+  /* original values */
   start_value=2925024L; best_t1=654916L;  best_t2=1723390L;  best_type=3; /* mode=4943  add=1  type: 0 */
+#else
+  /* values after running gen_lex_hash --search */
+  /*start_value=3127171L; best_t1=376896L;  best_t2=6499924L;  best_type=3;*/ /* mode=6857  add=2  type: 0 */
+  start_value=1920267L; best_t1=5306333L;  best_t2=7518242L;  best_type=2; /* mode=7621  add=4  type: 0 */
+
+#endif
   if (get_options(argc,(char **) argv))
     exit(1);
 
diff -ruN base/sql/ha_innodb.cc mysql40gpl/sql/ha_innodb.cc
--- base/sql/ha_innodb.cc	2005-09-02 15:37:59.000000000 -0700
+++ mysql40gpl/sql/ha_innodb.cc	2007-04-21 11:14:01.000000000 -0700
@@ -36,6 +36,7 @@
 #define MAX_ULONG_BIT ((ulong) 1 << (sizeof(ulong)*8-1))
 
 #include "ha_innodb.h"
+#include "repl_semi_sync.h"
 
 pthread_mutex_t innobase_mutex;
 
@@ -86,6 +87,7 @@
      innobase_buffer_pool_size, innobase_additional_mem_pool_size,
      innobase_file_io_threads, innobase_lock_wait_timeout,
      innobase_thread_concurrency, innobase_force_recovery;
+long innobase_read_io_threads, innobase_write_io_threads;
 
 /* The default values for the following char* start-up parameters
 are determined in innobase_init below: */
@@ -107,6 +109,21 @@
 my_bool	innobase_fast_shutdown			= TRUE;
 my_bool innobase_create_status_file		= FALSE;
 
+/* When this is true and binary logging is disabled the following statements
+   do not lock rows in S mode for reads from the selected tables:
+     insert ... select from foo
+     update ... select from foo
+     create table ... select from foo
+     replace ... select from foo
+     delete ... select from foo
+ */
+my_bool innodb_no_share_locks_on_dml_select     = TRUE;
+
+/* Max number of IO requests merged to perform large IO in background
+   IO threads.
+*/
+long innobase_max_merged_io = 64;
+
 static char *internal_innobase_data_file_path	= NULL;
 
 /* The following counter is used to convey information to InnoDB
@@ -133,6 +150,8 @@
 static void free_share(INNOBASE_SHARE *share);
 static void innobase_print_error(const char* db_errpfx, char* buffer);
 
+extern ReplSemiSync semi_sync_replicator;
+
 /* General functions */
 
 /**********************************************************************
@@ -478,11 +497,8 @@
 
 	if (trx == NULL) {
 	        DBUG_ASSERT(thd != NULL);
-		trx = trx_allocate_for_mysql();
+		trx = ha_innobase::allocate_trx(thd, &((*thd).query));
 
-		trx->mysql_thd = thd;
-		trx->mysql_query_str = &((*thd).query);
-		
 		thd->transaction.all.innobase_tid = trx;
 
 		/* The execution of a single SQL statement is denoted by
@@ -910,6 +926,8 @@
 	srv_mem_pool_size = (ulint) innobase_additional_mem_pool_size;
 
 	srv_n_file_io_threads = (ulint) innobase_file_io_threads;
+        srv_n_read_io_threads = (ulint) innobase_read_io_threads;
+        srv_n_write_io_threads = (ulint) innobase_write_io_threads;
 
 	srv_lock_wait_timeout = (ulint) innobase_lock_wait_timeout;
 	srv_thread_concurrency = (ulint) innobase_thread_concurrency;
@@ -1047,6 +1065,16 @@
         if (current_thd->slave_thread) {
                 /* Update the replication position info inside InnoDB */
 
+                /* Unfortunately, we need all information here to recover
+                 * replication slave execution status because events in
+                 * BEGIN/COMMIT block do not carry the correct master-log
+                 * position.
+                 */
+                trx->mysql_relay_log_file_name
+					= active_mi->rli.relay_log_name;
+		trx->mysql_relay_log_pos = ((ib_longlong)
+				active_mi->rli.future_event_relay_log_pos);
+
                 trx->mysql_master_log_file_name
                                         = active_mi->rli.master_log_name;
                 trx->mysql_master_log_pos = (ib_longlong)
@@ -1057,6 +1085,10 @@
 #endif
         }
 
+        if (current_thd->variables.innodb_clear_replication_status) {
+                trx->clear_replication_status = TRUE;
+        }
+
 	trx_commit_for_mysql(trx);
 }
 
@@ -1161,6 +1193,26 @@
 	
 	trx->flush_log_later = TRUE;
 
+        if (semi_sync_replicator.getMasterEnabled()) {
+          /* Let us store the binlog file name and the position, so that
+             we know how long to wait for the binlog to the replicated to
+             the slave in synchronous replication. */
+
+          if (trx->repl_wait_binlog_name == NULL) {
+            trx->repl_wait_binlog_name =
+              (char*)mem_alloc_noninline(FN_REFLEN + 100);
+          }
+
+          ut_a(strlen(log_file_name) <= FN_REFLEN + 100);
+          strcpy(trx->repl_wait_binlog_name,
+                 log_file_name + dirname_length(log_file_name));
+          trx->repl_wait_binlog_pos = (ib_longlong)end_offset;
+
+          /* Store transaction ending position for semi-sync replication. */
+          semi_sync_replicator.writeTranxInBinlog(
+                      trx->repl_wait_binlog_name, end_offset);
+        }
+
   	innobase_commit(thd, trx_handle);
 
 	trx->flush_log_later = FALSE;
@@ -1191,6 +1243,9 @@
 
   	trx_commit_complete_for_mysql(trx);
 
+        semi_sync_replicator.commitTrx(trx->repl_wait_binlog_name,
+                                       trx->repl_wait_binlog_pos);
+
 	return(0);
 }
 
@@ -2309,7 +2364,9 @@
 		    && prebuilt->trx->auto_inc_lock) {
 		        auto_inc_counter_for_this_stat--;
 		}
-	}
+	} else {
+          rows_changed++;
+        }
 
 	error = convert_error_code_to_mysql(error, user_thd);
 
@@ -2536,6 +2593,10 @@
 
 	error = row_update_for_mysql((byte*) old_row, prebuilt);
 
+	if (error == DB_SUCCESS) {
+          rows_changed++;
+        }
+
 	innodb_srv_conc_exit_innodb(prebuilt->trx);
 
 	error = convert_error_code_to_mysql(error, user_thd);
@@ -2584,6 +2645,10 @@
 
 	error = row_update_for_mysql((byte*) record, prebuilt);
 
+	if (error == DB_SUCCESS) {
+          rows_changed++;
+        }
+
 	innodb_srv_conc_exit_innodb(prebuilt->trx);
 
 	error = convert_error_code_to_mysql(error, user_thd);
@@ -2807,6 +2872,9 @@
 	if (ret == DB_SUCCESS) {
 		error = 0;
 		table->status = 0;
+                rows_read++;
+                if (active_index >= 0 && active_index < MAX_KEY)
+                        index_rows_read[active_index]++;
 
 	} else if (ret == DB_RECORD_NOT_FOUND) {
 		error = HA_ERR_KEY_NOT_FOUND;
@@ -2955,6 +3023,9 @@
 	if (ret == DB_SUCCESS) {
 		error = 0;
 		table->status = 0;
+                rows_read++;
+                if (active_index >= 0 && active_index < MAX_KEY)
+                        index_rows_read[active_index]++;
 
 	} else if (ret == DB_RECORD_NOT_FOUND) {
 		error = HA_ERR_END_OF_FILE;
@@ -3513,10 +3584,7 @@
 
 	trx_search_latch_release_if_reserved(parent_trx);	
 	
-	trx = trx_allocate_for_mysql();
-		
-	trx->mysql_thd = thd;
-	trx->mysql_query_str = &((*thd).query);
+        trx = allocate_trx(thd, &((*thd).query));
 
 	if (thd->options & OPTION_NO_FOREIGN_KEY_CHECKS) {
 		trx->check_foreigns = FALSE;
@@ -3699,10 +3767,7 @@
 		srv_lower_case_table_names = FALSE;
 	}
 
-	trx = trx_allocate_for_mysql();
-
-	trx->mysql_thd = current_thd;
-	trx->mysql_query_str = &((*current_thd).query);
+        trx = allocate_trx(current_thd, &((*current_thd).query));
 
 	if (thd->options & OPTION_NO_FOREIGN_KEY_CHECKS) {
 		trx->check_foreigns = FALSE;
@@ -3791,9 +3856,7 @@
 #ifdef __WIN__
 	casedn_str(namebuf);
 #endif
-	trx = trx_allocate_for_mysql();
-	trx->mysql_thd = current_thd;
-	trx->mysql_query_str = &((*current_thd).query);
+        trx = ha_innobase::allocate_trx(current_thd, &((*current_thd).query));
 
 	if (current_thd->options & OPTION_NO_FOREIGN_KEY_CHECKS) {
 		trx->check_foreigns = FALSE;
@@ -3857,9 +3920,7 @@
 		srv_lower_case_table_names = FALSE;
 	}
 
-	trx = trx_allocate_for_mysql();
-	trx->mysql_thd = current_thd;
-	trx->mysql_query_str = &((*current_thd).query);
+        trx = allocate_trx(current_thd, &((*current_thd).query));
 
 	name_len1 = strlen(from);
 	name_len2 = strlen(to);
@@ -4800,6 +4861,7 @@
 {
 	String* 	packet 	= &thd->packet;
 	trx_t*		trx;
+        const int       kMaxOutput = 128000;
 
   	DBUG_ENTER("innodb_show_status");
 	
@@ -4814,7 +4876,7 @@
 
 	innobase_release_stat_resources(trx);
 
-	/* We let the InnoDB Monitor to output at most 64000 bytes of text. */
+	/* Let the InnoDB Monitor output at most kMaxOutput bytes of text. */
 
 	long	flen;
 	char*	str;
@@ -4826,8 +4888,8 @@
 	os_file_set_eof(srv_monitor_file);
 	if (flen < 0) {
 		flen = 0;
-	} else if (flen > 64000 - 1) {
-		flen = 64000 - 1;
+	} else if (flen > kMaxOutput - 1) {
+		flen = kMaxOutput - 1;
 	}
 
 	/* allocate buffer for the string, and
@@ -4967,8 +5029,46 @@
 		are not simple SELECTs; note that select_lock_type in this
 		case may get strengthened in ::external_lock() to LOCK_X. */
 
-		prebuilt->select_lock_type = LOCK_S;
-		prebuilt->stored_select_lock_type = LOCK_S;
+                if (innodb_no_share_locks_on_dml_select &&
+                    !opt_bin_log &&
+                    prebuilt->trx->isolation_level != TRX_ISO_SERIALIZABLE &&
+                    (lock_type == TL_READ || lock_type == TL_READ_NO_INSERT) &&
+                    (thd->lex.sql_command == SQLCOM_INSERT_SELECT ||
+                     thd->lex.sql_command == SQLCOM_UPDATE ||
+                     thd->lex.sql_command == SQLCOM_DELETE ||
+                     thd->lex.sql_command == SQLCOM_REPLACE_SELECT ||
+                     thd->lex.sql_command == SQLCOM_CREATE_TABLE)) {
+                        /* TODO(mcallaghan)
+                           Should this be done only for create temp table?
+                           Is this the appropriate set of statements to fix?
+
+                           This code is derived from ha_innodb.cc for versions
+                           5.0.18 and 4.1.16.
+
+                           When innodb_no_share_locks_on_dml_select=1 and
+                           log_bin=0, this uses consistent read (no locks)
+                           for tables selected from as part of an insert,
+                           update, create table, delete or replace.  Otherwise,
+                           S locks are obtained on those rows.
+
+                           If S locks are obtained in that case, the result
+                           is bad for replication slaves when reporting queries
+                           are also run against the slaves.  The replication
+                           thread will experience frequent lock timeouts when
+                           long-running create table statements, inserts,
+                           updates and deletes are done by the reporting
+                           queries and get S locks on rows from tables that the
+                           replicaton thread must modify.
+
+                           This is only enabled when log_bin=0 to prevent changes
+                           from being replayed out of order on the slave.
+                        */
+                        prebuilt->select_lock_type = LOCK_NONE;
+                        prebuilt->stored_select_lock_type = LOCK_NONE;
+                } else {
+		        prebuilt->select_lock_type = LOCK_S;
+		        prebuilt->stored_select_lock_type = LOCK_S;
+                }
 
 	} else if (lock_type != TL_IGNORE) {
 
@@ -5141,4 +5241,60 @@
 	return(nr);
 }
 
+char*
+ha_innobase::get_mysql_relay_log_name()
+{
+	return(trx_sys_mysql_relay_log_name);
+}
+
+ulonglong
+ha_innobase::get_mysql_relay_log_pos()
+{
+	return(trx_sys_mysql_relay_log_pos);
+}
+
+char*
+ha_innobase::get_mysql_master_log_name()
+{
+	return(trx_sys_mysql_master_log_name);
+}
+
+ulonglong
+ha_innobase::get_mysql_master_log_pos()
+{
+	return(trx_sys_mysql_master_log_pos);
+}
+
+void ha_innobase::reset_mysql_relay_info()
+{
+        strmake(trx_sys_mysql_relay_log_name, "", strlen(""));
+        trx_sys_mysql_relay_log_pos = -1;
+
+        strmake(trx_sys_mysql_master_log_name, "", strlen(""));
+	trx_sys_mysql_master_log_pos = -1;
+
+        // TODO(wei): we should start a mini-transaction to commit the
+        // information to disk.
+}
+
+/* allocate an innodb transaction */
+trx_t* ha_innobase::allocate_trx(THD *thd, char **query_str)
+{
+        trx_t *trx = trx_allocate_for_mysql();
+        trx->mysql_thd = thd;
+	trx->mysql_query_str = query_str;
+
+        /* If we allow replication sql thread to enter innodb without
+         * ticket limit, set the field to indicate that.
+         */
+        if (thd && thd->slave_thread && rpl_always_enter_innodb)
+          trx->always_enter_innodb = TRUE;
+
+        return trx;
+}
+
+void ha_innobase::print_mysql_relay_log_pos() {
+        trx_sys_print_mysql_relay_log_pos(FALSE);
+}
+
 #endif /* HAVE_INNOBASE_DB */
diff -ruN base/sql/ha_innodb.h mysql40gpl/sql/ha_innodb.h
--- base/sql/ha_innodb.h	2005-09-02 15:38:00.000000000 -0700
+++ mysql40gpl/sql/ha_innodb.h	2007-04-21 09:57:10.000000000 -0700
@@ -32,6 +32,8 @@
   uint table_name_length,use_count;
 } INNOBASE_SHARE;
 
+typedef struct trx_struct trx_t;
+
 /* The class defining a handle to an Innodb table */
 class ha_innobase: public handler
 {
@@ -185,8 +187,30 @@
 			     		enum thr_lock_type lock_type);
 	void init_table_handle_for_HANDLER(); 
 	longlong get_auto_increment();
+
+        // This is used to get replication slave's progress.
+	static char *get_mysql_relay_log_name();
+	static ulonglong get_mysql_relay_log_pos();
+        static char* get_mysql_master_log_name();
+        static ulonglong get_mysql_master_log_pos();
+
+        /* Get the relay-log filename/position from transaction log.  The
+         * function will read the current relay progress from InnoDB
+         * transaction log and update corresponding global variables.
+         * The above four functions will get the correct value after the
+         * call.
+         */
+        static void print_mysql_relay_log_pos();
+
+        // Reset the relay-log info inside InnoDB
+        static void reset_mysql_relay_info();
+
+        /* allocate an innodb transaction */
+        static trx_t *allocate_trx(THD *thd, char **query_str);
 };
 
+extern long innobase_max_merged_io;
+extern my_bool innodb_no_share_locks_on_dml_select;
 extern bool innodb_skip;
 extern uint innobase_init_flags, innobase_lock_type;
 extern uint innobase_flush_log_at_trx_commit;
@@ -197,6 +221,7 @@
 extern long innobase_log_file_size, innobase_log_buffer_size;
 extern long innobase_buffer_pool_size, innobase_additional_mem_pool_size;
 extern long innobase_file_io_threads, innobase_lock_wait_timeout;
+extern long innobase_read_io_threads, innobase_write_io_threads;
 extern long innobase_force_recovery, innobase_thread_concurrency;
 extern char *innobase_data_home_dir, *innobase_data_file_path;
 extern char *innobase_log_group_home_dir, *innobase_log_arch_dir;
@@ -209,6 +234,7 @@
 extern ulong srv_max_buf_pool_modified_pct;
 extern ulong srv_max_purge_lag;
 extern ulong srv_auto_extend_increment;
+extern ulong btr_key_val_estimate_n_pages;
 }
 
 extern TYPELIB innobase_lock_typelib;
@@ -242,3 +268,4 @@
 my_bool innobase_query_caching_of_table_permitted(THD* thd, char* full_name,
 						uint full_name_len);
 void innobase_release_temporary_latches(void* innobase_tid);
+
diff -ruN base/sql/ha_myisam.cc mysql40gpl/sql/ha_myisam.cc
--- base/sql/ha_myisam.cc	2005-09-02 15:38:00.000000000 -0700
+++ mysql40gpl/sql/ha_myisam.cc	2007-04-21 09:57:10.000000000 -0700
@@ -248,7 +248,9 @@
   */
   if (table->next_number_field && buf == table->record[0])
     update_auto_increment();
-  return mi_write(file,buf);
+  int error=mi_write(file,buf);
+  if (!error) rows_changed++;
+  return error;
 }
 
 int ha_myisam::check(THD* thd, HA_CHECK_OPT* check_opt)
@@ -806,13 +808,17 @@
   statistic_increment(ha_update_count,&LOCK_status);
   if (table->time_stamp)
     update_timestamp(new_data+table->time_stamp-1);
-  return mi_update(file,old_data,new_data);
+  int error=mi_update(file,old_data,new_data);
+  if (!error) rows_changed++;
+  return error;
 }
 
 int ha_myisam::delete_row(const byte * buf)
 {
   statistic_increment(ha_delete_count,&LOCK_status);
-  return mi_delete(file,buf);
+  int error=mi_delete(file,buf);
+  if (!error) rows_changed++;
+  return error;
 }
 
 int ha_myisam::index_read(byte * buf, const byte * key,
@@ -821,6 +827,13 @@
   statistic_increment(ha_read_key_count,&LOCK_status);
   int error=mi_rkey(file,buf,active_index, key, key_len, find_flag);
   table->status=error ? STATUS_NOT_FOUND: 0;
+  if (!error) {
+    rows_read++;
+
+    int inx = (active_index == -1) ? file->lastinx : active_index;
+    if (inx >= 0 && inx < MAX_KEY)
+      index_rows_read[inx]++;
+  }
   return error;
 }
 
@@ -830,6 +843,13 @@
   statistic_increment(ha_read_key_count,&LOCK_status);
   int error=mi_rkey(file,buf,index, key, key_len, find_flag);
   table->status=error ? STATUS_NOT_FOUND: 0;
+  if (!error) {
+    rows_read++;
+
+    int inx = (active_index == -1) ? file->lastinx : active_index;
+    if (inx >= 0 && inx < MAX_KEY)
+      index_rows_read[inx]++;
+  }
   return error;
 }
 
@@ -838,6 +858,13 @@
   statistic_increment(ha_read_key_count,&LOCK_status);
   int error=mi_rkey(file,buf,active_index, key, key_len, HA_READ_PREFIX_LAST);
   table->status=error ? STATUS_NOT_FOUND: 0;
+  if (!error) {
+    rows_read++;
+
+    int inx = (active_index == -1) ? file->lastinx : active_index;
+    if (inx >= 0 && inx < MAX_KEY)
+      index_rows_read[inx]++;
+  }
   return error;
 }
 
@@ -846,6 +873,13 @@
   statistic_increment(ha_read_next_count,&LOCK_status);
   int error=mi_rnext(file,buf,active_index);
   table->status=error ? STATUS_NOT_FOUND: 0;
+  if (!error) {
+    rows_read++;
+
+    int inx = (active_index == -1) ? file->lastinx : active_index;
+    if (inx >= 0 && inx < MAX_KEY)
+      index_rows_read[inx]++;
+  }
   return error;
 }
 
@@ -854,6 +888,13 @@
   statistic_increment(ha_read_prev_count,&LOCK_status);
   int error=mi_rprev(file,buf, active_index);
   table->status=error ? STATUS_NOT_FOUND: 0;
+  if (!error) {
+    rows_read++;
+
+    int inx = (active_index == -1) ? file->lastinx : active_index;
+    if (inx >= 0 && inx < MAX_KEY)
+      index_rows_read[inx]++;
+  }
   return error;
 }
 
@@ -862,6 +903,13 @@
   statistic_increment(ha_read_first_count,&LOCK_status);
   int error=mi_rfirst(file, buf, active_index);
   table->status=error ? STATUS_NOT_FOUND: 0;
+  if (!error) {
+    rows_read++;
+
+    int inx = (active_index == -1) ? file->lastinx : active_index;
+    if (inx >= 0 && inx < MAX_KEY)
+      index_rows_read[inx]++;
+  }
   return error;
 }
 
@@ -870,6 +918,13 @@
   statistic_increment(ha_read_last_count,&LOCK_status);
   int error=mi_rlast(file, buf, active_index);
   table->status=error ? STATUS_NOT_FOUND: 0;
+  if (!error) {
+    rows_read++;
+
+    int inx = (active_index == -1) ? file->lastinx : active_index;
+    if (inx >= 0 && inx < MAX_KEY)
+      index_rows_read[inx]++;
+  }
   return error;
 }
 
@@ -880,6 +935,13 @@
   statistic_increment(ha_read_next_count,&LOCK_status);
   int error=mi_rnext_same(file,buf);
   table->status=error ? STATUS_NOT_FOUND: 0;
+  if (!error) {
+    rows_read++;
+
+    int inx = (active_index == -1) ? file->lastinx : active_index;
+    if (inx >= 0 && inx < MAX_KEY)
+      index_rows_read[inx]++;
+  }
   return error;
 }
 
@@ -896,6 +958,7 @@
   statistic_increment(ha_read_rnd_next_count,&LOCK_status);
   int error=mi_scan(file, buf);
   table->status=error ? STATUS_NOT_FOUND: 0;
+  if (!error) rows_read++;
   return error;
 }
 
@@ -909,6 +972,7 @@
   statistic_increment(ha_read_rnd_count,&LOCK_status);
   int error=mi_rrnd(file, buf, ha_get_ptr(pos,ref_length));
   table->status=error ? STATUS_NOT_FOUND: 0;
+  if (!error) rows_read++;
   return error;
 }
 
diff -ruN base/sql/handler.cc mysql40gpl/sql/handler.cc
--- base/sql/handler.cc	2005-09-02 15:37:59.000000000 -0700
+++ mysql40gpl/sql/handler.cc	2007-04-21 11:16:31.000000000 -0700
@@ -344,6 +344,7 @@
   {
     bool operation_done= 0, need_start_waiters= 0;
     bool transaction_commited= 0;
+    bool auto_commit_done= 0;
     /* If transaction has done some updates to tables */
     if (trans == &thd->transaction.all &&
 	my_b_tell(&thd->transaction.trans_log))
@@ -389,6 +390,10 @@
 	my_error(ER_ERROR_DURING_COMMIT, MYF(0), error);
 	error=1;
       }
+      else if (!(thd->options & (OPTION_NOT_AUTOCOMMIT | OPTION_BEGIN)))
+      {
+        auto_commit_done= 1;
+      }
       trans->innodb_active_trans=0;
       if (trans == &thd->transaction.all)
 	operation_done= transaction_commited= 1;
@@ -401,9 +406,13 @@
     if (error && trans == &thd->transaction.all && mysql_bin_log.is_open())
       sql_print_error("Error: Got error during commit;  Binlog is not up to date!");
     thd->variables.tx_isolation=thd->session_tx_isolation;
-    if (operation_done)
+    if (operation_done || auto_commit_done)
     {
       statistic_increment(ha_commit_count,&LOCK_status);
+      thd->diff_commit_trans++;
+    }
+    if (operation_done)
+    {
       thd->transaction.cleanup();
     }
     if (need_start_waiters)
@@ -465,8 +474,10 @@
         thd->transaction.cleanup();
     }
     thd->variables.tx_isolation=thd->session_tx_isolation;
-    if (operation_done)
+    if (operation_done) {
       statistic_increment(ha_rollback_count,&LOCK_status);
+      thd->diff_rollback_trans++;
+    }
   }
 #endif /* USING_TRANSACTIONS */
   DBUG_RETURN(error);
@@ -539,8 +550,10 @@
     }
     operation_done=1;
 #endif
-    if (operation_done)
+    if (operation_done) {
       statistic_increment(ha_rollback_count,&LOCK_status);
+      thd->diff_rollback_trans++;
+    }
   }
 #endif /* USING_TRANSACTIONS */
 
@@ -716,6 +729,8 @@
     else
       dupp_ref=ref+ALIGN_SIZE(ref_length);
   }
+  rows_read = rows_changed = 0;
+  memset(index_rows_read, 0, sizeof(index_rows_read));
   DBUG_RETURN(error);
 }
 
@@ -1054,6 +1069,91 @@
   return (my_errno=HA_ERR_WRONG_COMMAND);
 }
 
+// Updates the global table stats with the TABLE this handler represents.
+void handler::update_global_table_stats() {
+  if (!rows_read && !rows_changed) return;  // Nothing to update.
+  if (!table->table_cache_key || !table->real_name) return;
+
+  TABLE_STATS* table_stats;
+  char key[NAME_LEN * 2 + 2];
+  // [db] + '.' + [table]
+  sprintf(key, "%s.%s", table->table_cache_key, table->real_name);
+
+  pthread_mutex_lock(&LOCK_global_table_stats);
+  // Gets the global table stats, creating one if necessary.
+  if (!(table_stats = (TABLE_STATS*)hash_search(&global_table_stats,
+                                                (byte*)key,
+                                                strlen(key)))) {
+    if (!(table_stats = ((TABLE_STATS*)
+                         my_malloc(sizeof(TABLE_STATS), MYF(MY_WME))))) {
+      // Out of memory.
+      goto end;
+    }
+    strncpy(table_stats->table, key, sizeof(table_stats->table));
+    table_stats->rows_read = 0;
+    table_stats->rows_changed = 0;
+    table_stats->rows_changed_x_indexes = 0;
+
+    if (hash_insert(&global_table_stats, (byte*)table_stats)) {
+      // Out of memory.
+      my_free((char*)table_stats, 0);
+      goto end;
+    }
+  }
+  // Updates the global table stats.
+  table_stats->rows_read += rows_read;
+  table_stats->rows_changed += rows_changed;
+  table_stats->rows_changed_x_indexes += rows_changed * max(table->keys, 1);
+  rows_read = rows_changed = 0;
+end:
+  pthread_mutex_unlock(&LOCK_global_table_stats);
+}
+
+// Updates the global index stats with this handler's accumulated index reads.
+void handler::update_global_index_stats() {
+  if (!table->table_cache_key || !table->real_name) return;
+
+  for (int x = 0; x < table->keys; x++) {
+    if (index_rows_read[x]) {
+      // Rows were read using this index.
+      KEY* key_info = &table->key_info[x];
+
+      if (!key_info->name) continue;
+
+      INDEX_STATS* index_stats;
+      char key[NAME_LEN * 3 + 3];
+      // [db] + '.' + [table] + '.' + [index]
+      sprintf(key, "%s.%s.%s", table->table_cache_key, table->real_name,
+              key_info->name);
+
+      pthread_mutex_lock(&LOCK_global_index_stats);
+      // Gets the global index stats, creating one if necessary.
+      if (!(index_stats = (INDEX_STATS*)hash_search(&global_index_stats,
+                                                    (byte*)key,
+                                                    strlen(key)))) {
+        if (!(index_stats = ((INDEX_STATS*)
+                             my_malloc(sizeof(INDEX_STATS), MYF(MY_WME))))) {
+          // Out of memory.
+          goto end;
+        }
+        strncpy(index_stats->index, key, sizeof(index_stats->index));
+        index_stats->rows_read = 0;
+
+        if (hash_insert(&global_index_stats, (byte*)index_stats)) {
+          // Out of memory.
+          my_free((char*)index_stats, 0);
+          goto end;
+        }
+      }
+      // Updates the global index stats.
+      index_stats->rows_read += index_rows_read[x];
+      index_rows_read[x] = 0;
+end:
+      pthread_mutex_unlock(&LOCK_global_index_stats);
+    }
+  }
+}
+
 /****************************************************************************
 ** Some general functions that isn't in the handler class
 ****************************************************************************/
diff -ruN base/sql/handler.h mysql40gpl/sql/handler.h
--- base/sql/handler.h	2005-09-02 15:38:07.000000000 -0700
+++ mysql40gpl/sql/handler.h	2007-04-21 11:15:26.000000000 -0700
@@ -31,6 +31,10 @@
 #define USING_TRANSACTIONS
 #endif
 
+#if MAX_KEY > 128
+#error MAX_KEY is too large.  Values up to 128 are supported.
+#endif
+
 // the following is for checking tables
 
 #define HA_ADMIN_ALREADY_DONE	  1
@@ -185,10 +189,38 @@
   void init();
 } HA_CHECK_OPT;
 
+#if DBUG_ON
+#undef NDEBUG
+#include <assert.h>
+
+class canary {
+ public:
+  static const long kGoodCanary = 0xabcd1234L;
+  static const long kBadCanary = 1;
+
+  canary() : tag_(kGoodCanary) {}
+  canary(const canary& rhs) {
+    rhs.assert_valid();
+    tag_ = kGoodCanary;
+  }
+  ~canary() {
+    assert_valid();
+    tag_ = kBadCanary;
+  }
+  bool valid() const { return tag_ == kGoodCanary; }
+  void assert_valid() const { assert(valid()); }
+ private:
+  long tag_;
+};
+#endif
+
 class handler :public Sql_alloc
 {
  protected:
   struct st_table *table;		/* The table definition */
+#if DBUG_ON
+  canary canary_;                       /* Guard against multiple deletes */
+#endif
 
 public:
   byte *ref;				/* Pointer to current row */
@@ -216,6 +248,9 @@
   FT_INFO *ft_handler;
   bool  auto_increment_column_changed;
   bool implicit_emptied;                /* Can be !=0 only if HEAP */
+  ulonglong rows_read;
+  ulonglong rows_changed;
+  ulonglong index_rows_read[MAX_KEY];
 
   handler(TABLE *table_arg) :table(table_arg),
     ref(0), data_file_length(0), max_data_file_length(0), index_file_length(0),
@@ -224,15 +259,22 @@
     create_time(0), check_time(0), update_time(0),
     key_used_on_scan(MAX_KEY), active_index(MAX_REF_PARTS),
     ref_length(sizeof(my_off_t)), block_size(0),
-    raid_type(0), ft_handler(0), implicit_emptied(0)
-    {}
+    raid_type(0), ft_handler(0), implicit_emptied(0),
+    rows_read(0), rows_changed(0)
+    {
+      memset(index_rows_read, 0, sizeof(index_rows_read));
+    }
   virtual ~handler(void) {}
   int ha_open(const char *name, int mode, int test_if_locked);
   void update_timestamp(byte *record);
   void update_auto_increment();
   virtual void print_error(int error, myf errflag);
   uint get_dup_key(int error);
-  void change_table_ptr(TABLE *table_arg) { table=table_arg; }
+  void change_table_ptr(TABLE *table_arg) {
+    table=table_arg;
+    rows_read = rows_changed = 0;
+    memset(index_rows_read, 0, sizeof(index_rows_read));
+  }
   virtual double scan_time()
     { return ulonglong2double(data_file_length) / IO_SIZE + 2; }
   virtual double read_time(uint index, uint ranges, ha_rows rows)
@@ -352,6 +394,9 @@
   virtual THR_LOCK_DATA **store_lock(THD *thd,
 				     THR_LOCK_DATA **to,
 				     enum thr_lock_type lock_type)=0;
+
+  void update_global_table_stats();
+  void update_global_index_stats();
 };
 
 	/* Some extern variables used with handlers */
diff -ruN base/sql/hash_64.cc mysql40gpl/sql/hash_64.cc
--- base/sql/hash_64.cc	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/sql/hash_64.cc	2007-04-21 09:57:10.000000000 -0700
@@ -0,0 +1,102 @@
+/*
+ * hash_64 - 64 bit Fowler/Noll/Vo-0 hash code
+ *
+ * @(#) $Revision: 1.8 $
+ * @(#) $Id: hash_64.c,v 1.8 2003/10/03 20:37:04 chongo Exp $
+ * @(#) $Source: /usr/local/src/cmd/fnv/RCS/hash_64.c,v $
+ *
+ ***
+ *
+ * Fowler/Noll/Vo hash
+ *
+ * The basis of this hash algorithm was taken from an idea sent
+ * as reviewer comments to the IEEE POSIX P1003.2 committee by:
+ *
+ *      Phong Vo (http://www.research.att.com/info/kpv/)
+ *      Glenn Fowler (http://www.research.att.com/~gsf/)
+ *
+ * In a subsequent ballot round:
+ *
+ *      Landon Curt Noll (http://www.isthe.com/chongo/)
+ *
+ * improved on their algorithm.  Some people tried this hash
+ * and found that it worked rather well.  In an EMail message
+ * to Landon, they named it the ``Fowler/Noll/Vo'' or FNV hash.
+ *
+ * FNV hashes are designed to be fast while maintaining a low
+ * collision rate. The FNV speed allows one to quickly hash lots
+ * of data while maintaining a reasonable collision rate.  See:
+ *
+ *      http://www.isthe.com/chongo/tech/comp/fnv/index.html
+ *
+ * for more details as well as other forms of the FNV hash.
+ *
+ ***
+ *
+ * NOTE: The FNV-0 historic hash is not recommended.  One should use
+ *	 the FNV-1 hash instead.
+ *
+ * To use the 64 bit FNV-0 historic hash, pass FNV0_64_INIT as the
+ * Fnv64_t hashval argument to fnv_64_buf() or fnv_64_str().
+ *
+ * To use the recommended 64 bit FNV-1 hash, pass FNV1_64_INIT as the
+ * Fnv64_t hashval argument to fnv_64_buf() or fnv_64_str().
+ *
+ ***
+ *
+ * Please do not copyright this code.  This code is in the public domain.
+ *
+ * LANDON CURT NOLL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
+ * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
+ * EVENT SHALL LANDON CURT NOLL BE LIABLE FOR ANY SPECIAL, INDIRECT OR
+ * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
+ * USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
+ * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
+ * PERFORMANCE OF THIS SOFTWARE.
+ *
+ * By:
+ *	chongo <Landon Curt Noll> /\oo/\
+ *      http://www.isthe.com/chongo/
+ *
+ * Share and Enjoy!	:-)
+ */
+
+#include "hash_64.h"
+
+/*
+ * 64 bit magic FNV-0 and FNV-1 prime
+ */
+static const ulonglong FNV_64_PRIME = 0x100000001b3ULL;
+
+/*
+ * hash64 - perform a 64 bit Fowler/Noll/Vo hash on a buffer
+ *
+ * input:
+ *	buf	- start of buffer to hash
+ *	len	- length of buffer in octets
+ *	hval	- previous hash value or 0 if first call
+ *
+ * returns:
+ *	64 bit hash
+ *
+ * NOTE: To use the recommended 64 bit FNV-1 hash, use HASH_64_INIT as the hval
+ *	 argument on the first call to hash64()
+ */
+ulonglong hash64(const void *buf, size_t len, ulonglong hval)
+{
+  const unsigned char *bp = (const unsigned char*)buf;
+  const unsigned char *be = bp + len;
+
+  /*
+   * FNV-1 hash each octet of the buffer
+   */
+  for (; bp != be; ++bp) {
+    /* multiply by the 64 bit FNV magic prime mod 2^64 */
+    hval *= FNV_64_PRIME;
+
+    /* xor the bottom with the current octet */
+    hval ^= (ulonglong)*bp;
+  }
+
+  return hval;
+}
diff -ruN base/sql/hash_64.h mysql40gpl/sql/hash_64.h
--- base/sql/hash_64.h	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/sql/hash_64.h	2007-04-21 09:57:10.000000000 -0700
@@ -0,0 +1,69 @@
+/*
+ * hash_64 - 64 bit Fowler/Noll/Vo-0 hash code
+ *
+ * @(#) $Revision: 1.8 $
+ * @(#) $Id: hash_64.c,v 1.8 2003/10/03 20:37:04 chongo Exp $
+ * @(#) $Source: /usr/local/src/cmd/fnv/RCS/hash_64.c,v $
+ *
+ ***
+ *
+ * Fowler/Noll/Vo hash
+ *
+ * The basis of this hash algorithm was taken from an idea sent
+ * as reviewer comments to the IEEE POSIX P1003.2 committee by:
+ *
+ *      Phong Vo (http://www.research.att.com/info/kpv/)
+ *      Glenn Fowler (http://www.research.att.com/~gsf/)
+ *
+ * In a subsequent ballot round:
+ *
+ *      Landon Curt Noll (http://www.isthe.com/chongo/)
+ *
+ * improved on their algorithm.  Some people tried this hash
+ * and found that it worked rather well.  In an EMail message
+ * to Landon, they named it the ``Fowler/Noll/Vo'' or FNV hash.
+ *
+ * FNV hashes are designed to be fast while maintaining a low
+ * collision rate. The FNV speed allows one to quickly hash lots
+ * of data while maintaining a reasonable collision rate.  See:
+ *
+ *      http://www.isthe.com/chongo/tech/comp/fnv/index.html
+ *
+ * for more details as well as other forms of the FNV hash.
+ *
+ ***
+ *
+ * NOTE: The FNV-0 historic hash is not recommended.  One should use
+ *	 the FNV-1 hash instead.
+ *
+ * To use the 64 bit FNV-0 historic hash, pass FNV0_64_INIT as the
+ * Fnv64_t hashval argument to fnv_64_buf() or fnv_64_str().
+ *
+ * To use the recommended 64 bit FNV-1 hash, pass FNV1_64_INIT as the
+ * Fnv64_t hashval argument to fnv_64_buf() or fnv_64_str().
+ *
+ ***
+ *
+ * Please do not copyright this code.  This code is in the public domain.
+ *
+ * LANDON CURT NOLL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
+ * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
+ * EVENT SHALL LANDON CURT NOLL BE LIABLE FOR ANY SPECIAL, INDIRECT OR
+ * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
+ * USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
+ * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
+ * PERFORMANCE OF THIS SOFTWARE.
+ *
+ * By:
+ *	chongo <Landon Curt Noll> /\oo/\
+ *      http://www.isthe.com/chongo/
+ *
+ * Share and Enjoy!	:-)
+ */
+
+#include "my_global.h"
+#define HASH_64_INIT 0x84222325cbf29ce4ULL
+/* Return a hash of the data in buf of size len using hval as the intial
+ * value for the hash function.
+ */
+ulonglong hash64(const void *buf, size_t len, ulonglong hval);
diff -ruN base/sql/item.cc mysql40gpl/sql/item.cc
--- base/sql/item.cc	2005-09-02 15:38:05.000000000 -0700
+++ mysql40gpl/sql/item.cc	2007-04-21 09:57:10.000000000 -0700
@@ -22,6 +22,7 @@
 #include "mysql_priv.h"
 #include <m_ctype.h>
 #include "my_dir.h"
+#include "hash_64.h"
 
 /*****************************************************************************
 ** Item functions
@@ -803,6 +804,51 @@
   return result == field->val_real();
 }
 
+ulonglong hash_args(Item **args,
+                    uint arg_count,
+                    const ulonglong initial_value) {
+  uint null_default = 0x0a0b0c0d;
+  ulonglong row_hash = initial_value;
+  for (int a = 0; a < arg_count; ++a) {
+    // The argument is evaluated to determine when it is null.
+    switch (args[a]->result_type()) {
+      case STRING_RESULT:
+        {
+          String s;
+          String *sp = args[a]->val_str(&s);
+          if (!args[a]->null_value)
+            row_hash = hash64((const void*)sp->ptr(), sp->length(), row_hash);
+          else
+            row_hash = hash64((const void*)&null_default, sizeof(null_default),
+                              row_hash);
+        }
+        break;
+      case REAL_RESULT:
+        {
+          double value = args[a]->val();
+          if (!args[a]->null_value)
+            row_hash = hash64((const void*)&value, sizeof(value), row_hash);
+          else
+            row_hash = hash64((const void*)&null_default, sizeof(null_default),
+                              row_hash);
+        }
+        break;
+      case INT_RESULT:
+        {
+          longlong value = args[a]->val_int();
+          if (!args[a]->null_value)
+            row_hash = hash64((const void*)&value, sizeof(value), row_hash);
+          else
+            row_hash = hash64((const void*)&null_default, sizeof(null_default),
+                              row_hash);
+        }
+        break;
+      default:
+        break;
+    }
+  }
+  return row_hash;
+}
 
 /*****************************************************************************
 ** Instantiate templates
diff -ruN base/sql/item_create.cc mysql40gpl/sql/item_create.cc
--- base/sql/item_create.cc	2005-09-02 15:38:01.000000000 -0700
+++ mysql40gpl/sql/item_create.cc	2007-04-21 09:57:10.000000000 -0700
@@ -456,3 +456,8 @@
 {
   return new Item_func_quote(a);
 }
+
+Item *create_func_ieee754_to_string(Item* a)
+{
+  return new Item_func_ieee754_to_string(a);
+}
diff -ruN base/sql/item_create.h mysql40gpl/sql/item_create.h
--- base/sql/item_create.h	2005-09-02 15:38:00.000000000 -0700
+++ mysql40gpl/sql/item_create.h	2007-04-21 09:57:10.000000000 -0700
@@ -95,3 +95,4 @@
 Item *create_load_file(Item* a);
 Item *create_func_is_free_lock(Item* a);
 Item *create_func_quote(Item* a);
+Item *create_func_ieee754_to_string(Item *a);
diff -ruN base/sql/item_func.cc mysql40gpl/sql/item_func.cc
--- base/sql/item_func.cc	2005-09-02 15:38:01.000000000 -0700
+++ mysql40gpl/sql/item_func.cc	2007-04-21 09:57:10.000000000 -0700
@@ -27,6 +27,7 @@
 #include <time.h>
 #include <ft_global.h>
 #include "slave.h" // for wait_for_master_pos
+#include "hash_64.h"
 
 /* return TRUE if item is a constant */
 
@@ -2477,3 +2478,35 @@
     return 1;
   return 0;
 }
+
+
+void Item_func_hash::fix_length_and_dec()
+{
+  decimals=0;
+  max_length=21;
+  maybe_null=0;
+  binary=0;
+  unsigned_flag = 1;
+}
+
+
+String *Item_func_hash::val_str(String *str)
+{
+  ulonglong nr = (ulonglong) val_int();
+  str->set(nr);
+  return str;
+}
+
+
+double Item_func_hash::val()
+{
+  ulonglong nr = (ulonglong) val_int();
+  return (double) nr;
+}
+
+
+longlong Item_func_hash::val_int()
+{
+  null_value = 0; // This always evaluates to a non-null value.
+  return (longlong) hash_args(args, arg_count, HASH_64_INIT);
+}
diff -ruN base/sql/item_func.h mysql40gpl/sql/item_func.h
--- base/sql/item_func.h	2005-09-02 15:37:59.000000000 -0700
+++ mysql40gpl/sql/item_func.h	2007-04-21 09:57:10.000000000 -0700
@@ -500,6 +500,27 @@
 };
 
 
+// An N-ary function to compute the hash of its input.
+//   select hash(col1, col2) from foo
+class Item_func_hash :public Item_func
+{
+public:
+  Item_func_hash(List<Item> &list) :Item_func(list) {}
+  // The input to the function exists when the val* functions are called.
+  // A default value is substituted for null input arguments.
+  // These also set a variable to indicate that the result is not null.
+  double val();
+  longlong val_int();
+  String *val_str(String *);
+  // Set the maximum length in characters of the result and whether the result
+  // may be null.  By design, the result of this is never null. 
+  void fix_length_and_dec();
+  enum Item_result result_type () const { return INT_RESULT; }
+  unsigned int size_of() { return sizeof(*this);}
+  const char *func_name() const { return "hash"; }
+};
+
+
 class Item_func_min_max :public Item_func
 {
   Item_result cmp_type;
diff -ruN base/sql/item.h mysql40gpl/sql/item.h
--- base/sql/item.h	2005-09-02 15:37:55.000000000 -0700
+++ mysql40gpl/sql/item.h	2007-04-21 09:57:10.000000000 -0700
@@ -582,3 +582,15 @@
 extern Item_result item_cmp_type(Item_result a,Item_result b);
 extern Item *resolve_const_item(Item *item,Item *cmp_item);
 extern bool field_is_equal_to_item(Field *field,Item *item);
+
+/*
+   Compute a hash value from all entries in 'args'.  Handles
+   all datatypes.  Use a default value for nulls.
+   Parameters:
+     args: values to hash.
+     arg_count: number of entries in args
+     initial_value: the initial value for the hash function.
+*/
+extern ulonglong hash_args(Item **args,
+                           uint arg_count,
+                           const ulonglong initial_value);
diff -ruN base/sql/item_strfunc.cc mysql40gpl/sql/item_strfunc.cc
--- base/sql/item_strfunc.cc	2005-09-02 15:38:03.000000000 -0700
+++ mysql40gpl/sql/item_strfunc.cc	2007-04-21 09:57:10.000000000 -0700
@@ -33,6 +33,7 @@
 #include "md5.h"
 #include "sha1.h"
 #include "my_aes.h"
+#include <math.h>
 
 String empty_string("");
 
@@ -2239,3 +2240,56 @@
   null_value= 1;
   return 0;
 }
+
+String* Item_func_ieee754_to_string::val_str(String *str)
+{
+  null_value= 0;
+  switch (args[0]->result_type())
+  {
+    case REAL_RESULT:
+    {
+      // TODO(mcallaghan): distinguish double from float
+      double res = args[0]->val();
+      if (args[0]->null_value) {
+        // Null argument, return NULL
+        null_value= 1;
+        return (String*) 0;
+      } else {
+        // Use 17 digits of precision so that the conversion from
+        // double -> decimal -> double is lossless.
+        char buf[30];
+        if (isnan(res)) {
+          str->copy("nan", strlen("nan"));
+        } else if (isinf(res)) {
+          if (res < 0)
+            str->copy("-inf", strlen("-inf"));
+          else
+            str->copy("inf", strlen("inf"));
+        } else {
+          sprintf(buf, "%-24.17g", res);
+          str->copy(buf, strlen(buf));
+        }
+      }
+      return str;
+    }
+    case INT_RESULT:
+    case STRING_RESULT:
+    default:
+    {
+      String *res = args[0]->val_str(str);
+      if (!res) {
+        // Null argument, return NULL
+        null_value= 1;
+        return (String*) 0;
+      } else {
+        // Return a string with <= 24 characters to respect max_length.
+        if (res->length() > 24) {
+          char buf[24];
+          memcpy(buf, res->c_ptr(), 24);
+          res->copy(buf, 24);
+        }
+        return res;
+      }
+    }
+  }
+}
diff -ruN base/sql/item_strfunc.h mysql40gpl/sql/item_strfunc.h
--- base/sql/item_strfunc.h	2005-09-02 15:37:59.000000000 -0700
+++ mysql40gpl/sql/item_strfunc.h	2007-04-21 09:57:10.000000000 -0700
@@ -542,3 +542,21 @@
   String *val_str(String *);
   void fix_length_and_dec() { max_length= args[0]->max_length * 2 + 2; }
 };
+
+// The conversion from double -> decimal -> double is lossless when the
+// conversion from double -> decimal generates 17 digits of precision.
+// This function implemented by this class makes that possible.
+class Item_func_ieee754_to_string :public Item_str_func
+{
+  String tmp_str;
+public:
+  Item_func_ieee754_to_string(Item *a) : Item_str_func(a) { }
+  String *val_str(String *);
+  void fix_length_and_dec()
+  {
+    // 7 chars overhead + 17 digits of precision
+    max_length= 24;
+  }
+  const char *func_name() const { return "ieee754_to_string"; }
+  unsigned int size_of() { return sizeof(*this);}
+};
diff -ruN base/sql/item_sum.cc mysql40gpl/sql/item_sum.cc
--- base/sql/item_sum.cc	2005-09-02 15:38:00.000000000 -0700
+++ mysql40gpl/sql/item_sum.cc	2007-04-21 09:57:10.000000000 -0700
@@ -1117,6 +1117,22 @@
   return table->file->records;
 }
 
+bool Item_sum_unordered_checksum::add()
+{
+  // The hash for each row xor'd to make this row order independent.
+  bits ^= hash_args(args, arg_count, HASH_64_INIT);
+  return 0;
+}
+
+bool Item_sum_ordered_checksum::add()
+{
+  // The hash for each row is the initial hash for the next row to make
+  // this row order dependent.
+  bits = hash_args(args, arg_count, bits);
+  return 0;
+}
+
+
 /****************************************************************************
 ** Functions to handle dynamic loadable aggregates
 ** Original source by: Alexis Mikhailov <root@medinf.chuvashia.su>
diff -ruN base/sql/item_sum.h mysql40gpl/sql/item_sum.h
--- base/sql/item_sum.h	2005-09-02 15:38:00.000000000 -0700
+++ mysql40gpl/sql/item_sum.h	2007-04-21 09:57:10.000000000 -0700
@@ -22,6 +22,7 @@
 #endif
 
 #include <my_tree.h>
+#include "hash_64.h"
 
 class Item_sum :public Item_result_field
 {
@@ -371,9 +372,12 @@
 class Item_sum_bit :public Item_sum_int
 {
 protected:
-  ulonglong reset_bits,bits;
+  const ulonglong reset_bits;
+  ulonglong bits;
 
 public:
+  Item_sum_bit(List<Item> &list,ulonglong reset_arg)
+    :Item_sum_int(list),reset_bits(reset_arg),bits(reset_arg) {}
   Item_sum_bit(Item *item_par,ulonglong reset_arg)
     :Item_sum_int(item_par),reset_bits(reset_arg),bits(reset_arg) {}
   enum Sumfunctype sum_func () const {return SUM_BIT_FUNC;}
@@ -406,6 +410,33 @@
   unsigned int size_of() { return sizeof(*this);}  
 };
 
+// Aggregate checksum function that is row order-independent.
+//   select col1, unordered_checksum(col2, col3) from foo where ... group by col1
+// The checksum functions use a default value for null arguments.  The result
+// is never null.
+class Item_sum_unordered_checksum :public Item_sum_bit
+{
+public:
+  Item_sum_unordered_checksum(List<Item> &list) :Item_sum_bit(list, HASH_64_INIT) {}
+  // Called for each row in a group.  reset() is called before the first
+  // row in a group.
+  bool add();
+  const char *func_name() const { return "unordered_checksum"; }
+  unsigned int size_of() { return sizeof(*this);}  
+};
+
+
+// Aggregate checksum function that is row order-dependent.
+//   select col1, ordered_checksum(col2, col3) from foo where ... group by col1
+class Item_sum_ordered_checksum :public Item_sum_bit
+{
+public:
+  Item_sum_ordered_checksum(List<Item> &list) :Item_sum_bit(list, HASH_64_INIT) {}
+  bool add();
+  const char *func_name() const { return "ordered_checksum"; }
+  unsigned int size_of() { return sizeof(*this);}  
+};
+
 /*
 **	user defined aggregates
 */
diff -ruN base/sql/lex.h mysql40gpl/sql/lex.h
--- base/sql/lex.h	2005-09-02 15:37:59.000000000 -0700
+++ mysql40gpl/sql/lex.h	2007-04-21 11:10:30.000000000 -0700
@@ -179,6 +179,7 @@
   { "IN",		SYM(IN_SYM),0,0},
   { "INDEX",		SYM(INDEX),0,0},
   { "INDEXES",		SYM(INDEXES),0,0},
+  { "INDEX_STATISTICS",	SYM(INDEX_STATS_SYM),0,0},
   { "INFILE",		SYM(INFILE),0,0},
   { "INNER",		SYM(INNER_SYM),0,0},
   { "INNOBASE",		SYM(INNOBASE_SYM),0,0},
@@ -222,6 +223,7 @@
   { "LONGBLOB",		SYM(LONGBLOB),0,0},
   { "LONGTEXT",		SYM(LONGTEXT),0,0},
   { "LOW_PRIORITY",	SYM(LOW_PRIORITY),0,0},
+  { "MAKE",             SYM(MAKE),0,0},
   { "MASTER",           SYM(MASTER_SYM),0,0},
   { "MASTER_CONNECT_RETRY",           SYM(MASTER_CONNECT_RETRY_SYM),0,0},
   { "MASTER_HOST",           SYM(MASTER_HOST_SYM),0,0},
@@ -342,6 +344,7 @@
   { "SUPER",		SYM(SUPER_SYM),0,0},
   { "TABLE",		SYM(TABLE_SYM),0,0},
   { "TABLES",		SYM(TABLES),0,0},
+  { "TABLE_STATISTICS",	SYM(TABLE_STATS_SYM),0,0},
   { "TEMPORARY",	SYM(TEMPORARY),0,0},
   { "TERMINATED",	SYM(TERMINATED),0,0},
   { "TEXT",		SYM(TEXT_SYM),0,0},
@@ -361,7 +364,9 @@
   { "UNIQUE",		SYM(UNIQUE_SYM),0,0},
   { "UNLOCK",		SYM(UNLOCK_SYM),0,0},
   { "UNSIGNED",		SYM(UNSIGNED),0,0},
+  { "UNTIL",            SYM(UNTIL_SYM),0,0},
   { "USE",		SYM(USE_SYM),0,0},
+  { "USER_STATISTICS",	SYM(USER_STATS_SYM),0,0},
   { "USE_FRM",		SYM(USE_FRM),0,0},
   { "USING",		SYM(USING),0,0},
   { "UPDATE",		SYM(UPDATE_SYM),0,0},
@@ -445,7 +450,9 @@
   { "GET_LOCK",		SYM(FUNC_ARG2),0,CREATE_FUNC(create_func_get_lock)},
   { "GREATEST",		SYM(GREATEST_SYM),0,0},
   { "GROUP_UNIQUE_USERS",	SYM(GROUP_UNIQUE_USERS),0,0},
+  { "HASH",		SYM(HASH_SYM),0,0},
   { "HEX",		SYM(FUNC_ARG1),0,CREATE_FUNC(create_func_hex)},
+  { "IEEE754_TO_STRING", SYM(FUNC_ARG1),0,CREATE_FUNC(create_func_ieee754_to_string)},
   { "IFNULL",		SYM(FUNC_ARG2),0,CREATE_FUNC(create_func_ifnull)},
   { "INET_ATON",	SYM(FUNC_ARG1),0,CREATE_FUNC(create_func_inet_aton)},
   { "INET_NTOA",	SYM(FUNC_ARG1),0,CREATE_FUNC(create_func_inet_ntoa)},
@@ -479,6 +486,7 @@
   { "OCT",		SYM(FUNC_ARG1),0,CREATE_FUNC(create_func_oct)},
   { "OLD_PASSWORD",     SYM(FUNC_ARG1),0,CREATE_FUNC(create_func_password)},
   { "ORD",              SYM(FUNC_ARG1),0,CREATE_FUNC(create_func_ord)},
+  { "ORDERED_CHECKSUM",	SYM(ORDERED_CHECKSUM_SYM)},
   { "PERIOD_ADD",	SYM(FUNC_ARG2),0,CREATE_FUNC(create_func_period_add)},
   { "PERIOD_DIFF",	SYM(FUNC_ARG2),0,CREATE_FUNC(create_func_period_diff)},
   { "PI",		SYM(FUNC_ARG0),0,CREATE_FUNC(create_func_pi)},
@@ -521,6 +529,7 @@
   { "UCASE",		SYM(FUNC_ARG1),0,CREATE_FUNC(create_func_ucase)},
   { "UNIQUE_USERS",	SYM(UNIQUE_USERS),0,0},
   { "UNIX_TIMESTAMP",	SYM(UNIX_TIMESTAMP),0,0},
+  { "UNORDERED_CHECKSUM",	SYM(UNORDERED_CHECKSUM_SYM)},
   { "UPPER",		SYM(FUNC_ARG1),0,CREATE_FUNC(create_func_ucase)},
   { "USER",		SYM(USER),0,0},
   { "VERSION",		SYM(FUNC_ARG0),0,CREATE_FUNC(create_func_version)},
diff -ruN base/sql/log.cc mysql40gpl/sql/log.cc
--- base/sql/log.cc	2005-09-02 15:38:00.000000000 -0700
+++ mysql40gpl/sql/log.cc	2007-04-21 09:57:11.000000000 -0700
@@ -35,12 +35,35 @@
 #include "message.h"
 #endif
 
-MYSQL_LOG mysql_log,mysql_update_log,mysql_slow_log,mysql_bin_log;
+#ifdef HAVE_INNOBASE_DB
+#include "ha_innodb.h"
+#endif
+
+
+/* The max InnoDB allowed replication binlog filename length: the value should
+ * be the same as TRX_SYS_MYSQL_RELAY_NAME_LEN.
+ */
+#define MAX_INNODB_BINLOG_FILENAME_LEN      250
+
+MYSQL_LOG mysql_log,mysql_audit_log,mysql_update_log;
+MYSQL_LOG mysql_slow_log,mysql_bin_log;
 extern I_List<i_string> binlog_do_db, binlog_ignore_db;
 
 static bool test_if_number(const char *str,
 			   long *res, bool allow_wildcards);
 
+/* Queries with the correct log position in the event */
+struct QueryLogEvent {
+  const char *query_;
+  const int query_length_;
+};
+
+QueryLogEvent query_with_log[] = {
+  { "BEGIN", strlen("BEGIN") },
+  { "COMMIT", strlen("COMMIT") }
+};
+
+
 #ifdef __NT__
 static int eventSource = 0;
 
@@ -118,7 +141,10 @@
   my_dirend(dir_info);
 
   *end++='.';
-  sprintf(end,"%03ld",max_found+1);
+  if (rpl_long_filename)
+    sprintf(end,"%06ld",max_found+1);
+  else
+    sprintf(end,"%03ld",max_found+1);
   DBUG_RETURN(0);
 }
 
@@ -126,7 +152,8 @@
 MYSQL_LOG::MYSQL_LOG()
   :bytes_written(0), last_time(0), query_start(0), name(0),
    file_id(1), open_count(1), log_type(LOG_CLOSED), write_error(0), inited(0),
-   need_start_event(1)
+   need_start_event(1), log_for_root(FALSE), active_mi_(NULL),
+   mule_binlog(false), mule_binlog_servable(false)
 {
   /*
     We don't want to initialize LOCK_Log here as such initialization depends on
@@ -202,6 +229,75 @@
   (void) pthread_cond_init(&update_cond, 0);
 }
 
+const char *MYSQL_LOG::generate_name(const char *log_name,
+                                     const char *suffix,
+                                     bool strip_ext, char *buff)
+{
+  if (!log_name || !log_name[0])
+  {
+    /*
+      TODO: The following should be using fn_format();  We just need to
+      first change fn_format() to cut the file name if it's too long.
+    */
+    strmake(buff,glob_hostname,FN_REFLEN-5);
+    strmov(fn_ext(buff),suffix);
+    return (const char *)buff;
+  }
+  // get rid of extension if the log is binary to avoid problems
+  if (strip_ext)
+  {
+    char *p = fn_ext(log_name);
+    uint length=(uint) (p-log_name);
+    strmake(buff,log_name,min(length,FN_REFLEN));
+    return (const char*)buff;
+  }
+  return log_name;
+}
+
+bool MYSQL_LOG::open_index_file(const char *index_file_name_arg,
+                                const char *log_name) {
+  File index_file_nr= -1;
+
+  /* If the index is already opened, do not open it again. */
+  if (my_b_inited(&index_file))
+    return TRUE;
+
+  /*
+    First open of this class instance
+    Create an index file that will hold all file names uses for logging.
+    Add new entries to the end of it.
+  */
+  myf opt= MY_UNPACK_FILENAME;
+  if (!index_file_name_arg)
+  {
+    index_file_name_arg= log_name;    // Use same basename for index file
+    opt= MY_UNPACK_FILENAME | MY_REPLACE_EXT;
+  }
+  fn_format(index_file_name, index_file_name_arg, mysql_data_home,
+            ".index", opt);
+  if ((index_file_nr= my_open(index_file_name,
+                              O_RDWR | O_CREAT | O_BINARY ,
+                              MYF(MY_WME))) < 0 ||
+       my_sync(index_file_nr, MYF(MY_WME)) ||
+       init_io_cache(&index_file, index_file_nr,
+                     IO_SIZE, WRITE_CACHE,
+                     my_seek(index_file_nr,0L,MY_SEEK_END,MYF(0)),
+			0, MYF(MY_WME | MY_WAIT_IF_FULL)))
+  {
+    if (index_file_nr >= 0)
+      my_close(index_file_nr,MYF(0));
+    return FALSE;
+  }
+  return TRUE;
+}
+
+int MYSQL_LOG::close_index_file() {
+  if (my_b_inited(&index_file)) {
+    end_io_cache(&index_file);
+    my_close(index_file.file, MYF(0));
+  }
+  return 0;
+}
 
 /*
   Open a (new) log file.
@@ -224,7 +320,7 @@
                      ulong max_size)
 {
   char buff[512];
-  File file= -1, index_file_nr= -1;
+  File file= -1;
   int open_flags = O_CREAT | O_APPEND | O_BINARY;
   DBUG_ENTER("MYSQL_LOG::open");
   DBUG_PRINT("enter",("log_type: %d",(int) log_type));
@@ -258,13 +354,30 @@
   case LOG_NORMAL:
   {
     char *end;
-    int len=my_snprintf(buff, sizeof(buff),
+    char time_buff[32];
+    struct tm tm_tmp;
+    time_t skr = time(NULL);
+    localtime_r(&skr,&tm_tmp);
+    int len = my_snprintf(time_buff, sizeof(time_buff), 
+                          "%02d%02d%02d %2d:%02d:%02d\t",
+                          tm_tmp.tm_year % 100,
+                          tm_tmp.tm_mon+1,
+                          tm_tmp.tm_mday,
+                          tm_tmp.tm_hour,
+                          tm_tmp.tm_min,
+                          tm_tmp.tm_sec);
+    if (len <= 0) {
+      // Something bad happened, skip printing time.
+      strcpy(time_buff, "");
+    }
+    len=my_snprintf(buff, sizeof(buff),
 #ifdef __NT__
-                        "%s, Version: %s, started with:\nTCP Port: %d, Named Pipe: %s\n",
+                    "%s %s, Version: %s, started with:\nTCP Port: %d, Named Pipe: %s\n",
 #else
-                        "%s, Version: %s, started with:\nTcp port: %d  Unix socket: %s\n",
+                    "%s %s, Version: %s, started with:\nTcp port: %d  Unix socket: %s\n",
 #endif
-                        my_progname, server_version, mysql_port, mysql_unix_port);
+                    time_buff, my_progname, server_version,
+                    mysql_port, mysql_unix_port);
     end=strnmov(buff+len,"Time                 Id Command    Argument\n",
                 sizeof(buff)-len);
     if (my_b_write(&log_file, (byte*) buff,(uint) (end-buff)) ||
@@ -297,13 +410,6 @@
   {
     bool write_file_name_to_index_file=0;
 
-    myf opt= MY_UNPACK_FILENAME;
-    if (!index_file_name_arg)
-    {
-      index_file_name_arg= name;	// Use same basename for index file
-      opt= MY_UNPACK_FILENAME | MY_REPLACE_EXT;
-    }
-
     if (!my_b_filelength(&log_file))
     {
       /*
@@ -321,20 +427,7 @@
 
     if (!my_b_inited(&index_file))
     {
-      /*
-	First open of this class instance
-	Create an index file that will hold all file names uses for logging.
-	Add new entries to the end of it.
-      */
-      fn_format(index_file_name, index_file_name_arg, mysql_data_home,
-		".index", opt);
-      if ((index_file_nr= my_open(index_file_name,
-				  O_RDWR | O_CREAT | O_BINARY ,
-				  MYF(MY_WME))) < 0 ||
-	  init_io_cache(&index_file, index_file_nr,
-			IO_SIZE, WRITE_CACHE,
-			my_seek(index_file_nr,0L,MY_SEEK_END,MYF(0)),
-			0, MYF(MY_WME)))
+      if (!open_index_file(index_file_name_arg, log_name))
 	goto err;
     }
     else
@@ -350,6 +443,37 @@
       s.set_log_pos(this);
       s.write(&log_file);
     }
+    if (rpl_transaction_enabled) {
+      /* Check to make sure that filename is not longer than the limit inside
+       * InnoDB's transaction header.
+       */
+      if (strlen(log_file_name) >= MAX_INNODB_BINLOG_FILENAME_LEN) {
+        sql_print_error("Too long binlog filename(%s) for InnoDB: %d bytes",
+                        log_file_name, MAX_INNODB_BINLOG_FILENAME_LEN);
+        goto err;
+      }
+
+      /* We need a special event in each relay-log file to make sure that each
+       * file always has the correct master-log information itself.
+       * So, we always write a Rotate_log_event with server_id as
+       * MASTER_INFO_SERVER_ID. at the beginning of the relay-log with the
+       * corresponding master-log information.
+       */
+      MASTER_INFO *mi = get_master_info();
+      if (mi != NULL && strlen(mi->master_log_name) > 0) {
+        // Master_info_log_event should be removed
+        Rotate_log_event
+          mi_event(current_thd, mi->master_log_name,
+                   strlen(mi->master_log_name), mi->master_log_pos);
+        mi_event.set_server_id(MASTER_INFO_SERVER_ID);
+        if (mi_event.write(&log_file)) {
+          sql_print_error("Could not write MASTER Rotate_log_event");
+          goto err;
+        }
+        bytes_written += mi_event.get_event_len();
+      }
+    }
+
     if (flush_io_cache(&log_file))
       goto err;
 
@@ -378,10 +502,8 @@
 shutdown the MySQL server and restart it.", log_name, errno);
   if (file >= 0)
     my_close(file,MYF(0));
-  if (index_file_nr >= 0)
-    my_close(index_file_nr,MYF(0));
   end_io_cache(&log_file);
-  end_io_cache(&index_file);
+  close_index_file();
   safeFree(name);
   log_type= LOG_CLOSED;
   DBUG_RETURN(1);
@@ -392,7 +514,10 @@
 {
   pthread_mutex_lock(&LOCK_log);
   strmake(linfo->log_file_name, log_file_name, sizeof(linfo->log_file_name)-1);
-  linfo->pos = my_b_tell(&log_file);
+  if (!mule_binlog)
+    linfo->pos = my_b_tell(&log_file);
+  else
+    linfo->pos = my_b_filelength(&log_file);
   pthread_mutex_unlock(&LOCK_log);
   return 0;
 }
@@ -491,6 +616,11 @@
     pthread_mutex_lock(&LOCK_index);
   safe_mutex_assert_owner(&LOCK_index);
 
+  if (!open_index_file(index_file_name, NULL)) {
+    error = -1;
+    goto l_err;
+  }
+
   /* As the file is flushed, we can't get an error here */
   (void) reinit_io_cache(&index_file, READ_CACHE, (my_off_t) 0, 0, 0);
 
@@ -520,6 +650,7 @@
     }
   }
 
+ l_err:
   if (need_lock)
     pthread_mutex_unlock(&LOCK_index);
   DBUG_RETURN(error);
@@ -587,6 +718,7 @@
   SYNOPSIS
      reset_logs()
      thd		Thread
+     create_new_file    Whether to create a new log file
 
   NOTE
     If not called from slave thread, write start event to new log
@@ -597,7 +729,7 @@
     1   error
 */
 
-bool MYSQL_LOG::reset_logs(THD* thd)
+bool MYSQL_LOG::reset_logs(THD* thd, bool create_new_file)
 {
   LOG_INFO linfo;
   bool error=0;
@@ -636,10 +768,16 @@
   /* Start logging with a new file */
   close(LOG_CLOSE_INDEX);
   my_delete(index_file_name, MYF(MY_WME));	// Reset (open will update)
-  if (!thd->slave_thread)
-    need_start_event=1;
-  open(save_name, save_log_type, 0, index_file_name,
-       io_cache_type, no_auto_events, max_size);
+
+  if (create_new_file) {
+    /* If we need to create a new file after reset all log files, do it.  We
+     * do not need to create a new file when we clean up mirror binlog files.
+     */
+    if (!thd->slave_thread)
+      need_start_event=1;
+    open(save_name, save_log_type, 0, index_file_name,
+         io_cache_type, no_auto_events, max_size);
+  }
   my_free((gptr) save_name, MYF(0));
 
 err:  
@@ -847,18 +985,19 @@
     new_file()
     need_lock		Set to 1 (default) if caller has not locked
 			LOCK_log and LOCK_index
+    logfile_name        the specified log filename.
 
   NOTE
     The new file name is stored last in the index file
 */
 
-void MYSQL_LOG::new_file(bool need_lock)
+void MYSQL_LOG::new_file(bool need_lock, const char* log_filename)
 {
   char new_name[FN_REFLEN], *new_name_ptr, *old_name;
   enum_log_type save_log_type;
 
   DBUG_ENTER("MYSQL_LOG::new_file");
-  if (!is_open())
+  if (!is_log_open())
   {
     DBUG_PRINT("info",("log is closed"));
     DBUG_VOID_RETURN;
@@ -880,12 +1019,18 @@
     We have to do this here and not in open as we want to store the
     new file name in the current binary log file.
   */
-  if (generate_new_name(new_name, name))
+  if (log_filename) {
+    fn_format(new_name,log_filename,mysql_data_home,"",4);
+  } else if (generate_new_name(new_name, name))
     goto end;
   new_name_ptr=new_name;
   
   if (log_type == LOG_BIN)
   {
+    // The largest event written to this binlog. Reset when a new binlog file
+    // is started.
+    binlog_largest_event = 0;
+
     if (!no_auto_events)
     {
       /*
@@ -977,7 +1122,7 @@
   
   DBUG_ASSERT(log_file.type == SEQ_READ_APPEND);
   
-  pthread_mutex_lock(&LOCK_log);
+  safe_mutex_assert_owner(&LOCK_log);
   do
   {
     if (my_b_append(&log_file,(byte*) buf,len))
@@ -988,7 +1133,12 @@
     bytes_written += len;
   } while ((buf=va_arg(args,const char*)) && (len=va_arg(args,uint)));
   DBUG_PRINT("info",("max_size: %lu",max_size));
-  if ((uint) my_b_append_tell(&log_file) > max_size)
+
+  /* If max_size is BINLOG_NOSWITCH_SIZE, binlog would not switch because
+   * of file size limit.
+   */
+  if (max_size != BINLOG_NOSWITCH_SIZE &&
+      (uint) my_b_append_tell(&log_file) > max_size)
   {
     pthread_mutex_lock(&LOCK_index);
     new_file(0);
@@ -996,13 +1146,11 @@
   }
 
 err:
-  pthread_mutex_unlock(&LOCK_log);
   if (!error)
     signal_update();
   DBUG_RETURN(error);
 }
 
-
 /*
   Write to normal (not rotable) log
   This is the format for the 'normal', 'slow' and 'update' logs.
@@ -1087,6 +1235,12 @@
   return 0;
 }
 
+inline bool sync_binlog(IO_CACHE *cache)
+{
+  return (sync_binlog_period &&
+          (sync_binlog_period == ++sync_binlog_counter) &&
+          (sync_binlog_counter= 0, my_sync(cache->file, MYF(MY_WME))));
+}
 
 /*
   Write an event to the binary log
@@ -1264,7 +1418,7 @@
 
     if (file == &log_file) // we are writing to the real log (disk)
     {
-      if (flush_io_cache(file))
+      if (flush_io_cache(file) || sync_binlog(file))
 	goto err;
  
       if (opt_using_transactions &&
@@ -1291,6 +1445,11 @@
     }
     error=0;
 
+    // Update binlog varz to be exported. Protected by LOCK_log. 
+    binlog_events++;
+    if (event_info->get_event_len() > binlog_largest_event)
+      binlog_largest_event = event_info->get_event_len();
+
 err:
     if (error)
     {
@@ -1426,7 +1585,8 @@
                             TRUE);
       qinfo.error_code= 0;
       qinfo.set_log_pos(this);
-      if (qinfo.write(&log_file) || flush_io_cache(&log_file))
+      if (qinfo.write(&log_file) || flush_io_cache(&log_file) ||
+          sync_binlog(&log_file))
 	goto err;
     }
     if (cache->error)				// Error on read
@@ -1476,6 +1636,9 @@
    - This code should be deleted in MySQL 5,0 as the binary log
      is a full replacement for the update log.
 
+   - This has been modified to use the update log as an audit log for changes
+     (DML, DDL) made by root.
+
 */
 
 bool MYSQL_LOG::write(THD *thd,const char *query, uint query_length,
@@ -1491,13 +1654,18 @@
     int tmp_errno=0;
     char buff[80],*end;
     end=buff;
-    if (!(thd->options & OPTION_UPDATE_LOG) &&
-        (thd->master_access & SUPER_ACL))
+    // Do not log if
+    // * request to not log, root and not logging dml for root or
+    // * not root and logging dml for root or
+    // * this is the replication thread
+    if ((!(thd->options & OPTION_UPDATE_LOG) && (thd->master_access & SUPER_ACL) && !log_for_root) ||
+        (!(thd->master_access & SUPER_ACL) && log_for_root) ||
+        thd->slave_thread)
     {
       VOID(pthread_mutex_unlock(&LOCK_log));
       return 0;
     }
-    if ((specialflag & SPECIAL_LONG_LOG_FORMAT) || query_start_arg)
+    if ((specialflag & SPECIAL_LONG_LOG_FORMAT) || query_start_arg || log_for_root)
     {
       current_time=time(NULL);
       if (current_time != last_time)
@@ -1556,7 +1724,7 @@
         end=longlong10_to_str((longlong) thd->last_insert_id,end,-10);
       }
     }
-    if (thd->query_start_used)
+    if (thd->query_start_used && !log_for_root)
     {
       if (query_start_arg != thd->query_start())
       {
@@ -1616,14 +1784,10 @@
 */
 
 
-void MYSQL_LOG:: wait_for_update(THD* thd, bool master_or_slave)
+void MYSQL_LOG:: wait_for_update(THD* thd, const char *new_msg)
 {
   const char* old_msg = thd->enter_cond(&update_cond, &LOCK_log,
-                                        master_or_slave ?
-                                        "Has read all relay log; waiting for \
-the I/O slave thread to update it" : 
-                                        "Has sent all binlog to slave; \
-waiting for binlog to be updated"); 
+                                        new_msg);
   pthread_cond_wait(&update_cond, &LOCK_log);
   thd->exit_cond(old_msg);
 }
@@ -1704,6 +1868,293 @@
   DBUG_VOID_RETURN;
 }
 
+bool MYSQL_LOG::extract_master_info(Log_event* ev,
+                                    char *master_log_name,
+                                    my_off_t *master_log_pos) {
+  bool extracted = false;
+  DBUG_ENTER("MYSQL_LOG::extract_master_info");
+
+  /* Some events always have correct master log information, like:
+   *  . Xid_event, Master_info_log_event, Rotate_log_event, etc
+   * Some Query events have correct master log information (each query
+   * event only has one query inside), like BEGIN/COMMIT.
+   */
+  switch (ev->get_type_code()) {
+  case QUERY_EVENT: {
+    Query_log_event *query = (Query_log_event *)ev;
+
+    /* Check whether the query event has the correct master log information:
+     * if so, accept it.
+     */
+    for (int idx = 0; idx < sizeof(query_with_log)/sizeof(QueryLogEvent);
+         ++idx)
+      if ((query->q_len == query_with_log[idx].query_length_ &&
+           strncmp(query_with_log[idx].query_, query->query,
+                   query->q_len) == 0)) {
+      *master_log_pos = query->log_pos;
+      extracted = true;
+    }
+    break;
+  }
+  case ROTATE_EVENT:
+    if (ev->server_id != ::server_id) {
+      Rotate_log_event *rotate = (Rotate_log_event *)ev;
+
+      /* Rotate_log_event from the master always indicates the correct
+       * information.
+       */
+      strcpy(master_log_name, rotate->new_log_ident);
+      master_log_name[rotate->ident_len] = '\0';
+      *master_log_pos = rotate->pos;
+      extracted = true;
+    }
+    break;
+  }
+  DBUG_RETURN(extracted);
+}
+
+/* Whether we find the relay-log corresponding to the master-log
+ * information.
+ */
+bool MYSQL_LOG::find_master_pos_inlog(const char *relay_log_name,
+                                      ulonglong relay_log_pos,
+                                      const char *master_log_name,
+                                      ulonglong master_log_pos,
+                                      char *last_master_log_name,
+                                      ulonglong *last_master_log_pos,
+                                      bool *relay_file_error,
+                                      my_off_t *last_valid_offset,
+                                      my_off_t *relay_file_size,
+                                      const char **errmsg) {
+  IO_CACHE log_file;
+  DBUG_ENTER("MYSQL_LOG::find_master_pos_inlog");
+  file_id = open_binlog(&log_file, relay_log_name, errmsg);
+
+  if (file_id < 0) {
+    *relay_file_error = true;
+    DBUG_RETURN(false);
+  }
+
+  for (;;) {
+    Log_event* ev = Log_event::read_log_event(&log_file, NULL, (bool)0);
+    if (!ev) {
+      break;
+    }
+
+    /* If the relay-log event has been executed by slave sql thread, then we
+     * can assume that the event is safe., strlen(master_log_name)
+     * update_master_info() might shrink the last relay-log to make sure that
+     * we would not re-append events.  Then, we would re-transmit all events
+     * from the master.  If the last relay-log gets shrinked, we need to make
+     * sure that re-appended relay-log is the same as the one before the
+     * shrink.  Otherwise, the sql thread will get confused.
+     *
+     * TODO(wei): we still need to handle the situation that the last relay
+     * log is corrupted and the shrink point is before the execution point.
+     */
+    my_off_t offset = my_b_tell(&log_file);
+    if (extract_master_info(ev, last_master_log_name, last_master_log_pos)) {
+      *last_valid_offset = offset;
+    } else if (offset == relay_log_pos) {
+      strmake(last_master_log_name, master_log_name, strlen(master_log_name));
+      *last_master_log_pos = master_log_pos;
+      *last_valid_offset = offset;
+    }
+
+    /* If we have the correct last executed relay-log information, we can
+     * seek to the position after getting the correct format event.
+     */
+    if (relay_log_pos != -1 && offset < relay_log_pos) {
+      my_b_seek(&log_file, relay_log_pos);
+      strmake(last_master_log_name, master_log_name,
+              strlen(master_log_name));
+      *last_master_log_pos = master_log_pos;
+      *last_valid_offset   = relay_log_pos;
+    }
+    delete ev;
+  }
+  *relay_file_error = log_file.error;
+  if (relay_file_size)
+    *relay_file_size = my_b_tell(&log_file);
+
+  my_close(file_id, MYF(MY_WME));
+  end_io_cache(&log_file);
+
+  DBUG_RETURN(!(*relay_file_error));
+}
+
+int MYSQL_LOG::update_master_info(const char *relay_log_name,
+                                  ulonglong relay_log_pos,
+                                  const char *master_log_name,
+                                  ulonglong master_log_pos,
+                                  bool *need_check_master_log,
+                                  bool *found_relay_info) {
+  int error = 0;
+  LOG_INFO linfo;
+  char last_relay_log_name[FN_REFLEN];
+  char last_master_log_name[FN_REFLEN];
+
+  MASTER_INFO* mi = get_master_info();
+  const char *errmsg = NULL;
+
+  my_off_t last_valid_off = 0, last_master_log_pos;
+
+  bool found_relay_file = false;
+  bool relay_file_error = false;
+  my_off_t relay_file_size = 0;
+  bool relay_log_info_avail;  // Whether the specified relay_log_name,
+                              //  relay_log_pos is available
+
+  char buff1[22], buff2[22];
+
+  DBUG_ENTER("MYSQL_LOG::update_master_info");
+
+  *found_relay_info      = false;
+  *need_check_master_log = false;
+  relay_log_info_avail   = (strcmp(relay_log_name, "") != 0 &&
+                            relay_log_pos != -1);
+  strmake(last_master_log_name, "", FN_REFLEN);
+
+  if (find_log_pos(&linfo, NullS, true)) {
+    /* This should be fine because we are going to retrieve all master-logs
+     * from scratch.
+     */
+    ha_innobase::reset_mysql_relay_info();
+    sql_print_information("update_master_info(): not found any relay-log file,"
+                          " will reset replication from scratch");
+
+    DBUG_RETURN(0);
+  } else {
+    /* Find the last replication relay-log filename in relay-log.info and 
+     * find the specified <relay_log_name> is in relay-log.info.
+     */
+    for (;;) {
+      // find the last log file from index_log_file
+      strmake(last_relay_log_name, linfo.log_file_name, FN_REFLEN);
+      last_relay_log_name[FN_REFLEN - 1] = '\0';
+
+      // check whether we found the specified relay-log file
+      if (relay_log_info_avail && !found_relay_file &&
+          strcmp(last_relay_log_name, relay_log_name) == 0) {
+        found_relay_file = true;
+      }
+      if (find_next_log(&linfo, true))
+        break;
+    }
+  }
+
+  if (relay_log_info_avail && !found_relay_file) {
+    /* This might be totally wrong because we could not find the last executed
+     * relay-log based on InnoDB information.
+     * It might be normal that there is a relay-log switch which cause the old
+     * log purged.  We need to check whether master-log information match
+     * relay-log.info.
+     */
+    *need_check_master_log = true;
+  }
+
+  if (relay_log_info_avail &&
+      strcmp(relay_log_name, last_relay_log_name) == 0) {
+    if (!find_master_pos_inlog(relay_log_name, relay_log_pos,
+                               master_log_name, master_log_pos, 
+                               last_master_log_name, &last_master_log_pos, 
+                               &relay_file_error, &last_valid_off,
+                               &relay_file_size, &errmsg)) {
+      // We could not read the relay-log file correctly.
+      sql_print_information("update_master_info(): open relay-log(%s) error %s",
+                            relay_log_name, errmsg);
+      DBUG_RETURN(1);
+    }
+  } else {
+    if (!find_master_pos_inlog(last_relay_log_name, -1, NULL, -1, 
+                               last_master_log_name, &last_master_log_pos, 
+                               &relay_file_error, &last_valid_off,
+                               &relay_file_size, &errmsg)) {
+      // We could not read the relay-log file correctly.
+      sql_print_information("update_master_info(): open relay-log(%s) error %s",
+                            last_relay_log_name, errmsg);
+      DBUG_RETURN(1);
+    }
+  }
+
+  /* If we do not find master-log reading information from all valid events,
+   * we assume that the information in file master.log is correct based on
+   * the protocol: we always write to file master.info before writing events
+   * into relay-log.
+   */
+  if (strlen(last_master_log_name) > 0) {
+    DBUG_PRINT("info",("found master log_file_name: '%s'  position: %s",
+                       last_master_log_name,
+                       llstr(last_master_log_pos, buff1)));
+
+    // truncate the log to the last valid event
+    if (relay_file_error || last_valid_off != relay_file_size) {
+      File trunc_file_id = my_open(last_relay_log_name, O_WRONLY, MYF(MY_WME));
+      if (trunc_file_id < 0) {
+
+        sql_print_error("Slave I/O thread: open file '%s' for "
+                        "truncation failed; error: %d",
+                        last_relay_log_name, errno);
+        DBUG_RETURN(1);
+      }
+
+      /* We might truncate the last file less than relay-log.info indicates the
+       * file should be.  This is fine because we going to create a new
+       * relay-log file after this one and the sql thread will be directed to
+       * the new file to read relay events.
+       */
+      off_t new_len = (off_t)last_valid_off;
+      if (ftruncate(trunc_file_id, new_len)) {
+
+        sql_print_error("Slave I/O thread: truncate file(%s) from %s to %s; "
+                        "error: %d\n", last_relay_log_name,
+                        llstr(relay_file_size, buff1),
+                        llstr(new_len, buff2), errno);
+        my_close(trunc_file_id, MYF(MY_WME));
+
+        DBUG_RETURN(1);
+      }
+      my_close(trunc_file_id, MYF(MY_WME));
+
+      sql_print_information("Slave I/O thread: truncated file(%s) from %s to %s",
+                            last_relay_log_name, llstr(relay_file_size, buff1),
+                            llstr(new_len, buff2));
+    }
+
+    /* update master-log reading header */
+    if (strcmp(mi->master_log_name, last_master_log_name) != 0 ||
+        mi->master_log_pos != last_master_log_pos) {
+      sql_print_information("Slave I/O thread: adjust master reading header:\n"
+                            "\tOld: file:'%s', position:%s\n"
+                            "\tNew: file:'%s', position:%s",
+                            mi->master_log_name, llstr(mi->master_log_pos, buff1),
+                            last_master_log_name,
+                            llstr(last_master_log_pos, buff2));
+      strcpy(mi->master_log_name, last_master_log_name);
+      mi->master_log_pos = last_master_log_pos;
+    }
+
+    /* We must write the file to disk here even there are no changes because the
+     * after MYSQL_LOG::open() might create a new relay-log file.
+     */
+    reinit_io_cache(&mi->file, WRITE_CACHE, 0L, 0, 1);
+    if ((error=test(flush_master_info(mi, 0)))) {
+      sql_print_error("Failed to flush master info file during adjustment");
+    } else {
+      error = my_sync(mi->file.file, MYF(MY_WME));
+    }
+  } else if (relay_log_info_avail) {
+    sql_print_warning("Not find master information from the last relay-log: "
+                      "assume that master.info is correct");
+  }
+
+  *found_relay_info = relay_log_info_avail;
+  DBUG_RETURN(error);
+}
+
+int MYSQL_LOG::flush_log_file() {
+  return flush_io_cache(&log_file);
+}
 
 /*
   Check if a string is a valid number
diff -ruN base/sql/log_event.cc mysql40gpl/sql/log_event.cc
--- base/sql/log_event.cc	2005-09-02 15:37:56.000000000 -0700
+++ mysql40gpl/sql/log_event.cc	2007-04-21 09:57:11.000000000 -0700
@@ -26,6 +26,10 @@
 
 #include <assert.h>
 
+/* How many times binlog truncation error happens. */
+ulong binlog_trunc_errors = 0;
+
+
 #ifdef MYSQL_CLIENT
 static void pretty_print_str(FILE* file, char* str, int len)
 {
@@ -468,6 +472,40 @@
 
 #ifndef MYSQL_CLIENT
 
+// Log the replication master IO partial read error:
+//  it is still a mysterious to us that my_read() can partially read the
+//  content we requested; if this really happens, then it is a serious
+//  replication bug; log it for future investigation
+static void print_partial_read_error(
+    const char *errmsg, my_off_t pos_in_file,
+    int result, ulong data_len, int seek_not_done,
+    byte *read_pos, byte *read_end,
+    IO_CACHE* file, String* packet) {
+  char llbuff1[22], llbuff2[22];
+
+  sql_print_error("%s: error(%d) for reading %d bytes, "
+                  "actually read %d bytes, result(%d), end_of_file(%s), "
+                  "buffer(%x):",
+                  errmsg, file->error, data_len, packet->length(),
+                  result, llstr(file->end_of_file, llbuff1), file->buffer);
+  sql_print_error("\t old position(%s, %d, %x, %x, %d)",
+                  llstr(pos_in_file, llbuff1), seek_not_done,
+                  read_pos, read_end, read_end - read_pos);
+  sql_print_error("\t new position(%s, %d, %x, %x, %d, %s)",
+                  llstr(file->pos_in_file, llbuff1), file->seek_not_done,
+                  file->read_pos, file->read_end,
+                  file->read_end - file->read_pos, 
+                  llstr(my_b_tell(file), llbuff2));
+
+  // print the file status through system calls
+  MY_STAT file_stat;
+  my_fstat(file->file, &file_stat, MYF(0));
+  my_off_t file_pos = my_tell(file->file, MYF(0));
+  sql_print_error("\t file status: size(%s), pos(%s)",
+                  llstr(file_stat.st_size, llbuff1),
+                  llstr(file_pos, llbuff2));
+}
+
 int Log_event::read_log_event(IO_CACHE* file, String* packet,
 			      pthread_mutex_t* log_lock)
 {
@@ -478,19 +516,37 @@
 
   if (log_lock)
     pthread_mutex_lock(log_lock);
-  if (my_b_read(file, (byte*) buf, sizeof(buf)))
+
   {
-    /*
-      If the read hits eof, we must report it as eof so the caller
-      will know it can go into cond_wait to be woken up on the next
-      update to the log.
-    */
-    DBUG_PRINT("error",("file->error: %d", file->error));
-    if (!file->error)
-      result= LOG_READ_EOF;
-    else
-      result= (file->error > 0 ? LOG_READ_TRUNC : LOG_READ_IO);
-    goto end;
+    // Record all possible information in case the mysterious
+    // LOG_READ_TRUNC might happen.
+    my_off_t pos_in_file;
+    int seek_not_done;
+    byte *read_pos, *read_end;
+    pos_in_file = file->pos_in_file;
+    seek_not_done = file->seek_not_done;
+    read_pos = file->read_pos;
+    read_end = file->read_end;
+
+    if (my_b_read(file, (byte*) buf, sizeof(buf))) {
+      /*
+        If the read hits eof, we must report it as eof so the caller
+        will know it can go into cond_wait to be woken up on the next
+        update to the log.
+      */
+      DBUG_PRINT("error",("file->error: %d", file->error));
+      if (!file->error) {
+        result= LOG_READ_EOF;
+      } else {
+        result= (file->error > 0 ? LOG_READ_TRUNC : LOG_READ_IO);
+
+        // log all information for the error
+        print_partial_read_error("read_log_event1", pos_in_file, result,
+                                 0, seek_not_done, read_pos, read_end,
+                                 file, packet);
+      }
+      goto end;
+    }
   }
   data_len= uint4korr(buf + EVENT_LEN_OFFSET);
   if (data_len < LOG_EVENT_HEADER_LEN ||
@@ -505,6 +561,16 @@
   data_len-= LOG_EVENT_HEADER_LEN;
   if (data_len)
   {
+    // Record all possible information in case the mysterious
+    // LOG_READ_TRUNC might happen.
+    my_off_t pos_in_file;
+    int seek_not_done;
+    byte *read_pos, *read_end;
+    pos_in_file = file->pos_in_file;
+    seek_not_done = file->seek_not_done;
+    read_pos = file->read_pos;
+    read_end = file->read_end;
+
     if (packet->append(file, data_len))
     {
       /*
@@ -512,7 +578,21 @@
 	EOF means we are reading the event partially, which should
 	never happen.
       */
-      result= file->error >= 0 ? LOG_READ_TRUNC: LOG_READ_IO;
+      if (file->error == 0)
+        result = LOG_READ_MEM;
+      else if (file->error > 0)
+        result = LOG_READ_TRUNC;
+      else
+        result =  LOG_READ_IO;
+
+      if (result == LOG_READ_TRUNC)
+        binlog_trunc_errors++;
+
+      // log all information for the error
+      print_partial_read_error("read_log_event2", pos_in_file, result,
+                               data_len, seek_not_done,
+                               read_pos, read_end, file, packet);
+
       /* Implicit goto end; */
     }
   }
@@ -559,7 +639,11 @@
   const char *error= 0;
   Log_event *res=  0;
 
+#ifndef MYSQL_CLIENT
+  if (current_thd && data_len > max_allowed_packet)
+#else
   if (data_len > max_allowed_packet)
+#endif
   {
     error = "Event too big";
     goto err;
diff -ruN base/sql/log_event.h mysql40gpl/sql/log_event.h
--- base/sql/log_event.h	2005-09-02 15:38:03.000000000 -0700
+++ mysql40gpl/sql/log_event.h	2007-04-21 09:57:11.000000000 -0700
@@ -54,6 +54,14 @@
 #define LINE_START_EMPTY	0x8
 #define ESCAPED_EMPTY		0x10
 
+
+/* This server-id value is used to indicate a special master-info event
+ * in relay-log.
+ * We will enforce in database that replication can not set this value
+ * as the server-id.
+ */
+#define MASTER_INFO_SERVER_ID 0xffffffff
+
 struct old_sql_ex
 {
   char field_term;
@@ -301,6 +309,9 @@
   static Log_event* read_log_event(const char* buf, int event_len,
 				   const char **error, bool old_format);
   const char* get_type_str();
+  inline void set_server_id(uint32 id) {
+    server_id = id;
+  }
 };
 
 
@@ -597,7 +608,6 @@
   bool is_valid() { return 1; }
 };
 
-
 class Rotate_log_event: public Log_event
 {
 public:
diff -ruN base/sql/Makefile.am mysql40gpl/sql/Makefile.am
--- base/sql/Makefile.am	2005-09-02 15:37:59.000000000 -0700
+++ mysql40gpl/sql/Makefile.am	2007-04-21 11:01:31.000000000 -0700
@@ -56,7 +56,8 @@
 			sql_select.h structs.h table.h sql_udf.h hash_filo.h\
 			lex.h lex_symbol.h sql_acl.h sql_crypt.h  \
 			log_event.h mini_client.h sql_repl.h slave.h \
-			stacktrace.h sql_sort.h sql_cache.h set_var.h
+			stacktrace.h sql_sort.h sql_cache.h set_var.h \
+			repl_mule.h repl_semi_sync.h hash_64.h
 mysqld_SOURCES =	sql_lex.cc sql_handler.cc \
 			item.cc item_sum.cc item_buff.cc item_func.cc \
 			item_cmpfunc.cc item_strfunc.cc item_timefunc.cc \
@@ -81,7 +82,8 @@
 			sql_udf.cc sql_analyse.cc sql_analyse.h sql_cache.cc \
 			slave.cc sql_repl.cc sql_union.cc \
 			mini_client.cc mini_client_errors.c \
-			stacktrace.c repl_failsafe.h repl_failsafe.cc
+			stacktrace.c repl_failsafe.h repl_failsafe.cc \
+			repl_mule.cc repl_semi_sync.cc hash_64.cc
 gen_lex_hash_SOURCES =	gen_lex_hash.cc
 gen_lex_hash_LDADD =	$(LDADD) $(CXXLDFLAGS)
 
diff -ruN base/sql/Makefile.in mysql40gpl/sql/Makefile.in
--- base/sql/Makefile.in	2005-09-02 15:38:37.000000000 -0700
+++ mysql40gpl/sql/Makefile.in	2007-04-21 11:00:48.000000000 -0700
@@ -111,7 +111,8 @@
 	sql_analyse.$(OBJEXT) sql_cache.$(OBJEXT) slave.$(OBJEXT) \
 	sql_repl.$(OBJEXT) sql_union.$(OBJEXT) mini_client.$(OBJEXT) \
 	mini_client_errors.$(OBJEXT) stacktrace.$(OBJEXT) \
-	repl_failsafe.$(OBJEXT)
+	repl_failsafe.$(OBJEXT) \
+	repl_mule.$(OBJEXT) repl_semi_sync.$(OBJEXT) hash_64.$(OBJEXT)
 mysqld_OBJECTS = $(am_mysqld_OBJECTS)
 mysqld_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_2) \
 	$(am__DEPENDENCIES_2)
@@ -126,6 +127,7 @@
 @AMDEP_TRUE@	./$(DEPDIR)/ha_innodb.Po ./$(DEPDIR)/ha_isam.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/ha_isammrg.Po ./$(DEPDIR)/ha_myisam.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/ha_myisammrg.Po ./$(DEPDIR)/handler.Po \
+@AMDEP_TRUE@	./$(DEPDIR)/hash_64.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/hash_filo.Po ./$(DEPDIR)/hostname.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/init.Po ./$(DEPDIR)/item.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/item_buff.Po \
@@ -146,6 +148,8 @@
 @AMDEP_TRUE@	./$(DEPDIR)/opt_sum.Po ./$(DEPDIR)/password.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/procedure.Po ./$(DEPDIR)/records.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/repl_failsafe.Po \
+@AMDEP_TRUE@	./$(DEPDIR)/repl_mule.Po \
+@AMDEP_TRUE@	./$(DEPDIR)/repl_semi_sync.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/set_var.Po ./$(DEPDIR)/slave.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/sql_acl.Po ./$(DEPDIR)/sql_analyse.Po \
 @AMDEP_TRUE@	./$(DEPDIR)/sql_base.Po ./$(DEPDIR)/sql_cache.Po \
@@ -459,7 +463,8 @@
 			sql_select.h structs.h table.h sql_udf.h hash_filo.h\
 			lex.h lex_symbol.h sql_acl.h sql_crypt.h  \
 			log_event.h mini_client.h sql_repl.h slave.h \
-			stacktrace.h sql_sort.h sql_cache.h set_var.h
+			stacktrace.h sql_sort.h sql_cache.h set_var.h \
+			repl_mule.h repl_semi_sync.h hash_64.h
 
 mysqld_SOURCES = sql_lex.cc sql_handler.cc \
 			item.cc item_sum.cc item_buff.cc item_func.cc \
@@ -485,7 +490,8 @@
 			sql_udf.cc sql_analyse.cc sql_analyse.h sql_cache.cc \
 			slave.cc sql_repl.cc sql_union.cc \
 			mini_client.cc mini_client_errors.c \
-			stacktrace.c repl_failsafe.h repl_failsafe.cc
+			stacktrace.c repl_failsafe.h repl_failsafe.cc \
+			repl_mule.cc repl_semi_sync.cc hash_64.cc
 
 gen_lex_hash_SOURCES = gen_lex_hash.cc
 gen_lex_hash_LDADD = $(LDADD) $(CXXLDFLAGS)
@@ -590,6 +596,7 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ha_myisam.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ha_myisammrg.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/handler.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hash_64.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hash_filo.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hostname.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/init.Po@am__quote@
@@ -620,6 +627,8 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/procedure.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/records.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/repl_failsafe.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/repl_mule.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/repl_semi_sync.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/set_var.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/slave.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sql_acl.Po@am__quote@
diff -ruN base/sql/mysqld.cc mysql40gpl/sql/mysqld.cc
--- base/sql/mysqld.cc	2005-09-02 15:37:56.000000000 -0700
+++ mysql40gpl/sql/mysqld.cc	2007-04-21 11:21:13.000000000 -0700
@@ -34,6 +34,8 @@
 #include <thr_alarm.h>
 #include <ft_global.h>
 #include <assert.h>
+#include <mcheck.h>
+#include "repl_semi_sync.h"
 
 #ifndef DBUG_OFF
 #define ONE_THREAD
@@ -144,6 +146,7 @@
 void getvolumeID(BYTE *volumeName);
 #endif /* __NETWARE__ */
 
+ReplSemiSync semi_sync_replicator;
 
 #ifdef _AIX41
 int initgroups(const char *,unsigned int);
@@ -283,7 +286,8 @@
 ulong back_log, connect_timeout, concurrency;
 char mysql_home[FN_REFLEN], pidfile_name[FN_REFLEN], time_zone[30];
 char log_error_file[FN_REFLEN];
-bool opt_log, opt_update_log, opt_bin_log, opt_slow_log;
+bool opt_log, opt_audit_log, opt_update_log, opt_bin_log;
+bool opt_slow_log, opt_dml_log;
 bool opt_error_log= IF_WIN(1,0);
 bool opt_disable_networking=0, opt_skip_show_db=0;
 bool lower_case_table_names_used= 0;
@@ -299,7 +303,22 @@
 static ulong opt_myisam_block_size;
 static my_socket unix_sock= INVALID_SOCKET,ip_sock= INVALID_SOCKET;
 static my_string opt_logname=0,opt_update_logname=0,
-       opt_binlog_index_name = 0,opt_slow_logname=0;
+       opt_slow_logname=0, opt_dml_logname=0;
+/*
+ * If --log_queries_on_tables=xxxxx,yyyy we log the query to the log if table
+ * xxxxx or yyy is one of the tables opened.
+ */
+my_string opt_log_queries_on_tables=0;
+/* We break out the tables into a hash */
+HASH log_tables;
+static my_string opt_audit_logname=0;
+
+my_string opt_binlog_index_name = 0;
+
+/* If the variable is set, we are inside a failover slave and will deny all
+ * non-super user access.
+ */
+bool failover_deny_access = 0;
 
 static char* mysql_home_ptr= mysql_home;
 static char* pidfile_name_ptr= pidfile_name;
@@ -310,6 +329,47 @@
 my_bool opt_show_slave_auth_info, opt_sql_bin_update = 0;
 my_bool opt_log_slave_updates= 0, opt_console= 0, opt_allow_suspicious_udfs;
 my_bool opt_readonly = 0, opt_sync_bdb_logs, opt_sync_frm;
+my_bool rpl_transaction_enabled, rpl_always_enter_innodb, rpl_mirror_binlog_enabled;
+my_bool rpl_long_filename, rpl_mirror_binlog_no_replicate;
+
+/* The fixed size for replication event buffer.  Replication event can exceed
+ * the size.
+ */
+ulong rpl_event_buffer_size;
+
+/* This is a mirror binlog status variable on the primary to indicate how many
+ * mirror binlog servers are connecting.
+ */
+ulong rpl_mirror_binlog_clients = 0;
+
+/* This indicates whether mirror binlog is working on a replica database.  It
+ * requires:
+ *  . rpl_mirror_binlog_enabled = 1
+ *  . the slave I/O thread is running and mirror binlog is also dumped
+ */
+ulong rpl_mirror_binlog_status = 0;
+
+/* This indicates whether semi-synchronous replication is enabled. */
+ulong rpl_semi_sync_enabled;
+ulong rpl_semi_sync_slave_enabled;
+ulong rpl_semi_sync_timeout;
+ulong rpl_semi_sync_trace_level;
+ulong rpl_semi_sync_status           = 0;
+ulong rpl_semi_sync_slave_status     = 0;
+ulong rpl_semi_sync_yes_transactions = 0;
+ulong rpl_semi_sync_no_transactions  = 0;
+ulong rpl_semi_sync_off_times        = 0;
+ulong rpl_semi_sync_timefunc_fails   = 0;
+ulong rpl_semi_sync_num_timeouts     = 0;
+ulong rpl_semi_sync_wait_sessions    = 0;
+ulong rpl_semi_sync_back_wait_pos    = 0;
+ulong rpl_semi_sync_trx_wait_time    = 0;
+ulonglong rpl_semi_sync_trx_wait_num = 0;
+ulong rpl_semi_sync_net_wait_time    = 0;
+ulonglong rpl_semi_sync_net_wait_num = 0;
+ulong rpl_semi_sync_clients          = 0;
+ulonglong rpl_semi_sync_net_wait_total_time = 0;
+ulonglong rpl_semi_sync_trx_wait_total_time = 0;
 
 volatile bool  mqh_used = 0;
 FILE *bootstrap_file=0;
@@ -361,6 +421,7 @@
 ulong com_stat[(uint) SQLCOM_END], com_other;
 ulong slave_net_timeout;
 ulong thread_cache_size=0, binlog_cache_size=0, max_binlog_cache_size=0;
+ulong long_query_time=0;
 ulong query_cache_size=0;
 #ifdef HAVE_QUERY_CACHE
 ulong query_cache_limit=0;
@@ -394,6 +455,7 @@
       aborted_connects,delayed_insert_timeout,delayed_insert_limit,
       delayed_queue_size,delayed_insert_threads,delayed_insert_writes,
       delayed_rows_in_use,delayed_insert_errors,flush_time, thread_created;
+ulong denied_connections;
 ulong filesort_rows, filesort_range_count, filesort_scan_count;
 ulong filesort_merge_passes;
 ulong select_range_check_count, select_range_count, select_scan_count;
@@ -402,9 +464,13 @@
       created_tmp_disk_tables=0;
 ulong max_connections, max_used_connections,
       max_connect_errors, max_user_connections = 0;
+ulong reserved_super_connections = 0;
 ulong thread_id=1L,current_pid;
 ulong slow_launch_threads = 0;
-  
+ulong sync_binlog_period, sync_binlog_counter = 0;
+ulong sync_mirror_binlog_period;
+ulong gettimeofday_errors = 0;
+
 char mysql_real_data_home[FN_REFLEN],
      language[LIBLEN],reg_ext[FN_EXTLEN],
      mysql_charsets_dir[FN_REFLEN], *charsets_list,
@@ -458,7 +524,9 @@
 		LOCK_delayed_insert, LOCK_delayed_status, LOCK_delayed_create,
 		LOCK_crypt, LOCK_bytes_sent, LOCK_bytes_received,
 	        LOCK_global_system_variables,
-		LOCK_user_conn, LOCK_slave_list, LOCK_active_mi;
+		LOCK_user_conn, LOCK_slave_list, LOCK_active_mi,
+                LOCK_stats, LOCK_failover_master, LOCK_global_user_stats,
+                LOCK_global_table_stats, LOCK_global_index_stats;
 
 pthread_cond_t COND_refresh,COND_thread_count, COND_slave_stopped,
 	       COND_slave_start;
@@ -901,6 +969,7 @@
   mysql_slow_log.cleanup();
   mysql_update_log.cleanup();
   mysql_bin_log.cleanup();
+  mysql_audit_log.cleanup();
 
   if (use_slave_mask)
     bitmap_free(&slave_error_mask);
@@ -931,6 +1000,9 @@
   x_free(opt_relay_logname);
   bitmap_free(&temp_pool);
   free_max_user_conn();
+  free_global_user_stats();
+  free_global_table_stats();
+  free_global_index_stats();
   end_slave_list();
   free_list(&replicate_do_db);
   free_list(&replicate_ignore_db);
@@ -991,6 +1063,11 @@
   (void) pthread_mutex_destroy(&LOCK_rpl_status);
   (void) pthread_mutex_destroy(&LOCK_active_mi);
   (void) pthread_mutex_destroy(&LOCK_global_system_variables);
+  (void) pthread_mutex_destroy(&LOCK_stats);
+  (void) pthread_mutex_destroy(&LOCK_failover_master);
+  (void) pthread_mutex_destroy(&LOCK_global_user_stats);
+  (void) pthread_mutex_destroy(&LOCK_global_table_stats);
+  (void) pthread_mutex_destroy(&LOCK_global_index_stats);
   (void) pthread_cond_destroy(&COND_thread_count);
   (void) pthread_cond_destroy(&COND_refresh);
   (void) pthread_cond_destroy(&COND_thread_cache);
@@ -2223,6 +2300,12 @@
 {
   DEBUGGER_OFF;
 
+  // Enable malloc tracing if MALLOC_TRACE is set in the environment.
+  // mtrace() also uses this variable as the output file for its
+  // tracing.
+  if (getenv("MALLOC_TRACE"))
+    mtrace();
+
   my_umask=0660;		// Default umask for new files
   my_umask_dir=0700;		// Default umask for new directories
   MAIN_THD;
@@ -2261,6 +2344,7 @@
     before MY_INIT(). So we do it here.
   */
   mysql_log.init_pthread_objects();
+  mysql_audit_log.init_pthread_objects();
   mysql_update_log.init_pthread_objects();
   mysql_slow_log.init_pthread_objects();
   mysql_bin_log.init_pthread_objects();
@@ -2302,6 +2386,10 @@
   DBUG_PRINT("info",("%s  Ver %s for %s on %s\n",my_progname,
 		     server_version, SYSTEM_TYPE,MACHINE_TYPE));
 
+  /* Must be called after set_options() and MY_INIT(). */
+  if (semi_sync_replicator.initObject() != 0)
+    unireg_abort(1);
+
   /* These must be set early */
 
   (void) pthread_mutex_init(&LOCK_mysql_create_db,MY_MUTEX_INIT_SLOW);
@@ -2322,6 +2410,11 @@
   (void) pthread_mutex_init(&LOCK_rpl_status, MY_MUTEX_INIT_FAST);
   (void) pthread_mutex_init(&LOCK_active_mi, MY_MUTEX_INIT_FAST);
   (void) pthread_mutex_init(&LOCK_global_system_variables, MY_MUTEX_INIT_FAST);
+  (void) pthread_mutex_init(&LOCK_stats, MY_MUTEX_INIT_FAST);
+  (void) pthread_mutex_init(&LOCK_failover_master, MY_MUTEX_INIT_FAST);
+  (void) pthread_mutex_init(&LOCK_global_user_stats, MY_MUTEX_INIT_FAST);
+  (void) pthread_mutex_init(&LOCK_global_table_stats, MY_MUTEX_INIT_FAST);
+  (void) pthread_mutex_init(&LOCK_global_index_stats, MY_MUTEX_INIT_FAST);
   (void) pthread_cond_init(&COND_thread_count,NULL);
   (void) pthread_cond_init(&COND_refresh,NULL);
   (void) pthread_cond_init(&COND_thread_cache,NULL);
@@ -2475,11 +2568,17 @@
   if (opt_log)
     open_log(&mysql_log, glob_hostname, opt_logname, ".log", NullS,
 	     LOG_NORMAL, 0, 0, 0);
-  if (opt_update_log)
-  {
-    open_log(&mysql_update_log, glob_hostname, opt_update_logname, "",
+  if (opt_audit_log) {
+    open_log(&mysql_audit_log, glob_hostname, opt_audit_logname,
+             "-audit.log", NullS, LOG_NORMAL, 0, 0, 0);
+  }
+  if (opt_dml_log)
+  {
+    // When using_update_log is set, rows read as part of an
+    // insert/update/delete might get locked in share mode.
+    open_log(&mysql_update_log, glob_hostname, opt_dml_logname, "",
 	     NullS, LOG_NEW, 0, 0, 0);
-    using_update_log=1;
+    mysql_update_log.set_log_for_root(TRUE);
   }
  
   if (opt_slow_log)
@@ -2501,6 +2600,10 @@
 	freopen(log_error_file, "a+", stderr);
     }
   }
+
+  init_global_table_stats();
+  init_global_index_stats();
+
   if (ha_init())
   {
     sql_print_error("Can't init databases");
@@ -2569,10 +2672,12 @@
       unlink(mysql_unix_port);
     unireg_abort(1);
   }
+
   if (!opt_noacl)
     (void) grant_init((THD*) 0);
   init_max_user_conn();
   init_update_queries();
+  init_global_user_stats();
   DBUG_ASSERT(current_thd == 0);
 
 #ifdef HAVE_DLOPEN
@@ -2604,11 +2709,15 @@
       break;
     }
   }
+  if (server_id == MASTER_INFO_SERVER_ID) {
+    sql_print_error("[mysqld] variable server-id can not be %d",
+                    MASTER_INFO_SERVER_ID);
+    unireg_abort(1);
+  }
+
   if (opt_bin_log)
   {
-    open_log(&mysql_bin_log, glob_hostname, opt_bin_logname, "-bin",
-	     opt_binlog_index_name, LOG_BIN, 0, 0, max_binlog_size);
-    using_update_log=1;
+    make_master(NULL, opt_bin_logname, opt_binlog_index_name, NULL);
   }
   else if (opt_log_slave_updates)
   {
@@ -3025,6 +3134,7 @@
   {
     DBUG_PRINT("error",("Too many connections"));
     close_connection(net,ER_CON_COUNT_ERROR);
+    statistic_increment(denied_connections, &LOCK_status);
     delete thd;
     DBUG_VOID_RETURN;
   }
@@ -3471,6 +3581,8 @@
   OPT_INNODB_FLUSH_LOG_AT_TRX_COMMIT, 
   OPT_INNODB_FLUSH_METHOD, 
   OPT_INNODB_FAST_SHUTDOWN, 
+  OPT_INNODB_NO_SHARE_LOCKS_ON_DML_SELECT,
+  OPT_INNODB_MAX_MERGED_IO,
   OPT_SAFE_SHOW_DB,
   OPT_INNODB_SKIP, OPT_SKIP_SAFEMALLOC,
   OPT_TEMP_POOL, OPT_TX_ISOLATION,
@@ -3524,6 +3636,8 @@
   OPT_INNODB_ADDITIONAL_MEM_POOL_SIZE,
   OPT_INNODB_MAX_PURGE_LAG,
   OPT_INNODB_FILE_IO_THREADS,
+  OPT_INNODB_READ_IO_THREADS,
+  OPT_INNODB_WRITE_IO_THREADS,
   OPT_INNODB_LOCK_WAIT_TIMEOUT,
   OPT_INNODB_THREAD_CONCURRENCY,
   OPT_INNODB_FORCE_RECOVERY,
@@ -3531,6 +3645,7 @@
   OPT_INNODB_MAX_DIRTY_PAGES_PCT,
   OPT_INNODB_AUTOEXTEND_INCREMENT,
   OPT_INNODB_TABLE_LOCKS,
+  OPT_INNODB_BTR_ESTIMATE_N_PAGES,
   OPT_BDB_CACHE_SIZE,
   OPT_BDB_LOG_BUFFER_SIZE,
   OPT_BDB_MAX_LOCK,
@@ -3539,10 +3654,15 @@
   OPT_RANGE_ALLOC_BLOCK_SIZE, OPT_ALLOW_SUSPICIOUS_UDFS,
   OPT_QUERY_ALLOC_BLOCK_SIZE, OPT_QUERY_PREALLOC_SIZE,
   OPT_TRANS_ALLOC_BLOCK_SIZE, OPT_TRANS_PREALLOC_SIZE,
-  OPT_SYNC_FRM, OPT_BDB_NOSYNC
+  OPT_SYNC_FRM, OPT_BDB_NOSYNC, OPT_RPL_TRANX_ENABLED, OPT_RPL_ENTER_INNODB,
+  OPT_SYNC_BINLOG, OPT_SYNC_MIRROR_BINLOG, OPT_RESERVED_SUPER_CONNECTIONS,
+  OPT_INNODB_CLEAR_REPLICATION_STATUS, OPT_RPL_MIRROR_BINLOG,
+  OPT_RPL_SEMI_SYNC, OPT_RPL_SEMI_SYNC_SLAVE,
+  OPT_RPL_SEMI_SYNC_TIMEOUT, OPT_RPL_SEMI_SYNC_TRACE,
+  OPT_RPL_LONG_FILENAME, OPT_RPL_MIRROR_BINLOG_NO_REPLICATE,
+  OPT_LOG_QUERIES_ON_TABLES, OPT_AUDIT_LOG, OPT_RPL_EVENT_BUFFER_SIZE
 };
 
-
 #define LONG_TIMEOUT ((ulong) 3600L*24L*365L)
 
 struct my_option my_long_options[] =
@@ -3683,6 +3803,17 @@
    (gptr*) &srv_auto_extend_increment,
    (gptr*) &srv_auto_extend_increment,
    0, GET_LONG, REQUIRED_ARG, 8L, 1L, 1000L, 0, 1L, 0},
+  {"innodb_btr_estimate_n_pages", OPT_INNODB_BTR_ESTIMATE_N_PAGES,
+   "Number of index leaf pages to sample to estimate different key values",
+   (gptr*) &btr_key_val_estimate_n_pages,
+   (gptr*) &btr_key_val_estimate_n_pages,
+   0, GET_ULONG, REQUIRED_ARG, 8, 1, 2048, 0, 1, 0},
+  {"innodb_clear_replication_status", OPT_INNODB_CLEAR_REPLICATION_STATUS,
+   "Let the next InnoDB statement clear the replication status inside "
+   "the transaction log(only available to super users).",
+   (gptr*) &global_system_variables.innodb_clear_replication_status,
+   (gptr*) &global_system_variables.innodb_clear_replication_status,
+   0, GET_BOOL, OPT_ARG, 0, 0, 0, 0, 0, 0},
   {"innodb_data_home_dir", OPT_INNODB_DATA_HOME_DIR,
    "The common part for Innodb table spaces", (gptr*) &innobase_data_home_dir,
    (gptr*) &innobase_data_home_dir, 0, GET_STR, REQUIRED_ARG, 0, 0, 0, 0, 0,
@@ -3726,14 +3857,32 @@
    (gptr*) &global_system_variables.innodb_table_locks,
    (gptr*) &global_system_variables.innodb_table_locks,
    0, GET_BOOL, OPT_ARG, 1, 0, 0, 0, 0, 0},
+  {"innodb_no_share_locks_on_dml_select", OPT_INNODB_NO_SHARE_LOCKS_ON_DML_SELECT,
+   "Force InnoDB not to lock selected rows in share mode during DML when binary logging is off.",
+   (gptr*) &innodb_no_share_locks_on_dml_select,
+   (gptr*) &innodb_no_share_locks_on_dml_select, 0, GET_BOOL, NO_ARG, 1, 0, 0, 0, 0, 0},
+  {"innodb_max_merged_io", OPT_INNODB_MAX_MERGED_IO,
+   "Max number of IO requests merged to issue large IO from background IO threads.",
+   (gptr*) &innobase_max_merged_io,
+   (gptr*) &innobase_max_merged_io, 0, GET_LONG, REQUIRED_ARG, 64, 1, 64, 0, 0, 0},
 #endif /* End HAVE_INNOBASE_DB */
-  {"help", '?', "Display this help and exit", 0, 0, 0, GET_NO_ARG, NO_ARG, 0,
+
+ {"help", '?', "Display this help and exit", 0, 0, 0, GET_NO_ARG, NO_ARG, 0,
    0, 0, 0, 0, 0},
   {"init-file", OPT_INIT_FILE, "Read SQL commands from this file at startup",
    (gptr*) &opt_init_file, (gptr*) &opt_init_file, 0, GET_STR, REQUIRED_ARG,
    0, 0, 0, 0, 0, 0},
   {"log", 'l', "Log connections and queries to file", (gptr*) &opt_logname,
    (gptr*) &opt_logname, 0, GET_STR, OPT_ARG, 0, 0, 0, 0, 0, 0},
+  {"audit_log", OPT_AUDIT_LOG,
+   "Log logins, queries against specified tables, and startup",
+   (gptr*) &opt_audit_logname,
+   (gptr*) &opt_audit_logname, 0, GET_STR, OPT_ARG, 0, 0, 0, 0, 0, 0},
+  {"log_tables", OPT_LOG_QUERIES_ON_TABLES,
+   "Log queries that use these table to the audit log (comma seperated)",
+   (gptr*) &opt_log_queries_on_tables,
+   (gptr*) &opt_log_queries_on_tables, 0, GET_STR, REQUIRED_ARG, 
+   0, 0, 0, 0, 0, 0},
   {"language", 'L',
    "Client error messages in given language. May be given as a full path",
    (gptr*) &language_ptr, (gptr*) &language_ptr, 0, GET_STR, REQUIRED_ARG,
@@ -3755,8 +3904,8 @@
    (gptr*) &myisam_log_filename, (gptr*) &myisam_log_filename, 0, GET_STR,
    OPT_ARG, 0, 0, 0, 0, 0, 0},
   {"log-update", OPT_UPDATE_LOG,
-   "Log updates to file.# where # is a unique number if not given.",
-   (gptr*) &opt_update_logname, (gptr*) &opt_update_logname, 0, GET_STR,
+   "Log updates for root to file.# where # is a unique number if not given.",
+   (gptr*) &opt_dml_logname, (gptr*) &opt_dml_logname, 0, GET_STR,
    OPT_ARG, 0, 0, 0, 0, 0, 0},
   {"log-slow-queries", OPT_SLOW_QUERY_LOG,
    "Log slow queries to this log file. Defaults logging to hostname-slow.log",
@@ -3920,9 +4069,66 @@
    "Port for connecting to slave reported to the master during slave registration. Set it only if the slave is listening on a non-default port or if you have a special tunnel from the master or other clients to the slave. If not sure, leave this option unset.",
    (gptr*) &report_port, (gptr*) &report_port, 0, GET_UINT, REQUIRED_ARG,
    MYSQL_PORT, 0, 0, 0, 0, 0},
+  {"rpl_always_enter_innodb", OPT_RPL_ENTER_INNODB,
+   "1 = sql thread always enter innodb. 0 = sql thread still wait for ticket limit",
+   (gptr*) &rpl_always_enter_innodb,
+   (gptr*) &rpl_always_enter_innodb, 0, GET_BOOL, NO_ARG,
+   0, 0, 1, 0, 1, 0},
+  {"rpl_long_filename", OPT_RPL_LONG_FILENAME,
+   "1 = use 6 digit filename, like mysql5. 0 = use 3 digit filename",
+   (gptr*) &rpl_long_filename,
+   (gptr*) &rpl_long_filename, 0, GET_BOOL, NO_ARG,
+   0, 0, 1, 0, 1, 0},
+  {"rpl_event_buffer_size", OPT_RPL_EVENT_BUFFER_SIZE,
+   "The fixed event buffer during replication: actual event can exceed it; "
+   " avoids need to malloc/free memory for events smaller than this",
+   (gptr*) &rpl_event_buffer_size,
+   (gptr*) &rpl_event_buffer_size,
+    0, GET_ULONG, REQUIRED_ARG,
+   1024*1024,    /* the default size */
+   16*1024,      /* the minimum size */
+   8*1024*1024,  /* the maximum size */ 0, 1, 0},
   {"rpl-recovery-rank", OPT_RPL_RECOVERY_RANK, "Undocumented",
    (gptr*) &rpl_recovery_rank, (gptr*) &rpl_recovery_rank, 0, GET_ULONG,
    REQUIRED_ARG, 0, 0, 0, 0, 0, 0},
+  {"rpl_mirror_binlog_enabled", OPT_RPL_MIRROR_BINLOG,
+   "1 = support mirroring binlogs.  0 = disable mirroring binlogs",
+   (gptr*) &rpl_mirror_binlog_enabled,
+   (gptr*) &rpl_mirror_binlog_enabled, 0, GET_BOOL, NO_ARG,
+   0, 0, 1, 0, 1, 0},
+  {"rpl_mirror_binlog_no_replicate", OPT_RPL_MIRROR_BINLOG_NO_REPLICATE,
+   "1 = Do not replicate from this mirror binlog server.  0 = Ok to replicate.",
+   (gptr*) &rpl_mirror_binlog_no_replicate,
+   (gptr*) &rpl_mirror_binlog_no_replicate, 0, GET_BOOL, NO_ARG,
+   0, 0, 1, 0, 1, 0},
+  {"rpl_semi_sync_enabled", OPT_RPL_SEMI_SYNC,
+   "1 = Enable semi-synchronous replication. 0 = Disable it",
+   (gptr*) &rpl_semi_sync_enabled,
+   (gptr*) &rpl_semi_sync_enabled, 0, GET_ULONG, REQUIRED_ARG,
+   0, 0, 1, 0, 1, 0},
+  {"rpl_semi_sync_slave_enabled", OPT_RPL_SEMI_SYNC_SLAVE,
+   "1 = Enable semi-synchronous in the slave database.  The slave will be "
+   "the semi-sync replication target",
+   (gptr*) &rpl_semi_sync_slave_enabled,
+   (gptr*) &rpl_semi_sync_slave_enabled, 0, GET_ULONG, REQUIRED_ARG,
+   0, 0, 1, 0, 1, 0},
+  {"rpl_semi_sync_timeout", OPT_RPL_SEMI_SYNC_TIMEOUT,
+   "The timeout value (in ms) for semi-synchronous replication in the master",
+   (gptr*) &rpl_semi_sync_timeout,
+   (gptr*) &rpl_semi_sync_timeout,
+    0, GET_ULONG, REQUIRED_ARG, 10, 0, ~0L, 0, 1, 0},
+  {"rpl_semi_sync_trace_level", OPT_RPL_SEMI_SYNC_TRACE,
+   "The tracing level for semi-sync replication.",
+   (gptr*) &rpl_semi_sync_trace_level,
+   (gptr*) &rpl_semi_sync_trace_level,
+    0, GET_ULONG, REQUIRED_ARG,
+   32,  /* By default, we trace the network waiting time. */
+   0, ~0L, 0, 1, 0},
+  {"rpl_transaction_enabled", OPT_RPL_TRANX_ENABLED,
+   "1 = replication has transaction support. 0 = no special transaction support",
+   (gptr*) &rpl_transaction_enabled,
+   (gptr*) &rpl_transaction_enabled, 0, GET_BOOL, NO_ARG,
+   0, 0, 1, 0, 1, 0},
   {"relay-log", OPT_RELAY_LOG, 
    "The location and name to use for relay logs",
    (gptr*) &opt_relay_logname, (gptr*) &opt_relay_logname, 0,
@@ -4015,6 +4221,16 @@
    "Syntax: sql-mode=option[,option[,option...]] where option can be one of: REAL_AS_FLOAT, PIPES_AS_CONCAT, ANSI_QUOTES, IGNORE_SPACE, SERIALIZE, ONLY_FULL_GROUP_BY, NO_UNSIGNED_SUBTRACTION.",
    (gptr*) &sql_mode_str, (gptr*) &sql_mode_str, 0, GET_STR, REQUIRED_ARG, 0,
    0, 0, 0, 0, 0},
+  {"sync-binlog", OPT_SYNC_BINLOG,
+   "Sync the binlog to disk after every #th event. \
+#=0 (the default) does no sync. Syncing slows MySQL down",
+   (gptr*) &sync_binlog_period,
+   (gptr*) &sync_binlog_period, 0, GET_ULONG, REQUIRED_ARG, 0, 0, ~0L, 0, 1, 0},
+  {"sync-mirror-binlog", OPT_SYNC_MIRROR_BINLOG,
+   "Sync the mirrored binlog to disk after every #th event. "
+   "#=0 (the default) does no sync. Syncing slows MySQL down",
+   (gptr*) &sync_mirror_binlog_period,
+   (gptr*) &sync_mirror_binlog_period, 0, GET_ULONG, REQUIRED_ARG, 0, 0, ~0L, 0, 1, 0},
 #ifdef HAVE_OPENSSL
 #include "sslopt-longopts.h"
 #endif
@@ -4143,6 +4359,14 @@
    "Number of file I/O threads in InnoDB.", (gptr*) &innobase_file_io_threads,
    (gptr*) &innobase_file_io_threads, 0, GET_LONG, REQUIRED_ARG, 4, 4, 64, 0,
    1, 0},
+  {"innodb_read_io_threads", OPT_INNODB_READ_IO_THREADS,
+   "Number of background read I/O threads in InnoDB.", (gptr*) &innobase_read_io_threads,
+   (gptr*) &innobase_read_io_threads, 0, GET_LONG, REQUIRED_ARG, 1, 1, 64, 0,
+   1, 0},
+  {"innodb_write_io_threads", OPT_INNODB_WRITE_IO_THREADS,
+   "Number of background write I/O threads in InnoDB.", (gptr*) &innobase_write_io_threads,
+   (gptr*) &innobase_write_io_threads, 0, GET_LONG, REQUIRED_ARG, 1, 1, 64, 0,
+   1, 0},
   {"innodb_lock_wait_timeout", OPT_INNODB_LOCK_WAIT_TIMEOUT,
    "Timeout in seconds an InnoDB transaction may wait for a lock before being rolled back.",
    (gptr*) &innobase_lock_wait_timeout, (gptr*) &innobase_lock_wait_timeout,
@@ -4173,10 +4397,10 @@
    REQUIRED_ARG, KEY_CACHE_SIZE, MALLOC_OVERHEAD, UINT_MAX32, MALLOC_OVERHEAD,
    IO_SIZE, 0},
   {"long_query_time", OPT_LONG_QUERY_TIME,
-   "Log all queries that have taken more than long_query_time seconds to execute to file.",
-   (gptr*) &global_system_variables.long_query_time,
-   (gptr*) &max_system_variables.long_query_time, 0, GET_ULONG,
-   REQUIRED_ARG, 10, 1, LONG_TIMEOUT, 0, 1, 0},
+   "Log all queries that have taken at least long_query_time seconds to execute to file.",
+   (gptr*) &long_query_time,
+   (gptr*) &long_query_time, 0, GET_ULONG,
+   REQUIRED_ARG, 10, 0, LONG_TIMEOUT, 0, 1, 0},
   {"lower_case_table_names", OPT_LOWER_CASE_TABLE_NAMES,
    "If set to 1 table names are stored in lowercase on disk and table names will be case-insensitive.  Should be set to 2 if you are using a case insensitive file system",
    (gptr*) &lower_case_table_names,
@@ -4364,6 +4588,10 @@
    (gptr*) &relay_log_space_limit,
    (gptr*) &relay_log_space_limit, 0, GET_ULL, REQUIRED_ARG, 0L, 0L,
    (longlong) ULONG_MAX, 0, 1, 0},
+  {"reserved_super_connections", OPT_RESERVED_SUPER_CONNECTIONS,
+   "The number of reserved connections for users with SUPER privileges.",
+   (gptr*) &reserved_super_connections, (gptr*) &reserved_super_connections,
+   0, GET_ULONG, REQUIRED_ARG, 10, 1, 50, 0, 1, 0},
   {"slave_compressed_protocol", OPT_SLAVE_COMPRESSED_PROTOCOL,
    "Use compression on master/slave protocol",
    (gptr*) &opt_slave_compressed_protocol,
@@ -4442,6 +4670,9 @@
 struct show_var_st status_vars[]= {
   {"Aborted_clients",          (char*) &aborted_threads,        SHOW_LONG},
   {"Aborted_connects",         (char*) &aborted_connects,       SHOW_LONG},
+  {"Binlog_events",            (char*) &binlog_events,          SHOW_LONGLONG},
+  {"Binlog_largest_event",     (char*) &binlog_largest_event,   SHOW_LONG},
+  {"Binlog_trunc_errors",      (char*) &binlog_trunc_errors ,   SHOW_LONG},
   {"Bytes_received",           (char*) &bytes_received,         SHOW_LONG},
   {"Bytes_sent",               (char*) &bytes_sent,             SHOW_LONG},
   {"Com_admin_commands",       (char*) &com_other,		SHOW_LONG},
@@ -4519,7 +4750,10 @@
   {"Delayed_errors",           (char*) &delayed_insert_errors,  SHOW_LONG},
   {"Delayed_insert_threads",   (char*) &delayed_insert_threads, SHOW_LONG_CONST},
   {"Delayed_writes",           (char*) &delayed_insert_writes,  SHOW_LONG},
+  {"Denied_connections",       (char*) &denied_connections,     SHOW_LONG},
+  {"Failover_deny_access",     (char*) &failover_deny_access,   SHOW_LONG},
   {"Flush_commands",           (char*) &refresh_version,        SHOW_LONG_CONST},
+  {"Gettimeofday_errors",      (char*) &gettimeofday_errors,    SHOW_LONG},
   {"Handler_commit",           (char*) &ha_commit_count,        SHOW_LONG},
   {"Handler_delete",           (char*) &ha_delete_count,        SHOW_LONG},
   {"Handler_read_first",       (char*) &ha_read_first_count,    SHOW_LONG},
@@ -4536,6 +4770,12 @@
   {"Key_reads",                (char*) &_my_cache_read,         SHOW_LONG},
   {"Key_write_requests",       (char*) &_my_cache_w_requests,   SHOW_LONG},
   {"Key_writes",               (char*) &_my_cache_write,        SHOW_LONG},
+  {"Malloc_sbrk_bytes_alloc",  (char*) &malloc_sbrk_bytes_alloc, SHOW_LONGLONG},
+  {"Malloc_chunks_free",       (char*) &malloc_chunks_free,     SHOW_LONG},
+  {"Malloc_mmap_chunks_alloc", (char*) &malloc_mmap_chunks_alloc, SHOW_LONG},
+  {"Malloc_mmap_bytes_alloc",  (char*) &malloc_mmap_bytes_alloc, SHOW_LONGLONG},
+  {"Malloc_bytes_used",        (char*) &malloc_bytes_used,      SHOW_LONGLONG},
+  {"Malloc_bytes_free",        (char*) &malloc_bytes_free,      SHOW_LONGLONG},
   {"Max_used_connections",     (char*) &max_used_connections,   SHOW_LONG},
   {"Not_flushed_delayed_rows", (char*) &delayed_rows_in_use,    SHOW_LONG_CONST},
   {"Not_flushed_key_blocks",   (char*) &_my_blocks_changed,     SHOW_LONG_CONST},
@@ -4557,6 +4797,38 @@
    SHOW_LONG_CONST},
 #endif /*HAVE_QUERY_CACHE*/
   {"Questions",                (char*) 0,                       SHOW_QUESTION},
+  {"Replication_fail_io_connections", (char*) &rpl_fail_io_connections, SHOW_LONG},
+  {"Replication_last_event_buffered", (char*) &rpl_last_event_buffered, SHOW_LONG},
+  {"Replication_last_event_diff", (char*) &rpl_last_event_diff, SHOW_LONG},
+  {"Replication_last_event_done", (char*) &rpl_last_event_done, SHOW_LONG},
+  {"Replication_max_delay", (char*) &rpl_max_delay, SHOW_LONG},
+  {"Replication_slowest_event", (char*) &rpl_slowest_event, SHOW_LONG},
+  {"Replication_slowest_event", (char*) &rpl_slowest_event, SHOW_LONG},
+  {"Rpl_mirror_binlog_clients",(char*) &rpl_mirror_binlog_clients,     SHOW_LONG},
+  {"Rpl_mirror_binlog_status", (char*) &rpl_mirror_binlog_status,      SHOW_LONG},
+  {"Rpl_semi_sync_clients",    (char*) &rpl_semi_sync_clients,         SHOW_LONG},
+  {"Rpl_semi_sync_net_avg_wait_time(us)",
+                               (char*) &rpl_semi_sync_net_wait_time,   SHOW_LONG},
+  {"Rpl_semi_sync_net_wait_time",
+                         (char*) &rpl_semi_sync_net_wait_total_time,   SHOW_LONGLONG},
+  {"Rpl_semi_sync_net_waits",  (char*) &rpl_semi_sync_net_wait_num,    SHOW_LONGLONG},
+  {"Rpl_semi_sync_no_times",   (char*) &rpl_semi_sync_off_times,       SHOW_LONG},
+  {"Rpl_semi_sync_no_tx",      (char*) &rpl_semi_sync_no_transactions, SHOW_LONG},
+  {"Rpl_semi_sync_status",     (char*) &rpl_semi_sync_status,          SHOW_LONG},
+  {"Rpl_semi_sync_slave_status", (char*) &rpl_semi_sync_slave_status,  SHOW_LONG},
+  {"Rpl_semi_sync_timefunc_failures",
+                               (char*) &rpl_semi_sync_timefunc_fails,  SHOW_LONG},
+  {"Rpl_semi_sync_tx_avg_wait_time(us)",
+                               (char*) &rpl_semi_sync_trx_wait_time,   SHOW_LONG},
+  {"Rpl_semi_sync_tx_wait_time",
+                         (char*) &rpl_semi_sync_trx_wait_total_time,   SHOW_LONGLONG},
+  {"Rpl_semi_sync_tx_waits",   (char*) &rpl_semi_sync_trx_wait_num,    SHOW_LONGLONG},
+  {"Rpl_semi_sync_wait_pos_backtraverse",
+                               (char*) &rpl_semi_sync_back_wait_pos,   SHOW_LONG},
+  {"Rpl_semi_sync_wait_sessions",
+                               (char*) &rpl_semi_sync_wait_sessions,   SHOW_LONG},
+  {"Rpl_semi_sync_yes_tx",     (char*) &rpl_semi_sync_yes_transactions, SHOW_LONG},
+  {"Rpl_transaction_support",  (char*) &rpl_transaction_enabled,  SHOW_LONG},
   {"Rpl_status",               (char*) 0,                 SHOW_RPL_STATUS},
   {"Select_full_join",         (char*) &select_full_join_count, SHOW_LONG},
   {"Select_full_range_join",   (char*) &select_full_range_join_count, SHOW_LONG},
@@ -4603,6 +4875,9 @@
   {"Threads_created",	       (char*) &thread_created,		SHOW_LONG_CONST},
   {"Threads_running",          (char*) &thread_running,         SHOW_INT_CONST},
   {"Uptime",                   (char*) 0,                       SHOW_STARTTIME},
+  {"Vm_size",                  (char*) &vm_size,                SHOW_LONGLONG},
+  {"Vm_data",                  (char*) &vm_data,                SHOW_LONGLONG},
+  {"Vm_rss",                   (char*) &vm_rss,                 SHOW_LONGLONG},
   {NullS, NullS, SHOW_LONG}
 };
 
@@ -4781,7 +5056,7 @@
     opt_myisam_log=1;
     break;
   case (int) OPT_UPDATE_LOG:
-    opt_update_log=1;
+    opt_dml_log=1;
     break;
   case (int) OPT_BIN_LOG:
     opt_bin_log=1;
@@ -5183,6 +5458,12 @@
     lower_case_table_names= argument ? atoi(argument) : 1;
     lower_case_table_names_used= 1;
     break;
+  case OPT_LOG_QUERIES_ON_TABLES:
+    init_log_tables(argument);
+    break;
+  case (int) OPT_AUDIT_LOG:
+    opt_audit_log = 1;
+    break;
   }
   return 0;
 }
@@ -5264,7 +5545,7 @@
   if (!strstr(MYSQL_SERVER_SUFFIX_STR, "-debug"))
     end= strmov(end, "-debug");
 #endif
-  if (opt_log || opt_update_log || opt_slow_log || opt_bin_log)
+  if (opt_log || opt_update_log || opt_slow_log || opt_bin_log || opt_dml_log)
     strmov(end, "-log");                        // This may slow down system
 }
 
diff -ruN base/sql/mysql_priv.h mysql40gpl/sql/mysql_priv.h
--- base/sql/mysql_priv.h	2005-09-02 15:38:00.000000000 -0700
+++ mysql40gpl/sql/mysql_priv.h	2007-04-21 12:39:25.000000000 -0700
@@ -234,7 +234,9 @@
 
 /* BINLOG_DUMP options */
 
-#define BINLOG_DUMP_NON_BLOCK   1
+#define BINLOG_DUMP_NON_BLOCK   0x0001
+#define BINLOG_SEMI_SYNC        0x0002
+#define BINLOG_MIRROR_CLIENT    0x0004
 
 /* sql_show.cc:show_log_files() */
 #define SHOW_LOG_STATUS_FREE "FREE"
@@ -360,7 +362,14 @@
 void mysql_init_multi_delete(LEX *lex);
 void init_max_user_conn(void);
 void init_update_queries(void);
+void init_global_user_stats(void);
+void init_global_table_stats(void);
+void init_global_index_stats(void);
+void init_log_tables(my_string string);
 void free_max_user_conn(void);
+void free_global_user_stats(void);
+void free_global_table_stats(void);
+void free_global_index_stats(void);
 extern "C" pthread_handler_decl(handle_one_connection,arg);
 extern "C" pthread_handler_decl(handle_bootstrap,arg);
 void end_thread(THD *thd,bool put_in_cache);
@@ -539,6 +548,9 @@
 int mysqld_show(THD *thd, const char *wild, show_var_st *variables,
 		enum enum_var_type value_type,
 		pthread_mutex_t *mutex);
+int mysqld_show_user_stats(THD *thd, const char *wild);
+int mysqld_show_table_stats(THD *thd, const char *wild);
+int mysqld_show_index_stats(THD *thd, const char *wild);
 int mysql_find_files(THD *thd,List<char> *files, const char *db,
                 const char *path, const char *wild, bool dir);
 
@@ -681,6 +693,7 @@
 extern char *mysql_data_home,server_version[SERVER_VERSION_LENGTH],
 	    max_sort_char, mysql_real_data_home[], *charsets_list;
 extern my_string mysql_tmpdir;
+extern my_string opt_binlog_index_name;
 extern const char *command_name[];
 extern const char *first_keyword, *localhost, *delayed_user;
 extern const char **errmesg;			/* Error messages */
@@ -699,6 +712,7 @@
 extern ulong delayed_insert_limit, delayed_queue_size;
 extern ulong delayed_insert_threads, delayed_insert_writes;
 extern ulong delayed_rows_in_use,delayed_insert_errors;
+extern ulong denied_connections;
 extern ulong filesort_rows, filesort_range_count, filesort_scan_count;
 extern ulong filesort_merge_passes;
 extern ulong select_range_check_count, select_range_count, select_scan_count;
@@ -713,21 +727,43 @@
 extern ulong ha_commit_count, ha_rollback_count,table_cache_size;
 extern ulong max_connections,max_connect_errors, connect_timeout;
 extern ulong max_user_connections;
+extern ulong reserved_super_connections;
 extern ulong long_query_count, what_to_log,flush_time,opt_sql_mode;
 extern ulong query_buff_size, thread_stack,thread_stack_min;
 extern ulong binlog_cache_size, max_binlog_cache_size, open_files_limit;
 extern ulong max_binlog_size, max_relay_log_size;
-extern ulong rpl_recovery_rank, thread_cache_size;
+extern ulong rpl_recovery_rank, thread_cache_size, long_query_time;
 extern ulong com_stat[(uint) SQLCOM_END], com_other, back_log;
 extern ulong specialflag, current_pid;
+// The following export malloc stats from struct mallinfo and mallinfo().
+// They are displayed by 'show status'
+extern ulonglong malloc_sbrk_bytes_alloc; // Bytes allocated by sbrk
+extern ulong malloc_chunks_free; // Allocated chunks that are free
+extern ulong malloc_mmap_chunks_alloc; // Chunks allocated by mmap
+extern ulonglong malloc_mmap_bytes_alloc; // Bytes allocated by mmap
+extern ulonglong malloc_bytes_used; // Bytes in use by malloc callers
+extern ulonglong malloc_bytes_free; // Bytes allocated by malloc, but free
+// The following export VM stats from /proc/self/status.
+extern ulonglong vm_size; // Size of process address space in bytes
+extern ulonglong vm_data; // Size of address space for data in bytes
+extern ulonglong vm_rss; // Size of address space resident in memory in bytes
+// binlog_* variables are protected by LOCK_log.
+// The number of events written to the binlog.
+extern ulonglong binlog_events;
+// The largest event written to the binlog. Reset when log is rotated.
+extern ulong binlog_largest_event;
+
+// Tables that we want to force a log of queries on
+extern HASH log_tables;
 
 extern uint test_flags,select_errors,ha_open_options;
 extern uint protocol_version,dropping_tables;
 extern uint delay_key_write_options, lower_case_table_names;
 extern bool opt_endinfo, using_udf_functions, locked_in_memory;
 extern bool opt_using_transactions, mysql_embedded;
-extern bool using_update_log, opt_large_files, server_id_supplied;
-extern bool opt_log, opt_update_log, opt_bin_log, opt_slow_log, opt_error_log;
+extern bool using_update_log, opt_large_files, server_id_supplied, using_dml_log;
+extern bool opt_log, opt_update_log, opt_bin_log, opt_slow_log, opt_error_log,
+            opt_dml_log;
 extern bool opt_disable_networking, opt_skip_show_db;
 extern bool volatile abort_loop, shutdown_in_progress, grant_option;
 extern uint volatile thread_count, thread_running, global_read_lock;
@@ -738,6 +774,7 @@
 extern my_bool opt_enable_named_pipe, opt_sync_frm, opt_allow_suspicious_udfs;
 
 extern MYSQL_LOG mysql_log,mysql_update_log,mysql_slow_log,mysql_bin_log;
+extern MYSQL_LOG mysql_audit_log;
 extern FILE *bootstrap_file;
 extern pthread_key(MEM_ROOT*,THR_MALLOC);
 extern pthread_key(NET*, THR_NET);
@@ -757,6 +794,76 @@
 extern struct system_variables global_system_variables;
 extern struct system_variables max_system_variables;
 extern struct rand_struct sql_rand;
+extern HASH global_user_stats;
+extern pthread_mutex_t LOCK_global_user_stats;
+extern char uc_update_queries[];
+extern HASH global_table_stats;
+extern pthread_mutex_t LOCK_global_table_stats;
+extern HASH global_index_stats;
+extern pthread_mutex_t LOCK_global_index_stats;
+extern pthread_mutex_t LOCK_stats;
+extern ulong sync_binlog_period, sync_binlog_counter;
+extern ulong sync_mirror_binlog_period;
+extern ulong gettimeofday_errors;
+extern ulong rpl_mirror_binlog_clients, rpl_mirror_binlog_status;
+
+/* The variable indicating whether the transaction support in replication
+ * is enabled.
+ */
+extern my_bool rpl_transaction_enabled, rpl_always_enter_innodb;
+extern my_bool rpl_long_filename;
+
+/* Replication I/O thread's failing connection tries to the master. */
+extern ulong rpl_fail_io_connections;
+
+/* How many times binlog truncation error happens. */
+extern ulong binlog_trunc_errors;
+
+/* Time on slave at which last replication event was copied from the master */
+extern ulong rpl_last_event_buffered;
+
+/* Time from master of last event executed on the slave */
+extern ulong rpl_last_event_done;
+
+/* Diff between rpl_last_event_done and rpl_last_event_buffered */
+extern ulong rpl_last_event_diff;
+
+/* Max time to run replication event for last N events */
+extern ulong rpl_slowest_event;
+
+/* Max replication delay from the last N events */
+extern ulong rpl_max_delay;
+
+/* The fixed size for replication event buffer.  Replication event can exceed
+ * the fixed size.
+ */
+extern ulong rpl_event_buffer_size;
+
+/* The variable indicating whether we relay binlog from a primary database.
+ */
+extern my_bool rpl_mirror_binlog_enabled;
+extern my_bool rpl_mirror_binlog_no_replicate;
+
+extern ulong rpl_semi_sync_enabled;
+extern ulong rpl_semi_sync_slave_enabled;
+extern ulong rpl_semi_sync_timeout;
+extern ulong rpl_semi_sync_trace_level;
+extern ulong rpl_semi_sync_status;
+extern ulong rpl_semi_sync_slave_status;
+extern ulong rpl_semi_sync_yes_transactions;
+extern ulong rpl_semi_sync_no_transactions;
+extern ulong rpl_semi_sync_off_times;
+extern ulong rpl_semi_sync_timefunc_fails;
+extern ulong rpl_semi_sync_num_timeouts;
+extern ulong rpl_semi_sync_wait_sessions;
+extern ulong rpl_semi_sync_back_wait_pos;
+extern ulong rpl_semi_sync_trx_wait_time;
+extern ulong rpl_semi_sync_net_wait_time;
+extern ulonglong rpl_semi_sync_net_wait_num;
+extern ulonglong rpl_semi_sync_trx_wait_num;
+extern ulonglong rpl_semi_sync_net_wait_total_time;
+extern ulonglong rpl_semi_sync_trx_wait_total_time;
+extern ulong rpl_semi_sync_clients;
 
 /* optional things, have_* variables */
 
diff -ruN base/sql/opt_sum.cc mysql40gpl/sql/opt_sum.cc
--- base/sql/opt_sum.cc	2005-09-02 15:37:55.000000000 -0700
+++ mysql40gpl/sql/opt_sum.cc	2007-04-21 12:40:55.000000000 -0700
@@ -174,6 +174,8 @@
           {
 	    if (error == HA_ERR_KEY_NOT_FOUND || error == HA_ERR_END_OF_FILE)
 	      return -1;		       // No rows matching WHERE
+            else if (error == -1)
+              error = HA_ERR_WRONG_COMMAND;  // Return -1 means no rows matched
 
 	    table->file->print_error(error, MYF(0));
             return(error);                     // HA_ERR_LOCK_DEADLOCK or
@@ -241,6 +243,8 @@
 	  {
 	    if (error == HA_ERR_KEY_NOT_FOUND || error == HA_ERR_END_OF_FILE)
 	      return -1;			// Impossible query
+            else if (error == -1)
+              error = HA_ERR_WRONG_COMMAND;  // Return -1 means no rows matched
 
 	    table->file->print_error(error, MYF(0));
 	    return error;		        // Deadlock or some other error
diff -ruN base/sql/repl_failsafe.cc mysql40gpl/sql/repl_failsafe.cc
--- base/sql/repl_failsafe.cc	2005-09-02 15:38:07.000000000 -0700
+++ mysql40gpl/sql/repl_failsafe.cc	2007-04-21 09:57:11.000000000 -0700
@@ -928,6 +928,12 @@
   active_mi->rli.master_log_pos = active_mi->master_log_pos;
   strmake(active_mi->rli.master_log_name,active_mi->master_log_name,
 	  sizeof(active_mi->rli.master_log_name)-1);
+  /*
+   *      Cancel the previous START SLAVE UNTIL, as the fact to download
+   *           a new copy logically makes UNTIL irrelevant.
+   */
+  clear_until_condition(&active_mi->rli);
+
   flush_relay_log_info(&active_mi->rli);
   pthread_cond_broadcast(&active_mi->rli.data_cond);
   pthread_mutex_unlock(&active_mi->rli.data_lock);
diff -ruN base/sql/repl_mule.cc mysql40gpl/sql/repl_mule.cc
--- base/sql/repl_mule.cc	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/sql/repl_mule.cc	2007-04-21 11:19:15.000000000 -0700
@@ -0,0 +1,585 @@
+/* Copyright (C) 2007 Google Inc.
+
+This program is free software; you can redistribute it and/or
+modify it under the terms of the GNU General Public License
+as published by the Free Software Foundation; either version 2
+of the License, or (at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program; if not, write to the Free Software
+Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+*/
+
+#include "mysql_priv.h"
+#include <my_dir.h>
+#include "slave.h"
+#include "repl_mule.h"
+
+/* max log size: 2GB */
+#define MAX_LOG_SIZE BINLOG_NOSWITCH_SIZE
+
+ReplMule::ReplMule(THD* thd, MASTER_INFO *mi, RelayStatus status,
+                   const char *curr_log_filename,
+                   my_off_t file_size, const char *binlog_indexname,
+                   MYSQL_LOG *binlog, ulong sync_period)
+    : io_thd_(thd), mi_(mi), status_(status), dump_position_(0L),
+      file_size_(file_size), mule_log_(binlog),
+      mule_log_sync_period_(sync_period), mule_log_event_counter_(0) {
+  char llbuf1[22], llbuf2[22];
+
+  DBUG_ENTER("ReplMule::ReplMule");
+
+  strmake(mule_indexname_, binlog_indexname, sizeof(mule_indexname_)-1);
+
+  /* Open the mule log file */
+  if (!mule_log_->is_log_open()) {
+    /* Do not open binlog file when master_log_name is not specified.  We
+     * are at the I/O thread initialization time and we do not know what
+     * filename we are going to dump.
+     * We wait for the next rotation event to indicate the filename.
+     */
+    if (strlen(curr_log_filename) > 0 &&
+        mule_log_->open(curr_log_filename, LOG_BIN, NULL, mule_indexname_,
+                        SEQ_READ_APPEND, true, MAX_LOG_SIZE) != 0) {
+      sql_print_error("ReplMule: open binlog failed: %s",
+                      curr_log_filename);
+      status_ = MULE_ERROR;
+      DBUG_VOID_RETURN;
+    }
+  }
+
+  /* Store the original master position in case we need to restore them. */
+  strmake(dump_filename_, mi->master_log_name, sizeof(dump_filename_)-1);
+  dump_position_ = mi->master_log_pos;
+
+  strmake(verify_filename_, "", sizeof(verify_filename_)-1);
+  switch (status_) {
+  case MULE_BEHIND:
+    mi->master_log_pos = file_size_;
+
+    if (strcmp(mi->master_log_name, dump_filename_) < 0) {
+      strmake(mi->master_log_name, curr_log_filename,
+              sizeof(mi->master_log_name)-1);
+      seekToPosition(file_size_);
+
+      /* When mule binlog catches up, it will be a different file.  So,
+       * file_size_ is not useful anymore.
+       */
+      file_size_ = 0;
+    }
+
+    sql_print_information(
+      "ReplicationMule: MULE_BEHIND - new(%s, %s), old(%s, %s)",
+      mi->master_log_name, llstr(mi->master_log_pos, llbuf1),
+      dump_filename_, llstr(dump_position_, llbuf2));
+    break;
+  case RELAY_MATCH_MULE:
+    sql_print_information("ReplicationMule: RELAY_MATCH_MULE (%s, %s)",
+                          mi->master_log_name,
+                          llstr(mi->master_log_pos, llbuf1));
+    break;
+  case MULE_VERIFY:
+  case MULE_VERIFY_RELAY_BEHIND:
+    strmake(verify_filename_, curr_log_filename, sizeof(verify_filename_)-1);
+    if (strcmp(verify_filename_, mi->master_log_name) < 0) {
+      strmake(mi->master_log_name, verify_filename_,
+              sizeof(mi->master_log_name)-1);
+    }
+    mi->master_log_pos = BIN_LOG_HEADER_SIZE;
+    sql_print_information(
+      "ReplicationMule: MULE_VERIFY - old(%s, %s), new(%s, %s)",
+      dump_filename_, llstr(dump_position_, llbuf1),
+      curr_log_filename, llstr(file_size_, llbuf2));
+
+    /* seek to the beginning of the file for verification */
+    seekToPosition(BIN_LOG_HEADER_SIZE);
+    break;
+  default:
+    sql_print_error("ReplMule: unrecognized status %d", status_);
+    status_ = MULE_ERROR;
+    DBUG_VOID_RETURN;
+  }
+
+  /* Indicate that we are in replication mule mode.  Also, the mule log is
+   * only servable when relay match mule because we finished all verification.
+   */
+  mule_log_->set_mule_mode(status_ == RELAY_MATCH_MULE);
+  
+  DBUG_VOID_RETURN;
+}
+
+ReplMule::~ReplMule() {
+  DBUG_ENTER("ReplMule::~ReplMule");
+
+  if (mule_log_->is_log_open())
+    mule_log_->close(LOG_CLOSE_INDEX);
+  mule_log_->clear_mule_mode();
+
+  /* If we are still in MULE_BEHIND or MULE_VERIFY state and we exit from
+   * I/O thread, it means we encountered some errors.
+   * mi->master_log_pos might be used by later slave start.  It is being
+   * changed here to do event dumping or event verification.  So, we should
+   * restore it to its original value.
+   */
+  switch (status_) {
+  case MULE_BEHIND:
+  case MULE_VERIFY:
+  case MULE_VERIFY_RELAY_BEHIND:
+    if (mi_->master_log_pos < dump_position_)
+      mi_->master_log_pos = dump_position_;
+    if (strcmp(mi_->master_log_name, dump_filename_) != 0)
+      strmake(mi_->master_log_name, dump_filename_,
+              sizeof(dump_filename_)-1);
+    break;
+  }
+
+  DBUG_VOID_RETURN;
+}
+
+ReplMule::WriteStatus ReplMule::writeEvent(const char* buf, ulong event_len) {
+  WriteStatus dump_status = WRITE_RELAY;
+  char  llbuf1[22], llbuf2[22], llbuf3[22];
+  char *verify_event;
+  bool  verified = false;
+  bool  skip_event = false;
+  int   cmp;
+
+  DBUG_ENTER("ReplMule::writeEvent");
+  switch (status_) {
+    case MULE_VERIFY:
+    case MULE_VERIFY_RELAY_BEHIND:
+      if (buf[EVENT_TYPE_OFFSET] == ROTATE_EVENT &&
+          IsFakeRotation(buf, event_len)) {
+        /* Do not verify the faked rotate event */
+        if (status_ == MULE_VERIFY)
+          dump_status = SKIP_RELAY;
+        break;
+      }
+      verify_event = new char[event_len];
+      if (verify_event == NULL) {
+        sql_print_error(
+            "ReplMule::writeEvent - insufficient memory in verification, "
+            "position(%s), event_len(%d).", 
+            llstr(mi_->master_log_pos, llbuf1), event_len);
+        dump_status = WRITE_ERROR;
+        break;
+      }
+      if (my_b_read(mule_log_->get_log_file(), (byte*) verify_event,
+                    event_len) != 0) {
+        sql_print_error(
+            "ReplMule::writeEvent - read log error in verification, "
+            "position(%s), event_len(%d).", 
+            llstr(mi_->master_log_pos, llbuf1), event_len);
+        dump_status = WRITE_ERROR;
+        delete verify_event;
+        break;
+      }
+      verified = (memcmp(buf, verify_event, event_len) == 0);
+      delete verify_event;
+      if (!verified) {
+        sql_print_error(
+            "ReplMule::writeEvent - event not match at position(%s, %s)",
+            mi_->master_log_name, llstr(mi_->master_log_pos, llbuf1));
+        dump_status = WRITE_ERROR;
+        break;
+      }
+      /* fall through */
+    case MULE_BEHIND:
+      dump_status = SKIP_RELAY;
+      if (status_ == MULE_BEHIND &&
+          queueEvent(buf, event_len, &skip_event) != 0) {
+        dump_status = WRITE_ERROR;
+        break;
+      }
+
+      /* Skip faked rotation event */
+      if (!skip_event)
+        mi_->master_log_pos += event_len;
+
+      cmp = strcmp(mi_->master_log_name, dump_filename_);
+      if (cmp != 0) {
+        if (cmp > 0) {
+          sql_print_error(
+            "ReplMule::writeEvent - mule position(%s, %s) is ahead "
+            "relay-log position(%, %s). impossible!",
+            mi_->master_log_name, llstr(mi_->master_log_pos, llbuf1),
+            dump_filename_, llstr(dump_position_, llbuf2));
+          dump_status = WRITE_ERROR;
+        } else if (status_ == MULE_VERIFY) {
+          if (strcmp(verify_filename_, mi_->master_log_name) == 0) {
+            /* We are verifying the last old mirror binlog. */
+            if (mi_->master_log_pos == file_size_) {
+              /* We verfied all events in the last old mirror binlog.
+               * The status is behined, instead of verify now.
+               */
+              status_ = MULE_BEHIND;
+              sql_print_information(
+                "ReplMule::writeEvent - new status(%d), verify(%s, %s) "
+                "dump(%s, %s).",
+                status_, verify_filename_, llstr(file_size_, llbuf3),
+                dump_filename_, llstr(dump_position_, llbuf2));
+
+              /* Reset the verify position. */
+              strmake(verify_filename_, "", sizeof(verify_filename_)-1);
+              file_size_ = 0;
+            } else if (mi_->master_log_pos > file_size_) {
+              dump_status = WRITE_ERROR;
+
+              sql_print_error(
+                "ReplMule::writeEvent - verify(%s, %s), mule(%s, %s)",
+                verify_filename_, llstr(file_size_, llbuf3),
+                mi_->master_log_name, llstr(mi_->master_log_pos, llbuf1));
+            }
+          }
+        }
+        break;
+      }
+      if (mi_->master_log_pos == dump_position_) {
+        if (dump_position_ < file_size_) {
+          status_ = MULE_VERIFY_RELAY_BEHIND;
+        } else {
+          status_ = RELAY_MATCH_MULE;
+
+          /* Set replication mule mode and the log is servable. */
+          mule_log_->set_mule_mode(true);
+        }
+        sql_print_information(
+            "ReplMule::writeEvent =d - new status(%d), file(%s) "
+            "master_log_pos(%s), dump_pos(%s), file_size(%s)",
+            status_, dump_filename_,
+            llstr(mi_->master_log_pos, llbuf1), llstr(dump_position_, llbuf2),
+            llstr(file_size_, llbuf3));
+      } else if (mi_->master_log_pos == file_size_) {
+        if (dump_position_ > file_size_) {
+          status_ = MULE_BEHIND;
+        } else {
+          status_ = RELAY_MATCH_MULE;
+
+          /* Set replication mule mode and the log is servable. */
+          mule_log_->set_mule_mode(true);
+        }
+        sql_print_information(
+            "ReplMule::writeEvent =f - new status(%d), file(%s) "
+            "master_log_pos(%s), dump_pos(%s), file_size(%s)",
+            status_, dump_filename_,
+            llstr(mi_->master_log_pos, llbuf1), llstr(dump_position_, llbuf2),
+            llstr(file_size_, llbuf3));
+      } else if (status_ != MULE_VERIFY_RELAY_BEHIND &&
+                 mi_->master_log_pos > dump_position_) {
+        sql_print_error(
+            "ReplMule::writeEvent - mule position(%s) does not match "
+            "relay-log position(%s), file(%s).",
+            llstr(mi_->master_log_pos, llbuf1), llstr(dump_position_, llbuf2),
+            dump_filename_);
+        dump_status = WRITE_ERROR;
+      }
+      break;
+    case RELAY_MATCH_MULE:
+      if (queueEvent(buf, event_len, &skip_event) != 0)
+        dump_status = WRITE_ERROR;
+      break;
+  }
+
+  DBUG_RETURN(dump_status);
+}
+
+int ReplMule::appendEvent(const char* buf, ulong event_len) {
+  char llbuf1[22];
+  int error;
+
+  DBUG_ENTER("ReplMule::appendEvent");
+
+  error = mule_log_->appendv(buf,event_len,0);
+  if (error != 0) {
+    sql_print_error("ReplMule::appendEvent - append error at %s(%s)",
+                    mi_->master_log_name,
+                    llstr(mi_->master_log_pos, llbuf1));
+  } else if (mule_log_->flush_log_file() != 0) {
+    sql_print_error("ReplMule::appendEvent - flush error at %s(%s)",
+                    mi_->master_log_name,
+                    llstr(mi_->master_log_pos, llbuf1));
+    error = -1;
+  } else if (mule_log_sync_period_ > 0) {
+    mule_log_event_counter_++;
+    if (mule_log_event_counter_ >= mule_log_sync_period_) {
+      mule_log_event_counter_ = 0;
+      error = my_sync(mule_log_->get_log_file()->file, MYF(MY_WME));
+      if (error != 0)
+        sql_print_error("ReplMule::appendEvent - sync error at %s(%s)",
+                        mi_->master_log_name,
+                        llstr(mi_->master_log_pos, llbuf1));
+    }
+  }
+
+  DBUG_RETURN(error);
+}
+
+int ReplMule::queueEvent(const char* buf, ulong event_len, bool *skip_event) {
+  int error = 0;
+
+  DBUG_ENTER("ReplMule::queueEvent");
+
+  *skip_event = false;
+
+  mule_log_->lock_log();
+  if (buf[EVENT_TYPE_OFFSET] == ROTATE_EVENT) {
+    Rotate_log_event rev(buf, event_len, false);
+
+    /* If this is a faked rotate event and the specified filename is
+     * the same as the current binlog filename, ignore the event.
+     */
+    if (IsFakeRotation(rev)) {
+      *skip_event = true;
+      DBUG_PRINT("info",("skipped faked rotation event"));
+    } else {
+      /* Only append real events. */
+      if (rev.when != 0)
+        error = appendEvent(buf, event_len);
+
+      /* Only rotate file when append succeeds. */
+      if (error == 0) {
+        char new_name[FN_REFLEN];
+
+        /* Create a new file: lock both index and log. */
+        mule_log_->lock_index();
+
+        /* We check whether the new mirror binlog already exists.  Indicate an
+         * error if it is so.  This is a sanity check to make sure we would not
+         * overwrite mirrored files.
+         * Because we use SEQ_READ_APPEND mode, the consequence will be worse
+         * if the next file is already in the directory.
+         */
+        fn_format(new_name, rev.new_log_ident, mysql_data_home, "", 4);
+        if (access(new_name, F_OK) != 0) {
+          /* The file does not exist. */
+          if (strlen(mi_->master_log_name) == 0) {
+            /* If mi_->master_log_name is not specified, then this is the first
+             * valid rotation event to indicate the filename.
+             */
+            error = mule_log_->open(rev.new_log_ident, LOG_BIN, NULL,
+                                    mule_indexname_, SEQ_READ_APPEND,
+                                    true, MAX_LOG_SIZE);
+          } else {
+            mule_log_->new_file(0, rev.new_log_ident);
+          }
+
+          strmake(mi_->master_log_name, rev.new_log_ident,
+                  strlen(rev.new_log_ident));
+          mi_->master_log_pos = BIN_LOG_HEADER_SIZE;
+
+          /* After a new file, do not add the event size to the position. */
+          *skip_event = true;
+        } else {
+          sql_print_error("ReplMule::queueEvent - next %s binlog exists.",
+                          new_name);
+          error = -1;
+        }
+
+        mule_log_->unlock_index();
+
+        DBUG_PRINT("info",("rotate file: %s", rev.new_log_ident));
+      }
+    }
+  } else {
+    error = appendEvent(buf, event_len);
+  }
+  mule_log_->unlock_log();
+
+  DBUG_RETURN(error);
+}
+
+void ReplMule::seekToPosition(my_off_t pos) {
+  DBUG_ENTER("ReplMule::seekToPosition");
+  DBUG_PRINT("enter",("seek_pos: %ld", (ulong) pos));
+  
+  my_b_seek(mule_log_->get_log_file(), pos);
+  DBUG_VOID_RETURN;
+}
+
+bool ReplMule::IsFakeRotation(const char* buf, ulong event_len) {
+  DBUG_ENTER("ReplMule::IsFakeRotation");
+
+  Rotate_log_event rev(buf, event_len, false);
+  DBUG_RETURN(IsFakeRotation(rev));
+}
+
+bool ReplMule::IsFakeRotation(const Rotate_log_event& rev) {
+  DBUG_ENTER("ReplMule::IsFakeRotation");
+  DBUG_RETURN(rev.when == 0 &&
+              rev.ident_len == strlen(mi_->master_log_name) &&
+              strcmp(rev.new_log_ident, mi_->master_log_name) == 0);
+}
+
+/* createReplicationMule:
+ *  Create a mule that relays master's replication binlog and
+ *  generate an exact same copy on the local filesystem.
+ * 
+ * Code flow:
+ *  last_mulelog = scan the existing mule log index to find it
+ *  if (mulelog index is not created or there is no mule log inside it)
+ *    old_mule_log <- requested dumping position
+ *    requested dumping position <- 0 in the file
+ *  else
+ *    check whether the mule log matches the requested dump
+ *      (whether the last mule log name/size matches)
+ *    if the mule log name does not match
+ *      exit with an error
+ *    if (the mule log size does not match the requested dump position)
+ *      request the dump from position 0 and read all events
+ *      verify all events with the corresponding events in mule log
+ *      if (the verification succeeds)
+ *        continue the dump
+ *      else
+ *        exit with an error
+ */
+ReplMule* ReplMule::createReplicationMule(
+    THD* thd, MASTER_INFO *mi, const char *binlog_indexname,
+    MYSQL_LOG *binlog) {
+  ReplMule *mule = NULL;
+  LOG_INFO linfo;
+  bool index_opened = false;
+
+  DBUG_ENTER("ReplMule::createReplicationMule");
+
+  /* binlog_indexname must be set to some real value. */
+  DBUG_ASSERT(binlog_indexname);
+
+  /* Lock binlog index for all binlog operations */
+  binlog->lock_index();
+  index_opened = binlog->open_index_file(binlog_indexname, NULL);
+  DBUG_PRINT("info",("open index file succeed: %d", index_opened));
+
+  /* Scan the existing binlog index to find the last relayed binlog */
+  if (!index_opened ||
+      binlog->find_log_pos(&linfo, NullS, false) != 0) {
+    /* binlog index is not created or has no log file inside:
+     *  . old_relay_binlog <- requested dumping position
+     *  . requested dumping position <- 0 in the file
+     */
+    if (mi->master_log_pos == BIN_LOG_HEADER_SIZE) {
+      mule = new ReplMule(thd, mi, RELAY_MATCH_MULE,
+                          mi->master_log_name, BIN_LOG_HEADER_SIZE,
+                          binlog_indexname, binlog, sync_mirror_binlog_period);
+    } else {
+      mule = new ReplMule(thd, mi, MULE_BEHIND,
+                          mi->master_log_name, BIN_LOG_HEADER_SIZE,
+                          binlog_indexname, binlog, sync_mirror_binlog_period);
+    }
+
+    if (mule == NULL) {
+      sql_print_error("Mule malloc operation failed.");
+    }
+  } else {
+    IO_CACHE* log_file;
+    MY_STAT stat;
+    char    last_binlog_name[FN_REFLEN];
+
+    /* Find the last log file from the binlog index.
+     * Check whether the last binlog matches the requested dump for both
+     * binlog name and binlog size.
+     */
+    for (;;) {
+      strmake(last_binlog_name, linfo.log_file_name, FN_REFLEN);
+      last_binlog_name[FN_REFLEN - 1] = '\0';
+      if (binlog->find_next_log(&linfo, false))
+        break;
+    }
+    DBUG_PRINT("info",("the last binlog: %s", last_binlog_name));
+
+    /* if the new binlog filename is behind the last mirrorred binlog filename,
+     * exit with an error.
+     */
+    if (strcmp(last_binlog_name+dirname_length(last_binlog_name),
+               mi->master_log_name) > 0) {
+      sql_print_error("Mule binlog(%s) does not match new relay-binlog(%s)",
+                      last_binlog_name, mi->master_log_name);
+    } /* Open the last binlog. */
+    else if (binlog->open(last_binlog_name, LOG_BIN, NULL, binlog_indexname,
+                          SEQ_READ_APPEND, true, MAX_LOG_SIZE) != 0) {
+      sql_print_error("Mule open last binlog failed: %s", last_binlog_name);
+    } else {
+      bool valid_file_size = true;
+
+      /* Get the binlog size. */
+      log_file = binlog->get_log_file();
+      my_fstat(log_file->file, &stat, MYF(0));
+
+      /* If the binlog size does not match the requested dump position, then
+       * request the dump from position 0 and verify all events, we need to
+       * verify events because the mule log might be used for serving during
+       * anytime.  We must be sure that they are correct.
+       */
+      if (strcmp(last_binlog_name+dirname_length(last_binlog_name),
+                 mi->master_log_name) < 0) {
+        char llbuf1[22], llbuf2[22];
+
+        /* This situation can only happen in two situations:
+         *  . the new master is using mirror binlogs to failover
+         *  . mirror binlog is turnned off, while I/O thread is running
+         *
+         * We verify the last binlog we mirrored and mirror all binlogs after
+         * that.  This leaves the small possibility that the old binlog not
+         * verified might be incorrect.
+         */
+        mule = new ReplMule(thd, mi,
+                            ((stat.st_size == BIN_LOG_HEADER_SIZE) ?
+                             MULE_BEHIND : MULE_VERIFY),
+                            last_binlog_name+dirname_length(last_binlog_name),
+                            stat.st_size, binlog_indexname, binlog,
+                            sync_mirror_binlog_period);
+
+        sql_print_information(
+            "Mule file(%s) size(%s) is behind of (%s, %s), need verify.",
+            last_binlog_name+dirname_length(last_binlog_name),
+            llstr(stat.st_size, llbuf1),
+            mi->master_log_name, llstr(mi->master_log_pos, llbuf2));
+      } else if (stat.st_size == mi->master_log_pos) {
+        mule = new ReplMule(thd, mi, RELAY_MATCH_MULE,
+                            mi->master_log_name, stat.st_size,
+                            binlog_indexname, binlog,
+                            sync_mirror_binlog_period);
+      } else if (stat.st_size > BIN_LOG_HEADER_SIZE) {
+        mule = new ReplMule(thd, mi, MULE_VERIFY,
+                            mi->master_log_name, stat.st_size,
+                            binlog_indexname, binlog,
+                            sync_mirror_binlog_period);
+      } else if (stat.st_size == BIN_LOG_HEADER_SIZE) {
+        mule = new ReplMule(thd, mi, MULE_BEHIND,
+                            mi->master_log_name, BIN_LOG_HEADER_SIZE,
+                            binlog_indexname, binlog,
+                            sync_mirror_binlog_period);
+      } else {
+        char llbuf[22];
+        valid_file_size = false;
+        sql_print_error("Mule binlog file(%s) invalid size: %s",
+                        last_binlog_name, llstr(stat.st_size, llbuf));
+      }
+
+      if (valid_file_size) {
+        if (mule == NULL) {
+          sql_print_error("Mule malloc operation failed.");
+        } else if (mule->status_ == MULE_ERROR) {
+          /* If mule creation fails, indicate the error. */
+          delete mule;
+          mule = NULL;
+        }
+      }
+    }
+  }
+
+  /* Clear the mule binlog mode if there are errors. */
+  if (mule == NULL) {
+    binlog->clear_mule_mode();
+    binlog->close_index_file();
+  }
+
+  /* Unlock binlog index */
+  binlog->unlock_index();
+
+  DBUG_RETURN(mule);
+}
diff -ruN base/sql/repl_mule.h mysql40gpl/sql/repl_mule.h
--- base/sql/repl_mule.h	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/sql/repl_mule.h	2007-04-21 11:19:06.000000000 -0700
@@ -0,0 +1,159 @@
+/* Copyright (C) 2007 Google Inc.
+
+This program is free software; you can redistribute it and/or
+modify it under the terms of the GNU General Public License
+as published by the Free Software Foundation; either version 2
+of the License, or (at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program; if not, write to the Free Software
+Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+*/
+
+#ifndef SQL_REPL_MULE_H__
+#define SQL_REPL_MULE_H__
+
+/* Replication Mule is the class that is responsible for generate
+ * an exact copy of binlog from a master database.  We call this feature
+ * mirror binlog and it can be enabled by setting rpl_mirror_binlog.  We
+ * need to keep the same copy for the following purposes:
+ *  . The replica can serve the binlog transparently as if they are the
+ *    master database.  This can relieve master connection overhead.
+ *  . During failover, the replica can become the new master and serve
+ *    old binlogs transparently.
+ * (The Mule name comes from the popular P2P software eMule.)
+ *
+ * Internally, we call the mirrored binlog mule log.
+ */
+
+class THD;
+class Rotate_log_event;
+typedef struct st_master_info MASTER_INFO;
+
+class ReplMule {
+ public:
+  /* Because I/O thread also creates relay-binlog, instead of an exact
+   * copy of the original master's binlog, we have two resources that
+   * might get out of sync.
+   * This enum indicates the status:
+   *  MULE_BEHIND - the mule's header is behind:
+   *                (mule is activated for the first time)
+   *  RELAY_MATCH_MULE - mule matches relay-log
+   *  MULE_VERIFY - mule has more events than the relay-log and needs
+   *                verification; we can not verify based on relay-log
+   *                events because events might get changed a little
+   *  MULE_VERIFY_RELAY_BEHIND - mule has more events than the relay-log
+   *                             and relay-log needs to write events
+   *  MULE_ERROR - mule detects errors in event duplicate
+   */
+  enum RelayStatus {
+    MULE_BEHIND = 1,
+    RELAY_MATCH_MULE = 2,
+    MULE_VERIFY = 3,
+    MULE_VERIFY_RELAY_BEHIND = 4,
+    MULE_ERROR = 5,
+  };
+
+  enum WriteStatus {
+    WRITE_RELAY = 1,
+    WRITE_ERROR = 2,
+    SKIP_RELAY = 3,
+  };
+
+ private:
+  THD         *io_thd_;
+  MASTER_INFO *mi_;
+
+  /*
+   * I/O thread will write both mule log for mirror binlog and relay log
+   * for SQL thread.
+   * The variable indicates whether the two are in sync.
+   */
+  RelayStatus  status_;
+
+  /* The starting event writing filename and position. */
+  char         dump_filename_[FN_REFLEN];
+  my_off_t     dump_position_;
+
+  /* The current being verified filename if mirror binlog is behind and is
+   * of different file as the I/O thread.
+   */
+  char         verify_filename_[FN_REFLEN];
+
+  /* During the initial setup, the last mule log's file size. */
+  my_off_t     file_size_;
+
+  /* Internally, we call the mirrored binlog mule log. */
+  MYSQL_LOG   *mule_log_;
+
+  /* Sync the mule log to disk for every #N events. */
+  ulong        mule_log_sync_period_;
+  ulong        mule_log_event_counter_;
+
+  /* mule log's index filename */
+  char         mule_indexname_[FN_REFLEN];
+
+  ReplMule(THD* thd, MASTER_INFO *mi, RelayStatus status,
+           const char *curr_log_filename,
+           my_off_t file_size, const char *binlog_indexname,
+           MYSQL_LOG *binlog, ulong sync_period);
+
+  /*
+   * Queue the event into the current mule log.  If it is a rotation
+   * event, generate a new mule log file.
+   * Indicate whether the event is skipped because it is an fake event.
+   * A fake event is generated by the master to indicate the current
+   * reading position.
+   */
+  int queueEvent(const char* buf, ulong event_len, bool *skip_event);
+
+  /* Append the event to the current mule log. */
+  int appendEvent(const char* buf, ulong event_len);
+
+  bool IsFakeRotation(const char* buf, ulong event_len);
+  bool IsFakeRotation(const Rotate_log_event& rev);
+
+  /* Seek to the specified position in the current open mule log. */
+  void seekToPosition(my_off_t pos);
+
+ public:
+
+  ~ReplMule();
+
+  /* Dump the event into mule binlog.
+   * Input:
+   *  buf       (IN) - replication event buffer
+   *  event_len (IN) - the event length
+   *
+   * Return:
+   *  . WRITE_RELAY: the relay log needs to writing the event
+   *  . WRITE_ERROR: the writing encountered errors
+   *  . SKIP_RELAY: the relay log should skip the event
+   */
+  WriteStatus writeEvent(const char* buf, ulong event_len);
+
+  /* createReplicationMule:
+   *  Create a mule that relays master's replication binlog and
+   *  generate an exact same copy on the local filesystem.
+   *
+   * Input:
+   *  thd (IN)  - replication I/O thread
+   *  mi  (IN)  - master info struct for I/O thread's progress
+   *  binlog_indexname (IN) - filename for binlog's index
+   *  binlog (IN) - replication binlog
+   *
+   * Return:
+   *  . a replication mule if success
+   *  . NULL if there are any errors
+   */
+  static ReplMule *createReplicationMule(THD* thd, MASTER_INFO *mi,
+                                         const char *binlog_indexname,
+                                         MYSQL_LOG *binlog);
+};
+
+#endif   /* SQL_REPL_MULE_H__ */
diff -ruN base/sql/repl_semi_sync.cc mysql40gpl/sql/repl_semi_sync.cc
--- base/sql/repl_semi_sync.cc	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/sql/repl_semi_sync.cc	2007-04-21 11:18:54.000000000 -0700
@@ -0,0 +1,1188 @@
+/* Copyright (C) 2007 Google Inc.
+
+This program is free software; you can redistribute it and/or
+modify it under the terms of the GNU General Public License
+as published by the Free Software Foundation; either version 2
+of the License, or (at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program; if not, write to the Free Software
+Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+*/
+
+/*
+ * The file defines two classes that implement semi-sync replication based on
+ * MySQL's asynchronous replication:
+ *  . ReplSemiSync::ActiveTranx: manage all active transaction nodes
+ *  . ReplSemiSync: the code flow for semi-sync replication
+ * 
+ * By default in semi-sync replication, a transaction waits for 10ms to see
+ * whether the slave has got the transaction.  10ms is based on the assumption
+ * that roundtrip time in one datacenter is less than 1ms and machine
+ * configurations should make the master database and the semi-sync slave
+ * database colocate in one date center.  Otherwise, "rpl_semi_sync_timeout"
+ * should be used to adjust timeout value.
+ *
+ */
+
+#include "mysql_priv.h"
+#include <my_dir.h>
+#include "repl_semi_sync.h"
+
+#define TIME_THOUSAND 1000
+#define TIME_MILLION  1000000
+#define TIME_BILLION  1000000000
+
+const unsigned char ReplSemiSync::kPacketMagicNum = 0xef;
+const unsigned char ReplSemiSync::kPacketFlagSync = 0x01;
+
+const ulong ReplSemiSync::kTraceGeneral  = 0x0001;
+const ulong ReplSemiSync::kTraceDetail   = 0x0010;
+const ulong ReplSemiSync::kTraceNetWait  = 0x0020;
+const ulong ReplSemiSync::kTraceFunction = 0x0040;
+
+const char  ReplSemiSync::kSyncHeader[3] =
+  {0, ReplSemiSync::kPacketMagicNum, 0};
+
+static int getWaitTime(const struct timeval& start_tv);
+
+/*******************************************************************************
+ *
+ * <ReplSemiSync::ActiveTranx> class : manage all active transaction nodes
+ *
+ ******************************************************************************/
+
+ReplSemiSync::ActiveTranx::ActiveTranx(int max_connections,
+                                       pthread_mutex_t *lock,
+                                       ulong *trace_level)
+  : num_transactions_(max_connections),
+    num_entries_(max_connections << 1),
+    lock_(lock), trace_level_(trace_level) {
+  /* Allocate the memory for the array */
+  node_array_ = new TranxNode[num_transactions_];
+  for (int idx = 0; idx < num_transactions_; ++idx) {
+    node_array_[idx].log_pos_     = 0;
+    node_array_[idx].hash_next_   = NULL;
+    node_array_[idx].next_        = node_array_ + idx + 1;
+
+    node_array_[idx].log_name_    = new char[FN_REFLEN];
+    node_array_[idx].log_name_[0] = '\x0';
+  }
+  node_array_[num_transactions_-1].next_ = NULL;
+
+  /* All nodes in the array go to the pool initially. */
+  free_pool_ = node_array_;
+
+  /* No transactions are in the list initially. */
+  trx_front_ = NULL;
+  trx_rear_  = NULL;
+
+  /* Create the hash table to find a transaction's ending event. */
+  trx_htb_ = new TranxNode *[num_entries_];
+  for (int idx = 0; idx < num_entries_; ++idx)
+    trx_htb_[idx] = NULL;
+
+  sql_print_information("Semi-sync replication initialized for %d "
+                        "transactions.", num_transactions_);
+}
+
+ReplSemiSync::ActiveTranx::~ActiveTranx() {
+  for (int idx = 0; idx < num_transactions_; ++idx) {
+    delete node_array_[idx].log_name_;
+    node_array_[idx].log_name_ = NULL;
+  }
+
+  delete [] node_array_;
+  delete [] trx_htb_;
+
+  node_array_       = NULL;
+  trx_htb_          = NULL;
+  num_transactions_ = 0;
+  num_entries_      = 0;
+}
+
+void ReplSemiSync::ActiveTranx::assert_lock_owner() {
+  safe_mutex_assert_owner(lock_);
+}
+
+void ReplSemiSync::ActiveTranx::function_enter(const char *func_name) {
+  if ((*trace_level_) & kTraceFunction)
+    sql_print_information("---> %s enter", func_name);
+}
+
+int ReplSemiSync::ActiveTranx::function_exit(const char *func_name,
+                                             int exit_code) {
+  if ((*trace_level_) & kTraceFunction)
+    sql_print_information("<--- %s exit (%d)", func_name, exit_code);
+  return exit_code;
+}
+
+uint ReplSemiSync::ActiveTranx::calc_hash(const byte *key, uint length) {
+  uint nr = 1, nr2 = 4;
+
+  /* The hash implementation comes from calc_hashnr() in mysys/hash.c. */
+  while (length--) {
+    nr  ^= (((nr & 63)+nr2)*((uint) (uchar) *key++))+ (nr << 8);
+    nr2 += 3;
+  }
+  return((uint) nr);
+}
+
+uint ReplSemiSync::ActiveTranx::get_hash_value(const char *log_file_name,
+                                               my_off_t    log_file_pos) {
+  uint hash1 = calc_hash((const byte *)log_file_name,
+                         strlen(log_file_name));
+  uint hash2 = calc_hash((const byte *)(&log_file_pos),
+                         sizeof(log_file_pos));
+
+  return (hash1 + hash2) % num_entries_;
+}
+
+ReplSemiSync::ActiveTranx::TranxNode*
+ReplSemiSync::ActiveTranx::alloc_tranx_node() {
+  TranxNode *ptr = free_pool_;
+
+  if (free_pool_) {
+    free_pool_ = free_pool_->next_;
+    ptr->next_ = NULL;
+    ptr->hash_next_ = NULL;
+  }
+
+  return ptr;
+}
+
+int ReplSemiSync::ActiveTranx::compare(
+      const char *log_file_name1, my_off_t log_file_pos1,
+      const char *log_file_name2, my_off_t log_file_pos2) {
+  int cmp = strcmp(log_file_name1, log_file_name2);
+
+  if (cmp != 0)
+    return cmp;
+
+  if (log_file_pos1 > log_file_pos2)
+    return 1;
+  else if (log_file_pos1 < log_file_pos2)
+    return -1;
+  return 0;
+}
+
+int ReplSemiSync::ActiveTranx::insert_tranx_node(
+        const char *log_file_name, my_off_t log_file_pos) {
+  const char *kWho = "ActiveTranx:insert_tranx_node";
+  TranxNode  *ins_node;
+  int         result = 0;
+  uint        hash_val;
+
+  function_enter(kWho);
+  assert_lock_owner();
+
+  ins_node = alloc_tranx_node();
+  if (!ins_node) {
+    sql_print_error("%s: transaction node allocation failed for: (%s, %lu)",
+                    kWho, log_file_name, (ulong)log_file_pos);
+    result = -1;
+    goto l_end;
+  }
+
+  /* insert the binlog position in the active transaction list. */
+  strcpy(ins_node->log_name_, log_file_name);
+  ins_node->log_pos_ = log_file_pos;
+
+  if (!trx_front_) {
+    /* The list is empty. */
+    trx_front_ = trx_rear_ = ins_node;
+  } else {
+    int cmp = compare(ins_node, trx_rear_);
+    if (cmp > 0) {
+      /* Compare with the tail first.  If the transaction happens later in
+       * binlog, then make it the new tail.
+       */
+      trx_rear_->next_ = ins_node;
+      trx_rear_        = ins_node;
+    } else {
+      /* Otherwise, it is an error because the transaction should hold the
+       * mysql_bin_log.LOCK_log when appending events.
+       */
+      sql_print_error("%s: binlog write out-of-order, tail (%s, %llu), "
+                      "new node (%s, %llu)",
+                      trx_rear_->log_name_, (ulong)trx_rear_->log_pos_,
+                      ins_node->log_name_, (ulong)ins_node->log_pos_);
+      result = -1;
+      goto l_end;
+    }
+  }
+
+  hash_val = get_hash_value(ins_node->log_name_, ins_node->log_pos_);
+  ins_node->hash_next_ = trx_htb_[hash_val];
+  trx_htb_[hash_val]   = ins_node;
+
+  if ((*trace_level_) & kTraceDetail)
+    sql_print_information("%s: insert (%s, %lu) in entry(%u)", kWho,
+                          ins_node->log_name_, (ulong)ins_node->log_pos_,
+                          hash_val);
+
+ l_end:
+  return function_exit(kWho, result);
+}
+
+bool ReplSemiSync::ActiveTranx::is_tranx_end_pos(const char *log_file_name,
+                                                 my_off_t    log_file_pos) {
+  const char *kWho = "ReplSemiSync::is_tranx_end_pos";
+  function_enter(kWho);
+
+  uint hash_val = get_hash_value(log_file_name, log_file_pos);
+  TranxNode *entry = trx_htb_[hash_val];
+
+  assert_lock_owner();
+  while (entry != NULL) {
+    if (compare(entry, log_file_name, log_file_pos) == 0) {
+      break;
+    }
+    entry = entry->hash_next_;
+  }
+
+  if ((*trace_level_) & kTraceDetail)
+    sql_print_information("%s: probe (%s, %lu) in entry(%u)", kWho,
+                          log_file_name, (ulong)log_file_pos, hash_val);
+
+  function_exit(kWho, (entry != NULL));
+  return (entry != NULL);
+}
+
+int ReplSemiSync::ActiveTranx::clear_active_tranx_nodes(
+        const char *log_file_name, my_off_t log_file_pos) {
+  const char *kWho = "ActiveTranx::::clear_active_tranx_nodes";
+  TranxNode *new_front;
+
+  function_enter(kWho);
+
+  /* Must hold the lock during the call. */
+  assert_lock_owner();
+
+  if (log_file_name != NULL) {
+    new_front = trx_front_;
+
+    while (new_front) {
+      if (compare(new_front, log_file_name, log_file_pos) > 0)
+        break;
+      new_front = new_front->next_;
+    }
+  } else {
+    /* If log_file_name is NULL, clear everything. */
+    new_front = NULL;
+  }
+
+  if (new_front == NULL) {
+    /* No active transaction nodes after the call. */
+
+    /* Clear the hash table. */
+    memset(trx_htb_, 0, num_entries_ * sizeof(TranxNode *));
+
+    /* Clear the active transaction list. */
+    if (trx_front_ != NULL) {
+      trx_rear_->next_ = free_pool_;
+      free_pool_ = trx_front_;
+      trx_front_ = NULL;
+      trx_rear_  = NULL;
+    }
+
+    if ((*trace_level_) & kTraceDetail)
+      sql_print_information("%s: free all nodes back to free list", kWho);
+  } else if (new_front != trx_front_) {
+    TranxNode *curr_node, *next_node;
+
+    /* Delete all transaction nodes before the confirmation point. */
+    int n_frees = 0;
+    curr_node = trx_front_;
+    while (curr_node != new_front) {
+      next_node = curr_node->next_;
+
+      /* Put the node in the memory pool. */
+      curr_node->next_ = free_pool_;
+      free_pool_       = curr_node;
+      n_frees++;
+
+      /* Remove the node from the hash table. */
+      uint hash_val = get_hash_value(curr_node->log_name_, curr_node->log_pos_);
+      TranxNode **hash_ptr = &(trx_htb_[hash_val]);
+      while ((*hash_ptr) != NULL) {
+        if ((*hash_ptr) == curr_node) {
+          (*hash_ptr) = curr_node->hash_next_;
+          break;
+        }
+        hash_ptr = &((*hash_ptr)->hash_next_);
+      }
+
+      curr_node = next_node;
+    }
+
+    trx_front_ = new_front;
+
+    if ((*trace_level_) & kTraceDetail)
+      sql_print_information("%s: free %d nodes back until pos (%s, %llu)",
+                            kWho, n_frees,
+                            trx_front_->log_name_, (ulong)trx_front_->log_pos_);
+  }
+
+  return function_exit(kWho, 0);
+}
+
+
+/*******************************************************************************
+ *
+ * <ReplSemiSync> class: the basic code layer for sync-replication.
+ *
+ * The most important functions during semi-syn replication listed:
+ *
+ * Master:
+ *  . reportReplyBinlog(): called by the binlog dump thread when it receives
+ *                         the slave's status information.
+ *  . updateSyncHeader():  based on transaction waiting information, decide
+ *                         whether to request the slave to reply.
+ *  . readSlaveReply():    read the slave's sync reply and decide how to
+ *                         resume the waiting transaction threads.
+ *  . writeTraxInBinlog(): called by the transaction thread when it finishes
+ *                         writing all transaction events in binlog.
+ *  . commitTrx():         transaction thread wait for the slave reply.
+ * 
+ * Slave:
+ *  . slaveReadSyncHeader(): read the semi-sync header from the master, get the
+ *                         sync status and get the payload for events.
+ *  . slaveReply():        reply to the master about the replication progress.
+ *
+ ******************************************************************************/
+
+ReplSemiSync::ReplSemiSync()
+  : active_tranxs_(NULL),
+    reply_file_name_inited_(false),
+    reply_file_pos_(0L),
+    wait_file_name_inited_(false),
+    wait_file_pos_(0),
+    master_enabled_(false),
+    slave_enabled_(false),
+    wait_timeout_(0L),
+    trace_level_(0L),
+    state_(0),
+    enabled_transactions_(0),
+    disabled_transactions_(0),
+    timefunc_fails_(0),
+    switched_off_times_(0),
+    wait_sessions_(0),
+    wait_backtraverse_(0),
+    total_trx_wait_num_(0),
+    total_trx_wait_time_(0),
+    total_net_wait_num_(0),
+    total_net_wait_time_(0),
+    max_transactions_(0L) {
+  strcpy(reply_file_name_, "");
+  strcpy(wait_file_name_, "");
+}
+
+int ReplSemiSync::initObject() {
+  int result;
+  const char *kWho = "ReplSemiSync::initObject";
+
+  /* References to the parameter works after set_options(). */
+  setSlaveEnabled(rpl_semi_sync_slave_enabled);
+  setWaitTimeout(rpl_semi_sync_timeout);
+  setTraceLevel(rpl_semi_sync_trace_level);
+  max_transactions_ = (int)max_connections;
+
+  /* Mutex initialization can only be done after MY_INIT(). */
+  pthread_mutex_init(&LOCK_binlog_, MY_MUTEX_INIT_FAST);
+  pthread_cond_init(&COND_binlog_send_, NULL);
+
+  if (rpl_semi_sync_enabled)
+    result = enableMaster();
+  else
+    result = disableMaster();
+
+  return result;
+}
+
+int ReplSemiSync::enableMaster() {
+  int result = 0;
+
+  /* Must have the lock when we do enable of disable. */
+  lock();
+
+  if (!getMasterEnabled()) {
+    DBUG_ASSERT(active_tranxs_ == NULL);
+    active_tranxs_ = new ReplSemiSync::ActiveTranx(max_connections,
+                                                   &LOCK_binlog_,
+                                                   &trace_level_);
+    if (active_tranxs_ != NULL) {
+      reply_file_name_inited_  = false;
+      wait_file_name_inited_   = false;
+      commit_file_name_inited_ = false;
+
+      set_master_enabled(true);
+    } else {
+      sql_print_error("Semi-sync replication not able to allocate memory.");
+      result = -1;
+    }
+  }
+
+  unlock();
+
+  return result;
+}
+
+int ReplSemiSync::disableMaster() {
+  /* Must have the lock when we do enable of disable. */
+  lock();
+
+  if (getMasterEnabled()) {
+    /* Switch off the semi-sync first so that waiting transaction will be
+     * waken up.
+     */
+    switch_off();
+
+    DBUG_ASSERT(active_tranxs_ != NULL);
+    delete active_tranxs_;
+    active_tranxs_ = NULL;
+
+    reply_file_name_inited_ = false;
+    wait_file_name_inited_  = false;
+    commit_file_name_inited_ = false;
+
+    set_master_enabled(false);
+  }
+
+  unlock();
+
+  return 0;
+}
+
+ReplSemiSync::~ReplSemiSync() {
+  pthread_mutex_destroy(&LOCK_binlog_);
+  pthread_cond_destroy(&COND_binlog_send_);
+
+  delete active_tranxs_;
+}
+
+void ReplSemiSync::lock() {
+  pthread_mutex_lock(&LOCK_binlog_);
+}
+
+void ReplSemiSync::unlock() {
+  pthread_mutex_unlock(&LOCK_binlog_);
+}
+
+void ReplSemiSync::cond_broadcast() {
+  pthread_cond_broadcast(&COND_binlog_send_);
+}
+
+int ReplSemiSync::cond_timewait(struct timespec *wait_time) {
+  const char *kWho = "ReplSemiSync::cond_timewait()";
+  int wait_res;
+
+  function_enter(kWho);
+  wait_res = pthread_cond_timedwait(&COND_binlog_send_,
+                                    &LOCK_binlog_, wait_time);
+  return function_exit(kWho, wait_res);
+}
+
+void ReplSemiSync::function_enter(const char *func_name) {
+  if (trace_level_ & kTraceFunction)
+    sql_print_information("---> %s enter", func_name);
+}
+
+int ReplSemiSync::function_exit(const char *func_name, int exit_code) {
+  if (trace_level_ & kTraceFunction)
+    sql_print_information("<--- %s exit (%d)", func_name, exit_code);
+  return exit_code;
+}
+
+int ReplSemiSync::reportReplyBinlog(THD      *thd,
+                                    char     *log_file_name,
+                                    my_off_t  log_file_pos) {
+  const char *kWho = "ReplSemiSync::reportReplyBinlog";
+  int   cmp;
+  bool  can_release_threads = false;
+  bool  need_copy_send_pos = true;
+
+  /* If semi-sync replication is not enabled, or this thd is
+   * sending binlog to a slave where we do not need synchronous replication,
+   * then return immediately */
+  if (!(getMasterEnabled() && thd->semi_sync_slave)) {
+    return 0;
+  }
+
+  function_enter(kWho);
+
+  lock();
+
+  /* This is the real check inside the mutex. */
+  if (!getMasterEnabled())
+    goto l_end;
+
+  if (!is_on()) {
+    /* We check to see whether we can switch semi-sync ON. */
+    try_switch_on(thd->server_id, log_file_name, log_file_pos);
+  }
+
+  /* The position should increase monotonically, if there is only one
+   * thread sending the binlog to the slave.
+   * In reality, to improve the transaction availability, we allow multiple
+   * sync replication slaves.  So, if any one of them get the transaction,
+   * the transaction session in the primary can move forward.
+   */
+  if (reply_file_name_inited_) {
+    cmp = ActiveTranx::compare(log_file_name, log_file_pos,
+                               reply_file_name_, reply_file_pos_);
+
+    /* If the requested position is behind the sending binlog position,
+     * would not adjust sending binlog position.
+     * We based on the assumption that there are multiple semi-sync slave,
+     * and at least one of them shou/ld be up to date.
+     * If all semi-sync slaves are behind, at least initially, the primary
+     * can find the situation after the waiting timeout.  After that, some
+     * slaves should catch up quickly.
+     */
+    if (cmp < 0) {
+      /* If the position is behind, do not copy it. */
+      need_copy_send_pos = false;
+    }
+  }
+
+  if (need_copy_send_pos) {
+    strcpy(reply_file_name_, log_file_name);
+    reply_file_pos_ = log_file_pos;
+    reply_file_name_inited_ = true;
+
+    /* Remove all active transaction nodes before this point. */
+    DBUG_ASSERT(active_tranxs_ != NULL);
+    active_tranxs_->clear_active_tranx_nodes(log_file_name, log_file_pos);
+
+    if (trace_level_ & kTraceDetail)
+      sql_print_information("%s: Got reply at (%s, %lu)", kWho,
+                            log_file_name, (ulong)log_file_pos);
+  }
+
+  if (wait_sessions_ > 0) {
+    /* Let us check if some of the waiting threads doing a trx
+     * commit can now proceed.
+     */
+    cmp = ActiveTranx::compare(reply_file_name_, reply_file_pos_,
+                               wait_file_name_, wait_file_pos_);
+    if (cmp >= 0) {
+      /* Yes, at least one waiting thread can now proceed:
+       * let us release all waiting threads with a broadcast
+       */
+      can_release_threads = true;
+      wait_file_name_inited_ = false;
+    }
+  }
+
+ l_end:
+  unlock();
+
+  if (can_release_threads) {
+    if (trace_level_ & kTraceDetail)
+      sql_print_information("%s: signal all waiting threads.");
+
+    cond_broadcast();
+  }
+
+  return function_exit(kWho, 0);
+}
+
+int ReplSemiSync::commitTrx(const char* trx_wait_binlog_name,
+                            my_off_t    trx_wait_binlog_pos) {
+  const char *kWho = "ReplSemiSync::commitTrx";
+
+  function_enter(kWho);
+
+  if (getMasterEnabled() && trx_wait_binlog_name) {
+    struct timeval start_tv;
+    struct timespec abstime;
+    int wait_result, start_time_err;
+
+    start_time_err = gettimeofday(&start_tv, 0);
+
+    /* Acquire the mutex. */
+    lock();
+
+    /* This is the real check inside the mutex. */
+    if (!getMasterEnabled())
+      goto l_end;
+
+    if (trace_level_ & kTraceDetail) {
+      sql_print_information("%s: wait pos (%s, %lu), repl(%d)\n", kWho,
+                            trx_wait_binlog_name, (ulong)trx_wait_binlog_pos,
+                            (int)is_on());
+    }
+
+    while (is_on()) {
+      int cmp = ActiveTranx::compare(reply_file_name_, reply_file_pos_,
+                                     trx_wait_binlog_name, trx_wait_binlog_pos);
+      if (cmp >= 0) {
+        /* We have already sent the relevant binlog to the slave: no need to
+         * wait here.
+         */
+        if (trace_level_ & kTraceDetail)
+          sql_print_information("%s: Binlog reply is ahead (%s, %lu),",
+                                kWho, reply_file_name_, (ulong)reply_file_pos_);
+        break;
+      }
+
+      /* Let us update the info about the minimum binlog position of waiting
+       * threads.
+       */
+      if (wait_file_name_inited_) {
+        cmp = ActiveTranx::compare(trx_wait_binlog_name, trx_wait_binlog_pos,
+                                   wait_file_name_, wait_file_pos_);
+        if (cmp <= 0) {
+          /* This thd has a lower position, let's update the minimum info. */
+          strcpy(wait_file_name_, trx_wait_binlog_name);
+          wait_file_pos_ = trx_wait_binlog_pos;
+
+          wait_backtraverse_++;
+          if (trace_level_ & kTraceDetail)
+            sql_print_information("%s: move back wait position (%s, %lu),",
+                                  kWho, wait_file_name_, (ulong)wait_file_pos_);
+        }
+      } else {
+        strcpy(wait_file_name_, trx_wait_binlog_name);
+        wait_file_pos_ = trx_wait_binlog_pos;
+        wait_file_name_inited_ = true;
+
+        if (trace_level_ & kTraceDetail)
+          sql_print_information("%s: init wait position (%s, %lu),",
+                                kWho, wait_file_name_, (ulong)wait_file_pos_);
+      }
+
+      if (start_time_err == 0) {
+        int diff_usecs = start_tv.tv_usec + wait_timeout_ * TIME_THOUSAND;
+
+        /* Calcuate the waiting period. */
+        abstime.tv_sec = start_tv.tv_sec;
+        if (diff_usecs < TIME_MILLION) {
+          abstime.tv_nsec = diff_usecs * TIME_THOUSAND;
+        } else {
+          while (diff_usecs >= TIME_MILLION) {
+            abstime.tv_sec++;
+            diff_usecs -= TIME_MILLION;
+          }
+          abstime.tv_nsec = diff_usecs * TIME_THOUSAND;
+        }
+
+        /* In semi-synchronous replication, we wait until the binlog-dump
+         * thread has received the reply on the relevant binlog segment from the
+         * replication slave.
+         *
+         * Let us suspend this thread to wait on the condition;
+         * when replication has progressed far enough, we will release
+         * these waiting threads.
+         */
+        wait_sessions_++;
+
+        if (trace_level_ & kTraceDetail)
+          sql_print_information("%s: wait %lu ms for binlog sent (%s, %lu)",
+                                kWho, wait_timeout_,
+                                wait_file_name_, (ulong)wait_file_pos_);
+
+        DBUG_PRINT("info", ("Waiting for binlog to be sent"));
+        wait_result = cond_timewait(&abstime);
+        wait_sessions_--;
+
+        if (wait_result != 0) {
+          if (trace_level_ & kTraceGeneral) {
+            /* This is a real wait timeout. */
+            sql_print_error("Replication semi-sync not sent binlog to "
+                            "slave within the timeout %lu ms - OFF.",
+                            wait_timeout_);
+            sql_print_error("          semi-sync up to file %s, position %lu",
+                            reply_file_name_, (ulong)reply_file_pos_);
+            sql_print_error("          transaction needs file %s, position %lu",
+                            trx_wait_binlog_name, (uint)trx_wait_binlog_pos);
+          }
+          total_wait_timeouts_++;
+
+          /* switch semi-sync off */
+          switch_off();
+        } else {
+          int wait_time;
+
+          wait_time = getWaitTime(start_tv);
+          if (wait_time < 0) {
+            if (trace_level_ & kTraceGeneral) {
+              /* This is a time/gettimeofday function call error. */
+              sql_print_error("Replication semi-sync gettimeofday fail1 at "
+                              "wait position (%s, %d)",
+                              trx_wait_binlog_name, (uint)trx_wait_binlog_pos);
+            }
+            timefunc_fails_++;
+          } else {
+            total_trx_wait_num_++;
+            total_trx_wait_time_ += wait_time;
+          }
+        }
+      } else {
+        if (trace_level_ & kTraceGeneral) {
+          /* This is a gettimeofday function call error. */
+          sql_print_error("Replication semi-sync gettimeofday fail2 at "
+                          "wait position (%s, %d)",
+                          trx_wait_binlog_name, (uint)trx_wait_binlog_pos);
+        }
+        timefunc_fails_++;
+
+        /* switch semi-sync off */
+        switch_off();
+      }
+    }
+
+  l_end:
+    /* Update the status counter. */
+    if (is_on())
+      enabled_transactions_++;
+    else
+      disabled_transactions_++;
+
+    unlock();
+  }
+
+  return function_exit(kWho, 0);
+}
+
+/* Indicate that semi-sync replication is OFF now.
+ * 
+ * What should we do when it is disabled?  The problem is that we want
+ * the semi-sync replication enabled again when the slave catches up
+ * later.  But, it is not that easy to detect that the slave has caught
+ * up.  This is caused by the fact that MySQL's replication protocol is
+ * asynchronous, meaning that if the master does not use the semi-sync
+ * protocol, the slave would not send anything to the master.
+ * Still, if the master is sending (N+1)-th event, we assume that it is
+ * an indicator that the slave has received N-th event and earlier ones.
+ *
+ * If semi-sync is disabled, all transactions still update the wait
+ * position with the last position in binlog.  But no transactions will
+ * wait for confirmations and the active transaction list would not be
+ * maintained.  In binlog dump thread, updateSyncHeader() checks whether
+ * the current sending event catches up with last wait position.  If it
+ * does match, semi-sync will be switched on again.
+ */
+int ReplSemiSync::switch_off() {
+  const char *kWho = "ReplSemiSync::switch_off";
+  int result;
+
+  function_enter(kWho);
+  state_ = false;
+
+  /* Clear the active transaction list. */
+  DBUG_ASSERT(active_tranxs_ != NULL);
+  result = active_tranxs_->clear_active_tranx_nodes(NULL, 0);
+
+  switched_off_times_++;
+  wait_file_name_inited_ = false;
+  cond_broadcast();                            /* wake up all waiting threads */
+
+  return function_exit(kWho, result);
+}
+
+int ReplSemiSync::try_switch_on(int server_id, const char *log_file_name,
+                                my_off_t log_file_pos) {
+  const char *kWho = "ReplSemiSync::try_switch_on";
+  bool semi_sync_on = false;
+
+  function_enter(kWho);
+
+  /* If the current sending event's position is larger than or equal to the
+   * 'largest' commit transaction binlog position, the slave is already
+   * catching up now and we can switch semi-sync on here.
+   * If commit_file_name_inited_ indicates there are no recent transactions,
+   * we can enable semi-sync immediately.
+   */
+  if (commit_file_name_inited_) {
+    int cmp = ActiveTranx::compare(log_file_name, log_file_pos,
+                                   commit_file_name_, commit_file_pos_);
+    semi_sync_on = (cmp >= 0);
+  } else {
+    semi_sync_on = true;
+  }
+
+  if (semi_sync_on) {
+    /* Switch semi-sync replication on. */
+    state_ = true;
+
+    if (trace_level_ & kTraceGeneral)
+      sql_print_information("%s switch semi-sync ON with server(%d) "
+                            "at (%s, %lu), repl(%d)",
+                            kWho, server_id, log_file_name,
+                            (ulong)log_file_pos, (int)is_on());
+  }
+
+  return function_exit(kWho, 0);
+}
+
+void ReplSemiSync::reserveSyncHeader(
+         String *packet, THD *thd,
+         char *packet_buffer, ulong packet_buffer_size) {
+  const char *kWho = "ReplSemiSync::reserveSyncHeader";
+  function_enter(kWho);
+
+  packet->set(packet_buffer, (uint32)packet_buffer_size);
+  packet->length(0);
+  if (!thd->semi_sync_slave) {
+    packet->append("\0", 1);
+  } else {
+    /* Set the magic number and the sync status.  By default, no sync
+     * is required.
+     */
+    packet->append(kSyncHeader, sizeof(kSyncHeader));
+  }
+  function_exit(kWho, 0);
+}
+
+int ReplSemiSync::updateSyncHeader(String         *packet,
+                                   const char     *log_file_name,
+                                   my_off_t        log_file_pos,
+                                   THD            *thd,
+                                   bool           *sync,
+                                   Log_event_type *event_type) {
+  const char *kWho = "ReplSemiSync::updateSyncHeader";
+  int  cmp = 0;
+
+  /* If the semi-sync master is not enabled, or the slave is not a semi-sync
+   * target, do not request replies from the slave.
+   */
+  if (!getMasterEnabled() || !thd->semi_sync_slave) {
+    *sync       = false;
+    *event_type = (Log_event_type)((*packet)[LOG_EVENT_OFFSET+1]);
+    return 0;
+  }
+
+  function_enter(kWho);
+
+  lock();
+
+  /* This is the real check inside the mutex. */
+  if (!getMasterEnabled()) {
+    *sync = false;
+    goto l_end;
+  }
+
+  if (is_on()) {                                           /* semi-sync is ON */
+    *sync = false;               /* No sync unless a transaction is involved. */
+
+    if (reply_file_name_inited_) {
+      cmp = ActiveTranx::compare(log_file_name, log_file_pos,
+                                 reply_file_name_, reply_file_pos_);
+      if (cmp <= 0) {
+        /* If we have already got the reply for the event, then we do
+         * not need to sync the transaction again.
+         */
+        cmp = -1;
+      }
+    }
+
+    if (cmp >= 0) {
+      if (wait_file_name_inited_) {
+        cmp = ActiveTranx::compare(log_file_name, log_file_pos,
+                                   wait_file_name_, wait_file_pos_);
+      } else {
+        cmp = 1;
+      }
+
+      if (cmp >= 0) {
+        /* We are going to send an event which has not reached the final
+         * commit point inside InnoDB.
+         * We need the reply from the slave because soon the transaction
+         * should wait for the reply when it reaches the end of the
+         * commit.
+         *
+         * We only wait if the event is a transaction's ending event.
+         */
+        DBUG_ASSERT(active_tranxs_ != NULL);
+        *sync = active_tranxs_->is_tranx_end_pos(log_file_name,
+                                                 log_file_pos);
+      } else {
+        /* If we are already waiting for some transaction replies which
+         * are later in binlog, do not wait for this one event.
+         */
+      }
+    }
+  } else {                                                /* semi-sync is OFF */
+    /* Check to see whether we can switch semi-sync ON. */
+    try_switch_on(thd->server_id, log_file_name, log_file_pos);
+
+    /* We must request sync reply for the current event no matter whether it
+     * is the end of a transaction.
+     * Here is the problematic situation:
+     *  . writeTranxInBinlog(): update commit_file_* base on transaction-A
+     *  . updateSyncHeader(): switch on semi-sync replication
+     *  . commitTrx(): we would wait until timeout for transaction-A for
+     *                 which binlog_dump thread never requests replies
+     *
+     * Also, it is advantageous that we update commit_file_* inside function
+     * writeTranxInBinlog().  Because commit_file_* indicates the last
+     * transaction in binlog and the current event must be equal or behind
+     * the last transaction, a reply to the current event from the slave
+     * can clear all older transactions' syncness.
+     */
+    *sync = is_on();
+  }
+
+  if (trace_level_ & kTraceDetail)
+    sql_print_information("%s: server(%d), (%s, %lu) sync(%d), repl(%d)",
+                          kWho, thd->server_id, log_file_name,
+                          (ulong)log_file_pos, *sync, (int)is_on());
+
+ l_end:
+  unlock();
+
+  /* We do not need to clear sync flag because we set it to 0 when we
+   * reserve the packet header.
+   */
+  if (*sync)
+    (packet->c_ptr())[2] = kPacketFlagSync;
+
+  *event_type = (Log_event_type)((*packet)[LOG_EVENT_OFFSET+3]);
+  return function_exit(kWho, 0);
+}
+
+int ReplSemiSync::readSlaveReply(THD *thd, NET *net,
+                                 const char **read_errmsg,
+                                 int *read_errno) {
+  const char *kWho = "ReplSemiSync::readSlaveReply";
+  const unsigned char *packet;
+  char     log_file_name[FN_REFLEN];
+  my_off_t log_file_pos;
+  ulong    packet_len;
+  int      result = -1;
+
+  struct timeval start_tv;
+  int   start_time_err;
+  ulong trc_level = trace_level_;
+
+  function_enter(kWho);
+
+  if (trc_level & kTraceNetWait)
+    start_time_err = gettimeofday(&start_tv, 0);
+
+  /* We flush to make sure that the current event is sent to the network,
+   * instead of being buffered in the TCP/IP stack.
+   */
+  if (net_flush(net)) {
+    *read_errmsg = "failed on net_flush()";
+    *read_errno  = ER_UNKNOWN_ERROR;
+    goto l_end;
+  }
+
+  if (trc_level & kTraceDetail)
+    sql_print_information("%s: Wait for replica's reply", kWho);
+
+  /* Wait for the network here.  Though binlog dump thread can indefinitely wait
+   * here, transactions would not wait indefintely.
+   * Transactions wait on binlog replies detected by binlog dump threads.  If
+   * binlog dump threads wait too long, transactions will timeout and continue.
+   */
+  packet_len = my_net_read(net);
+
+  if (trc_level & kTraceNetWait) {
+    if (start_time_err != 0) {
+      sql_print_error("Network wait gettimeofday fail1");
+      timefunc_fails_++;
+    } else {
+      int wait_time;
+
+      wait_time = getWaitTime(start_tv);
+      if (wait_time < 0) {
+        sql_print_error("Network wait gettimeofday fail2");
+        timefunc_fails_++;
+      } else {
+        total_net_wait_num_++;
+        total_net_wait_time_ += wait_time;
+      }
+    }
+  }
+
+  if (packet_len == packet_error || packet_len < 10) {
+    if (packet_len == packet_error)
+      *read_errmsg = "Read semi-sync reply network error";
+    else
+      *read_errmsg = "Read semi-sync reply length error";
+    *read_errno  = ER_UNKNOWN_ERROR;
+    goto l_end;
+  }
+
+  packet = net->read_pos;
+  if (packet[0] != ReplSemiSync::kPacketMagicNum ||
+      packet[9] != ReplSemiSync::kPacketMagicNum) {
+    *read_errmsg = "Read semi-sync reply magic number error";
+    *read_errno  = ER_UNKNOWN_ERROR;
+    goto l_end;
+  }
+
+  log_file_pos = uint8korr(packet + 1);
+  strcpy(log_file_name, (const char*)packet + 10);
+
+  if (trc_level & kTraceDetail)
+    sql_print_information("%s: Got reply (%s, %lu)",
+                          kWho, log_file_name, (ulong)log_file_pos);
+
+  result = reportReplyBinlog(thd, log_file_name, log_file_pos);
+
+ l_end:
+  return function_exit(kWho, result);
+}
+
+int ReplSemiSync::writeTranxInBinlog(const char* log_file_name,
+                                     my_off_t    log_file_pos) {
+  const char *kWho = "ReplSemiSync::writeTranxInBinlog";
+  int result = 0;
+
+  function_enter(kWho);
+
+  lock();
+
+  /* This is the real check inside the mutex. */
+  if (!getMasterEnabled())
+    goto l_end;
+
+  /* Update the 'largest' transaction commit position seen so far even
+   * though semi-sync is switched off.
+   * It is much better that we update commit_file_* here, instead of
+   * inside commitTrx().  This is mostly because updateSyncHeader()
+   * will watch for commit_file_* to decide whether to switch semi-sync
+   * on. The detailed reason is explained in function updateSyncHeader().
+   */
+  if (commit_file_name_inited_) {
+    int cmp = ActiveTranx::compare(log_file_name, log_file_pos,
+                                   commit_file_name_, commit_file_pos_);
+    if (cmp > 0) {
+      /* This is a larger position, let's update the maximum info. */
+      strcpy(commit_file_name_, log_file_name);
+      commit_file_pos_ = log_file_pos;
+    }
+  } else {
+    strcpy(commit_file_name_, log_file_name);
+    commit_file_pos_ = log_file_pos;
+    commit_file_name_inited_ = true;
+  }
+
+  if (is_on()) {
+    DBUG_ASSERT(active_tranxs_ != NULL);
+    result = active_tranxs_->insert_tranx_node(log_file_name, log_file_pos);
+  }
+
+ l_end:
+  unlock();
+
+  return function_exit(kWho, result);
+}
+
+int ReplSemiSync::slaveReadSyncHeader(const char *header,
+                                      ulong total_len,
+                                      bool  *need_reply,
+                                      const char **payload,
+                                      ulong *payload_len) {
+  const char *kWho = "ReplSemiSync::slaveReadSyncHeader";
+  int read_res = 0;
+  function_enter(kWho);
+
+  if ((unsigned char)(header[0]) == kPacketMagicNum) {
+    *need_reply  = (header[1] & kPacketFlagSync);
+    *payload_len = total_len - 2;
+    *payload     = header + 2;
+
+    if (trace_level_ & kTraceDetail)
+      sql_print_information("%s: reply - %d", kWho, *need_reply);
+  } else {
+    sql_print_error("Missing magic number for semi-sync packet, packet "
+                    "len: %d", total_len);
+    read_res = -1;
+  }
+
+  return function_exit(kWho, read_res);
+}
+
+int ReplSemiSync::slaveReply(NET        *net,
+                             const char *binlog_filename,
+                             my_off_t    binlog_filepos) {
+  const char *kWho = "ReplSemiSync::slaveReply";
+  char reply_buffer[1+8+1+FN_REFLEN];
+  int  reply_res, name_len = strlen(binlog_filename);
+
+  function_enter(kWho);
+
+  /* Prepare the buffer of the reply. */
+  reply_buffer[0] = kPacketMagicNum;
+  int8store(reply_buffer + 1, binlog_filepos);
+  reply_buffer[9] = kPacketMagicNum;
+  memcpy(reply_buffer + 10, binlog_filename, name_len);
+
+  if (trace_level_ & kTraceDetail)
+    sql_print_information("%s: reply (%s, %lu)", kWho,
+                          binlog_filename, (ulong)binlog_filepos);
+
+  /* Send the reply. */
+  reply_res = my_net_write(net, reply_buffer, name_len + 10);
+  if (reply_res == 0)
+    reply_res = net_flush(net);
+
+  return function_exit(kWho, reply_res);
+}
+
+void ReplSemiSync::setExportStats() {
+  VOID(pthread_mutex_lock(&LOCK_status));
+  lock();
+
+  rpl_semi_sync_status           = state_ ? 1 : 0;
+  rpl_semi_sync_yes_transactions = enabled_transactions_;
+  rpl_semi_sync_no_transactions  = disabled_transactions_;
+  rpl_semi_sync_off_times        = switched_off_times_;
+  rpl_semi_sync_timefunc_fails   = timefunc_fails_;
+  rpl_semi_sync_num_timeouts     = total_wait_timeouts_;
+  rpl_semi_sync_wait_sessions    = wait_sessions_;
+  rpl_semi_sync_back_wait_pos    = wait_backtraverse_;
+  rpl_semi_sync_trx_wait_num     = total_trx_wait_num_;
+  rpl_semi_sync_trx_wait_time    =
+    ((total_trx_wait_num_) ?
+     (ulong)((double)total_trx_wait_time_ /
+             ((double)total_trx_wait_num_)) : 0);
+  rpl_semi_sync_net_wait_num     = total_net_wait_num_;
+  rpl_semi_sync_net_wait_time    =
+    ((total_net_wait_num_) ?
+     (ulong)((double)total_net_wait_time_ /
+             ((double)total_net_wait_num_)) : 0);
+
+  rpl_semi_sync_net_wait_total_time = total_net_wait_time_;
+  rpl_semi_sync_trx_wait_total_time = total_trx_wait_time_;
+
+  unlock();
+  VOID(pthread_mutex_unlock(&LOCK_status));
+}
+
+/* Get the waiting time given the wait's staring time.
+ * 
+ * Return:
+ *  >= 0: the waiting time in microsecons(us)
+ *   < 0: error in gettimeofday or time back traverse
+ */
+static int getWaitTime(const struct timeval& start_tv) {
+  ulonglong start_usecs, end_usecs;
+  struct timeval end_tv;
+  int end_time_err;
+
+  /* Starting time in microseconds(us). */
+  start_usecs = start_tv.tv_sec * TIME_MILLION + start_tv.tv_usec;
+
+  /* Get the wait time interval. */
+  end_time_err = gettimeofday(&end_tv, 0);
+
+  /* Ending time in microseconds(us). */
+  end_usecs = end_tv.tv_sec * TIME_MILLION + end_tv.tv_usec;
+
+  if (end_time_err != 0 || end_usecs < start_usecs)
+    return -1;
+
+  return (int)(end_usecs - start_usecs);
+}
diff -ruN base/sql/repl_semi_sync.h mysql40gpl/sql/repl_semi_sync.h
--- base/sql/repl_semi_sync.h	1969-12-31 16:00:00.000000000 -0800
+++ mysql40gpl/sql/repl_semi_sync.h	2007-04-21 11:18:39.000000000 -0700
@@ -0,0 +1,446 @@
+/* Copyright (C) 2007 Google Inc.
+
+This program is free software; you can redistribute it and/or
+modify it under the terms of the GNU General Public License
+as published by the Free Software Foundation; either version 2
+of the License, or (at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program; if not, write to the Free Software
+Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+*/
+
+/*
+ * ReplSemiSync class is reponsible for semi synchronous replication.  The
+ * general idea of semi-sync replication is the master database need to make
+ * sure that the slave database receives its replication events before telling
+ * the client that a transaction has been committed.  The difference between
+ * semi-sync and full-sync is that full-sync replication requires that the
+ * slave database finish replicated transaction before replying the master.
+ *
+ * The current semi-sync implementation defines a transaction wait timeout.
+ * In this way, the master would not wait for the slave/replica indefinitely;
+ * instead after a configurable timeout, the master will continue the current
+ * transaction.  At the same time, semi-sync will be disabled so that no
+ * transactions will wait after this.  Later, semi-sync can be enabled again
+ * when the slave catches up in replication.  The timeout design is to prevent
+ * the master from halting for update, in case of the slave machine issues or
+ * network issues.
+ * 
+ * We export three status variables to track the semi-sync on the master:
+ *  . "Replication_semi_sync_status":           rpl_semi_sync_status
+ *  . "Replication_semi_sync_yes_transactions": rpl_semi_sync_yes_transactions
+ *  . "Replication_semi_sync_no_transactions":  rpl_semi_sync_no_transactions
+ * 
+ * This class has codes for both the master and the slave/replica side.
+ * However, the slave/replica side is relatively lightweight because the slave
+ * is mostly stateless reply of binlog events sent from the master.
+ *
+ * The master side code flow:
+ *  . session/thread with a commit transaction:
+ *    - write all events for the current transaction to binlog
+ *    - call writeTraxInBinlog()
+ *    - call commitTrx() during InnoDB's final commit action
+ *    - InnoDB commits and returns 'ok' to the client
+ *  . binlog-dump session/thread - <mysql_binlog_send>
+ *    - connection from slave to dump binlog events
+ *    - call reportReplyBinlog() to report the slave's position
+ *    - while (true):
+ *    -   call reserveSyncHeader() to create header for the next event
+ *    -   read the event from binlog
+ *    -   call updateSyncHeader() to indicate whether slave should reply
+ *    -   call readSlaveReply() to wait for slave's reply
+ *
+ * The slave side code flow - <handle_slave_io>:
+ *    - sync_status = call readSyncHeader()
+ *    - if (sync_status):
+ *    -   call slaveReply()
+ */
+
+#ifndef REPL_SEMI_SYNC_H__
+#define REPL_SEMI_SYNC_H__
+
+class THD;
+class String;
+typedef struct st_net NET;
+enum Log_event_type;
+
+class ReplSemiSync {
+ private:
+
+  /* This class manages memory for active transaction list.  We record each
+   * active transaction with a TranxNode.  Because each session can only have
+   * only one open transaction, the total active transaction nodes can not
+   * exceed the maximum sessions.  Currently in MySQL, sessions are the same
+   * as connections.
+   */
+  class ActiveTranx {
+  private:
+    struct TranxNode {
+      char             *log_name_;
+      my_off_t          log_pos_;
+      struct TranxNode *next_;            /* the next node in the sorted list */
+      struct TranxNode *hash_next_;    /* the next node during hash collision */
+    };
+
+    /* The following data structure maintains an active transaction list. */
+    TranxNode       *node_array_;
+    TranxNode       *free_pool_;
+
+    /* These two record the active transaction list in sort order. */
+    TranxNode       *trx_front_, *trx_rear_;
+
+    TranxNode      **trx_htb_;        /* A hash table on active transactions. */
+
+    int              num_transactions_;               /* maximum transactions */
+    int              num_entries_;              /* maximum hash table entries */
+    pthread_mutex_t *lock_;                                     /* mutex lock */
+    ulong           *trace_level_;                             /* trace level */
+
+    inline void assert_lock_owner();
+    inline void function_enter(const char *func_name);
+    inline int  function_exit(const char *func_name, int exit_code);
+
+    inline TranxNode* alloc_tranx_node();
+
+    inline uint calc_hash(const byte *key,uint length);
+    uint get_hash_value(const char *log_file_name, my_off_t log_file_pos);
+
+    int compare(const char *log_file_name1, my_off_t log_file_pos1,
+                const TranxNode *node2) {
+      return compare(log_file_name1, log_file_pos1,
+                     node2->log_name_, node2->log_pos_);
+    }
+    int compare(const TranxNode *node1,
+                const char *log_file_name2, my_off_t log_file_pos2) {
+      return compare(node1->log_name_, node1->log_pos_,
+                     log_file_name2, log_file_pos2);
+    }
+    int compare(const TranxNode *node1, const TranxNode *node2) {
+      return compare(node1->log_name_, node1->log_pos_,
+                     node2->log_name_, node2->log_pos_);
+    }
+
+  public:
+    ActiveTranx(int max_connections, pthread_mutex_t *lock,
+                ulong *trace_level);
+    ~ActiveTranx();
+
+    /* Insert an active transaction node with the specified position.
+     *
+     * Return:
+     *  0: success;  -1 or otherwise: error
+     */
+    int insert_tranx_node(const char *log_file_name, my_off_t log_file_pos);
+
+    /* Clear the active transaction nodes until(inclusive) the specified
+     * position.
+     * If log_file_name is NULL, everything will be cleared: the sorted
+     * list and the hash table will be reset to empty.
+     * 
+     * Return:
+     *  0: success;  -1 or otherwise: error
+     */
+    int clear_active_tranx_nodes(const char *log_file_name,
+                                 my_off_t    log_file_pos);
+
+    /* Given a position, check to see whether the position is an active
+     * transaction's ending position by probing the hash table.
+     */
+    bool is_tranx_end_pos(const char *log_file_name, my_off_t log_file_pos);
+
+    /* Given two binlog positions, compare which one is bigger based on
+     * (file_name, file_position).
+     */
+    static int compare(const char *log_file_name1, my_off_t log_file_pos1,
+                       const char *log_file_name2, my_off_t log_file_pos2);
+
+  };
+
+  ActiveTranx    *active_tranxs_;  /* active transaction list: the list will
+                                      be cleared when semi-sync switches off. */
+
+  /* This cond variable is signaled when enough binlog has been sent to slave,
+   * so that a waiting trx can return the 'ok' to the client for a commit.
+   */
+  pthread_cond_t  COND_binlog_send_;
+
+  /* Mutex that protects the following state variables and the active
+   * transaction list.
+   * Under no cirumstances we can acquire mysql_bin_log.LOCK_log if we are
+   * already holding LOCK_binlog_ because it can cause deadlocks.
+   */
+  pthread_mutex_t LOCK_binlog_;
+
+  /* This is set to true when reply_file_name_ contains meaningful data. */
+  bool            reply_file_name_inited_;
+
+  /* The binlog name up to which we have received replies from any slaves. */
+  char            reply_file_name_[FN_REFLEN];
+
+  /* The position in that file up to which we have the reply from any slaves. */
+  my_off_t        reply_file_pos_;
+
+  /* This is set to true when we know the 'smallest' wait position. */
+  bool            wait_file_name_inited_;
+
+  /* NULL, or the 'smallest' filename that a transaction is waiting for
+   * slave replies.
+   */
+  char            wait_file_name_[FN_REFLEN];
+
+  /* The smallest position in that file that a trx is waiting for: the trx
+   * can proceed and send an 'ok' to the client when the master has got the
+   * reply from the slave indicating that it already got the binlog events.
+   */
+  my_off_t        wait_file_pos_;
+
+  /* This is set to true when we know the 'largest' transaction commit
+   * position in the binlog file.
+   * We always maintain the position no matter whether semi-sync is switched
+   * on switched off.  When a transaction wait timeout occurs, semi-sync will
+   * switch off.  Binlog-dump thread can use the three fields to detect when
+   * slaves catch up on replication so that semi-sync can switch on again.
+   */
+  bool            commit_file_name_inited_;
+
+  /* The 'largest' binlog filename that a commit transaction is seeing.       */
+  char            commit_file_name_[FN_REFLEN];
+
+  /* The 'largest' position in that file that a commit transaction is seeing. */
+  my_off_t        commit_file_pos_;
+
+  /* All global variables which can be set by parameters. */
+  bool            master_enabled_;      /* semi-sync is enabled on the master */
+  bool            slave_enabled_;        /* semi-sycn is enabled on the slave */
+  ulong           wait_timeout_;      /* timeout period(ms) during tranx wait */
+  ulong           trace_level_;                      /* the level for tracing */
+
+  /* All status variables. */
+  bool            state_;                    /* whether semi-sync is switched */
+  ulong           enabled_transactions_;          /* semi-sync'ed tansactions */
+  ulong           disabled_transactions_;     /* non-semi-sync'ed tansactions */
+  ulong           switched_off_times_;    /* how many times are switched off? */
+  ulong           timefunc_fails_;           /* how many time function fails? */
+  ulong           total_wait_timeouts_;      /* total number of wait timeouts */
+  ulong           wait_sessions_;      /* how many sessions wait for replies? */
+  ulong           wait_backtraverse_;         /* wait position back traverses */
+  ulonglong       total_trx_wait_num_;   /* total trx waits: non-timeout ones */
+  ulonglong       total_trx_wait_time_;         /* total trx wait time: in us */
+  ulonglong       total_net_wait_num_;                 /* total network waits */
+  ulonglong       total_net_wait_time_;            /* total network wait time */
+
+  /* The number of maximum active transactions.  This should be the same as
+   * maximum connections because MySQL does not do connection sharing now.
+   */
+  int             max_transactions_;
+
+  static const ulong kTraceFunction;
+  static const ulong kTraceGeneral;
+  static const ulong kTraceDetail;
+  static const ulong kTraceNetWait;
+
+  static const char  kSyncHeader[3];              /* three byte packet header */
+
+  void lock();
+  void unlock();
+  void cond_broadcast();
+  int  cond_timewait(struct timespec *wait_time);
+
+  inline void function_enter(const char *func_name);
+  inline int  function_exit(const char *func_name, int exit_code);
+
+  /* Is semi-sync replication on? */
+  bool is_on() {
+    return (state_);
+  }
+
+  void set_master_enabled(bool enabled) {
+    master_enabled_ = enabled;
+  }
+
+  /* Switch semi-sync off because of timeout in transaction waiting. */
+  int switch_off();
+
+  /* Switch semi-sync on when slaves catch up. */
+  int try_switch_on(int server_id,
+                    const char *log_file_name, my_off_t log_file_pos);
+
+ public:
+  ReplSemiSync();
+  ~ReplSemiSync();
+
+  /* Constants in network packet header. */
+  static const unsigned char kPacketMagicNum;
+  static const unsigned char kPacketFlagSync;
+
+  bool getMasterEnabled() {
+    return master_enabled_;
+  }
+  bool getSlaveEnabled() {
+    return slave_enabled_;
+  }
+  void setSlaveEnabled(bool enabled) {
+    slave_enabled_ = enabled;
+  }
+
+  void setTraceLevel(ulong trace_level) {
+    trace_level_ = trace_level;
+  }
+
+  /* Set the transaction wait timeout period, in milliseconds. */
+  void setWaitTimeout(ulong wait_timeout) {
+    wait_timeout_ = wait_timeout;
+  }
+
+  /* Initialize this class after MySQL parameters are initialized. this
+   * function should be called once at bootstrap time.
+   */
+  int initObject();
+
+  /* Enable the object to enable semi-sync replication inside the master. */
+  int enableMaster();
+
+  /* Enable the object to enable semi-sync replication inside the master. */
+  int disableMaster();
+
+  /* In semi-sync replication, reports up to which binlog position we have
+   * received replies from the slave indicating that it already get the events.
+   *
+   * Input:
+   *  thd           - (IN)  binlog-dump thread doing the binlog communication
+   *                        to the slave
+   *  log_file_name - (IN)  binlog file name
+   *  end_offset    - (IN)  the offset in the binlog file up to which we have
+   *                        the replies from the slave
+   *
+   * Return:
+   *  0: success;  -1 or otherwise: error
+   */
+  int reportReplyBinlog(THD* thd, char* log_file_name,
+                        my_off_t end_offset);
+
+  /* Commit a transaction in the final step.  This function is called from
+   * InnoDB before returning from the low commit.  If semi-sync is switch on,
+   * the function will wait to see whether binlog-dump thread get the reply for
+   * the events of the transaction.  Remember that this is not a direct wait,
+   * instead, it waits to see whether the binlog-dump thread has reached the
+   * point.  If the wait times out, semi-sync status will be switched off and
+   * all other transaction would not wait either.
+   *
+   * Input:  (the transaction events' ending binlog position)
+   *  trx_wait_binlog_name - (IN)  ending position's file name
+   *  trx_wait_binlog_pos  - (IN)  ending position's file offset
+   *
+   * Return:
+   *  0: success;  -1 or otherwise: error
+   */
+  int commitTrx(const char* trx_wait_binlog_name,
+                my_off_t trx_wait_binlog_pos);
+
+  /* Reserve spaces in the replication event packet header:
+   *  . slave semi-sync off: 1 byte - (0)
+   *  . slave semi-sync on:  3 byte - (0, 0xef, 0/1}
+   * 
+   * Input:
+   *  packet   - (IN)  the packet containing the replication event
+   *  thd      - (IN)  the binlog dump thread
+   *  packet_buffer      - (IN)  the packet's initial buffer
+   *  packet_buffer_size - (IN)  the size of the initial buffer
+   *
+   * Return:
+   *  0: success;  -1 or otherwise: error
+   */
+  void reserveSyncHeader(String *packet, THD *thd,
+                         char *packet_buffer, ulong packet_buffer_size);
+
+  /* Update the sync bit in the packet header to indicate to the slave whether
+   * the master will wait for the reply of the event.  If semi-sync is switched
+   * off and we detect that the slave is catching up, we switch semi-sync on.
+   * 
+   * Input:
+   *  packet        - (IN)  the packet containing the replication event
+   *  log_file_name - (IN)  the event ending position's file name
+   *  log_file_pos  - (IN)  the event ending position's file offset
+   *  thd           - (IN)  the binlog dump thread
+   *  sync          - (OUT) whether the sync bit is set
+   *  event_type    - (OUT) the sending event's type
+   *
+   * Return:
+   *  0: success;  -1 or otherwise: error
+   */
+  int updateSyncHeader(String *packet,
+                       const char *log_file_name, my_off_t log_file_pos,
+                       THD *thd, bool *sync, Log_event_type *event_type);
+
+  /* Read the slave's reply so that we know how much progress the slave makes
+   * on receive replication events.
+   * 
+   * Input:
+   *  thd          - (IN)  binlog dump replication thread
+   *  net          - (IN)  the network socket
+   *  read_errmsg  - (OUT) error message if an error occurs
+   *  read_errno   - (OUT) error number if an error occurs
+   *
+   * Return:
+   *  0: success;  -1 or otherwise: error
+   */
+  int readSlaveReply(THD *thd, NET *net, const char **read_errmsg,
+                     int *read_errno);
+
+  /* Called when a transaction finished writing binlog events.
+   *  . update the 'largest' transactions' binlog event position
+   *  . insert the ending position in the active transaction list if
+   *    semi-sync is on
+   * 
+   * Input:  (the transaction events' ending binlog position)
+   *  log_file_name - (IN)  transaction ending position's file name
+   *  log_file_pos  - (IN)  transaction ending position's file offset
+   *
+   * Return:
+   *  0: success;  -1 or otherwise: error
+   */
+  int writeTranxInBinlog(const char* log_file_name, my_off_t log_file_pos);
+
+  /* A slave reads the semi-sync packet header and separate the metadata
+   * from the payload data.
+   * 
+   * Input:
+   *  header      - (IN)  packet header pointer
+   *  total_len   - (IN)  total packet length: metadata + payload
+   *  need_reply  - (IN)  whether the master is waiting for the reply
+   *  payload     - (IN)  payload: the replication event
+   *  payload_len - (IN)  payload length
+   *
+   * Return:
+   *  0: success;  -1 or otherwise: error
+   */
+  int slaveReadSyncHeader(const char *header, ulong total_len, bool *need_reply,
+                          const char **payload, ulong *payload_len);
+
+  /* A slave replies to the master indicating its replication process.  It
+   * indicates that the slave has received all events before the specified
+   * binlog position.
+   * 
+   * Input:
+   *  net              - (IN)  the network socket
+   *  binlog_filename  - (IN)  the reply point's binlog file name
+   *  binlog_filepos   - (IN)  the reply point's binlog file offset
+   *
+   * Return:
+   *  0: success;  -1 or otherwise: error
+   */
+  int slaveReply(NET *net, const char *binlog_filename,
+                 my_off_t binlog_filepos);
+
+  /* Export internal statistics for semi-sync replication. */
+  void setExportStats();
+
+};
+
+#endif   /* REPL_SEMI_SYNC_H__ */
diff -ruN base/sql/set_var.cc mysql40gpl/sql/set_var.cc
--- base/sql/set_var.cc	2005-09-02 15:37:56.000000000 -0700
+++ mysql40gpl/sql/set_var.cc	2007-04-21 11:07:21.000000000 -0700
@@ -55,6 +55,10 @@
 #ifdef HAVE_INNOBASE_DB
 #include "ha_innodb.h"
 #endif
+#include "repl_semi_sync.h"
+
+extern ReplSemiSync semi_sync_replicator;
+extern my_bool rpl_mirror_binlog_no_replicate;
 
 static HASH system_variable_hash;
 const char *bool_type_names[]= { "OFF", "ON", NullS };
@@ -76,6 +80,7 @@
 static bool set_option_autocommit(THD *thd, set_var *var);
 static bool set_log_update(THD *thd, set_var *var);
 static void fix_low_priority_updates(THD *thd, enum_var_type type);
+static void fix_innodb_clear_replication_status(THD *thd, enum_var_type type);
 static void fix_tx_isolation(THD *thd, enum_var_type type);
 static void fix_net_read_timeout(THD *thd, enum_var_type type);
 static void fix_net_write_timeout(THD *thd, enum_var_type type);
@@ -86,6 +91,9 @@
 static void fix_myisam_max_extra_sort_file_size(THD *thd, enum_var_type type);
 static void fix_myisam_max_sort_file_size(THD *thd, enum_var_type type);
 static void fix_max_binlog_size(THD *thd, enum_var_type type);
+static void fix_rpl_semi_sync_trace_level(THD *thd, enum_var_type type);
+static void fix_rpl_semi_sync_enabled(THD *thd, enum_var_type type);
+static void fix_rpl_semi_sync_slave_enabled(THD *thd, enum_var_type type);
 static void fix_max_relay_log_size(THD *thd, enum_var_type type);
 static void fix_max_connections(THD *thd, enum_var_type type);
 static void fix_thd_mem_root(THD *thd, enum_var_type type);
@@ -134,8 +142,8 @@
 sys_var_bool_ptr	sys_local_infile("local_infile",
 					 &opt_local_infile);
 sys_var_thd_ulong	sys_log_warnings("log_warnings", &SV::log_warnings);
-sys_var_thd_ulong	sys_long_query_time("long_query_time",
-					     &SV::long_query_time);
+sys_var_long_ptr	sys_long_query_time("long_query_time",
+					     &long_query_time);
 sys_var_thd_bool	sys_low_priority_updates("low_priority_updates",
 						 &SV::low_priority_updates,
 						 fix_low_priority_updates);
@@ -205,14 +213,40 @@
 sys_var_bool_ptr	sys_readonly("read_only", &opt_readonly);
 sys_var_thd_ulong	sys_read_rnd_buff_size("read_rnd_buffer_size",
 					       &SV::read_rnd_buff_size);
+sys_var_bool_ptr        sys_rpl_always_enter_innodb("rpl_always_enter_innodb",
+                                                    &rpl_always_enter_innodb);
 sys_var_long_ptr	sys_rpl_recovery_rank("rpl_recovery_rank",
 					      &rpl_recovery_rank);
+sys_var_bool_ptr        sys_rpl_mirror_binlog_enabled(
+                                              "rpl_mirror_binlog_enabled",
+                                              &rpl_mirror_binlog_enabled);
+sys_var_bool_ptr        sys_rpl_mirror_binlog_no_replicate(
+                                              "rpl_mirror_binlog_no_replicate",
+                                              &rpl_mirror_binlog_no_replicate);
+sys_var_long_ptr        sys_rpl_semi_sync_enabled("rpl_semi_sync_enabled",
+                                                  &rpl_semi_sync_enabled,
+                                                  fix_rpl_semi_sync_enabled);
+sys_var_long_ptr        sys_rpl_semi_sync_slave_enabled(
+                                              "rpl_semi_sync_slave_enabled",
+                                              &rpl_semi_sync_slave_enabled,
+                                              fix_rpl_semi_sync_slave_enabled);
+sys_var_long_ptr	sys_rpl_semi_sync_timeout(
+                                              "rpl_semi_sync_timeout",
+					      &rpl_semi_sync_timeout);
+sys_var_long_ptr	sys_rpl_semi_sync_trace_level(
+                                              "rpl_semi_sync_trace_level",
+					      &rpl_semi_sync_trace_level,
+                                              fix_rpl_semi_sync_trace_level);
+sys_var_bool_ptr        sys_rpl_transaction_enabled("rpl_transaction_enabled",
+                                                    &rpl_transaction_enabled);
 sys_var_long_ptr	sys_query_cache_size("query_cache_size",
 					     &query_cache_size,
 					     fix_query_cache_size);
 
 sys_var_thd_ulong	sys_range_alloc_block_size("range_alloc_block_size",
 						   &SV::range_alloc_block_size);
+sys_var_long_ptr	sys_reserved_super_connections("reserved_super_connections",
+                                                       &reserved_super_connections);
 sys_var_thd_ulong	sys_query_alloc_block_size("query_alloc_block_size",
 						   &SV::query_alloc_block_size,
 						   fix_thd_mem_root);
@@ -225,6 +259,11 @@
 sys_var_thd_ulong	sys_trans_prealloc_size("transaction_prealloc_size",
 						&SV::trans_prealloc_size,
 						fix_trans_mem_root);
+sys_var_sync_binlog_period sys_sync_binlog_period("sync_binlog",
+                                                  &sync_binlog_period);
+sys_var_long_ptr	sys_sync_mirror_binlog_period(
+                            "sync_mirror_binlog_period",
+                            &sync_mirror_binlog_period);
 
 #ifdef HAVE_QUERY_CACHE
 sys_var_long_ptr	sys_query_cache_limit("query_cache_limit",
@@ -261,12 +300,18 @@
 					     &SV::net_wait_timeout);
 					     
 #ifdef HAVE_INNOBASE_DB
+sys_var_long_ptr	sys_innodb_btr_estimate_n_pages("innodb_btr_estimate_n_pages",
+                                                        &btr_key_val_estimate_n_pages);
 sys_var_long_ptr        sys_innodb_max_dirty_pages_pct("innodb_max_dirty_pages_pct",
                                                         &srv_max_buf_pool_modified_pct);
 sys_var_long_ptr	sys_innodb_max_purge_lag("innodb_max_purge_lag",
 							&srv_max_purge_lag);
 sys_var_long_ptr	sys_innodb_autoextend_increment("innodb_autoextend_increment",
 							&srv_auto_extend_increment);
+sys_var_thd_bool	sys_innodb_clear_replication_status(
+                            "innodb_clear_replication_status",
+                            &SV::innodb_clear_replication_status,
+                            fix_innodb_clear_replication_status);
 sys_var_thd_bool	sys_innodb_table_locks("innodb_table_locks",
                                                &SV::innodb_table_locks);
 #endif 					     
@@ -430,7 +475,16 @@
   &sys_range_alloc_block_size,
   &sys_read_buff_size,
   &sys_read_rnd_buff_size,
+  &sys_reserved_super_connections,
+  &sys_rpl_always_enter_innodb,
   &sys_rpl_recovery_rank,
+  &sys_rpl_mirror_binlog_enabled,
+  &sys_rpl_mirror_binlog_no_replicate,
+  &sys_rpl_semi_sync_enabled,
+  &sys_rpl_semi_sync_slave_enabled,
+  &sys_rpl_semi_sync_timeout,
+  &sys_rpl_semi_sync_trace_level,
+  &sys_rpl_transaction_enabled,
   &sys_safe_updates,
   &sys_select_limit,
   &sys_server_id,
@@ -444,6 +498,8 @@
   &sys_sql_low_priority_updates,
   &sys_sql_max_join_size,
   &sys_sql_warnings,
+  &sys_sync_binlog_period,
+  &sys_sync_mirror_binlog_period,
   &sys_table_cache_size,
   &sys_table_type,
   &sys_thread_cache_size,
@@ -454,10 +510,12 @@
   &sys_tx_isolation,
   &sys_os,
 #ifdef HAVE_INNOBASE_DB
+  &sys_innodb_btr_estimate_n_pages,
   &sys_innodb_max_dirty_pages_pct,
   &sys_innodb_max_purge_lag,
   &sys_innodb_autoextend_increment,
   &sys_innodb_table_locks,
+  &sys_innodb_clear_replication_status,
 #endif    
   &sys_unique_checks
 };
@@ -512,7 +570,10 @@
 #ifdef HAVE_INNOBASE_DB
   {"innodb_additional_mem_pool_size", (char*) &innobase_additional_mem_pool_size, SHOW_LONG },
   {sys_innodb_autoextend_increment.name, (char*) &sys_innodb_autoextend_increment, SHOW_SYS},
+  {sys_innodb_btr_estimate_n_pages.name, (char*) &sys_innodb_btr_estimate_n_pages, SHOW_SYS},
   {"innodb_buffer_pool_size", (char*) &innobase_buffer_pool_size, SHOW_LONG },
+  {sys_innodb_clear_replication_status.name,
+                                     (char*) &sys_innodb_clear_replication_status, SHOW_SYS},
   {"innodb_data_file_path", (char*) &innobase_data_file_path,	    SHOW_CHAR_PTR},
   {"innodb_data_home_dir",  (char*) &innobase_data_home_dir,	    SHOW_CHAR_PTR},
   {"innodb_fast_shutdown", (char*) &innobase_fast_shutdown, SHOW_MY_BOOL},
@@ -532,6 +593,10 @@
   {"innodb_mirrored_log_groups", (char*) &innobase_mirrored_log_groups, SHOW_LONG},
   {sys_innodb_table_locks.name, (char*) &sys_innodb_table_locks, SHOW_SYS},
   {"innodb_thread_concurrency", (char*) &innobase_thread_concurrency, SHOW_LONG },
+  {"innodb_no_share_locks_on_dml_select", (char*) &innodb_no_share_locks_on_dml_select, SHOW_BOOL},
+  {"innodb_read_io_threads", (char*) &innobase_read_io_threads, SHOW_LONG },
+  {"innodb_write_io_threads", (char*) &innobase_write_io_threads, SHOW_LONG },
+  {"innodb_max_merged_io", (char*) &innobase_max_merged_io, SHOW_LONG},
 #endif
   {sys_interactive_timeout.name,(char*) &sys_interactive_timeout,   SHOW_SYS},
   {sys_join_buffer_size.name,   (char*) &sys_join_buffer_size,	    SHOW_SYS},
@@ -548,7 +613,7 @@
   {"log_error",               (char*) log_error_file,               SHOW_CHAR},
   {"log_slave_updates",       (char*) &opt_log_slave_updates,       SHOW_MY_BOOL},
   {"log_slow_queries",        (char*) &opt_slow_log,                SHOW_BOOL},
-  {"log_update",              (char*) &opt_update_log,              SHOW_BOOL},
+  {"log_update",              (char*) &opt_dml_log,                 SHOW_BOOL},
   {sys_log_warnings.name,     (char*) &sys_log_warnings,	    SHOW_SYS},
   {sys_long_query_time.name,  (char*) &sys_long_query_time, 	    SHOW_SYS},
   {sys_low_priority_updates.name, (char*) &sys_low_priority_updates, SHOW_SYS},
@@ -606,7 +671,25 @@
   {sys_read_buff_size.name,   (char*) &sys_read_buff_size,	    SHOW_SYS},
   {sys_readonly.name,         (char*) &sys_readonly,                SHOW_SYS},
   {sys_read_rnd_buff_size.name,(char*) &sys_read_rnd_buff_size,	    SHOW_SYS},
+  {sys_reserved_super_connections.name,(char*) &sys_reserved_super_connections,    SHOW_SYS},
+  {sys_rpl_always_enter_innodb.name,
+   (char *) &sys_rpl_always_enter_innodb,                           SHOW_SYS},
   {sys_rpl_recovery_rank.name,(char*) &sys_rpl_recovery_rank,       SHOW_SYS},
+  {sys_rpl_mirror_binlog_enabled.name,
+   (char *) &sys_rpl_mirror_binlog_enabled,                         SHOW_SYS},
+  {sys_rpl_mirror_binlog_no_replicate.name,
+   (char *) &sys_rpl_mirror_binlog_no_replicate,                    SHOW_SYS},
+  {sys_rpl_semi_sync_enabled.name,
+   (char *) &sys_rpl_semi_sync_enabled,                             SHOW_SYS},
+  {sys_rpl_semi_sync_slave_enabled.name,
+   (char *) &sys_rpl_semi_sync_slave_enabled,                       SHOW_SYS},
+  {sys_rpl_semi_sync_timeout.name,
+   (char *) &sys_rpl_semi_sync_timeout,                             SHOW_SYS},
+  {sys_rpl_semi_sync_trace_level.name,
+   (char *) &sys_rpl_semi_sync_trace_level,                         SHOW_SYS},
+  {sys_rpl_transaction_enabled.name,
+   (char *) &sys_rpl_transaction_enabled,                           SHOW_SYS},
+  {"server_hostname",         (char*) glob_hostname,                SHOW_CHAR},
   {sys_server_id.name,	      (char*) &sys_server_id,		    SHOW_SYS},
   {"skip_external_locking",   (char*) &my_disable_locking,          SHOW_MY_BOOL},
   {"skip_networking",         (char*) &opt_disable_networking,      SHOW_BOOL},
@@ -618,6 +701,9 @@
 #endif
   {sys_sort_buffer.name,      (char*) &sys_sort_buffer, 	    SHOW_SYS},
   {"sql_mode",                (char*) &opt_sql_mode,                SHOW_LONG},
+  {sys_sync_binlog_period.name,(char*) &sys_sync_binlog_period,     SHOW_SYS},
+  {sys_sync_mirror_binlog_period.name,
+   (char *) &sys_sync_mirror_binlog_period,                         SHOW_SYS},
   {"table_cache",             (char*) &table_cache_size,            SHOW_LONG},
   {sys_table_type.name,	      (char*) &sys_table_type,	            SHOW_SYS},
   {sys_thread_cache_size.name,(char*) &sys_thread_cache_size,       SHOW_SYS},
@@ -679,6 +765,13 @@
 			       TL_WRITE_LOW_PRIORITY : TL_WRITE);
 }
 
+static void fix_innodb_clear_replication_status(THD *thd, enum_var_type type)
+{
+  /* Only super users can set "innodb_clear_replication_status" variable. */
+  if (check_global_access(thd, SUPER_ACL) != 0)
+    thd->variables.innodb_clear_replication_status = false;
+}
+
 
 static void
 fix_myisam_max_extra_sort_file_size(THD *thd, enum_var_type type)
@@ -789,6 +882,45 @@
   DBUG_VOID_RETURN;
 }
 
+static void fix_rpl_semi_sync_trace_level(THD *thd, enum_var_type type)
+{
+  DBUG_ENTER("fix_rpl_semi_sync_trace_level");
+
+  DBUG_PRINT("info",("rpl_semi_sync_trace_level=%lu",
+                     rpl_semi_sync_trace_level));
+  semi_sync_replicator.setTraceLevel(rpl_semi_sync_trace_level);
+
+  DBUG_VOID_RETURN;
+}
+
+static void fix_rpl_semi_sync_enabled(THD *thd, enum_var_type type)
+{
+  DBUG_ENTER("fix_rpl_semi_sync_enabled");
+  DBUG_PRINT("info",("rpl_semi_sync_enabled=%lu",
+                     rpl_semi_sync_enabled));
+
+  if (rpl_semi_sync_slave_enabled) {
+    if (semi_sync_replicator.enableMaster() != 0)
+      rpl_semi_sync_slave_enabled = false;
+  } else {
+    if (semi_sync_replicator.disableMaster() != 0)
+      rpl_semi_sync_slave_enabled = true;
+  }
+
+  DBUG_VOID_RETURN;
+}
+
+static void fix_rpl_semi_sync_slave_enabled(THD *thd, enum_var_type type)
+{
+  DBUG_ENTER("fix_rpl_semi_sync_slave_enabled");
+
+  DBUG_PRINT("info",("rpl_semi_sync_slave_enabled=%lu",
+                     rpl_semi_sync_slave_enabled));
+  semi_sync_replicator.setSlaveEnabled(rpl_semi_sync_slave_enabled != 0);
+
+  DBUG_VOID_RETURN;
+}
+
 static void fix_max_relay_log_size(THD *thd, enum_var_type type)
 {
   DBUG_ENTER("fix_max_relay_log_size");
@@ -1321,6 +1453,20 @@
   return 0;
 }
 
+bool sys_var_sync_binlog_period::update(THD *thd, set_var *var)
+{
+  pthread_mutex_t *lock_log= mysql_bin_log.get_log_lock();
+  sync_binlog_period= (ulong) var->value->val_int();
+  /*
+    Must reset the counter otherwise it may already be beyond the new period
+    and so the new period will not be taken into account. Need mutex otherwise
+    might be cancelled by a simultanate ++ in MYSQL_LOG::write().
+  */
+  pthread_mutex_lock(lock_log);
+  sync_binlog_counter= 0;
+  pthread_mutex_unlock(lock_log);
+  return 0;
+}
 
 bool sys_var_rand_seed1::update(THD *thd, set_var *var)
 {
diff -ruN base/sql/set_var.h mysql40gpl/sql/set_var.h
--- base/sql/set_var.h	2005-09-02 15:38:07.000000000 -0700
+++ mysql40gpl/sql/set_var.h	2007-04-21 09:57:11.000000000 -0700
@@ -404,6 +404,13 @@
   */
 };
 
+class sys_var_sync_binlog_period :public sys_var_long_ptr
+{
+public:
+  sys_var_sync_binlog_period(const char *name_arg, ulong *value_ptr)
+    :sys_var_long_ptr(name_arg,value_ptr) {}
+  bool update(THD *thd, set_var *var);
+};
 
 class sys_var_rand_seed1 :public sys_var
 {
diff -ruN base/sql/slave.cc mysql40gpl/sql/slave.cc
--- base/sql/slave.cc	2005-09-02 15:38:00.000000000 -0700
+++ mysql40gpl/sql/slave.cc	2007-04-21 09:57:13.000000000 -0700
@@ -25,10 +25,28 @@
 #include <thr_alarm.h>
 #include <my_dir.h>
 #include <assert.h>
+#include "repl_mule.h"
+#include "repl_semi_sync.h"
+
+#ifdef HAVE_INNOBASE_DB
+#include "ha_innodb.h"
+#endif
+
+extern ReplSemiSync semi_sync_replicator;
 
 bool use_slave_mask = 0;
 MY_BITMAP slave_error_mask;
 
+ulong rpl_fail_io_connections = 0;
+ulong rpl_last_event_buffered = 0;
+ulong rpl_last_event_done = 0;
+ulong rpl_last_event_diff = 0;
+ulong rpl_max_delay = 0;
+ulong rpl_slowest_event = 0;
+
+static int rpl_slow_events = 0;
+static int rpl_delay_events = 0;
+
 typedef bool (*CHECK_KILLED_FUNC)(THD*,void*);
 
 volatile bool slave_sql_running = 0, slave_io_running = 0;
@@ -66,14 +84,53 @@
 static int safe_reconnect(THD* thd, MYSQL* mysql, MASTER_INFO* mi,
 			  bool suppress_warnings);
 static int connect_to_master(THD* thd, MYSQL* mysql, MASTER_INFO* mi,
-			     bool reconnect, bool suppress_warnings);
+			     bool reconnect, bool suppress_warnings,
+                             ulong *retry_counter);
 static int safe_sleep(THD* thd, int sec, CHECK_KILLED_FUNC thread_killed,
 		      void* thread_killed_arg);
 static int request_table_dump(MYSQL* mysql, const char* db, const char* table);
 static int create_table_from_dump(THD* thd, NET* net, const char* db,
 				  const char* table_name, bool overwrite);
 static int check_master_version(MYSQL* mysql, MASTER_INFO* mi);
+static void kill_all_dump_threads(void);
+
+// This should be larger than the number of replication events processed
+// every 30 seconds. 30 seconds is the mysql_varz_reporter interval and the
+// value should not be reset within that interval.
+static const int kEvents = 3000;
+
+// Compute max time to execute replication event from the last kEvents events.
+// Mutex not needed because this is only updated by the SQL thread and only
+// one runs.
+static void update_rpl_slowest_event(const time_t start) {
+  time_t end = time(NULL);
+  ulong diff = (ulong) (end - start);
+  if (rpl_slow_events++ >= kEvents || diff > rpl_slowest_event) {
+    rpl_slow_events = 0;
+    rpl_slowest_event = diff;
+  }
+}
+
+// Update the diff between the last timestamp on the slave when a
+// replication event was received and the last timestamp on the master
+// when a replication event was generated. Also compute the max
+// replication delay for the last kEvents events.
+static void update_rpl_last_event() {
+  pthread_mutex_lock(&LOCK_stats);
 
+  if (rpl_last_event_buffered &&
+      rpl_last_event_done &&
+      rpl_last_event_buffered >= rpl_last_event_done) {
+    rpl_last_event_diff = rpl_last_event_buffered - rpl_last_event_done;
+
+    if (rpl_delay_events++ >= kEvents || rpl_last_event_diff > rpl_max_delay) {
+      rpl_delay_events = 0;
+      rpl_max_delay = rpl_last_event_diff;
+    }
+  }
+
+  pthread_mutex_unlock(&LOCK_stats);
+}
 
 /*
   Get a bit mask for which threads are running so that we later can
@@ -434,7 +491,7 @@
 
   rli->slave_skip_counter=0;
   pthread_mutex_lock(&rli->data_lock);
-  if (rli->relay_log.reset_logs(thd))
+  if (rli->relay_log.reset_logs(thd, true))
   {
     *errmsg = "Failed during log reset";
     error=1;
@@ -1389,10 +1446,92 @@
     rli->relay_log.max_size (and mysql_bin_log.max_size).
   */
 
+  char  group_relay_log_name[FN_REFLEN],
+        group_master_log_name[FN_REFLEN];
+  char *last_relay_log_name = NULL;
+  my_off_t group_master_log_pos, group_relay_log_pos;
+  bool  found_relay_info;
+  bool  need_check_master_log;
+
+  strmake(group_relay_log_name, "", FN_REFLEN);
+  group_relay_log_pos   = (my_off_t)-1;
+  found_relay_info      = false;
+  need_check_master_log = false;
+
+  if (rpl_transaction_enabled) {
+    /* data structure initialization */
+    rli->relay_log.set_master_info(active_mi);
+
+    if (ha_innobase::get_mysql_relay_log_pos() == -1) {
+      sql_print_information("replication_load_relay_commit(): no adjustment"
+                            " from InnoDB.");
+    } else {
+      const char *name;
+      char llbuf1[22], llbuf2[22];
+
+      /* update_master_info() might truncate relay-log to avoid re-appending
+       * already appended events during a crash.  We do not want to truncate
+       * before the sql thread has committed.  Otherwise, the sql thread will
+       * get confused.  We read the commit information in InnoDB transaction log
+       * to make sure that truncation would not operate before the point.
+       */
+      name = ha_innobase::get_mysql_relay_log_name();
+      strmake(group_relay_log_name, name, strlen(name));
+      group_relay_log_pos  = ha_innobase::get_mysql_relay_log_pos();
+
+      name = ha_innobase::get_mysql_master_log_name();
+      strmake(group_master_log_name, name, strlen(name));
+      group_master_log_pos = ha_innobase::get_mysql_master_log_pos();
+
+      sql_print_information("Replication status inside InnoDB: "
+                            "relay-log['%s'(%s)], master-log['%s'(%s)]",
+                            group_relay_log_name,
+                            llstr(group_relay_log_pos, llbuf1),
+                            group_master_log_name,
+                            llstr(group_master_log_pos, llbuf2));
+    }
+
+    /* If InnoDB's transaction log does not have any information associated
+     * with replication progress, then do not adjust master.info.  We
+     * only do best effort and trust master.info is correct.  This can happen
+     * under two situations:
+     *  - when we switch a database from an old binary to the new binary.
+     *  - the database is a new copy or from a backup.
+     */
+    if (strlen(group_relay_log_name) > 0 && group_relay_log_pos != -1) {
+      char buf[FN_REFLEN];
+      const char *ln;
+      int error = 0;
+
+      ln = rli->relay_log.generate_name(opt_relay_logname, "-relay-bin",
+                                        1, buf);
+      if (!rli->relay_log.open_index_file(opt_relaylog_index_name, ln)) {
+        sql_print_error("Failed in opening index file");
+        error = 1;
+      } else {
+        error =
+          rli->relay_log.update_master_info(group_relay_log_name,
+                                            group_relay_log_pos,
+                                            group_master_log_name,
+                                            group_master_log_pos,
+                                            &need_check_master_log,
+                                            &found_relay_info);
+        if (error != 0)
+          sql_print_error("Failed in master_info transaction check");
+      }
+
+      rli->relay_log.close_index_file();
+      if (error != 0) {
+        pthread_mutex_unlock(&rli->data_lock);
+        DBUG_RETURN(1);
+      }
+    }
+  }
+
   if (open_log(&rli->relay_log, glob_hostname, opt_relay_logname,
-	       "-relay-bin", opt_relaylog_index_name,
-	       LOG_BIN, 1 /* read_append cache */,
-	       1 /* no auto events */,
+               "-relay-bin", opt_relaylog_index_name,
+               LOG_BIN, 1 /* read_append cache */,
+               1 /* no auto events */,
                max_relay_log_size ? max_relay_log_size : max_binlog_size))
   {
     pthread_mutex_unlock(&rli->data_lock);
@@ -1400,6 +1539,9 @@
     DBUG_RETURN(1);
   }
 
+  if (!rpl_transaction_enabled)
+    found_relay_info = !access(fname,F_OK);
+
   /* if file does not exist */
   if (access(fname,F_OK))
   {
@@ -1438,6 +1580,12 @@
   }
   else // file exists
   {
+    char file_relay_log_name[FN_REFLEN],
+         file_master_log_name[FN_REFLEN];
+    int  file_master_log_pos;
+    int  file_relay_log_pos = 0;
+    bool use_relay_info = 0, read_relay_info_fail = 0;
+
     if (info_fd >= 0)
       reinit_io_cache(&rli->info_file, READ_CACHE, 0L,0,0);
     else 
@@ -1467,24 +1615,90 @@
         DBUG_RETURN(1);
       }
     }
-         
+
+    /* We are going to use relay-log.info under the following situations:
+     *  . transaction support is not enabled
+     *  . we did not find relay information from InnoDB
+     *  . we found relay information from InnoDB, but we need to verify the
+     *    information
+     */
+    use_relay_info =
+      !rpl_transaction_enabled || !found_relay_info || need_check_master_log;
+
     rli->info_fd = info_fd;
-    int relay_log_pos, master_log_pos;
-    if (init_strvar_from_file(rli->relay_log_name,
-			      sizeof(rli->relay_log_name), &rli->info_file,
-			      "") ||
-       init_intvar_from_file(&relay_log_pos,
-			     &rli->info_file, BIN_LOG_HEADER_SIZE) ||
-       init_strvar_from_file(rli->master_log_name,
-			     sizeof(rli->master_log_name), &rli->info_file,
-			     "") ||
-       init_intvar_from_file(&master_log_pos, &rli->info_file, 0))
-    {
-      msg="Error reading slave log configuration";
-      goto err;
+    if (init_strvar_from_file(file_relay_log_name,
+                              sizeof(file_relay_log_name),
+                              &rli->info_file, "") ||
+        init_intvar_from_file(&file_relay_log_pos,
+                              &rli->info_file, BIN_LOG_HEADER_SIZE) ||
+        init_strvar_from_file(file_master_log_name,
+                              sizeof(file_master_log_name),
+                              &rli->info_file, "") ||
+        init_intvar_from_file(&file_master_log_pos, &rli->info_file, 0))
+    {
+      read_relay_info_fail = 1;
+      if (use_relay_info) {
+        msg="Error reading slave log configuration";
+        goto err;
+      }
     }
-    rli->relay_log_pos=  relay_log_pos;
-    rli->master_log_pos= master_log_pos;
+
+    if (read_relay_info_fail) {
+      sql_print_error("SQL thread read relay-log.info failed, ignored by "
+                      "InnoDB transaction information.");
+    } else {
+      sql_print_information("Replication status inside relay-log.info: "
+                            "relay-log['%s'(%d)], master-log['%s'(%d)]",
+                            file_relay_log_name, file_relay_log_pos,
+                            file_master_log_name, file_master_log_pos);
+      if (rpl_transaction_enabled && 
+          (strlen(group_relay_log_name) > 0 &&
+           group_relay_log_pos != -1) &&
+          (strcmp(file_master_log_name, group_master_log_name) != 0 ||
+           group_master_log_pos != (my_off_t)file_master_log_pos)) {
+        sql_print_error("Replication status mis-match between InnoDB and "
+                        "relay-log.info: will take InnoDB status.");
+      }
+    }
+
+    if (use_relay_info) {
+      if (need_check_master_log) {
+        char llbuf[22];
+
+        if (strcmp(file_master_log_name, group_master_log_name) != 0 ||
+            group_master_log_pos != (my_off_t)file_master_log_pos) {
+          sql_print_error("InnoDB replication commit does not match"
+                          " relay-log.info: innodb[%s(%s)], info[%s(%d)]",
+                          group_master_log_name,
+                          llstr(group_master_log_pos, llbuf),
+                          file_master_log_name, file_master_log_pos);
+          goto err;
+        } else {
+          sql_print_information(
+              "InnoDB replication commit information is adjusted by"
+              " relay-log.info: innodb[%s(%s)], info[%s(%d)]",
+              group_relay_log_name, llstr(group_relay_log_pos, llbuf),
+              file_relay_log_name, file_relay_log_pos);
+        }
+      }
+
+      strmake(group_relay_log_name, file_relay_log_name,
+              sizeof(group_relay_log_name));
+      strmake(group_master_log_name, file_master_log_name,
+              sizeof(group_master_log_name));
+      group_master_log_pos = file_master_log_pos;
+      group_relay_log_pos  = file_relay_log_pos;
+      found_relay_info = true;
+    }
+  }
+
+  if (found_relay_info) {
+    strmake(rli->relay_log_name, group_relay_log_name,
+            sizeof(rli->relay_log_name)-1);
+    strmake(rli->master_log_name, group_master_log_name,
+            sizeof(rli->master_log_name)-1);
+    rli->relay_log_pos = group_relay_log_pos;
+    rli->master_log_pos = group_master_log_pos;
 
     if (init_relay_log_pos(rli,
 			   rli->relay_log_name,
@@ -1494,10 +1708,21 @@
     {
       char llbuf[22];
       sql_print_error("Failed to open the relay log '%s' (relay_log_pos %s)",
-		      rli->relay_log_name, llstr(rli->relay_log_pos, llbuf));
+		      rli->relay_log_name,
+		      llstr(rli->relay_log_pos, llbuf));
+      goto err;
+    }
+  } else {  /* not finding relay-info */
+    /* Init relay log with first entry in the relay index file */
+    if (init_relay_log_pos(rli,NullS,BIN_LOG_HEADER_SIZE,0 /* no data lock */,
+			   &msg)) {
+      sql_print_error("Failed to open the relay log 'FIRST' (relay_log_pos 4)");
       goto err;
     }
+    rli->master_log_name[0]= 0;
+    rli->master_log_pos= 0;
   }
+
   DBUG_ASSERT(rli->relay_log_pos >= BIN_LOG_HEADER_SIZE);
   DBUG_ASSERT(my_b_tell(rli->cur_log) == rli->relay_log_pos);
   /*
@@ -1517,7 +1742,8 @@
   DBUG_RETURN(error);
 
 err:
-  sql_print_error(msg);
+  if (msg)
+    sql_print_error(msg);
   end_io_cache(&rli->info_file);
   if (info_fd >= 0)
     my_close(info_fd, MYF(0));
@@ -1692,6 +1918,8 @@
   }
   else // file exists
   {
+    char llbuff[22];
+
     if (fd >= 0)
       reinit_io_cache(&mi->file, READ_CACHE, 0L,0,0);
     else 
@@ -1738,6 +1966,10 @@
     mi->master_log_pos= (my_off_t) master_log_pos;
     mi->port= (uint) port;
     mi->connect_retry= (uint) connect_retry;
+
+    sql_print_information("Read master - info: log_file_name: %s, pos: %s",
+                          mi->master_log_name,
+                          llstr(mi->master_log_pos, llbuff));
   }
   DBUG_PRINT("master_info",("log_file_name: %s  position: %ld",
 			    mi->master_log_name,
@@ -1747,6 +1979,19 @@
   if (init_relay_log_info(&mi->rli, slave_info_fname))
     goto err;
 
+  /* This is purely a sanity check to make sure everything is fine. */
+  if (strcmp(mi->master_log_name, mi->rli.master_log_name) == 0 &&
+      mi->master_log_pos > 0 &&
+      mi->master_log_pos < mi->rli.master_log_pos) {
+    char llbuf1[22], llbuf2[22];
+
+    sql_print_error("SQL thread(%s) is ahead of I/O thread(%s): %s",
+                    llstr(mi->rli.master_log_pos, llbuf2),
+                    llstr(mi->master_log_pos, llbuf1),
+                    mi->master_log_name);
+    goto err;
+  }
+
   mi->inited = 1;
   // now change cache READ -> WRITE - must do this before flush_master_info
   reinit_io_cache(&mi->file, WRITE_CACHE,0L,0,1);
@@ -1813,10 +2058,13 @@
   // TODO: fix this for multi-master
   DBUG_ENTER("show_master_info");
   List<Item> field_list;
-  field_list.push_back(new Item_empty_string("Master_Host",
-						     sizeof(mi->host)));
-  field_list.push_back(new Item_empty_string("Master_User",
-						     sizeof(mi->user)));
+
+  if (mi) {
+    field_list.push_back(new Item_empty_string("Master_Host",
+                                               sizeof(mi->host)));
+    field_list.push_back(new Item_empty_string("Master_User",
+                                               sizeof(mi->user)));
+  }
   field_list.push_back(new Item_empty_string("Master_Port", 6));
   field_list.push_back(new Item_empty_string("Connect_retry", 6));
   field_list.push_back(new Item_empty_string("Master_Log_File",
@@ -1836,10 +2084,14 @@
   field_list.push_back(new Item_empty_string("Skip_counter", 12));
   field_list.push_back(new Item_empty_string("Exec_master_log_pos", 12));
   field_list.push_back(new Item_empty_string("Relay_log_space", 12));
+  field_list.push_back(new Item_empty_string("Until_Condition", 6));
+  field_list.push_back(new Item_empty_string("Until_Log_File", FN_REFLEN));
+  field_list.push_back(new Item_empty_string("Until_Log_Pos", 12));
+
   if (send_fields(thd, field_list, 1))
     DBUG_RETURN(-1);
 
-  if (mi->host[0])
+  if (mi && mi->host[0])
   {
     DBUG_PRINT("info",("host is set: '%s'", mi->host));
     String *packet= &thd->packet;
@@ -1866,6 +2118,12 @@
     net_store_data(packet, mi->rli.slave_skip_counter);
     net_store_data(packet, (longlong) mi->rli.master_log_pos);
     net_store_data(packet, (longlong) mi->rli.log_space_total);
+
+    net_store_data(packet,
+                   mi->rli.until_log_name[0] == 0 ? "None": "Master");
+    net_store_data(packet, mi->rli.until_log_name);
+    net_store_data(packet, (longlong) mi->rli.until_log_pos);
+
     pthread_mutex_unlock(&mi->rli.data_lock);
     pthread_mutex_unlock(&mi->data_lock);
   
@@ -1903,9 +2161,11 @@
    slave_skip_counter(0), abort_pos_wait(0), slave_run_id(0),
    sql_thd(0), last_slave_errno(0), inited(0), abort_slave(0),
    slave_running(0), skip_log_purge(0),
-   inside_transaction(0) /* the default is autocommit=1 */
+   inside_transaction(0) /* the default is autocommit=1 */,
+   until_log_pos(0), future_event_relay_log_pos(0)
 {
   relay_log_name[0] = master_log_name[0] = 0;
+  until_log_name[0] = 0;
   last_slave_error[0]=0;
   
 
@@ -2210,7 +2470,9 @@
 
 
 static int request_dump(MYSQL* mysql, MASTER_INFO* mi,
-			bool *suppress_warnings)
+			bool *suppress_warnings,
+                        bool semi_sync_slave,
+                        bool mirror_binlog_server)
 {
   char buf[FN_REFLEN + 10];
   int len;
@@ -2218,6 +2480,14 @@
   char* logname = mi->master_log_name;
   DBUG_ENTER("request_dump");
 
+  /* If semi-synchronous replication is enabled, set the flag. */
+  if (semi_sync_slave)
+    binlog_flags |= BINLOG_SEMI_SYNC;
+
+  /* If mirror binlog is enabled, indicates to the server. */
+  if (mirror_binlog_server)
+    binlog_flags |= BINLOG_MIRROR_CLIENT;
+
   // TODO if big log files: Change next to int8store()
   int4store(buf, (longlong) mi->master_log_pos);
   int2store(buf + 4, binlog_flags);
@@ -2353,10 +2623,87 @@
   }
 }
 
+/*
+     Check if condition stated in UNTIL clause of START SLAVE is reached.
+   SYNOPSYS
+     st_relay_log_info::is_until_satisfied()
+   DESCRIPTION
+     Checks if UNTIL condition is reached. Return TRUE when the log position
+     for the next event to process == until_log_pos and the master log name
+     == until_log_name. Should be called ONLY when an until condition has been
+     set, in which case until_log_name[0] != 0.
+
+   RETURN VALUE
+     true - condition met
+     false - condition not met
+*/
+
+bool st_relay_log_info::is_until_satisfied()
+{
+  DBUG_ASSERT(until_log_name[0] != 0);
+
+  // Return when there is no until condition and when the master log name
+  // has not been set.
+  if (until_log_name[0] == 0 || master_log_name[0] == 0) {
+    sql_print_error("Slave SQL thread bad state. Checking for until "
+                    "condition with until_log_name or master_log_name "
+                    "clear");
+    clear_until_condition(this);
+    return FALSE;
+  }
+
+  if (strcmp(until_log_name, master_log_name))
+    return FALSE;
+
+  if (master_log_pos == until_log_pos) {
+    return TRUE;
+  }  else if (master_log_pos > until_log_pos) {
+    char buf1[22], buf2[22];
+    sql_print_error("Slave SQL thread missed until condition at position %s "
+                    "with current position at %s for log file %s",
+                    llstr(until_log_pos, buf1),
+                    llstr(master_log_pos, buf2),
+                    until_log_name);
+    clear_until_condition(this);
+    return FALSE;
+  } else {
+    return FALSE;
+  }
+}
 
 static int exec_relay_log_event(THD* thd, RELAY_LOG_INFO* rli)
 {
   DBUG_ASSERT(rli->sql_thd==thd);
+
+  /*
+    Test if the position of the end of the last previous executed event
+    hits the UNTIL barrier. We prefer to test if the position of the start
+    (or possibly) end of the to-be-read event hits the UNTIL barrier, this
+    is different if there was an event ignored by the I/O thread just before
+    (BUG#13861 to be fixed).
+  */
+  if (rli->until_log_pos)
+  {
+    /* Don't worry about a race on until_log_pos to avoid getting and releasing
+       the mutex when it is not set.
+    */
+    pthread_mutex_lock(&rli->data_lock);
+    if (rli->is_until_satisfied())
+    {
+      char buf[22];
+      sql_print_error("Slave SQL thread stopped because it reached its"
+                      " UNTIL position %s", llstr(rli->until_log_pos, buf));
+      /*
+        Setting abort_slave flag because we do not want additional message about
+        error in query execution to be printed.
+      */
+      rli->abort_slave= 1;
+      pthread_mutex_unlock(&rli->data_lock);
+      return 1;
+    }
+    pthread_mutex_unlock(&rli->data_lock);
+  }
+
   Log_event * ev = next_event(rli);
   DBUG_ASSERT(rli->sql_thd==thd);
   if (sql_slave_killed(thd,rli))
@@ -2407,10 +2754,16 @@
   
     thd->server_id = ev->server_id; // use the original server id for logging
     thd->set_time();				// time the query
+    time_t event_start;
     if (!ev->when)
-      ev->when = time(NULL);
+      ev->when = event_start = time(NULL);
+    else
+      event_start = time(NULL);
     ev->thd = thd;
     exec_res = ev->exec_event(rli);
+    rpl_last_event_done = ev->when;
+    update_rpl_last_event();
+    update_rpl_slowest_event(event_start);
     DBUG_ASSERT(rli->sql_thd==thd);
     delete ev;
     return exec_res;
@@ -2439,7 +2792,15 @@
   MASTER_INFO *mi = (MASTER_INFO*)arg; 
   char llbuff[22];
   uint retry_count;
-  
+  ReplMule *mule = NULL;
+
+  bool semi_sync_slave  = semi_sync_replicator.getSlaveEnabled();
+  bool semi_sync_status = false;
+  bool no_replicate     = rpl_mirror_binlog_no_replicate;
+  int  replicate_status_counter = 0;   /* 0: mirror binlog is OFF.
+                                          1: normal state, replicate from OK.
+                                          2: no replicate from binlog server. */
+
   // needs to call my_thread_init(), otherwise we get a coredump in DBUG_ stuff
   my_thread_init();
   DBUG_ENTER("handle_slave_io");
@@ -2489,14 +2850,17 @@
     sql_print_error("Slave I/O thread: error in mc_mysql_init()");
     goto err;
   }
-  
+
+  /* We are trying to connect for the first time: reset the counter. */
+  rpl_fail_io_connections = 0;
 
   thd->proc_info = "Connecting to master";
   // we can get killed during safe_connect
   if (!safe_connect(thd, mysql, mi))
     sql_print_error("Slave I/O thread: connected to master '%s@%s:%d',\
-  replication started in log '%s' at position %s", mi->user,
+ %s replication started in log '%s' at position %s", mi->user,
 		    mi->host, mi->port,
+                    semi_sync_slave ? "semi-sync" : "asynchronous",
 		    IO_RPL_LOG_NAME,
 		    llstr(mi->master_log_pos,llbuff));
   else
@@ -2511,6 +2875,51 @@
   thd->proc_info = "Checking master version";
   if (check_master_version(mysql, mi))
     goto err;
+
+  if (rpl_mirror_binlog_enabled && !mule) {
+    if (opt_binlog_index_name == NULL) {
+      sql_print_error("\"log-bin-index\" must be set in mirror binlog.");
+      goto err;
+    }
+
+    /* Create the mule to generate the exact copy of the binlog. */
+    mule = ReplMule::createReplicationMule(
+        thd, mi, opt_binlog_index_name, &mysql_bin_log);
+
+    if (mule == NULL) {
+      /* If we could not create the mule, we stop the I/O thread and report
+       * an error.
+       */
+      goto err;
+    } else {
+      /* Kill all existing binlog dump threads.  They probably become
+       * zombie right now.  Let them reconnect.
+       */
+      kill_all_dump_threads();
+    }
+  }
+
+  if (mule != NULL && replicate_status_counter == 0) {
+    /* If rpl_mirror_binlog_no_replicate variable is indicated: the status
+     * is 2; otherwise, it is 1.  So, clients only check <status=1>.
+     */
+    if (no_replicate)
+      replicate_status_counter = 2;
+    else
+      replicate_status_counter = 1;
+
+    /* Mirror binlog status is ON now. */
+    thread_safe_add(rpl_mirror_binlog_status, replicate_status_counter,
+                    &LOCK_stats);
+  }
+
+  /* Export the semi-sync status. */
+  if (semi_sync_slave && !semi_sync_status) {
+    /* Semi-sync status is ON now. */
+    thread_safe_add(rpl_semi_sync_slave_status, 1, &LOCK_stats);
+    semi_sync_status = true;
+  }
+
   if (!mi->old_format)
   {
     /*
@@ -2528,7 +2937,8 @@
   {
     bool suppress_warnings= 0;    
     thd->proc_info = "Requesting binlog dump";
-    if (request_dump(mysql, mi, &suppress_warnings))
+    if (request_dump(mysql, mi, &suppress_warnings,
+                     semi_sync_slave, mule != NULL))
     {
       sql_print_error("Failed on request_dump()");
       if (io_slave_killed(thd,mi))
@@ -2552,6 +2962,10 @@
 	safe_sleep(thd,mi->connect_retry,(CHECK_KILLED_FUNC)io_slave_killed,
 		   (void*)mi);
       }
+
+      /* One more connection retries from the I/O thread. */
+      rpl_fail_io_connections++;
+
       if (io_slave_killed(thd,mi))
       {
 	sql_print_error("Slave I/O thread killed while retrying master \
@@ -2575,8 +2989,13 @@
       goto connected;
     }
 
+    /* We are connected now: no failed connection tries. */
+    rpl_fail_io_connections = 0;
+
     while (!io_slave_killed(thd,mi))
     {
+      const char* event_buf;
+      bool need_reply;
       bool suppress_warnings= 0;    
       /* 
          We say "waiting" because read_event() will wait if there's nothing to
@@ -2643,16 +3062,52 @@
 	}
 	goto connected;
       } // if (event_len == packet_error)
-	  
+
+      need_reply = false;
+      if (semi_sync_slave) {
+        if (semi_sync_replicator.slaveReadSyncHeader(
+              (const char*)mysql->net.read_pos + 1, event_len,
+              &need_reply, &event_buf, &event_len) != 0) {
+          sql_print_error("Missing magic number in packet header.");
+          goto err;
+        }
+      } else {
+        event_buf = (const char*)mysql->net.read_pos + 1;
+      }
+
+      if (mule) {
+        ReplMule::WriteStatus d_status =
+          mule->writeEvent(event_buf, event_len);
+        switch (d_status) {
+          case ReplMule::WRITE_RELAY:
+            break;
+          case ReplMule::SKIP_RELAY:
+            /* Skip writing relay event; go back to read the next event */
+            continue;
+          case ReplMule::WRITE_ERROR:
+            goto err;
+        }
+      }
+
+      rpl_last_event_buffered = time(NULL);
+      update_rpl_last_event();
       retry_count=0;			// ok event, reset retry counter
       thd->proc_info = "Queueing master event to the relay log";
-      if (queue_event(mi,(const char*)mysql->net.read_pos + 1,
-		      event_len))
+      if (queue_event(mi,event_buf,event_len))
       {
 	sql_print_error("Slave I/O thread could not queue event from master");
 	goto err;
       }
       flush_master_info(mi, 1);
+
+      /* We can reply the status now. */
+      if (need_reply &&
+          semi_sync_replicator.slaveReply(&mysql->net, mi->master_log_name,
+                                          mi->master_log_pos)) {
+        sql_print_error("Reply semi-sync packet failed.");
+        goto err;
+      }
+
       /*
         See if the relay logs take too much space.
         We don't lock mi->rli.log_space_lock here; this dirty read saves time
@@ -2719,6 +3174,22 @@
   mi->abort_slave = 0; // TODO: check if this is needed
   DBUG_ASSERT(thd->net.buff != 0);
   net_end(&thd->net); // destructor will not free it, because net.vio is 0
+
+  if (mule != NULL) {
+    /* Mirror binlog status is OFF now. */
+    thread_safe_sub(rpl_mirror_binlog_status, replicate_status_counter,
+                    &LOCK_stats);
+
+    delete mule;
+  }
+  if (semi_sync_status) {
+    /* Semi-sync status is OFF now. */
+    thread_safe_sub(rpl_semi_sync_slave_status, 1, &LOCK_stats);
+  }
+
+  /* I/O thread exits: no failed connection tries. */
+  rpl_fail_io_connections = 0;
+
   close_thread_tables(thd, 0);
   pthread_mutex_lock(&LOCK_thread_count);
   THD_CHECK_SENTRY(thd);
@@ -3150,18 +3621,23 @@
     inc_pos= event_len;
     break;
   }
+
+  /* We must update mi->master_log_pos before calling append() because a new
+   * relay-log need correct master position for transactional replicaiton.
+   */
+  mi->master_log_pos+= inc_pos;
   if (likely(!ignore_event))
   {
     if (unlikely(rli->relay_log.append(ev)))
     {
       delete ev;
       pthread_mutex_unlock(&mi->data_lock);
+      mi->master_log_pos-= inc_pos;
       DBUG_RETURN(1);
     }
     rli->relay_log.harvest_bytes_written(&rli->log_space_total);
   }
   delete ev;
-  mi->master_log_pos+= inc_pos;
   DBUG_PRINT("info", ("master_log_pos: %d", (ulong) mi->master_log_pos));
   pthread_mutex_unlock(&mi->data_lock);
   DBUG_RETURN(0);
@@ -3213,13 +3689,22 @@
     break;
   }
   
+  /* We must update mi->master_log_pos before calling appendv() because a new
+   * relay-log need correct master position for transactional replicaiton.
+   */
+  mi->master_log_pos+= inc_pos;
+
+  rli->relay_log.lock_log();
   if (likely(!ignore_event &&
 	     !(error= rli->relay_log.appendv(buf,event_len,0))))
   {
-    mi->master_log_pos+= inc_pos;
     DBUG_PRINT("info", ("master_log_pos: %d", (ulong) mi->master_log_pos));
     rli->relay_log.harvest_bytes_written(&rli->log_space_total);
+  } else {
+    mi->master_log_pos-= inc_pos;
   }
+  rli->relay_log.unlock_log();
+  
   pthread_mutex_unlock(&mi->data_lock);
   DBUG_RETURN(error);
 }
@@ -3257,7 +3742,7 @@
 /* try to connect until successful or slave killed */
 static int safe_connect(THD* thd, MYSQL* mysql, MASTER_INFO* mi)
 {
-  return connect_to_master(thd, mysql, mi, 0, 0);
+  return connect_to_master(thd, mysql, mi, 0, 0, &rpl_fail_io_connections);
 }
 
 
@@ -3267,7 +3752,8 @@
 */
 
 static int connect_to_master(THD* thd, MYSQL* mysql, MASTER_INFO* mi,
-			     bool reconnect, bool suppress_warnings)
+			     bool reconnect, bool suppress_warnings,
+                             ulong *retry_counter)
 {
   int slave_was_killed;
   int last_errno= -2;				// impossible error
@@ -3302,6 +3788,8 @@
 		      mi->connect_retry,
 		      master_retry_count);
     }
+    (*retry_counter)++;
+
     /*
       By default we try forever. The reason is that failure will trigger
       master election, so if the user did not set master_retry_count we
@@ -3353,7 +3841,8 @@
 static int safe_reconnect(THD* thd, MYSQL* mysql, MASTER_INFO* mi,
 			  bool suppress_warnings)
 {
-  return connect_to_master(thd, mysql, mi, 1, suppress_warnings);
+  return connect_to_master(thd, mysql, mi, 1, suppress_warnings,
+                           &rpl_fail_io_connections);
 }
 
 
@@ -3517,6 +4006,13 @@
     if ((ev=Log_event::read_log_event(cur_log,0,(bool)0 /* new format */)))
     {
       DBUG_ASSERT(thd==rli->sql_thd);
+
+      /*
+        read it while we have a lock, to avoid a mutex lock in
+        inc_event_relay_log_pos()
+      */
+      rli->future_event_relay_log_pos= my_b_tell(cur_log);
+
       if (hot_log)
 	pthread_mutex_unlock(log_lock);
       pthread_mutex_unlock(&rli->data_lock);
@@ -3583,8 +4079,13 @@
         */
         pthread_mutex_unlock(&rli->log_space_lock);
         pthread_cond_broadcast(&rli->log_space_cond);
+
         // Note that wait_for_update unlocks lock_log !
-        rli->relay_log.wait_for_update(rli->sql_thd, 1);
+        rli->relay_log.wait_for_update(rli->sql_thd,
+                                       "Has read all relay log; waiting for "
+                                       "the I/O slave thread to update it");
+                                       
+
         // re-acquire data lock since we released it earlier
         pthread_mutex_lock(&rli->data_lock);
 	continue;
@@ -3603,14 +4104,63 @@
 	TODO: make skip_log_purge a start-up option. At this point this
 	is not critical priority
       */
-      if (!rli->skip_log_purge)
+      bool skip_log_purge = rli->skip_log_purge;
+
+      if (rpl_transaction_enabled && !skip_log_purge) {
+        /* Get the relay-log execution process from InnoDB. */
+        ha_innobase::print_mysql_relay_log_pos();
+
+        /* We can not purge files if InnoDB's replication status is
+         * different to relay-log.info.  If we purge the file and stop
+         * the replication after the purge, then the replication can not
+         * continue because the file corresponding to InnoDB status is
+         * purged.  We have to defer the purge during the situation.
+         * 
+         * The following reasons can cause mis-match, which prevents from
+         * purging the relay-log files:
+         *  . DDL/DML on non-InnoDB tables
+         *  . ignore option in replication
+         *  . rotate statements
+         *
+         * Also, we can not purge inside a begin/commit block.
+         */
+        if ((!(thd->options & OPTION_BEGIN)) &&
+            (strlen(ha_innobase::get_mysql_master_log_name()) > 0 &&
+             ha_innobase::get_mysql_master_log_pos() != -1) &&
+            (strcmp(rli->master_log_name,
+                    ha_innobase::get_mysql_master_log_name()) == 0 &&
+             rli->master_log_pos == ha_innobase::get_mysql_master_log_pos())) {
+          /* Delete all files before the current one in case previous
+           * purges left some undelete ones.
+           */
+          if (rli->relay_log.purge_logs(thd, rli->relay_log_name) != 0 ||
+              rli->relay_log.find_log_pos(&rli->linfo, NullS, 1) != 0) {
+            errmsg = "Error purging old logs1";
+            goto err;
+          }
+        } else {
+          /* We can purge all relay files before the recent commit point. */
+          if (strlen(ha_innobase::get_mysql_relay_log_name()) > 0 &&
+              (rli->relay_log.purge_logs(
+                 thd, ha_innobase::get_mysql_relay_log_name()) != 0 ||
+               rli->relay_log.find_log_pos(&rli->linfo,
+                                           rli->relay_log_name, 1) != 0)) {
+            errmsg = "Error purging old logs2";
+            goto err;
+          }
+
+          skip_log_purge = true;
+        }
+      }
+
+      if (!skip_log_purge)
       {
-	// purge_first_log will properly set up relay log coordinates in rli
-	if (rli->relay_log.purge_first_log(rli))
-	{
-	  errmsg = "Error purging processed log";
-	  goto err;
-	}
+        // purge_first_log will properly set up relay log coordinates in rli
+        if (rli->relay_log.purge_first_log(rli))
+        {
+          errmsg = "Error purging processed log";
+          goto err;
+        }
       }
       else
       {
@@ -3761,8 +4311,27 @@
   DBUG_VOID_RETURN;
 }
 
+/* Killed all thread that are doing BINLOG_DUMP command. */
+static void kill_all_dump_threads(void) {
+  pthread_mutex_lock(&LOCK_thread_count);
+  I_List_iterator<THD> it(threads);
+  
+  THD *tmp;
+  while ((tmp=it++)) { 
+    if (tmp->command == COM_BINLOG_DUMP) {
+      pthread_mutex_lock(&tmp->LOCK_delete);    // Lock from delete
+
+      /* ask the thread to die */
+      tmp->awake(1 /*prepare to die*/);
+      pthread_mutex_unlock(&tmp->LOCK_delete);
+    }
+  }
+  pthread_mutex_unlock(&LOCK_thread_count);
+} 
+
 
 #ifdef __GNUC__
 template class I_List_iterator<i_string>;
 template class I_List_iterator<i_string_pair>;
 #endif
+
diff -ruN base/sql/slave.h mysql40gpl/sql/slave.h
--- base/sql/slave.h	2005-09-02 15:38:00.000000000 -0700
+++ mysql40gpl/sql/slave.h	2007-04-21 09:57:13.000000000 -0700
@@ -224,6 +224,34 @@
   bool skip_log_purge;
   bool inside_transaction;
 
+  /*
+     Condition and its parameters from START SLAVE UNTIL clause. This is
+     backported from 4.1 but only supports a position in the master log.
+     4.1 supports stop conditions on either the master or relay log. The
+     backport was not done verbatim. It has been simplified. The SQL thread
+     only stops when there is an exact match on until_log_pos, that is the
+     log position of the next replication event to process must equal
+     until_log_pos. Otherwise, the until condition is ignored.
+
+     The UNTIL condition is not set when:
+       until_log_name[0] == 0
+       until_log_pos = 0
+
+     UNTIL condition is tested with is_until_satisfied() method that is
+     called by exec_relay_log_event().
+   */
+
+  char until_log_name[FN_REFLEN];
+  ulonglong until_log_pos;
+
+  /* This variable always indicates the next event's position in the
+   * relay-log file.
+   */
+  ulonglong future_event_relay_log_pos;
+
+  /* Check if UNTIL condition is satisfied. See slave.cc for more. */
+  bool is_until_satisfied();
+
   st_relay_log_info();
   ~st_relay_log_info();
   void inc_pending(ulonglong val);
@@ -407,6 +435,7 @@
 void slave_print_error(RELAY_LOG_INFO* rli, int err_code, const char* msg, ...);
 
 void end_slave(); /* clean up */
+void clear_until_condition(RELAY_LOG_INFO* rli);
 void init_master_info_with_options(MASTER_INFO* mi);
 void clear_last_slave_error(RELAY_LOG_INFO* rli);
 int init_master_info(MASTER_INFO* mi, const char* master_info_fname,
diff -ruN base/sql/sql_acl.cc mysql40gpl/sql/sql_acl.cc
--- base/sql/sql_acl.cc	2005-09-02 15:38:06.000000000 -0700
+++ mysql40gpl/sql/sql_acl.cc	2007-04-21 09:57:13.000000000 -0700
@@ -151,8 +151,10 @@
   /*
     To be able to run this from boot, we allocate a temporary THD
   */
-  if (!(thd=new THD))
+  if (!(thd=new THD)) {
+    sql_print_error("Fatal error: cannot create thread in acl_init");
     DBUG_RETURN(1); /* purecov: inspected */
+  }
   thd->store_globals();
 
   acl_cache->clear(1);				// Clear locked hostname cache
@@ -375,13 +377,17 @@
   SYNOPSIS
     acl_reload()
     thd			Thread handle
+  RETURN
+    0 -> success
+    1 -> failure
 */
 
-void acl_reload(THD *thd)
+bool acl_reload(THD *thd)
 {
   DYNAMIC_ARRAY old_acl_hosts,old_acl_users,old_acl_dbs;
   MEM_ROOT old_mem;
   bool old_initialized;
+  bool has_error=0;
   DBUG_ENTER("acl_reload");
 
   if (thd && thd->locked_tables)
@@ -408,6 +414,7 @@
     acl_dbs=old_acl_dbs;
     mem=old_mem;
     init_check_host();
+    has_error=1;
   }
   else
   {
@@ -418,7 +425,7 @@
   }
   if (old_initialized)
     VOID(pthread_mutex_unlock(&acl_cache->lock));
-  DBUG_VOID_RETURN;
+  DBUG_RETURN(has_error);
 }
 
 
@@ -1676,8 +1683,16 @@
   key_length =(uint) strlen(d)+(uint) strlen(u)+(uint) strlen(t)+3;
   hash_key = (char*) alloc_root(&memex,key_length);
   strmov(strmov(strmov(hash_key,user)+1,db)+1,tname);
-  (void) hash_init(&hash_columns,0,0,0, (hash_get_key) get_key_column,0,
-                   HASH_CASE_INSENSITIVE);
+
+  // Measurement has shown that the vast, vast majority of these
+  // hashes are empty or near empty (99.99%), with worst case being 20
+  // elements.  So we start with 4 elements and grow by 4.  The hit in
+  // allocation is small (unmeasurable) and only happens at privilege
+  // flush time and startup time.  We create a great number of these
+  // hashes, most of which are empty, so it is important to be memory
+  // conservative.
+  (void) hash_init2(&hash_columns,4,4,0,0, (hash_get_key) get_key_column,
+                    0, HASH_CASE_INSENSITIVE);
 }
 
 
@@ -1717,8 +1732,9 @@
   privs = fix_rights_for_table(privs);
   cols =  fix_rights_for_column(cols);
 
-  (void) hash_init(&hash_columns,0,0,0, (hash_get_key) get_key_column,0,
-                   HASH_CASE_INSENSITIVE);
+  // Same logic as the call to hash_init2 in the other constructor.
+  (void) hash_init2(&hash_columns,4,4,0,0, (hash_get_key) get_key_column,0,
+                    HASH_CASE_INSENSITIVE);
   if (cols)
   {
     int key_len;
@@ -2489,15 +2505,17 @@
 
   grant_option = FALSE;
   (void) hash_init(&hash_tables,0,0,0, (hash_get_key) get_grant_table,
-		   (hash_free_key) free_grant_table,0);
+                   (hash_free_key) free_grant_table,0);
   init_sql_alloc(&memex, ACL_ALLOC_BLOCK_SIZE, 0);
 
   /* Don't do anything if running with --skip-grant */
   if (!initialized)
     DBUG_RETURN(0);				/* purecov: tested */
 
-  if (!(thd=new THD))
+  if (!(thd=new THD)) {
+    sql_print_error("Error: cannot create thread in grant_init");
     DBUG_RETURN(1);				/* purecov: deadcode */
+  }
   thd->store_globals();
   thd->db= my_strdup("mysql",MYF(0));
   thd->db_length=5;				// Safety
@@ -2508,14 +2526,18 @@
   tables[0].lock_type=tables[1].lock_type=TL_READ;
   tables[0].db=tables[1].db=thd->db;
 
-  if (open_tables(thd,tables))
+  if (open_tables(thd,tables)) {
+    sql_print_error("Error: open_tables fails in grant_init");
     goto end;
+  }
 
   TABLE *ptr[2];				// Lock tables for quick update
   ptr[0]= tables[0].table;
   ptr[1]= tables[1].table;
-  if (! (lock= mysql_lock_tables(thd, ptr, 2, 0)))
+  if (! (lock= mysql_lock_tables(thd, ptr, 2, 0))) {
+    sql_print_error("Error: mysql_lock_tables fails in grant_init");
     goto end;
+  }
 
   t_table = tables[0].table; c_table = tables[1].table;
   t_table->file->index_init(0);
@@ -2538,6 +2560,7 @@
     {
       /* This could only happen if we are out memory */
       grant_option= FALSE;			/* purecov: deadcode */
+      sql_print_error("Error: out of memory in grant_init");
       goto end_unlock;
     }
   }
@@ -2569,16 +2592,19 @@
   SYNOPSIS
     grant_reload()
     thd			Thread handler
-
+  RETURN
+    0 -> ok
+    1 -> failure
   NOTES
     Locked tables are checked by acl_init and doesn't have to be checked here
 */
 
-void grant_reload(THD *thd)
+bool grant_reload(THD *thd)
 {
   HASH old_hash_tables;
   bool old_grant_option;
   MEM_ROOT old_mem;
+  bool has_error=0;
   DBUG_ENTER("grant_reload");
 
   pthread_mutex_lock(&LOCK_grant);
@@ -2593,6 +2619,7 @@
     hash_tables=old_hash_tables;		/* purecov: deadcode */
     grant_option= old_grant_option;		/* purecov: deadcode */
     memex = old_mem;				/* purecov: deadcode */
+    has_error=1;
   }
   else
   {
@@ -2600,9 +2627,22 @@
     free_root(&old_mem,MYF(0));
   }
   pthread_mutex_unlock(&LOCK_grant);
-  DBUG_VOID_RETURN;
+  DBUG_RETURN(has_error);
 }
 
+/***************************************************************************
+ * Given an input table name, check whether it is already in the
+ * database.
+ * The check is being done by checking the corresponding .frm file.
+ ***************************************************************************/
+static bool table_exists(THD *thd, const char *db, const char *tname) {
+  char path[FN_REFLEN];
+  DBUG_ENTER("table_exists");
+
+  sprintf(path, "%s/%s/%s.frm", mysql_data_home, db, tname);
+  fn_format(path, path, "", "", 4+16+32);
+  DBUG_RETURN(access(path, F_OK) == 0);
+}
 
 /****************************************************************************
   Check table level grants
@@ -2615,6 +2655,9 @@
   TABLE_LIST *table;
   char *user = thd->priv_user;
 
+  // whether we are checking a non-existing table
+  bool not_exist_table = false;
+
   want_access &= ~thd->master_access;
   if (!want_access)
     return 0;					// ok
@@ -2632,6 +2675,13 @@
 						 table->real_name,0);
     if (!grant_table)
     {
+      /* Find whether the table exist or not.  We do not need the check
+       * for create statement because the table is new.
+       */
+      if (!(want_access & (CREATE_ACL)) &&
+          !table_exists(thd, table->db, table->real_name))
+        not_exist_table = true;
+
       want_access &= ~table->grant.privilege;
       goto err;					// No grants
     }
@@ -2660,13 +2710,19 @@
   pthread_mutex_unlock(&LOCK_grant);
   if (!no_errors)				// Not a silent skip of table
   {
-    char command[128];
-    get_privilege_desc(command, sizeof(command), want_access);
-    net_printf(&thd->net,ER_TABLEACCESS_DENIED_ERROR,
-	       command,
-	       thd->priv_user,
-	       thd->host_or_ip,
-	       table ? table->real_name : "unknown");
+    if (!not_exist_table) {
+      char command[128];
+      get_privilege_desc(command, sizeof(command), want_access);
+      net_printf(&thd->net,ER_TABLEACCESS_DENIED_ERROR,
+                 command,
+                 thd->priv_user,
+                 thd->host_or_ip,
+                 table->real_name);
+    } else if (not_exist_table) {
+      net_printf(&thd->net, ER_NO_SUCH_TABLE,
+                 table->db,
+                 table->real_name);
+    }
   }
   return 1;
 }
diff -ruN base/sql/sql_acl.h mysql40gpl/sql/sql_acl.h
--- base/sql/sql_acl.h	2005-09-02 15:38:00.000000000 -0700
+++ mysql40gpl/sql/sql_acl.h	2007-04-21 09:57:13.000000000 -0700
@@ -82,7 +82,8 @@
 /* prototypes */
 
 my_bool  acl_init(THD *thd, bool dont_read_acl_tables);
-void acl_reload(THD *thd);
+// Reverse boolean, =0 is success and !=0 is failure.
+bool acl_reload(THD *thd);
 void acl_free(bool end=0);
 ulong acl_get(const char *host, const char *ip, const char *bin_ip,
 	      const char *user, const char *db, my_bool db_is_pattern);
@@ -101,7 +102,8 @@
 		      bool revoke);
 my_bool grant_init(THD *thd);
 void grant_free(void);
-void grant_reload(THD *thd);
+// Reverse boolean, =0 is success and !=0 is failure.
+bool grant_reload(THD *thd);
 bool check_grant(THD *thd, ulong want_access, TABLE_LIST *tables,
 		 uint show_command=0, bool dont_print_error=0);
 bool check_grant_column (THD *thd,TABLE *table, const char *name, uint length,
diff -ruN base/sql/sql_base.cc mysql40gpl/sql/sql_base.cc
--- base/sql/sql_base.cc	2005-09-02 15:37:55.000000000 -0700
+++ mysql40gpl/sql/sql_base.cc	2007-04-21 11:11:54.000000000 -0700
@@ -488,6 +488,9 @@
   TABLE *table= *table_ptr;
   DBUG_ASSERT(table->key_read == 0);
 
+  table->file->update_global_table_stats();
+  table->file->update_global_index_stats();
+
   *table_ptr=table->next;
   if (table->version != refresh_version ||
       thd->version != refresh_version || !table->db_stat)
@@ -527,6 +530,9 @@
 {
   DBUG_ENTER("close_temporary");
   char path[FN_REFLEN];
+
+  table->file->update_global_table_stats();
+  table->file->update_global_index_stats();
   db_type table_type=table->db_type;
   strmov(path,table->path);
   free_io_cache(table);
diff -ruN base/sql/sql_class.cc mysql40gpl/sql/sql_class.cc
--- base/sql/sql_class.cc	2005-09-02 15:37:59.000000000 -0700
+++ mysql40gpl/sql/sql_class.cc	2007-04-21 09:57:13.000000000 -0700
@@ -80,7 +80,7 @@
 
 THD::THD():user_time(0),global_read_lock(0),fatal_error(0),
            last_insert_id_used(0),insert_id_used(0),rand_used(0),
-           in_lock_tables(0),bootstrap(0)
+           in_lock_tables(0),bootstrap(0),semi_sync_slave(0)
 {
   host=user=priv_user=db=query=ip=0;
   host_or_ip= "connecting host";
@@ -97,6 +97,7 @@
   lock=locked_tables=0;
   used_tables=0;
   cuted_fields=sent_row_count=0L;
+  updated_row_count=0L;
   start_time=(time_t) 0;
   current_linfo =  0;
   slave_thread = 0;
@@ -104,6 +105,7 @@
   file_id = 0;
   cond_count=0;
   mysys_var=0;
+  busy_time = 0;
 #ifndef DBUG_OFF
   dbug_sentry=THD_SENTRY_MAGIC;
 #endif  
@@ -181,6 +183,47 @@
 			TL_WRITE_LOW_PRIORITY :
 			TL_WRITE);
   session_tx_isolation= (enum_tx_isolation) variables.tx_isolation;
+  reset_stats();
+}
+
+// Resets stats in a THD.
+void THD::reset_stats(void) {
+  current_connect_time = time(NULL);
+  last_global_update_time = current_connect_time;
+  reset_diff_stats();
+}
+
+// Resets the 'diff' stats, which are used to update global stats.
+void THD::reset_diff_stats(void) {
+  diff_total_busy_time = 0;
+  diff_total_sent_rows = 0;
+  diff_total_updated_rows = 0;
+  diff_select_commands = 0;
+  diff_update_commands = 0;
+  diff_other_commands = 0;
+  diff_commit_trans = 0;
+  diff_rollback_trans = 0;
+}
+
+// Updates 'diff' stats of a THD.
+void THD::update_stats() {
+  diff_total_busy_time += busy_time;
+  diff_total_sent_rows += sent_row_count;
+  diff_total_updated_rows += updated_row_count;
+  // The replication thread has the COM_CONNECT command.
+  if ((old_command == COM_QUERY || command == COM_CONNECT) &&
+      (lex.sql_command >= 0 && lex.sql_command < SQLCOM_END)) {
+    // A SQL query.
+    if (lex.sql_command == SQLCOM_SELECT) {
+      diff_select_commands++;
+    } else if (uc_update_queries[lex.sql_command]) {
+      diff_update_commands++;
+    } else {
+      diff_other_commands++;
+    }
+  }
+  // diff_commit_trans is updated in handler.cc.
+  // diff_rollback_trans is updated in handler.cc.
 }
 
 /*
diff -ruN base/sql/sql_class.h mysql40gpl/sql/sql_class.h
--- base/sql/sql_class.h	2005-09-02 15:38:04.000000000 -0700
+++ mysql40gpl/sql/sql_class.h	2007-04-21 09:57:13.000000000 -0700
@@ -43,6 +43,11 @@
 #define LOG_INFO_FATAL -7
 #define LOG_INFO_IN_USE -8
 
+/* If the maximum size is equal to this value, binlog would not rotate on
+ * size limit.
+ */
+#define BINLOG_NOSWITCH_SIZE  ((ulong) -1)
+
 /* bitmap to SQL_LOG::close() */
 #define LOG_CLOSE_INDEX		1
 #define LOG_CLOSE_TO_BE_OPENED	2
@@ -62,9 +67,10 @@
 } LOG_INFO;
 
 class Log_event;
+typedef struct st_master_info MASTER_INFO;
 
 class MYSQL_LOG
- {
+{
  private:
   /* LOCK_log and LOCK_index are inited by init_pthread_objects() */
   pthread_mutex_t LOCK_log, LOCK_index;
@@ -89,6 +95,7 @@
   bool write_error, inited;
   bool need_start_event;
   bool no_auto_events; // for relay binlog
+
   /* 
      The max size before rotation (usable only if log_type == LOG_BIN: binary
      logs and relay logs).
@@ -100,8 +107,70 @@
      fix_max_relay_log_size). 
   */
   ulong max_size;
+  /*
+     Set when change (DDL, insert, update, delete, ...) statements should be
+     logged for root. Any thread with SUPER_ACL set in THD->master_access is
+     root. This is FALSE by default.
+   */
+  my_bool log_for_root;
   friend class Log_event;
 
+  /* whether the log is associated with master-log's reading */
+  MASTER_INFO *active_mi_;
+
+  /* mule replication mode */
+  bool mule_binlog;
+  bool mule_binlog_servable;
+
+  /* Find the master-log information specifed by relay-log position; find the
+   * last valid event in the relay-log.
+   * If the index file is missing the corresponding relay-log file, it means
+   * that the user has reset the replication and wants to start from scratch
+   * again.
+   *
+   * Input:
+   *  relay_log_name   - (IN)  the relay log filename to be opened
+   *  relay_log_pos    - (IN)  the relay log committed position
+   *                           (if -1, no commit information is available)
+   *  master_log_name  - (IN) master-log filename corresponding to relay pos
+   *  master_log_pos   - (IN) master-log position corresponding to relay pos
+   *  last_master_log_name - (OUT) last valid master-log filename
+   *  last_master_log_pos  - (OUT) last valid master-log position
+   *  relay_file_error  - (OUT) whether there is relay file reading error
+   *  last_valid_offset - (OUT) the last valid event's offset
+   *  relay_file_size   - (OUT) the relay-log file's size
+   *  errmsg            - (OUT) error message if there are any
+   *
+   * Returns:
+   *  whether we encountered any log file openning errors
+   */
+  bool find_master_pos_inlog(const char *relay_log_name,
+                             ulonglong relay_log_pos,
+                             const char *master_log_name,
+                             ulonglong master_log_pos,
+                             char *last_master_log_name,
+                             ulonglong *last_master_log_pos,
+                             bool *relay_file_error,
+                             my_off_t *last_valid_offset,
+                             my_off_t *relay_file_size,
+                             const char **errmsg);
+
+  /* Extract master-log's log filename and log position from the specified
+   * event if the information is guaranteed to be correct.
+   *
+   * Input:
+   *  ev              - (IN)  the relay-log event to extract master information
+   *  master_log_name - (OUT) the extracted master's log name
+   *  master_log_pos  - (OUT) the extracted master's log position
+   *
+   * Return:
+   *  true:  the master-log information is extracted
+   *  false: otherwise
+   *
+   */
+  bool extract_master_info(Log_event* ev, char *master_log_name,
+                           my_off_t *master_log_pos);
+
 public:
   MYSQL_LOG();
   ~MYSQL_LOG();
@@ -123,7 +192,7 @@
   }
   void set_max_size(ulong max_size_arg);
   void signal_update() { pthread_cond_broadcast(&update_cond);}
-  void wait_for_update(THD* thd, bool master_or_slave);
+  void wait_for_update(THD* thd, const char *new_msg);
   void set_need_start_event() { need_start_event = 1; }
   void init(enum_log_type log_type_arg,
 	    enum cache_type io_cache_type_arg,
@@ -134,7 +203,7 @@
 	    const char *new_name, const char *index_file_name_arg,
 	    enum cache_type io_cache_type_arg,
 	    bool no_auto_events_arg, ulong max_size);
-  void new_file(bool need_lock= 1);
+  void new_file(bool need_lock= 1, const char* log_filename= NULL);
   bool write(THD *thd, enum enum_server_command command,
 	     const char *format,...);
   bool write(THD *thd, const char *query, uint query_length,
@@ -154,7 +223,7 @@
   bool is_active(const char* log_file_name);
   int purge_logs(THD* thd, const char* to_log);
   int purge_first_log(struct st_relay_log_info* rli); 
-  bool reset_logs(THD* thd);
+  bool reset_logs(THD* thd, bool create_new_file);
   void close(uint exiting);
 
   // iterating through the log index file
@@ -163,7 +232,30 @@
   int find_next_log(LOG_INFO* linfo, bool need_mutex);
   int get_current_log(LOG_INFO* linfo);
   uint next_file_id();
-  inline bool is_open() { return log_type != LOG_CLOSED; }
+
+  /* Because mysql use is_open() to check whether replication is on,
+   * we will let the check fail during binlog mule mode.  Mule replication
+   * and normal master replication can not be on at the same time.
+   *
+   * is_log_open():  the binlog file is open for either purpose
+   *
+   * is_open():      the binlog is open for master replication.
+   * is_mule_open(): the binlog is open for mirror binlog or for
+   *                 replication mule; refer repl_mule.h for details
+   */
+  inline bool is_log_open() {
+    return log_type != LOG_CLOSED;
+  }
+  inline bool is_open() {
+    return (!mule_binlog) && is_log_open();
+  }
+  inline bool is_mule_open() {
+    return (mule_binlog) && is_log_open();
+  }
+  inline bool is_mule_servable() {
+    return mule_binlog_servable;
+  }
+
   inline char* get_index_fname() { return index_file_name;}
   inline char* get_log_fname() { return log_file_name; }
   inline pthread_mutex_t* get_log_lock() { return &LOCK_log; }
@@ -171,8 +263,70 @@
 
   inline void lock_index() { pthread_mutex_lock(&LOCK_index);}
   inline void unlock_index() { pthread_mutex_unlock(&LOCK_index);}
+  inline void lock_log() { pthread_mutex_lock(&LOCK_log);}
+  inline void unlock_log() { pthread_mutex_unlock(&LOCK_log);}
   inline IO_CACHE *get_index_file() { return &index_file;}
   inline uint32 get_open_count() { return open_count; }
+  void set_log_for_root(my_bool value) { log_for_root = value; }
+  my_bool get_log_for_root() const { return log_for_root; }
+
+  const char *generate_name(const char *log_name, const char *suffix,
+                            bool strip_ext, char *buff);
+
+  /* Open the index file for all log filenames.
+   * Return:
+   *  true   - index file is opened
+   *  false  - index file is not opened
+   */
+  bool open_index_file(const char *index_file_name_arg,
+                       const char *log_name);
+
+  /* Close the index file.
+   * Return:
+   *  0   - no error during the close of the index file
+   *  1   - an error occurred during the close
+   */
+  int close_index_file();
+
+  /* Update master-log's log filename and log position based on events in
+   * the last relay-log.
+   *
+   * Input:
+   *  relay_log_name    - (IN) replication's last committed relay-log name
+   *  relay_log_pos     - (IN) replication's last committed relay-log position
+   *  master_log_name   - (IN) replication's last committed master-log name
+   *  master_log_pos    - (IN) replication's last committed master-log position
+   *  need_check_master_log - (OUT) whether we need to check with relay-log.info
+   *  found_relay_info      - (OUT) indicating the the relay-log information
+   *                                is valid
+   * Returns:
+   *   whether encountered any errors during the function
+   */
+  int update_master_info(const char *relay_log_name,
+                         ulonglong relay_log_pos,
+                         const char *master_log_name,
+                         ulonglong master_log_pos,
+                         bool *need_check_master_log,
+                         bool *found_relay_info);
+
+  inline void set_master_info(MASTER_INFO *mi) {
+    active_mi_ = mi;
+  }
+  inline MASTER_INFO *get_master_info() {
+    return active_mi_;
+  }
+
+  /* Look in file repl_mule.h for the definition of mule. */
+  inline void set_mule_mode(bool log_servable) {
+    mule_binlog = true;
+    mule_binlog_servable = log_servable;
+  }
+  inline void clear_mule_mode() {
+    mule_binlog = false;
+    mule_binlog_servable = false;
+  }
+
+  int flush_log_file();
 };
 
 /* character conversion tables */
@@ -305,7 +459,6 @@
   ha_rows max_join_size;
   ulong bulk_insert_buff_size;
   ulong join_buff_size;
-  ulong long_query_time;
   ulong max_allowed_packet;
   ulong max_heap_table_size;
   ulong max_sort_length;
@@ -340,6 +493,7 @@
   my_bool query_cache_wlock_invalidate;
 #ifdef HAVE_INNOBASE_DB
   my_bool innodb_table_locks;
+  my_bool innodb_clear_replication_status;
 #endif /* HAVE_INNOBASE_DB */
 
   CONVERT *convert_set;
@@ -433,6 +587,8 @@
 #endif  
   struct st_my_thread_var *mysys_var;
   enum enum_server_command command;
+  // Used to save the command, before it is set to COM_SLEEP.
+  enum enum_server_command old_command;
   uint32     server_id;
   uint32     file_id;			// for LOAD DATA INFILE
   /*
@@ -476,6 +632,7 @@
              limit_found_rows;
   ha_rows    select_limit, offset_limit, cuted_fields,
              sent_row_count, examined_row_count;
+  ha_rows    updated_row_count;
   table_map  used_tables;
   USER_CONN *user_connect;
   ulong	     query_id,version, options,thread_id, col_access;
@@ -497,6 +654,7 @@
   bool       query_error, bootstrap, cleanup_done;
   bool	     safe_to_cache_query;
   bool	     volatile killed;
+  bool       semi_sync_slave;
   /*
     If we do a purge of binary logs, log index info of the threads
     that are currently reading it needs to be adjusted. To do that
@@ -509,7 +667,27 @@
   */
   ulong	     slave_proxy_id;
   NET*       slave_net;			// network connection from slave -> m.
-   
+
+  /*
+    Used to update global user stats.  The global user stats are updated
+    occasionally with the 'diff' variables.  After the update, the 'diff'
+    variables are reset to 0.
+   */
+  // Time when the current thread connected to MySQL.
+  time_t current_connect_time;
+  // Last time when THD stats were updated in global_user_stats.
+  time_t last_global_update_time;
+  // Busy (non-idle) time for just one command.
+  double busy_time;
+  // Busy time not updated in global_user_stats yet.
+  double diff_total_busy_time;
+  // Number of rows not reflected in global_user_stats yet.
+  ha_rows diff_total_sent_rows, diff_total_updated_rows;
+  // Number of commands not reflected in global_user_stats yet.
+  ulonglong diff_select_commands, diff_update_commands, diff_other_commands;
+  // Number of transactions not reflected in global_user_stats yet.
+  ulonglong diff_commit_trans, diff_rollback_trans;
+
   /* Used by the sys_var class to store temporary values */
   union
   {
@@ -520,6 +698,9 @@
   THD();
   ~THD();
   void init(void);
+  void reset_stats(void);
+  void reset_diff_stats(void);
+  void update_stats(void);
   void change_user(void);
   void cleanup(void);
   bool store_globals();
@@ -945,4 +1126,3 @@
   int  do_updates (bool from_send_error);
   bool send_eof();
 };
-
diff -ruN base/sql/sql_delete.cc mysql40gpl/sql/sql_delete.cc
--- base/sql/sql_delete.cc	2005-09-02 15:38:01.000000000 -0700
+++ mysql40gpl/sql/sql_delete.cc	2007-04-21 09:57:13.000000000 -0700
@@ -221,6 +221,7 @@
     send_ok(&thd->net,deleted);
     DBUG_PRINT("info",("%d records deleted",deleted));
   }
+  thd->updated_row_count += deleted;
   DBUG_RETURN(0);
 }
 
@@ -520,6 +521,7 @@
     ::send_error(&thd->net);
   else
     ::send_ok(&thd->net,deleted);
+  thd->updated_row_count += deleted;
   return 0;
 }
 
diff -ruN base/sql/sql_insert.cc mysql40gpl/sql/sql_insert.cc
--- base/sql/sql_insert.cc	2005-09-02 15:38:05.000000000 -0700
+++ mysql40gpl/sql/sql_insert.cc	2007-04-21 09:57:13.000000000 -0700
@@ -126,8 +126,9 @@
 
   if (thd->master_access & SUPER_ACL)
   {
-    if (!(thd->options & OPTION_UPDATE_LOG))
-      log_on&= ~(int) DELAYED_LOG_UPDATE;
+    // Do not allow root to prevent writing changes to the update log.
+    // if (!(thd->options & OPTION_UPDATE_LOG))
+    // log_on&= ~(int) DELAYED_LOG_UPDATE;
     if (!(thd->options & OPTION_BIN_LOG))
       log_on&= ~(int) DELAYED_LOG_BIN;
   }
@@ -362,6 +363,7 @@
 	      thd->cuted_fields);
     ::send_ok(&thd->net,info.copied+info.deleted,(ulonglong)id,buff);
   }
+  thd->updated_row_count += info.copied + info.deleted;
   DBUG_RETURN(0);
 
 abort:
@@ -1486,6 +1488,7 @@
     sprintf(buff,ER(ER_INSERT_INFO),info.records,info.deleted,
             thd->cuted_fields);
   ::send_ok(&thd->net,info.copied+info.deleted,last_insert_id,buff);
+  thd->updated_row_count += info.copied + info.deleted;
   return 0;
 }
 
diff -ruN base/sql/sql_lex.h mysql40gpl/sql/sql_lex.h
--- base/sql/sql_lex.h	2005-09-02 15:37:55.000000000 -0700
+++ mysql40gpl/sql/sql_lex.h	2007-04-21 12:43:54.000000000 -0700
@@ -45,6 +45,7 @@
   SQLCOM_SHOW_DATABASES, SQLCOM_SHOW_TABLES, SQLCOM_SHOW_FIELDS,
   SQLCOM_SHOW_KEYS, SQLCOM_SHOW_VARIABLES, SQLCOM_SHOW_LOGS, SQLCOM_SHOW_STATUS,
   SQLCOM_SHOW_INNODB_STATUS,
+  SQLCOM_SHOW_USER_STATS, SQLCOM_SHOW_TABLE_STATS, SQLCOM_SHOW_INDEX_STATS,
   SQLCOM_SHOW_PROCESSLIST, SQLCOM_SHOW_MASTER_STAT, SQLCOM_SHOW_SLAVE_STAT,
   SQLCOM_SHOW_GRANTS, SQLCOM_SHOW_CREATE,
 
@@ -65,6 +66,7 @@
   SQLCOM_SHOW_SLAVE_HOSTS, SQLCOM_DELETE_MULTI, SQLCOM_MULTI_UPDATE,
   SQLCOM_SHOW_BINLOG_EVENTS, SQLCOM_SHOW_NEW_MASTER, SQLCOM_DO,
   SQLCOM_EMPTY_QUERY,
+  SQLCOM_MAKE_MASTER,
   SQLCOM_END
 };
 
@@ -84,12 +86,17 @@
 
 typedef struct st_lex_master_info
 {
-  char *host, *user, *password, *log_file_name;
+  char *host, *user, *password, *log_file_name, *log_index_name;
   uint port, connect_retry;
   ulonglong pos;
   ulong server_id;
   char *relay_log_name;
   ulong relay_log_pos;
+
+  /* the following fields are used for make master command */
+  bool in_failover;
+  bool kill_session;
+  bool with_old_binlog;
 } LEX_MASTER_INFO;
 
 
diff -ruN base/sql/sql_parse.cc mysql40gpl/sql/sql_parse.cc
--- base/sql/sql_parse.cc	2005-09-02 15:37:55.000000000 -0700
+++ mysql40gpl/sql/sql_parse.cc	2007-04-21 11:30:58.000000000 -0700
@@ -18,10 +18,13 @@
 #include "sql_acl.h"
 #include "sql_repl.h"
 #include "repl_failsafe.h"
+#include "my_sys.h"
 #include <m_ctype.h>
 #include <myisam.h>
 #include <my_dir.h>
 #include <assert.h>
+#include <malloc.h>
+#include "repl_semi_sync.h"
 
 #ifdef HAVE_INNOBASE_DB
 #include "ha_innodb.h"
@@ -67,7 +70,19 @@
 			      TABLE_LIST **result, bool skip_first);
 static bool check_one_table_access(THD *thd, ulong want_access,
 				   TABLE_LIST *table, bool no_errors);
+// Set malloc stats for variables displayed by mysqld_show().
+static void set_malloc_stats();
 
+// Set VM stats for variables displayed by mysqld_show().
+static void set_vm_stats();
+
+// Set stats for concurrent connections displayed by mysqld_show().
+static void set_concurrent_connections_stats();
+
+// Increments connection count for user.
+static int increment_connection_count(THD* thd, bool use_lock);
+// Uses the THD to update the global stats.
+static void update_global_user_stats(THD* thd);
 
 const char *any_db="*any*";	// Special symbol for check_access
 
@@ -81,6 +96,109 @@
 
 bool volatile abort_slave = 0;
 
+// The following export malloc statistics.
+ulonglong malloc_sbrk_bytes_alloc = 0; // Bytes allocated by sbrk
+ulong malloc_chunks_free = 0; // Allocated chunks that are free
+ulong malloc_mmap_chunks_alloc = 0; // Chunks allocated by mmap
+ulonglong malloc_mmap_bytes_alloc = 0; // Bytes allocated by mmap
+ulonglong malloc_bytes_used = 0; // Bytes in use by malloc callers
+ulonglong malloc_bytes_free = 0; // Bytes allocated by malloc, but free
+
+// The following export VM stats from /proc/self/status
+ulonglong vm_size = 0; // Size of process address space in bytes
+ulonglong vm_data = 0; // Size of address space for data in bytes
+ulonglong vm_rss = 0;  // Size of address space resident in memory in bytes
+
+// Export binlog stats
+ulong binlog_largest_event = 0; // Largest event written to the binlog.
+ulonglong binlog_events = 0; // Number of events written to the binlog.
+
+HASH global_user_stats;
+extern pthread_mutex_t LOCK_global_user_stats;
+
+HASH global_table_stats;
+extern pthread_mutex_t LOCK_global_table_stats;
+
+HASH global_index_stats;
+extern pthread_mutex_t LOCK_global_index_stats;
+
+extern ReplSemiSync semi_sync_replicator;
+
+/*
+ * Set the global variables for malloc stats. These are printed by
+ * mysqld_show() when 'show status' is executed.
+ */
+static void set_malloc_stats()
+{
+  struct mallinfo mi = mallinfo();
+  malloc_sbrk_bytes_alloc = (ulonglong) mi.arena;
+  malloc_chunks_free = (ulong) mi.ordblks;
+  malloc_mmap_chunks_alloc = (ulong) mi.hblks;
+  malloc_mmap_bytes_alloc = (ulonglong) mi.hblkhd;
+  malloc_bytes_used = (ulonglong) mi.uordblks;
+  malloc_bytes_free = (ulonglong) mi.fordblks;
+}
+
+/*
+ * Set the global variables vm_size, vm_data and vm_rss. These are printed by
+ * mysqld_show() when 'show status' is executed.
+ *
+ * This exports VM statistics read from /proc/self/status. It parses the
+ * integer values from the lines in /proc/self/status for the keys:
+ *   VmSize: <int>
+ *   VmData: <int>
+ *   VmRSS: <int>
+ *
+ * This function sacrifices performance for the sake of simplicity. Rather
+ * than read a line from the file at a time, each search for a key searches
+ * from the start of the file contents. This avoids the need to find the
+ * end of each line. This also assumes that the file has less than 8000 bytes.
+ */
+static void set_vm_stats()
+{
+  int fd = -1;
+  char* buf = 0;
+  char* buf_end = 0;
+  int read_amt;
+  const int kBufSize = 8000;
+  // Search for lines that begin with the following values.
+  char const* const kTokens[] = {"VmSize:", "VmData:", "VmRSS:"};
+  ulonglong* const kVars[] = {&vm_size, &vm_data, &vm_rss};
+  int num_tokens = 3; // Number of entries in kTokens and kVars
+
+  if ((fd = my_open("/proc/self/status", O_RDONLY, MYF(MY_WME))) < 0)
+    goto done;
+  // Allocate 1 extra byte to reserve space for end of line character.
+  if (!(buf = my_malloc(kBufSize + 1, MYF(MY_WME))))
+    goto done;
+  if ((read_amt = read(fd, buf, kBufSize)) < 1)
+    goto done;
+  buf_end = buf + read_amt;
+  *buf_end = '\0'; // Nul terminate the input
+
+  // Search for each token in the input.
+  for (int x = 0; x < num_tokens; ++x) {
+    char* token;
+    if (token = strstr(buf, kTokens[x])) {
+      // If the token has been found, parse the first integer after it.
+      token += strlen(kTokens[x]);
+      if (token < buf_end) {
+        ulonglong var;
+        if (sscanf(token, "%lld", &var) == 1) {
+          // The values must be converted from KB to bytes.
+          *kVars[x] = var * 1024;
+        }
+      }
+    }
+  }
+
+done:
+  if (fd >= 0)
+    my_close(fd, MYF(0));
+  if (buf)
+    my_free(buf, MYF(0));
+}
+
 #ifdef __WIN__
 static void  test_signal(int sig_ptr)
 {
@@ -241,30 +359,53 @@
 	       thd->host_or_ip,
 	       passwd[0] ? ER(ER_YES) : ER(ER_NO));
     mysql_log.write(thd,COM_CONNECT,ER(ER_ACCESS_DENIED_ERROR),
-		    thd->user,
-		    thd->host_or_ip,
-		    passwd[0] ? ER(ER_YES) : ER(ER_NO));
+                    thd->user,
+                    thd->host_or_ip,
+                    passwd[0] ? ER(ER_YES) : ER(ER_NO));
+    mysql_audit_log.write(thd,COM_CONNECT,ER(ER_ACCESS_DENIED_ERROR),
+                          thd->user,
+                          thd->host_or_ip,
+                          passwd[0] ? ER(ER_YES) : ER(ER_NO));
     return(1);					// Error already given
   }
+
+  /* If we are in failover mode, reject all non-super user connections. */
+  if (is_in_failover() && !(thd->master_access & SUPER_ACL)) {
+    net_printf(&thd->net,ER_SPECIFIC_ACCESS_DENIED_ERROR,
+               "super-user only during failover");
+    return 1;
+  }
+
   if (check_count)
   {
     VOID(pthread_mutex_lock(&LOCK_thread_count));
-    bool tmp=(thread_count - delayed_insert_threads >= max_connections &&
-	      !(thd->master_access & SUPER_ACL));
+    bool tmp = ((thread_count - delayed_insert_threads) >=
+                (max_connections - min(max_connections,
+                                       reserved_super_connections))) &&
+               !(thd->master_access & SUPER_ACL);
     VOID(pthread_mutex_unlock(&LOCK_thread_count));
     if (tmp)
     {						// Too many connections
       send_error(net, ER_CON_COUNT_ERROR);
+      statistic_increment(denied_connections, &LOCK_status);
       return(1);
     }
   }
   mysql_log.write(thd,command,
-		  (thd->priv_user == thd->user ?
-		   (char*) "%s@%s on %s" :
-		   (char*) "%s@%s as anonymous on %s"),
-		  user,
-		  thd->host_or_ip,
-		  db ? db : (char*) "");
+                  (thd->priv_user == thd->user ?
+                   (char*) "%s@%s on %s" :
+                   (char*) "%s@%s as anonymous on %s"),
+                  user,
+                  thd->host_or_ip,
+                  db ? db : (char*) "");
+  mysql_audit_log.write(thd,command,
+                        (thd->priv_user == thd->user ?
+                         (char*) "%s@%s on %s" :
+                         (char*) "%s@%s as anonymous on %s"),
+                        user,
+                        thd->host_or_ip,
+                        db ? db : (char*) "");
+
   thd->db_access=0;
   /* Don't allow user to connect if he has done too many queries */
   if ((ur.questions || ur.updates || ur.connections || max_user_connections) &&
@@ -306,11 +447,110 @@
 
 void init_max_user_conn(void) 
 {
-  (void) hash_init(&hash_user_connections,max_connections,0,0,
-		   (hash_get_key) get_key_conn, (hash_free_key) free_user,
-		   0);
+  if (hash_init(&hash_user_connections,max_connections,0,0,
+                (hash_get_key) get_key_conn, (hash_free_key) free_user, 0)) {
+    sql_print_error("Initializing hash_user_connections failed.");
+    exit(1);
+  }
+}
+
+extern "C" byte *get_key_user_stats(USER_STATS *user_stats, uint *length,
+                                    my_bool not_used __attribute__((unused)))
+{
+  *length = strlen(user_stats->user);
+  return (byte*)user_stats->user;
+}
+
+extern "C" void free_user_stats(USER_STATS* user_stats)
+{
+  my_free((char*)user_stats, MYF(0));
+}
+
+void init_global_user_stats(void)
+{
+  if (hash_init(&global_user_stats, max_connections, 0, 0,
+                (hash_get_key)get_key_user_stats,
+                (hash_free_key)free_user_stats, 0)) {
+    sql_print_error("Initializing global_user_stats failed.");
+    exit(1);
+  }
+}
+
+extern "C" byte *get_key_table_stats(TABLE_STATS *table_stats, uint *length,
+                                    my_bool not_used __attribute__((unused)))
+{
+  *length = strlen(table_stats->table);
+  return (byte*)table_stats->table;
+}
+
+extern "C" void free_table_stats(TABLE_STATS* table_stats)
+{
+  my_free((char*)table_stats, MYF(0));
 }
 
+void init_global_table_stats(void)
+{
+  if (hash_init(&global_table_stats, max_connections, 0, 0,
+                (hash_get_key)get_key_table_stats,
+                (hash_free_key)free_table_stats, 0)) {
+    sql_print_error("Initializing global_table_stats failed.");
+    exit(1);
+  }
+}
+
+extern "C" byte *get_key_index_stats(INDEX_STATS *index_stats, uint *length,
+                                    my_bool not_used __attribute__((unused)))
+{
+  *length = strlen(index_stats->index);
+  return (byte*)index_stats->index;
+}
+
+extern "C" void free_index_stats(INDEX_STATS* index_stats)
+{
+  my_free((char*)index_stats, MYF(0));
+}
+
+void init_global_index_stats(void)
+{
+  if (hash_init(&global_index_stats, max_connections, 0, 0,
+                (hash_get_key)get_key_index_stats,
+                (hash_free_key)free_index_stats, 0)) {
+    sql_print_error("Initializing global_index_stats failed.");
+    exit(1);
+  }
+}
+
+extern "C" byte *log_tables_get_key(const char *table, uint *length,
+                                    my_bool not_used)
+{
+  *length = strlen(table);
+  return (byte*)table;
+}
+
+void init_log_tables(my_string comma_list)
+{
+  if (comma_list == NULL || strlen(comma_list) == 0)
+  {
+    return;
+  }
+  if (hash_init(&log_tables, 5, 0, 0,
+                (hash_get_key)log_tables_get_key, 0, 0))
+  {
+    sql_print_error("Initializing log tables failed.");
+    exit(1);
+  }
+  char *p = strdup(comma_list);
+  char *q;
+  while( (q = strchr(p, ',')) )
+  {
+    *q = 0;
+    hash_insert(&log_tables, p);
+    p = q + 1;
+  }
+  if (strlen(p) > 0) {
+    hash_insert(&log_tables, p);
+  }
+}
 
 static int check_for_max_user_connections(USER_CONN *uc)
 {
@@ -326,7 +566,7 @@
     goto end;
   }
   if (uc->user_resources.connections &&
-      uc->user_resources.connections <= uc->conn_per_hour)
+      uc->user_resources.connections < uc->connections)
   {
     net_printf(&current_thd->net, ER_USER_LIMIT_REACHED, uc->user,
 	       "max_connections",
@@ -363,6 +603,20 @@
   hash_free(&hash_user_connections);
 }
 
+void free_global_user_stats(void)
+{
+  hash_free(&global_user_stats);
+}
+
+void free_global_table_stats(void)
+{
+  hash_free(&global_table_stats);
+}
+
+void free_global_index_stats(void)
+{
+  hash_free(&global_index_stats);
+}
 
 /*
   Mark all commands that somehow changes a table
@@ -395,6 +649,129 @@
   uc_update_queries[SQLCOM_MULTI_UPDATE]=1;
 }
 
+// 'mysql_system_user' is used for when the user is not defined for a THD.
+static char mysql_system_user[] = "#mysql_system#";
+
+// Returns 'user' if it's not NULL.  Returns 'mysql_system_user' otherwise.
+static char* get_valid_user_string(char* user) {
+  return user ? user : mysql_system_user;
+}
+
+// Increments the global user stats connection count.  If 'use_lock' is true,
+// 'LOCK_global_user_stats' will be locked/unlocked.  Returns 0 on success,
+// 1 on error.
+static int increment_connection_count(THD* thd, bool use_lock) {
+  char* user_string = get_valid_user_string(thd->user);
+
+  USER_STATS* user_stats;
+  int return_value = 0;
+
+  if (use_lock) pthread_mutex_lock(&LOCK_global_user_stats);
+  if (!(user_stats = (USER_STATS*)hash_search(&global_user_stats,
+                                              (byte*)user_string,
+                                              strlen(user_string)))) {
+    // First connection for this user.
+    if (!(user_stats = ((USER_STATS*)
+                        my_malloc(sizeof(USER_STATS), MYF(MY_WME))))) {
+      // Out of memory.
+      return_value = 1;
+      goto end;
+    }
+    strncpy(user_stats->user, user_string, sizeof(user_stats->user));
+    user_stats->total_connections = 0;
+    user_stats->concurrent_connections = 0;
+    user_stats->connected_time = 0;
+    user_stats->busy_time = 0;
+    user_stats->rows_fetched = 0;
+    user_stats->rows_updated = 0;
+    user_stats->select_commands = 0;
+    user_stats->update_commands = 0;
+    user_stats->other_commands = 0;
+    user_stats->commit_trans = 0;
+    user_stats->rollback_trans = 0;
+
+    if (hash_insert(&global_user_stats, (byte*)user_stats)) {
+      // Out of memory.
+      my_free((char*)user_stats, 0);
+      return_value = 1;
+      goto end;
+    }
+  }
+  user_stats->total_connections++;
+end:
+  if (use_lock) pthread_mutex_unlock(&LOCK_global_user_stats);
+  return return_value;
+}
+
+// Used to update the global user stats.
+static void update_global_user_stats_with_user(THD* thd,
+                                               USER_STATS* user_stats) {
+  time_t current_time = time(NULL);
+  user_stats->connected_time += current_time - thd->last_global_update_time;
+  thd->last_global_update_time = current_time;
+  user_stats->busy_time += thd->diff_total_busy_time;
+  user_stats->rows_fetched += thd->diff_total_sent_rows;
+  user_stats->rows_updated += thd->diff_total_updated_rows;
+  user_stats->select_commands += thd->diff_select_commands;
+  user_stats->update_commands += thd->diff_update_commands;
+  user_stats->other_commands += thd->diff_other_commands;
+  user_stats->commit_trans += thd->diff_commit_trans;
+  user_stats->rollback_trans += thd->diff_rollback_trans;
+}
+
+// Updates the global stats of a thread/user.
+static void update_global_user_stats(THD* thd) {
+  char* user_string = get_valid_user_string(thd->user);
+
+  USER_STATS* user_stats;
+  pthread_mutex_lock(&LOCK_global_user_stats);
+  if ((user_stats = (USER_STATS*)hash_search(&global_user_stats,
+                                             (byte*)user_string,
+                                             strlen(user_string)))) {
+    // Found user.
+    update_global_user_stats_with_user(thd, user_stats);
+    thd->reset_diff_stats();
+  } else {
+    // The user name should exist.
+    increment_connection_count(thd, false);
+  }
+  pthread_mutex_unlock(&LOCK_global_user_stats);
+}
+
+// Determines the concurrent number of connections of current threads.
+static void set_concurrent_connections_stats() {
+  USER_STATS* user_stats;
+
+  pthread_mutex_lock(&LOCK_global_user_stats);
+  pthread_mutex_lock(&LOCK_thread_count);
+
+  // Resets all concurrent connections to 0.
+  for (int i = 0; i < global_user_stats.records; ++i) {
+    user_stats = (USER_STATS*)hash_element(&global_user_stats, i);
+    user_stats->concurrent_connections = 0;
+  }
+
+  I_List_iterator<THD> it(threads);
+  THD* thd;
+  // Iterates through the current threads.
+  while ((thd = it++)) {
+    char* user_string = get_valid_user_string(thd->user);
+
+    if ((user_stats = (USER_STATS*)hash_search(&global_user_stats,
+                                               (byte*)user_string,
+                                               strlen(user_string)))) {
+      // Found user.
+      user_stats->concurrent_connections++;
+      update_global_user_stats_with_user(thd, user_stats);
+      thd->reset_diff_stats();
+    } else {
+      // The user name should exist.
+      increment_connection_count(thd, false);
+    }
+  }
+  pthread_mutex_unlock(&LOCK_thread_count);
+  pthread_mutex_unlock(&LOCK_global_user_stats);
+}
 
 /*
   Check if maximum queries per hour limit has been reached
@@ -644,6 +1021,11 @@
   char *db=0;
   if (thd->client_capabilities & CLIENT_CONNECT_WITH_DB)
     db=strend(passwd)+1;
+  if (strend(db ? db : passwd) - (char*)net->read_pos > pkt_len)
+  {
+    inc_host_errors(&thd->remote.sin_addr);
+    return ER_HANDSHAKE_ERROR;
+  }
   if (thd->client_capabilities & CLIENT_INTERACTIVE)
     thd->variables.net_wait_timeout= thd->variables.net_interactive_timeout;
   if ((thd->client_capabilities & CLIENT_TRANSACTIONS) &&
@@ -720,6 +1102,14 @@
       statistic_increment(aborted_connects,&LOCK_status);
       goto end_thread;
     }
+
+    thd->reset_stats();
+    // Updates global user connection stats.
+    if (increment_connection_count(thd, true)) {
+      send_error(&thd->net, 0, NullS);  // Out of memory
+      goto end_thread;
+    }
+
 #ifdef __NETWARE__
     netware_reg_user(thd->ip, thd->user, "MySQL");
 #endif
@@ -765,6 +1155,9 @@
     
 end_thread:
     close_connection(net);
+    thd->update_stats();
+    update_global_user_stats(thd);
+
     end_thread(thd,1);
     /*
       If end_thread returns, we are either running with --one-thread
@@ -973,6 +1366,7 @@
   DBUG_ENTER("dispatch_command");
 
   thd->command=command;
+  thd->old_command = command;
   thd->set_time();
   VOID(pthread_mutex_lock(&LOCK_thread_count));
   thd->query_id=query_id;
@@ -999,7 +1393,17 @@
       statistic_increment(com_other, &LOCK_status);
       slow_command = TRUE;
       uint db_len = *(uchar*)packet;
+      if (db_len >= packet_length || db_len > NAME_LEN)
+      {
+	send_error(&thd->net, ER_UNKNOWN_COM_ERROR);
+        break;
+      }
       uint tbl_len = *(uchar*)(packet + db_len + 1);
+      if (db_len+tbl_len+2 > packet_length || tbl_len > NAME_LEN)
+      {
+	send_error(&thd->net, ER_UNKNOWN_COM_ERROR);
+        break;
+      }
       char* db = thd->alloc(db_len + tbl_len + 2);
       memcpy(db, packet + 1, db_len);
       char* tbl_name = db + db_len;
@@ -1218,6 +1622,7 @@
       break; /* purecov: inspected */
     DBUG_PRINT("quit",("Got shutdown command"));
     mysql_log.write(thd,command,NullS);
+    mysql_audit_log.write(thd,command,NullS);
     send_eof(net);
 #ifdef __WIN__
     sleep(1);					// must wait after eof()
@@ -1291,6 +1696,25 @@
     send_error(net, ER_UNKNOWN_COM_ERROR);
     break;
   }
+  // If we are logging and have specified specific tables to log we need
+  // go through and see if the query used any of the requested tables.
+  if (thd->open_tables && mysql_audit_log.is_open() &&
+      hash_inited(&log_tables))
+  {
+    TABLE *table;
+    for (table= thd->open_tables; table; table = table->next)
+    {
+      if (hash_search(&log_tables, table->real_name,
+                      strlen(table->real_name)))
+      {
+        mysql_audit_log.write(thd, command,
+                        "[%s:%s] : %s [Sent %d Rows] [Updated %d Rows]",
+                        thd->user, thd->host_or_ip, thd->query,
+                        thd->sent_row_count, thd->updated_row_count);
+        break;
+      }
+    }
+  }
   if (thd->lock || thd->open_tables)
   {
     thd->proc_info="closing tables";
@@ -1304,18 +1728,17 @@
   thd->end_time();				// Set start time
 
   /* If not reading from backup and if the query took too long */
-  if (!slow_command && !thd->user_time) // do not log 'slow_command' queries
+  if (!slow_command && thd->query_length > 1) // do not log 'slow_command' or empty queries
   {
     thd->proc_info="logging slow query";
 
-    if ((ulong) (thd->start_time - thd->time_after_lock) >
-	thd->variables.long_query_time ||
-	((thd->lex.select_lex.options &
-	  (QUERY_NO_INDEX_USED | QUERY_NO_GOOD_INDEX_USED)) &&
-	 (specialflag & SPECIAL_LONG_LOG_FORMAT)))
-    {
-      long_query_count++;
-      mysql_slow_log.write(thd, thd->query, thd->query_length, start_of_query);
+    if (thd->start_time >= thd->time_after_lock) {
+      ulong elapsed = (ulong) (thd->start_time - thd->time_after_lock);
+      if (elapsed >= long_query_time)
+      {
+        long_query_count++;
+        mysql_slow_log.write(thd, thd->query, thd->query_length, start_of_query);
+      }
     }
   }
   thd->proc_info="cleaning up";
@@ -1556,14 +1979,14 @@
     if (check_global_access(thd, SUPER_ACL))
       goto error;
     pthread_mutex_lock(&LOCK_active_mi);
-    res = change_master(thd,active_mi);
+    res = change_master(thd, active_mi);
     pthread_mutex_unlock(&LOCK_active_mi);
     break;
   }
   case SQLCOM_SHOW_SLAVE_STAT:
   {
-    /* Accept one of two privileges */
-    if (check_global_access(thd, SUPER_ACL | REPL_CLIENT_ACL))
+    /* Accept one of three privileges */
+    if (check_global_access(thd, SUPER_ACL | REPL_CLIENT_ACL | PROCESS))
       goto error;
     pthread_mutex_lock(&LOCK_active_mi);
     res = show_master_info(thd,active_mi);
@@ -1572,8 +1995,8 @@
   }
   case SQLCOM_SHOW_MASTER_STAT:
   {
-    /* Accept one of two privileges */
-    if (check_global_access(thd, SUPER_ACL | REPL_CLIENT_ACL))
+    /* Accept one of three privileges */
+    if (check_global_access(thd, SUPER_ACL | REPL_CLIENT_ACL | PROCESS))
       goto error;
     res = show_binlog_info(thd);
     break;
@@ -1588,12 +2011,26 @@
       res = load_master_data(thd);
     break;
 
+  case SQLCOM_MAKE_MASTER:
+  {
+    thd->proc_info = "Making master";
+
+    if (check_global_access(thd, SUPER_ACL))
+      goto error;
+    res = make_master(thd, NULL, NULL, &thd->lex.mi);
+    if (res == 0) {
+      thd->proc_info = 0;
+      send_ok(&thd->net);
+    }
+    break;
+  }
+
 #endif /* HAVE_REPLICATION */
     
 #ifdef HAVE_INNOBASE_DB
   case SQLCOM_SHOW_INNODB_STATUS:
     {
-      if (check_global_access(thd, SUPER_ACL))
+      if (check_global_access(thd, SUPER_ACL | PROCESS))
 	goto error;
       res = innodb_show_status(thd);
       break;
@@ -2241,9 +2678,22 @@
 			  thd->priv_user,lex->verbose);
     break;
   case SQLCOM_SHOW_STATUS:
+    set_vm_stats();     // Get values for exported VM stats
+    set_malloc_stats(); // Get values for exported malloc stats
+    semi_sync_replicator.setExportStats();
     res= mysqld_show(thd,(lex->wild ? lex->wild->ptr() : NullS),status_vars,
 		     OPT_GLOBAL, &LOCK_status);
     break;
+  case SQLCOM_SHOW_USER_STATS:
+    set_concurrent_connections_stats();
+    res= mysqld_show_user_stats(thd,(lex->wild ? lex->wild->ptr() : NullS));
+    break;
+  case SQLCOM_SHOW_TABLE_STATS:
+    res= mysqld_show_table_stats(thd,(lex->wild ? lex->wild->ptr() : NullS));
+    break;
+  case SQLCOM_SHOW_INDEX_STATS:
+    res= mysqld_show_index_stats(thd,(lex->wild ? lex->wild->ptr() : NullS));
+    break;
   case SQLCOM_SHOW_VARIABLES:
     res= mysqld_show(thd, (lex->wild ? lex->wild->ptr() : NullS),
 		     init_vars, lex->option_type,
@@ -3013,6 +3463,8 @@
   thd->rand_used=0;
   thd->sent_row_count=thd->examined_row_count=0;
   thd->safe_to_cache_query=1;
+  thd->updated_row_count=0;
+  thd->busy_time=0;
   DBUG_VOID_RETURN;
 }
 
@@ -3070,6 +3522,16 @@
 {
   DBUG_ENTER("mysql_parse");
 
+  int start_time_error = 0;
+  int end_time_error = 0;
+  struct timeval start_time, end_time;
+  double start_usecs = 0;
+  double end_usecs = 0;
+  // Gets the start time, in order to measure how long this command takes.
+  if (!(start_time_error = gettimeofday(&start_time, NULL))) {
+    start_usecs = start_time.tv_sec * 1000000.0 + start_time.tv_usec;
+  }
+
   thd->query_length = length;
   mysql_init_query(thd);
   if (query_cache_send_result_to_client(thd, inBuf, length) <= 0)
@@ -3098,6 +3560,30 @@
     free_items(thd);  /* Free strings used by items */
     lex_end(lex);
   }
+
+  // Gets the end time.
+  if (!(end_time_error = gettimeofday(&end_time, NULL))) {
+    end_usecs = end_time.tv_sec * 1000000.0 + end_time.tv_usec;
+  }
+
+  // Calculates the difference between the end and start times.
+  if (end_usecs >= start_usecs && !start_time_error && !end_time_error) {
+    thd->busy_time = (end_usecs - start_usecs) / 1000000;
+    // In case there are bad values, 2629743 is the #seconds in a month.
+    if (thd->busy_time > 2629743) {
+      statistic_increment(gettimeofday_errors, &LOCK_status);
+      thd->busy_time = 0;
+    }
+  } else {
+    // end time went back in time, or gettimeofday() failed.
+    statistic_increment(gettimeofday_errors, &LOCK_status);
+    thd->busy_time = 0;
+  }
+
+  // Updates THD stats and the global user stats.
+  thd->update_stats();
+  update_global_user_stats(thd);
+
   DBUG_VOID_RETURN;
 }
 
@@ -3764,8 +4250,9 @@
   select_errors=0;				/* Write if more errors */
   if (options & REFRESH_GRANT)
   {
-    acl_reload(thd);
-    grant_reload(thd);
+    bool acl_failed = acl_reload(thd);
+    bool grant_failed = grant_reload(thd);
+    result = acl_failed | grant_failed;
     if (mqh_used)
       reset_mqh(thd,(LEX_USER *) NULL,true);
   }
@@ -3821,6 +4308,18 @@
   if (options & REFRESH_MASTER)
     if (reset_master(thd))
       result=1;
+  if (options & REFRESH_TABLE_STATS) {
+    pthread_mutex_lock(&LOCK_global_table_stats);
+    free_global_table_stats();
+    init_global_table_stats();
+    pthread_mutex_unlock(&LOCK_global_table_stats);
+  }
+  if (options & REFRESH_INDEX_STATS) {
+    pthread_mutex_lock(&LOCK_global_index_stats);
+    free_global_index_stats();
+    init_global_index_stats();
+    pthread_mutex_unlock(&LOCK_global_index_stats);
+  }
 #ifdef OPENSSL
    if (options & REFRESH_DES_KEY_FILE)
    {
@@ -3831,7 +4330,7 @@
  if (options & REFRESH_SLAVE)
  {
    pthread_mutex_lock(&LOCK_active_mi);
-   if (reset_slave(thd, active_mi))
+   if (reset_slave(thd, active_mi, options & REFRESH_NO_PURGE_BINLOG))
    {
      result=1;
      /*
diff -ruN base/sql/sql_repl.cc mysql40gpl/sql/sql_repl.cc
--- base/sql/sql_repl.cc	2005-09-02 15:37:56.000000000 -0700
+++ mysql40gpl/sql/sql_repl.cc	2007-04-21 09:57:13.000000000 -0700
@@ -21,13 +21,28 @@
 #include "mini_client.h"
 #include <my_dir.h>
 #include <assert.h>
+#include "repl_semi_sync.h"
+
+#ifdef HAVE_INNOBASE_DB
+#include "ha_innodb.h"
+#endif
 
 extern const char* any_db;
+extern pthread_mutex_t LOCK_failover_master;
+extern bool failover_deny_access;
+extern ReplSemiSync semi_sync_replicator;
 
 int max_binlog_dump_events = 0; // unlimited
 my_bool opt_sporadic_binlog_dump_fail = 0;
 static int binlog_dump_count = 0;
 
+static int set_in_failover(bool kill_session);
+static void clear_in_failover(void);
+static int failover_fix_last_binlog(MYSQL_LOG *binlog, THD *thd,
+                                    const char *binlog_indexname,
+                                    const char *binlog_filename);
+static int cleanup_mirror_binlog(THD *thd, uint *error_code);
+
 int check_binlog_magic(IO_CACHE* log, const char** errmsg)
 {
   char magic[4];
@@ -267,7 +282,7 @@
   const char* errmsg = 0;
   int res;
 
-  if (!mysql_bin_log.is_open())
+  if (!mysql_bin_log.is_log_open())
     goto end;
 
   mysql_bin_log.make_log_name(search_file_name, to_log);
@@ -298,16 +313,96 @@
   return 0;
 }
 
+/* Show processlist command dump the binlog state.
+ * 
+ * Input:
+ *  output_info   -  (OUT) the output proc_info
+ *  output_len    -  (IN)  output proc_info's length
+ *  thd           -  (IN)  the thread
+ *  input_msg     -  (IN)  the input proc_info
+ *  log_file_name -  (IN)  binlog file name
+ *  log_pos       -  (IN)  binlog position
+ */
+static void processlist_show_binlog_state(char *output_info,
+                                          int   output_len,
+                                          THD  *thd,
+                                          const char *input_msg,
+                                          const char *log_file_name,
+                                          my_off_t log_pos) {
+  DBUG_ENTER("processlist_show_binlog_state");
+
+  /* Point to input_msg in case "show processlist" access it before the copy
+   * is finished.
+   */
+  thd->proc_info = input_msg;
+
+  if (snprintf(output_info, output_len, "%s :%s:%lld:", input_msg,
+               log_file_name + dirname_length(log_file_name),
+               log_pos) > 0) {
+    thd->proc_info = output_info;
+  }
+
+  DBUG_VOID_RETURN;
+}
+
+/* Trace the detailed error message during binlog file switch.
+ * 
+ * Input:
+ *  binlog        - (IN) MySQL binlog manager
+ *  old_offset    - (IN) the old offset 
+ *  log_file_name - (IN) the new log filename to switch to
+ *  linfo         - (IN) index file iteration information
+ */
+static void binlog_switch_file_error(MYSQL_LOG  *binlog,
+                                     my_off_t    old_offset,
+                                     const char *log_file_name,
+                                     LOG_INFO   *linfo) {
+  MY_STAT file_stat;
+
+  if (my_fstat(binlog->get_index_file()->file, &file_stat, MYF(0)) == 0)
+    sql_print_error("binlog_dump switch file error: file(%s), "
+                    "old(%lu), new(%lu), index_file_size(%lu)",
+                    log_file_name, (ulong)old_offset,
+                    (ulong)linfo->index_file_offset,
+                    (ulong)file_stat.st_size);
+  else
+    sql_print_error("binlog_dump switch fstat error1: %d", my_errno);
+
+  if (my_stat(log_file_name, &file_stat, MYF(0)) != NULL)
+    sql_print_error("binlog_dump switch file error: file(%s), size(%lu)",
+                    log_file_name, (ulong)file_stat.st_size);
+  else
+    sql_print_error("binlog_dump switch fstat error2: %d", my_errno);
+}
+
 /*
   TODO: Clean up loop to only have one call to send_file()
 */
 
 void mysql_binlog_send(THD* thd, char* log_ident, my_off_t pos,
-		       ushort flags)
+                       ushort flags)
 {
   LOG_INFO linfo;
   char *log_file_name = linfo.log_file_name;
   char search_file_name[FN_REFLEN], *name;
+
+  /* This buffer should be enough for "comments + :file_name:file_pos:". */
+  char binlog_state_msg[FN_REFLEN + 100];
+  int  binlog_state_msg_len = FN_REFLEN + 100;
+  bool need_sync = false;
+
+  /* We pre-allocate fixed buffer for event packets.  If an event is more
+   * than the size, String class will re-allocate memory and we will
+   * reset the packet memory for the next packet creation command.
+   * In this way, we do not need to allocate memory from small events.
+   */
+  const ulong packet_fixed_buffer_size = rpl_event_buffer_size;
+  char *packet_fixed_buffer;
+
+  /* Whether the slave is doing semi-synchronous replication. */
+  thd->semi_sync_slave = (flags & BINLOG_SEMI_SYNC);
+  ReplSemiSync *semi_sync_repl = &semi_sync_replicator;
+
   IO_CACHE log;
   File file = -1;
   String* packet = &thd->packet;
@@ -321,6 +416,29 @@
   DBUG_PRINT("enter",("log_ident: '%s'  pos: %ld", log_ident, (long) pos));
 
   bzero((char*) &log,sizeof(log));
+  sql_print_information(
+    "Start %s, %s binlog_dump to slave_server(%d), pos(%s, %lu)",
+    (flags & BINLOG_MIRROR_CLIENT) ? "mirror_binlog_client" : "client",
+    thd->semi_sync_slave ? "semi-sync" : "asynchronous",
+    thd->server_id, log_ident, (ulong)pos);
+
+  if (flags & BINLOG_MIRROR_CLIENT) {
+    /* One more mirror binlog clients. */
+    thread_safe_increment(rpl_mirror_binlog_clients, &LOCK_stats);
+  }
+  if (flags & BINLOG_SEMI_SYNC) {
+    /* One more semi-sync clients. */
+    thread_safe_increment(rpl_semi_sync_clients, &LOCK_stats);
+  }
+
+  /* Pre-allocate memory for event packets. */
+  packet_fixed_buffer = (char *)my_malloc(packet_fixed_buffer_size,
+                                          MYF(MY_WME));
+  if (packet_fixed_buffer == NULL) {
+    errmsg   = "Master failed pre-allocate event fixed buffer";
+    my_errno = ER_OUTOFMEMORY;
+    goto err;
+  }
 
 #ifndef DBUG_OFF
   if (opt_sporadic_binlog_dump_fail && (binlog_dump_count++ % 2))
@@ -331,12 +449,13 @@
   }
 #endif
 
-  if (!mysql_bin_log.is_open())
+  if (!mysql_bin_log.is_log_open())
   {
     errmsg = "Binary log is not open";
     my_errno= ER_MASTER_FATAL_ERROR_READING_BINLOG;
     goto err;
   }
+
   if (!server_id_supplied)
   {
     errmsg = "Misconfigured master - server id was not set";
@@ -344,6 +463,13 @@
     goto err;
   }
 
+  /* Do not serve the mule log if it is not servable. */
+  if (mysql_bin_log.is_mule_open() && !mysql_bin_log.is_mule_servable()) {
+    errmsg = "Mirror binlog is being verified with the master.";
+    my_errno = ER_CHECKREAD;
+    goto err;
+  }
+
   name=search_file_name;
   if (log_ident[0])
     mysql_bin_log.make_log_name(search_file_name, log_ident);
@@ -378,7 +504,9 @@
     We need to start a packet with something other than 255
     to distiquish it from error
   */
-  packet->set("\0", 1);
+
+  semi_sync_repl->reserveSyncHeader(
+    packet, thd, packet_fixed_buffer, packet_fixed_buffer_size);
 
   /*
     Before 4.0.14 we called fake_rotate_event below only if 
@@ -403,10 +531,22 @@
     my_errno= ER_MASTER_FATAL_ERROR_READING_BINLOG;
     goto err;
   }
-  packet->set("\0", 1);
+  semi_sync_repl->reserveSyncHeader(
+    packet, thd, packet_fixed_buffer, packet_fixed_buffer_size);
+
+  /* We assume that the slave has got all events before the specified point.
+   * So, we can report the current position.
+   */
+  if (semi_sync_repl->reportReplyBinlog(
+        thd, log_file_name + dirname_length(log_file_name), pos)) {
+    errmsg = "reportReplyBinlog failed.";
+    my_errno = ER_UNKNOWN_ERROR;
+    goto err;
+  }
 
   while (!net->error && net->vio != 0 && !thd->killed)
   {
+    Log_event_type event_type;
     pthread_mutex_t *log_lock = mysql_bin_log.get_log_lock();
 
     while (!(error = Log_event::read_log_event(&log, packet, log_lock)))
@@ -420,7 +560,25 @@
 	goto err;
       }
 #endif
-      if (my_net_write(net, (char*)packet->ptr(), packet->length()) )
+      /* Update the binlog sending state. */
+      processlist_show_binlog_state(
+                binlog_state_msg, binlog_state_msg_len, thd,
+                "Send binlog events to slave",
+                log_file_name, pos);
+
+      DBUG_PRINT("info", ("Send packet: %s: current log position %d",
+                          log_file_name, (ulong)my_b_tell(&log)));
+
+      pos = my_b_tell(&log);
+      if (semi_sync_repl->updateSyncHeader(
+            packet, log_file_name+dirname_length(log_file_name),
+            pos, thd, &need_sync, &event_type) != 0) {
+	errmsg = "Failed on update-1 semi-sync header";
+        my_errno = LOG_READ_MEM;
+	goto err;
+      }
+
+      if (my_net_write(net, (char*)packet->ptr(), packet->length()))
       {
 	errmsg = "Failed on my_net_write()";
 	my_errno= ER_UNKNOWN_ERROR;
@@ -428,7 +586,8 @@
       }
       DBUG_PRINT("info", ("log event code %d",
 			  (*packet)[LOG_EVENT_OFFSET+1] ));
-      if ((*packet)[LOG_EVENT_OFFSET+1] == LOAD_EVENT)
+
+      if (event_type == LOAD_EVENT)
       {
 	if (send_file(thd))
 	{
@@ -437,8 +596,17 @@
 	  goto err;
 	}
       }
-      packet->set("\0", 1);
+
+      if (need_sync &&
+          semi_sync_repl->readSlaveReply(thd, net, &errmsg,
+                                         &my_errno) != 0) {
+        goto err;
+      }
+
+      semi_sync_repl->reserveSyncHeader(
+        packet, thd, packet_fixed_buffer, packet_fixed_buffer_size);
     }
+
     /*
       TODO: now that we are logging the offset, check to make sure
       the recorded offset and the actual match
@@ -459,6 +627,13 @@
 	break;
       case LOG_READ_MEM:
 	errmsg = "memory allocation failed reading log event";
+
+        if (thd->semi_sync_slave) {
+          /* If the replica is a semi-sync target, do not give it a fatal
+           * error so that it can connect again after the failure.
+           */
+          my_errno = ER_OUTOFMEMORY;
+        }
 	break;
       case LOG_READ_TRUNC:
 	errmsg = "binlog truncated in the middle of event";
@@ -471,7 +646,7 @@
     }
 
     if (!(flags & BINLOG_DUMP_NON_BLOCK) &&
-       mysql_bin_log.is_active(log_file_name))
+        mysql_bin_log.is_active(log_file_name))
     {
       /*
 	Block until there is more data in the log
@@ -512,6 +687,9 @@
 	  has not been updated since last read.
 	*/
 
+        semi_sync_repl->reserveSyncHeader(
+          packet, thd, packet_fixed_buffer, packet_fixed_buffer_size);
+
 	pthread_mutex_lock(log_lock);
 	switch (Log_event::read_log_event(&log, packet, (pthread_mutex_t*)0)) {
 	case 0:
@@ -529,8 +707,15 @@
 	  }
 	  if (!thd->killed)
 	  {
+            /* Update the binlog sending state. */
+            processlist_show_binlog_state(
+                binlog_state_msg, binlog_state_msg_len, thd,
+                "Has sent all binlog to slave; "
+                "waiting for binlog to be updated",
+                log_file_name, pos);
+
 	    /* Note that the following call unlocks lock_log */
-	    mysql_bin_log.wait_for_update(thd, 0);
+	    mysql_bin_log.wait_for_update(thd, binlog_state_msg);
 	  }
 	  else
 	    pthread_mutex_unlock(log_lock);
@@ -544,16 +729,30 @@
 	}
 
 	if (read_packet)
-	{
-	  thd->proc_info = "Sending binlog event to slave";
-	  if (my_net_write(net, (char*)packet->ptr(), packet->length()) )
+        {
+          /* Update the binlog sending state. */
+          processlist_show_binlog_state(binlog_state_msg,
+                                        binlog_state_msg_len, thd,
+                                        "Sending binlog event to slave",
+                                        log_file_name, pos);
+
+          pos = my_b_tell(&log);
+          if (semi_sync_repl->updateSyncHeader(
+                   packet, log_file_name+dirname_length(log_file_name),
+                   pos, thd, &need_sync, &event_type) != 0) {
+            errmsg = "Failed on update-2 semi-sync header";
+            my_errno = LOG_READ_MEM;
+            goto err;
+          }
+
+	  if (my_net_write(net, (char*)packet->ptr(), packet->length()))
 	  {
 	    errmsg = "Failed on my_net_write()";
 	    my_errno= ER_UNKNOWN_ERROR;
 	    goto err;
 	  }
 
-	  if ((*packet)[LOG_EVENT_OFFSET+1] == LOAD_EVENT)
+	  if (event_type == LOAD_EVENT)
 	  {
 	    if (send_file(thd))
 	    {
@@ -562,11 +761,15 @@
 	      goto err;
 	    }
 	  }
-	  packet->set("\0", 1);
-	  /*
-	    No need to net_flush because we will get to flush later when
-	    we hit EOF pretty quick
-	  */
+
+          if (need_sync &&
+              semi_sync_repl->readSlaveReply(thd, net, &errmsg,
+                                             &my_errno) != 0) {
+            goto err;
+          }
+
+          semi_sync_repl->reserveSyncHeader(
+            packet, thd, packet_fixed_buffer, packet_fixed_buffer_size);
 	}
 
 	if (fatal_error)
@@ -580,9 +783,22 @@
     }
     else
     {
+      char old_log_file_name[FN_REFLEN];
       bool loop_breaker = 0;
       // need this to break out of the for loop from switch
-      thd->proc_info = "Finished reading one binlog; switching to next binlog";
+
+      /* Update the binlog sending state. */
+      processlist_show_binlog_state(
+          binlog_state_msg, binlog_state_msg_len, thd,
+          "Finished reading one binlog; switching to next binlog",
+          log_file_name, pos);
+
+      /* Keep the old fileename. */
+      strmake(old_log_file_name, log_file_name,
+              sizeof(old_log_file_name) - 1);
+
+      my_off_t old_offset = linfo.index_file_offset;
+
       switch (mysql_bin_log.find_next_log(&linfo, 1)) {
       case LOG_INFO_EOF:
 	loop_breaker = (flags & BINLOG_DUMP_NON_BLOCK);
@@ -601,25 +817,64 @@
       end_io_cache(&log);
       (void) my_close(file, MYF(MY_WME));
 
+      /* A sanity check that we can not serve the same binlog or old binlogs
+       * twice because the filenames are stored in a .index file.
+       */
+      if (strcmp(old_log_file_name, log_file_name) >= 0) {
+	errmsg = "Re-serving an already served binlog file.";
+	my_errno = ER_MASTER_FATAL_ERROR_READING_BINLOG;
+
+        binlog_switch_file_error(&mysql_bin_log, old_offset, log_file_name,
+                                 &linfo);
+	goto err;
+      }
+
       /*
         Even if the previous log contained a Rotate_log_event, we still fake
         one.
       */
       if ((file=open_binlog(&log, log_file_name, &errmsg)) < 0 ||
-	  fake_rotate_event(net, packet, log_file_name, BIN_LOG_HEADER_SIZE, &errmsg))
-      {
-	my_errno= ER_MASTER_FATAL_ERROR_READING_BINLOG;
-	goto err;
+          fake_rotate_event(net, packet, log_file_name, BIN_LOG_HEADER_SIZE,
+                            &errmsg)) {
+        my_errno= ER_MASTER_FATAL_ERROR_READING_BINLOG;
+
+        binlog_switch_file_error(&mysql_bin_log, old_offset, log_file_name,
+                                 &linfo);
+        goto err;
       }
-      packet->length(0);
-      packet->append("\0",1);
+
+      DBUG_PRINT("info", ("Binlog filename: new binlog %s", log_file_name));
+
+      semi_sync_repl->reserveSyncHeader(
+        packet, thd, packet_fixed_buffer, packet_fixed_buffer_size);
+
+      /* The log position has been reset to the beginning of the new file. */
+      pos = BIN_LOG_HEADER_SIZE;
     }
   }
 
 end:
+  sql_print_information("End binlog_dump successfully: %d", thd->server_id);
+
   end_io_cache(&log);
   (void)my_close(file, MYF(MY_WME));
 
+  if (flags & BINLOG_MIRROR_CLIENT) {
+    /* One less mirror binlog clients. */
+    thread_safe_sub(rpl_mirror_binlog_clients, 1, &LOCK_stats);
+  }
+  if (flags & BINLOG_SEMI_SYNC) {
+    /* One less semi-sync clients. */
+    thread_safe_sub(rpl_semi_sync_clients, 1, &LOCK_stats);
+  }
+  if (packet_fixed_buffer != NULL) {
+    /* Free any memory that might be allocated inside the packet. */
+    packet->set((char *)0, 0);
+
+    /* Free the fixed packet buffer. */
+    my_free((gptr) packet_fixed_buffer, MYF(0));
+  }
+
   send_eof(&thd->net);
   thd->proc_info = "Waiting to finalize termination";
   pthread_mutex_lock(&LOCK_thread_count);
@@ -628,6 +883,25 @@
   DBUG_VOID_RETURN;
 
 err:
+  sql_print_error(errmsg);
+  sql_print_error("End binlog_dump in error: %d", thd->server_id);
+
+  if (flags & BINLOG_MIRROR_CLIENT) {
+    /* One less mirror binlog clients. */
+    thread_safe_sub(rpl_mirror_binlog_clients, 1, &LOCK_stats);
+  }
+  if (flags & BINLOG_SEMI_SYNC) {
+    /* One less semi-sync clients. */
+    thread_safe_sub(rpl_semi_sync_clients, 1, &LOCK_stats);
+  }
+  if (packet_fixed_buffer != NULL) {
+    /* Free any memory that might be allocated inside the packet. */
+    packet->set((char *)0, 0);
+
+    /* Free the fixed packet buffer. */
+    my_free((gptr) packet_fixed_buffer, MYF(0));
+  }
+
   thd->proc_info = "Waiting to finalize termination";
   end_io_cache(&log);
   /*
@@ -646,6 +920,18 @@
   DBUG_VOID_RETURN;
 }
 
+/*
+    Reset UNTIL condition for RELAY_LOG_INFO
+   SYNOPSYS
+    clear_until_condition()
+      rli - RELAY_LOG_INFO structure where UNTIL condition should be reset
+ */
+void clear_until_condition(RELAY_LOG_INFO* rli)
+{
+  rli->until_log_name[0]= 0;
+  rli->until_log_pos= 0;
+}
+
 int start_slave(THD* thd , MASTER_INFO* mi,  bool net_report)
 {
   int slave_errno = 0;
@@ -666,11 +952,44 @@
 			 thread_mask))
       slave_errno=ER_MASTER_INFO;
     else if (server_id_supplied && *mi->host)
-      slave_errno = start_slave_threads(0 /*no mutex */,
-					1 /* wait for start */,
-					mi,
-					master_info_file,relay_log_info_file,
-					thread_mask);
+    {
+      /*
+         If we will start SQL thread we will care about UNTIL options
+         If not and they are specified we will ignore them and warn user
+         about this fact.
+      */
+      if (thread_mask & SLAVE_SQL)
+      {
+        pthread_mutex_lock(&mi->rli.data_lock);
+
+        if (thd->lex.mi.pos)
+        {
+          mi->rli.until_log_pos= thd->lex.mi.pos;
+          /*
+             We don't check thd->lex.mi.log_file_name for NULL here
+             since it is checked in sql_yacc.yy
+          */
+          strmake(mi->rli.until_log_name, thd->lex.mi.log_file_name,
+              sizeof(mi->rli.until_log_name)-1);
+        }
+        else
+          clear_until_condition(&mi->rli);
+
+        pthread_mutex_unlock(&mi->rli.data_lock);
+      }
+      else if (thd->lex.mi.pos) {
+        sql_print_error("start_slave: bad state with master position");
+        // push_warning(thd, MYSQL_ERROR::WARN_LEVEL_NOTE, ER_UNTIL_COND_IGNORED,
+        // ER(ER_UNTIL_COND_IGNORED));
+      }
+
+      if (!slave_errno)
+        slave_errno = start_slave_threads(0 /*no mutex */,
+  					  1 /* wait for start */,
+					  mi,
+					  master_info_file,relay_log_info_file,
+					  thread_mask);
+    }
     else
       slave_errno = ER_BAD_SLAVE;
   }
@@ -731,6 +1050,8 @@
     reset_slave()
     thd			Thread handler
     mi			Master info for the slave
+    no_purge_mirror_binlog     Do not purge mirror binlog if we are
+                               mirroring binlogs in I/O thread.
 
 
   NOTES
@@ -745,7 +1066,7 @@
 */
 
 
-int reset_slave(THD *thd, MASTER_INFO* mi)
+int reset_slave(THD *thd, MASTER_INFO* mi, bool no_purge_mirror_binlog)
 {
   MY_STAT stat_area;
   char fname[FN_REFLEN];
@@ -762,12 +1083,7 @@
     error=1;
     goto err;
   }
-  //delete relay logs, clear relay log coordinates
-  if ((error= purge_relay_logs(&mi->rli, thd,
-			       1 /* just reset */,
-			       &errmsg)))
-    goto err;
-  
+
   /*
     Clear master's log coordinates and reset host/user/etc to the values
     specified in mysqld's options (only for good display of SHOW SLAVE STATUS;
@@ -776,7 +1092,15 @@
     STATUS; before doing START SLAVE;
   */
   init_master_info_with_options(mi);
+
+  //delete relay logs, clear relay log coordinates
+  if ((error= purge_relay_logs(&mi->rli, thd,
+			       1 /* just reset */,
+			       &errmsg)))
+    goto err;
+  
   clear_last_slave_error(&mi->rli);
+  clear_until_condition(&mi->rli);
   //close master_info_file, relay_log_info_file, set mi->inited=rli->inited=0
   end_master_info(mi);
   //and delete these two files
@@ -793,6 +1117,16 @@
     goto err;
   }
 
+  if (rpl_transaction_enabled)
+    ha_innobase::reset_mysql_relay_info();
+
+  /* We should also purge mirror binlogs at the same time unless it is
+   * specified that we do not purge binlogs.
+   */
+  if (rpl_mirror_binlog_enabled && !no_purge_mirror_binlog) {
+    error = cleanup_mirror_binlog(thd, &sql_errno);
+  }
+
 err:
   unlock_slave_threads(mi);
   if (thd && error) 
@@ -854,6 +1188,9 @@
   int thread_mask;
   const char* errmsg= 0;
   bool need_relay_log_purge= 1;
+  char     old_master_log_name[FN_REFLEN];
+  my_off_t old_master_log_pos;
+
   DBUG_ENTER("change_master");
 
   lock_slave_threads(mi);
@@ -894,6 +1231,11 @@
     mi->rli.pending = 0;
   }
 
+  /* Keep the old master information. */
+  strmake(old_master_log_name, mi->master_log_name,
+          sizeof(mi->master_log_name)-1);
+  old_master_log_pos = mi->master_log_pos;
+
   if (lex_mi->log_file_name)
     strmake(mi->master_log_name, lex_mi->log_file_name,
 	    sizeof(mi->master_log_name)-1);
@@ -971,6 +1313,24 @@
       unlock_slave_threads(mi);
       DBUG_RETURN(1);
     }
+
+    /* If we change master to an position that is before the current position
+     * during mirror binlog mode, cleanup all mirror binlog files.
+     */
+    if (rpl_mirror_binlog_enabled &&                 /* mirror binlog enabled */
+        strlen(old_master_log_name) > 0 && strlen(mi->master_log_name) > 0 &&
+        old_master_log_pos > 0 && mi->master_log_pos > 0 &&
+                 /* sanity check to make sure each parameter is initialized. */
+        (strcmp(mi->master_log_name, old_master_log_name) < 0 ||
+         (strcmp(mi->master_log_name, old_master_log_name) == 0 &&
+          mi->master_log_pos < old_master_log_pos))) {
+      uint sql_errno = 0;
+      if (cleanup_mirror_binlog(thd, &sql_errno) != 0) {
+        net_printf(&thd->net, 0, "Failed purging mirror binlog: %s", "");
+        unlock_slave_threads(mi);
+        DBUG_RETURN(1);
+      }
+    }
   }
   else
   {
@@ -1011,6 +1371,7 @@
   mi->rli.abort_pos_wait++; /* for MASTER_POS_WAIT() to abort */
   /* Clear the error, for a clean start. */
   clear_last_slave_error(&mi->rli);
+  clear_until_condition(&mi->rli);
   /*
     If we don't write new coordinates to disk now, then old will remain in
     relay-log.info until START SLAVE is issued; but if mysqld is shutdown
@@ -1018,7 +1379,7 @@
     in-memory value at restart (thus causing errors, as the old relay log does
     not exist anymore).
   */
-  flush_relay_log_info(&mi->rli); 
+  flush_relay_log_info(&mi->rli);
   pthread_cond_broadcast(&mi->data_cond);
   pthread_mutex_unlock(&mi->rli.data_lock);
 
@@ -1035,7 +1396,7 @@
     my_error(ER_FLUSH_MASTER_BINLOG_CLOSED,  MYF(ME_BELL+ME_WAITTANG));
     return 1;
   }
-  return mysql_bin_log.reset_logs(thd);
+  return mysql_bin_log.reset_logs(thd, true);
 }
 
 int cmp_master_pos(const char* log_file_name1, ulonglong log_pos1,
@@ -1068,7 +1429,7 @@
   if (send_fields(thd, field_list, 1))
     DBUG_RETURN(-1);
 
-  if (mysql_bin_log.is_open())
+  if (mysql_bin_log.is_log_open())
   {
     LEX_MASTER_INFO *lex_mi = &thd->lex.mi;
     ha_rows event_count, limit_start, limit_end;
@@ -1168,7 +1529,7 @@
   String* packet = &thd->packet;
   packet->length(0);
 
-  if (mysql_bin_log.is_open())
+  if (mysql_bin_log.is_log_open())
   {
     LOG_INFO li;
     mysql_bin_log.get_current_log(&li);
@@ -1206,7 +1567,7 @@
   String *packet = &thd->packet;
   uint length;
 
-  if (!mysql_bin_log.is_open())
+  if (!mysql_bin_log.is_log_open())
   {
     //TODO:  Replace with ER() error message
     send_error(net, 0, "You are not using binary logging");
@@ -1273,3 +1634,275 @@
   }
   return 0;
 }
+
+/* make_master: Make the current database a primary and starts the
+ * binlog logging for all updates.
+ * 
+ * The function handles the following sql commands:
+ * . MAKE MASTER MASTER_LOG_FILE='replication_log', MASTER_SERVER_ID=2
+ *               [WITH BINLOG];
+ * . MAKE MASTER MASTER_LOG_FILE='replication_log', MASTER_SERVER_ID=2,
+ *               INDEX='replication_log.index' [WITH BINLOG];
+ * . MAKE MASTER REVOKE SESSION;
+ * . MAKE MASTER REVOKE SESSION WITH KILL;
+ * . MAKE MASTER GRANT SESSION;
+ *
+ * Args:
+ *   thd              - the current thread
+ *   binlog_name      - binlog's filename
+ *   binlog_indexname - binlog index's filename
+ *   mi               - master info struct containing binlog name
+ *                      (set when we enable master during runtime)
+ * 
+ * Return:
+ *   0   : success
+ *   -1  : failure
+ */
+int make_master(THD* thd,
+                const char *binlog_name,
+                const char *binlog_indexname,
+                const LEX_MASTER_INFO* mi) {
+  int error = 0;
+
+  /* In two mode, we enable the binlog:
+   *  . !mi - LEX is not provided; this is called from startup time
+   *  . mi->log_file_name - binlog is specified in the command
+   */
+  if (!mi || mi->log_file_name) {
+    /* Get the mutex */
+    VOID(pthread_mutex_lock(&LOCK_failover_master));
+
+    /* If the binlog is already opened, we issue an error.  We reuse one
+     * existing error, which might not be fully accurate.
+     */
+    if (mysql_bin_log.is_open()) {
+      my_error(ER_MASTER_INFO, MYF(0));
+      sql_print_error("Replication master log is already open: cannot "
+                      "make another master!");
+      error = -1;
+    } else {
+      if (!mi) {
+        /* This opening happens at mysql startup time. */
+        if (open_log(&mysql_bin_log, glob_hostname, binlog_name,
+                     "-bin", binlog_indexname, LOG_BIN, 0, 0,
+                     max_binlog_size) != 0) {
+          error = -1;
+        }
+      } else {
+        /* This opening happens during mysql runtime, which is mostly
+         * requested to do failover.
+         */
+
+        error = -1;
+        if (!is_in_failover()) {
+          sql_print_error(
+              "\"make master\" runs only in failover mode. "
+              "Please run \"make master revoke session (with kill)\"");
+        } else if (strlen(mi->log_file_name) == 0) {
+          sql_print_error("Master log filename is not specified correctly.");
+        } else if (!mi->server_id || mi->server_id == MASTER_INFO_SERVER_ID) {
+          sql_print_error("\"make master\": invalid server_id(%d)",
+                          mi->server_id);
+        } else {
+          /* Open the new log files and delete all existing ones to avoid
+           * conflicts.
+           */
+          uint32 old_server_id  = server_id;
+          bool   old_opt_binlog = opt_bin_log;
+
+          /* Set the global master server id.
+           * We would not change server id for all connection threads.
+           * All non-super sessions should be blocked by revoke sessions.
+           * Super-user sessions are responsible for their own operations.
+           */
+          opt_bin_log    = 1;
+          server_id      = mi->server_id;
+          thd->server_id = mi->server_id;
+
+          mysql_bin_log.lock_index();
+          if (mi->with_old_binlog &&
+              failover_fix_last_binlog(&mysql_bin_log, thd,
+                                       mi->log_index_name,
+                                       mi->log_file_name) != 0) {
+            sql_print_error("Fix the last binlog failed.");
+            thd->server_id = old_server_id;
+            server_id      = old_server_id;
+            opt_bin_log    = old_opt_binlog;
+          } else if (open_log(&mysql_bin_log, glob_hostname, mi->log_file_name,
+                       "-bin", mi->log_index_name, LOG_BIN, 0, 0,
+                       max_binlog_size) != 0) {
+            sql_print_error("Open master logfile failed.");
+            thd->server_id = old_server_id;
+            server_id      = old_server_id;
+            opt_bin_log    = old_opt_binlog;
+          } else if (!mi->with_old_binlog &&
+                     mysql_bin_log.reset_logs(thd, true) != 0) {
+            sql_print_error("Cleanup existing master logfiles failed.");
+            thd->server_id = old_server_id;
+            server_id      = old_server_id;
+            opt_bin_log    = old_opt_binlog;
+          } else {
+            error = 0;
+          }
+          mysql_bin_log.unlock_index();
+        }
+        if (error == -1)
+          my_error(ER_MASTER_INFO, MYF(0));
+      }
+    }
+
+    if (error == 0) {
+      /* indicates that binlog is enabled now */
+      using_update_log = 1;
+    } else if (mysql_bin_log.is_open()) {
+      mysql_bin_log.close(LOG_CLOSE_INDEX);
+    }
+
+    /* Release the mutex */
+    VOID(pthread_mutex_unlock(&LOCK_failover_master));
+  } else {
+    /* The following actions are related to session management during
+     * failover operation.  We do not want some sessions come in
+     * during failover and make updates.
+     * This is invoked for command: MAKE MASTER GRANT/REVOKE SESSION;
+     */
+    if (mi->in_failover) {
+      set_in_failover(mi->kill_session);
+    } else {
+      clear_in_failover();
+    }
+  }
+
+  return error;
+}
+
+/* Set the status indicating that we are in failover and deny all non-super
+ * user access.
+ *
+ * Args:
+ *  kill_session  - kill all non-super sessions if specified
+ *
+ * Return:
+ *  0  - success
+ *  -1 - failure (caused by not killing all sessions)
+ */
+static int set_in_failover(bool kill_session) {
+  failover_deny_access = 1;
+
+  if (kill_session) {
+    /* If kill session option is specified, we need to kill all non-super
+     * user sessions.
+     */
+    THD *kill_thd;
+
+    uint error=ER_NO_SUCH_THREAD;
+    pthread_mutex_lock(&LOCK_thread_count); // For unlink from list
+    I_List_iterator<THD> it(threads);
+    while ((kill_thd=it++)) {
+      if (!(kill_thd->master_access & SUPER_ACL)) {
+        pthread_mutex_lock(&kill_thd->LOCK_delete);    // Lock from delete
+
+        /* ask the thread to die */
+        kill_thd->awake(1 /*prepare to die*/);
+        pthread_mutex_unlock(&kill_thd->LOCK_delete);
+      }
+    }
+    pthread_mutex_unlock(&LOCK_thread_count);
+  }
+  return 0;
+}
+
+static void clear_in_failover(void) {
+  failover_deny_access = 0;
+}
+
+bool is_in_failover(void) {
+  return failover_deny_access;
+}
+
+/* Fix the last binlog file during failover.  We need to add one rollback
+ * event at the end of the file to avoid partial open transactions.  This
+ * can happen when the old master dies while sending the last transaction
+ * out.
+ *
+ * Args:
+ *  binlog           - the current mysql binlog
+ *  thd              - the current thread
+ *  binlog_indexname - binlog index filename pattern
+ *  binlog_filename  - binlog filename pattern
+ *
+ * Return:
+ *  0  - success
+ *  -1 - failure
+ */
+static int failover_fix_last_binlog(MYSQL_LOG  *binlog,
+                                    THD        *thd,
+                                    const char *binlog_indexname,
+                                    const char *binlog_filename) {
+  char      last_binlog_name[FN_REFLEN];
+  bool      index_opened;
+  LOG_INFO  linfo;
+  IO_CACHE* log_file;
+
+  /* Scan the existing binlog index file. */
+  index_opened = binlog->open_index_file(binlog_indexname, binlog_filename);
+  if (!index_opened || 
+      binlog->find_log_pos(&linfo, NullS, false) != 0) {
+    /* If there is no old binlogs, simply do nothing and return. */
+    return 0;
+  }
+
+  /* Find the last log file from the binlog index. */
+  for (;;) {
+    strmake(last_binlog_name, linfo.log_file_name, FN_REFLEN);
+    last_binlog_name[FN_REFLEN - 1] = '\0';
+    if (binlog->find_next_log(&linfo, false))
+      break;
+  }
+
+  if (binlog->open(last_binlog_name, LOG_BIN, NULL, binlog_indexname,
+                   SEQ_READ_APPEND, true, BINLOG_NOSWITCH_SIZE) != 0) {
+    sql_print_error("Failover fix: could not open the last binlog file %s",
+                    last_binlog_name);
+    return -1;
+  }
+
+  Query_log_event qinfo(thd, "ROLLBACK", strlen("ROLLBACK"), TRUE);
+  qinfo.error_code = 0;
+  qinfo.log_pos    = my_b_filelength(binlog->get_log_file());
+  if (binlog->write(&qinfo) != 0) {
+    sql_print_error("Failover fix: rollback event writing error %s",
+                    last_binlog_name);
+    return -1;
+  }
+
+  /* Close the last binlog file to open the next one. */
+  binlog->close(LOG_CLOSE_TO_BE_OPENED);
+  return 0;
+}
+
+/* Cleanup all mirror binlog files. */
+static int cleanup_mirror_binlog(THD *thd, uint *error_code) {
+  int error = -1;
+
+  if (mysql_bin_log.is_log_open()) {
+    sql_print_error("reset_slave: mirror binlog already open.");
+    *error_code = ER_FLUSH_MASTER_BINLOG_CLOSED;
+  } else if (open_log(&mysql_bin_log, glob_hostname, NULL,
+                      "-bin", opt_binlog_index_name, LOG_BIN, 0, 0,
+                      max_binlog_size) != 0) {
+    sql_print_error("reset_slave: open mirror binlog error.");
+    *error_code = ER_FLUSH_MASTER_BINLOG_CLOSED;
+  } else if (mysql_bin_log.reset_logs(thd, false) != 0) {
+    sql_print_error("reset_slave: reset mirror binlog error.");
+    *error_code = ER_FLUSH_MASTER_BINLOG_CLOSED;
+
+    /* Make sure that binlog is closed. */
+    mysql_bin_log.close(LOG_CLOSE_INDEX);
+  } else {
+    error = 0;
+  }
+
+  return error;
+}
+
diff -ruN base/sql/sql_repl.h mysql40gpl/sql/sql_repl.h
--- base/sql/sql_repl.h	2005-09-02 15:37:56.000000000 -0700
+++ mysql40gpl/sql/sql_repl.h	2007-04-21 09:57:13.000000000 -0700
@@ -43,10 +43,13 @@
 int start_slave(THD* thd, MASTER_INFO* mi, bool net_report);
 int stop_slave(THD* thd, MASTER_INFO* mi, bool net_report);
 int change_master(THD* thd, MASTER_INFO* mi);
+int make_master(THD* thd, const char *binlog_name,
+                const char *binlog_indexname, const LEX_MASTER_INFO* mi);
+bool is_in_failover(void);
 int show_binlog_events(THD* thd);
 int cmp_master_pos(const char* log_file_name1, ulonglong log_pos1,
 		   const char* log_file_name2, ulonglong log_pos2);
-int reset_slave(THD *thd, MASTER_INFO* mi);
+int reset_slave(THD *thd, MASTER_INFO* mi, bool no_purge_mirror_binlog);
 int reset_master(THD* thd);
 int purge_master_logs(THD* thd, const char* to_log);
 bool log_in_use(const char* log_name);
diff -ruN base/sql/sql_show.cc mysql40gpl/sql/sql_show.cc
--- base/sql/sql_show.cc	2005-09-02 15:38:00.000000000 -0700
+++ mysql40gpl/sql/sql_show.cc	2007-04-21 09:57:13.000000000 -0700
@@ -35,6 +35,9 @@
                                "grant_types",
                                grant_names};
 
+int mysql_find_files(THD *thd,List<char> *files, const char *db,
+                     const char *path, const char *wild, bool dir);
+
 static int
 store_create_info(THD *thd, TABLE *table, String *packet);
 
@@ -1459,6 +1462,138 @@
   DBUG_RETURN(1);
 }
 
+// Sends the global user stats back to the client.
+int mysqld_show_user_stats(THD *thd, const char *wild) {
+  char buff[8192];
+  String stat_packet(buff,sizeof(buff));
+  List<Item> field_list;
+
+  DBUG_ENTER("mysqld_show_user_stats");
+  field_list.push_back(new Item_empty_string("User",30));
+  field_list.push_back(new Item_empty_string("Total_connections",30));
+  field_list.push_back(new Item_empty_string("Concurrent_connections",30));
+  field_list.push_back(new Item_empty_string("Connected_time",30));
+  field_list.push_back(new Item_empty_string("Busy_time",30));
+  field_list.push_back(new Item_empty_string("Rows_fetched",30));
+  field_list.push_back(new Item_empty_string("Rows_updated",30));
+  field_list.push_back(new Item_empty_string("Select_commands",30));
+  field_list.push_back(new Item_empty_string("Update_commands",30));
+  field_list.push_back(new Item_empty_string("Other_commands",30));
+  field_list.push_back(new Item_empty_string("Commit_transactions",30));
+  field_list.push_back(new Item_empty_string("Rollback_transactions",30));
+  if (send_fields(thd, field_list, 1))
+    DBUG_RETURN(1); /* purecov: inspected */
+
+  // Iterates through all the global stats and sends them to the client.
+  // Pattern matching on the username is supported.
+  pthread_mutex_lock(&LOCK_global_user_stats);
+  for (int i = 0; i < global_user_stats.records; ++i) {
+    USER_STATS *user_stats = (USER_STATS*)hash_element(&global_user_stats, i);
+    if (!(wild && wild[0] && wild_case_compare(user_stats->user, wild))) {
+      stat_packet.length(0);
+      net_store_data(&stat_packet, user_stats->user);
+      net_store_data(&stat_packet, (longlong)user_stats->total_connections);
+      net_store_data(&stat_packet, (longlong)user_stats->concurrent_connections);
+      net_store_data(&stat_packet, (longlong)user_stats->connected_time);
+      net_store_data(&stat_packet, (longlong)user_stats->busy_time);
+      net_store_data(&stat_packet, (longlong)user_stats->rows_fetched);
+      net_store_data(&stat_packet, (longlong)user_stats->rows_updated);
+      net_store_data(&stat_packet, (longlong)user_stats->select_commands);
+      net_store_data(&stat_packet, (longlong)user_stats->update_commands);
+      net_store_data(&stat_packet, (longlong)user_stats->other_commands);
+      net_store_data(&stat_packet, (longlong)user_stats->commit_trans);
+      net_store_data(&stat_packet, (longlong)user_stats->rollback_trans);
+      if (my_net_write(&thd->net, (char*)stat_packet.ptr(),
+                       stat_packet.length()))
+        goto err;                               /* purecov: inspected */
+    }
+  }
+  pthread_mutex_unlock(&LOCK_global_user_stats);
+  send_eof(&thd->net);
+  DBUG_RETURN(0);
+
+ err:
+  pthread_mutex_unlock(&LOCK_global_user_stats);
+  DBUG_RETURN(1);
+}
+
+// Sends the global table stats back to the client.
+int mysqld_show_table_stats(THD *thd, const char *wild) {
+  char buff[8192];
+  String stat_packet(buff,sizeof(buff));
+  List<Item> field_list;
+
+  DBUG_ENTER("mysqld_show_table_stats");
+  field_list.push_back(new Item_empty_string("Table",30));
+  field_list.push_back(new Item_empty_string("Rows_read",30));
+  field_list.push_back(new Item_empty_string("Rows_changed",30));
+  field_list.push_back(new Item_empty_string("Rows_changed_x_#indexes",30));
+  if (send_fields(thd, field_list, 1))
+    DBUG_RETURN(1); /* purecov: inspected */
+
+  // Iterates through all the global table stats and sends them to the client.
+  // Pattern matching on the table name is supported.
+  pthread_mutex_lock(&LOCK_global_table_stats);
+  for (int i = 0; i < global_table_stats.records; ++i) {
+    TABLE_STATS *table_stats =
+      (TABLE_STATS*)hash_element(&global_table_stats, i);
+    if (!(wild && wild[0] && wild_case_compare(table_stats->table, wild))) {
+      stat_packet.length(0);
+      net_store_data(&stat_packet, table_stats->table);
+      net_store_data(&stat_packet, (longlong)table_stats->rows_read);
+      net_store_data(&stat_packet, (longlong)table_stats->rows_changed);
+      net_store_data(&stat_packet,
+                     (longlong)table_stats->rows_changed_x_indexes);
+      if (my_net_write(&thd->net, (char*)stat_packet.ptr(),
+                       stat_packet.length()))
+        goto err;                               /* purecov: inspected */
+    }
+  }
+  pthread_mutex_unlock(&LOCK_global_table_stats);
+  send_eof(&thd->net);
+  DBUG_RETURN(0);
+
+ err:
+  pthread_mutex_unlock(&LOCK_global_table_stats);
+  DBUG_RETURN(1);
+}
+
+// Sends the global index stats back to the client.
+int mysqld_show_index_stats(THD *thd, const char *wild) {
+  char buff[8192];
+  String stat_packet(buff,sizeof(buff));
+  List<Item> field_list;
+
+  DBUG_ENTER("mysqld_show_index_stats");
+  field_list.push_back(new Item_empty_string("Index",30));
+  field_list.push_back(new Item_empty_string("Rows_read",30));
+  if (send_fields(thd, field_list, 1))
+    DBUG_RETURN(1); /* purecov: inspected */
+
+  // Iterates through all the global index stats and sends them to the client.
+  // Pattern matching on the index name is supported.
+  pthread_mutex_lock(&LOCK_global_index_stats);
+  for (int i = 0; i < global_index_stats.records; ++i) {
+    INDEX_STATS *index_stats =
+      (INDEX_STATS*)hash_element(&global_index_stats, i);
+    if (!(wild && wild[0] && wild_case_compare(index_stats->index, wild))) {
+      stat_packet.length(0);
+      net_store_data(&stat_packet, index_stats->index);
+      net_store_data(&stat_packet, (longlong)index_stats->rows_read);
+      if (my_net_write(&thd->net, (char*)stat_packet.ptr(),
+                       stat_packet.length()))
+        goto err;                               /* purecov: inspected */
+    }
+  }
+  pthread_mutex_unlock(&LOCK_global_index_stats);
+  send_eof(&thd->net);
+  DBUG_RETURN(0);
+
+ err:
+  pthread_mutex_unlock(&LOCK_global_index_stats);
+  DBUG_RETURN(1);
+}
+
 #ifdef __GNUC__
 template class List_iterator_fast<char>;
 template class List<char>;
diff -ruN base/sql/sql_update.cc mysql40gpl/sql/sql_update.cc
--- base/sql/sql_update.cc	2005-09-02 15:38:00.000000000 -0700
+++ mysql40gpl/sql/sql_update.cc	2007-04-21 09:57:14.000000000 -0700
@@ -369,6 +369,7 @@
   }
   thd->count_cuted_fields=0;			/* calc cuted fields */
   free_io_cache(table);
+  thd->updated_row_count += updated;
   DBUG_RETURN(0);
 
 err:
@@ -1156,5 +1157,6 @@
   ::send_ok(&thd->net,
 	    (thd->client_capabilities & CLIENT_FOUND_ROWS) ? found : updated,
 	    thd->insert_id_used ? thd->insert_id() : 0L,buff);
+  thd->updated_row_count += updated;
   return 0;
 }
diff -ruN base/sql/sql_yacc.cc mysql40gpl/sql/sql_yacc.cc
--- base/sql/sql_yacc.cc	2005-09-02 15:44:49.000000000 -0700
+++ mysql40gpl/sql/sql_yacc.cc	2007-04-21 13:24:37.000000000 -0700
@@ -1,849 +1,410 @@
-/* A Bison parser, made by GNU Bison 1.875c.  */
+/* A Bison parser, made from sql_yacc.yy
+   by GNU bison 1.35.  */
 
-/* Skeleton parser for Yacc-like parsing with Bison,
-   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
+#define YYBISON 1  /* Identify Bison output.  */
 
-   This program is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
-
-   This program is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-   GNU General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with this program; if not, write to the Free Software
-   Foundation, Inc., 59 Temple Place - Suite 330,
-   Boston, MA 02111-1307, USA.  */
-
-/* As a special exception, when this file is copied by Bison into a
-   Bison output file, you may use that output file without restriction.
-   This special exception was added by the Free Software Foundation
-   in version 1.24 of Bison.  */
-
-/* Written by Richard Stallman by simplifying the original so called
-   ``semantic'' parser.  */
-
-/* All symbols defined below should begin with yy or YY, to avoid
-   infringing on user name space.  This should be done even for local
-   variables, as they might otherwise be expanded by user macros.
-   There are some unavoidable exceptions within include files to
-   define necessary library symbols; they are noted "INFRINGES ON
-   USER NAME SPACE" below.  */
-
-/* Identify Bison output.  */
-#define YYBISON 1
-
-/* Skeleton name.  */
-#define YYSKELETON_NAME "yacc.c"
-
-/* Pure parsers.  */
-#define YYPURE 1
-
-/* Using locations.  */
-#define YYLSP_NEEDED 0
+# define	END_OF_INPUT	257
+# define	CLOSE_SYM	258
+# define	HANDLER_SYM	259
+# define	LAST_SYM	260
+# define	NEXT_SYM	261
+# define	PREV_SYM	262
+# define	EQ	263
+# define	EQUAL_SYM	264
+# define	GE	265
+# define	GT_SYM	266
+# define	LE	267
+# define	LT	268
+# define	NE	269
+# define	IS	270
+# define	SHIFT_LEFT	271
+# define	SHIFT_RIGHT	272
+# define	SET_VAR	273
+# define	ABORT_SYM	274
+# define	ADD	275
+# define	AFTER_SYM	276
+# define	ALTER	277
+# define	ANALYZE_SYM	278
+# define	AVG_SYM	279
+# define	BEGIN_SYM	280
+# define	BINLOG_SYM	281
+# define	CHANGE	282
+# define	CLIENT_SYM	283
+# define	COMMENT_SYM	284
+# define	COMMIT_SYM	285
+# define	COUNT_SYM	286
+# define	CREATE	287
+# define	CROSS	288
+# define	CUBE_SYM	289
+# define	DELETE_SYM	290
+# define	DO_SYM	291
+# define	DROP	292
+# define	EVENTS_SYM	293
+# define	EXECUTE_SYM	294
+# define	FLUSH_SYM	295
+# define	HASH_SYM	296
+# define	IEEE754_TO_STRING_SYM	297
+# define	INSERT	298
+# define	IO_THREAD	299
+# define	KILL_SYM	300
+# define	LOAD	301
+# define	LOCKS_SYM	302
+# define	LOCK_SYM	303
+# define	MAKE	304
+# define	MASTER_SYM	305
+# define	MAX_SYM	306
+# define	MIN_SYM	307
+# define	NONE_SYM	308
+# define	OPTIMIZE	309
+# define	ORDERED_CHECKSUM_SYM	310
+# define	PURGE	311
+# define	REPAIR	312
+# define	REPLICATION	313
+# define	RESET_SYM	314
+# define	ROLLBACK_SYM	315
+# define	ROLLUP_SYM	316
+# define	SAVEPOINT_SYM	317
+# define	SELECT_SYM	318
+# define	SHOW	319
+# define	SLAVE	320
+# define	SQL_THREAD	321
+# define	START_SYM	322
+# define	STD_SYM	323
+# define	STOP_SYM	324
+# define	SUM_SYM	325
+# define	SUPER_SYM	326
+# define	TRUNCATE_SYM	327
+# define	UNLOCK_SYM	328
+# define	UNTIL_SYM	329
+# define	UPDATE_SYM	330
+# define	UNORDERED_CHECKSUM_SYM	331
+# define	ACTION	332
+# define	AGGREGATE_SYM	333
+# define	ALL	334
+# define	AND	335
+# define	AS	336
+# define	ASC	337
+# define	AUTO_INC	338
+# define	AVG_ROW_LENGTH	339
+# define	BACKUP_SYM	340
+# define	BERKELEY_DB_SYM	341
+# define	BINARY	342
+# define	BIT_SYM	343
+# define	BOOL_SYM	344
+# define	BOOLEAN_SYM	345
+# define	BOTH	346
+# define	BY	347
+# define	CACHE_SYM	348
+# define	CASCADE	349
+# define	CAST_SYM	350
+# define	CHARSET	351
+# define	CHECKSUM_SYM	352
+# define	CHECK_SYM	353
+# define	COMMITTED_SYM	354
+# define	COLUMNS	355
+# define	COLUMN_SYM	356
+# define	CONCURRENT	357
+# define	CONSTRAINT	358
+# define	CONVERT_SYM	359
+# define	DATABASES	360
+# define	DATA_SYM	361
+# define	DEFAULT	362
+# define	DELAYED_SYM	363
+# define	DELAY_KEY_WRITE_SYM	364
+# define	DESC	365
+# define	DESCRIBE	366
+# define	DES_KEY_FILE	367
+# define	DISABLE_SYM	368
+# define	DISTINCT	369
+# define	DYNAMIC_SYM	370
+# define	ENABLE_SYM	371
+# define	ENCLOSED	372
+# define	ESCAPED	373
+# define	DIRECTORY_SYM	374
+# define	ESCAPE_SYM	375
+# define	EXISTS	376
+# define	EXTENDED_SYM	377
+# define	FILE_SYM	378
+# define	FIRST_SYM	379
+# define	FIXED_SYM	380
+# define	FLOAT_NUM	381
+# define	FORCE_SYM	382
+# define	FOREIGN	383
+# define	FROM	384
+# define	FULL	385
+# define	FULLTEXT_SYM	386
+# define	GLOBAL_SYM	387
+# define	GRANT	388
+# define	GRANTS	389
+# define	GREATEST_SYM	390
+# define	GROUP	391
+# define	HAVING	392
+# define	HEAP_SYM	393
+# define	HEX_NUM	394
+# define	HIGH_PRIORITY	395
+# define	HOSTS_SYM	396
+# define	IDENT	397
+# define	IGNORE_SYM	398
+# define	INDEX	399
+# define	INDEXES	400
+# define	INDEX_STATS_SYM	401
+# define	INFILE	402
+# define	INNER_SYM	403
+# define	INNOBASE_SYM	404
+# define	INTO	405
+# define	IN_SYM	406
+# define	ISOLATION	407
+# define	ISAM_SYM	408
+# define	JOIN_SYM	409
+# define	KEYS	410
+# define	KEY_SYM	411
+# define	LEADING	412
+# define	LEAST_SYM	413
+# define	LEVEL_SYM	414
+# define	LEX_HOSTNAME	415
+# define	LIKE	416
+# define	LINES	417
+# define	LOCAL_SYM	418
+# define	LOG_SYM	419
+# define	LOGS_SYM	420
+# define	LONG_NUM	421
+# define	LONG_SYM	422
+# define	LOW_PRIORITY	423
+# define	MASTER_HOST_SYM	424
+# define	MASTER_USER_SYM	425
+# define	MASTER_LOG_FILE_SYM	426
+# define	MASTER_LOG_POS_SYM	427
+# define	MASTER_PASSWORD_SYM	428
+# define	MASTER_PORT_SYM	429
+# define	MASTER_CONNECT_RETRY_SYM	430
+# define	MASTER_SERVER_ID_SYM	431
+# define	RELAY_LOG_FILE_SYM	432
+# define	RELAY_LOG_POS_SYM	433
+# define	MATCH	434
+# define	MAX_ROWS	435
+# define	MAX_CONNECTIONS_PER_HOUR	436
+# define	MAX_QUERIES_PER_HOUR	437
+# define	MAX_UPDATES_PER_HOUR	438
+# define	MEDIUM_SYM	439
+# define	MERGE_SYM	440
+# define	MEMORY_SYM	441
+# define	MIN_ROWS	442
+# define	MYISAM_SYM	443
+# define	NATIONAL_SYM	444
+# define	NATURAL	445
+# define	NEW_SYM	446
+# define	NCHAR_SYM	447
+# define	NOT	448
+# define	NO_SYM	449
+# define	NULL_SYM	450
+# define	NUM	451
+# define	OFFSET_SYM	452
+# define	ON	453
+# define	OPEN_SYM	454
+# define	OPTION	455
+# define	OPTIONALLY	456
+# define	OR	457
+# define	OR_OR_CONCAT	458
+# define	ORDER_SYM	459
+# define	OUTER	460
+# define	OUTFILE	461
+# define	DUMPFILE	462
+# define	PACK_KEYS_SYM	463
+# define	PARTIAL	464
+# define	PRIMARY_SYM	465
+# define	PRIVILEGES	466
+# define	PROCESS	467
+# define	PROCESSLIST_SYM	468
+# define	QUERY_SYM	469
+# define	RAID_0_SYM	470
+# define	RAID_STRIPED_SYM	471
+# define	RAID_TYPE	472
+# define	RAID_CHUNKS	473
+# define	RAID_CHUNKSIZE	474
+# define	READ_SYM	475
+# define	REAL_NUM	476
+# define	REFERENCES	477
+# define	REGEXP	478
+# define	RELOAD	479
+# define	RENAME	480
+# define	REPEATABLE_SYM	481
+# define	REQUIRE_SYM	482
+# define	RESOURCES	483
+# define	RESTORE_SYM	484
+# define	RESTRICT	485
+# define	REVOKE	486
+# define	ROWS_SYM	487
+# define	ROW_FORMAT_SYM	488
+# define	ROW_SYM	489
+# define	SET	490
+# define	SERIALIZABLE_SYM	491
+# define	SESSION_SYM	492
+# define	SHUTDOWN	493
+# define	SSL_SYM	494
+# define	STARTING	495
+# define	STATUS_SYM	496
+# define	STRAIGHT_JOIN	497
+# define	SUBJECT_SYM	498
+# define	TABLES	499
+# define	TABLE_SYM	500
+# define	TABLE_STATS_SYM	501
+# define	TEMPORARY	502
+# define	TERMINATED	503
+# define	TEXT_STRING	504
+# define	TO_SYM	505
+# define	TRAILING	506
+# define	TRANSACTION_SYM	507
+# define	TYPE_SYM	508
+# define	FUNC_ARG0	509
+# define	FUNC_ARG1	510
+# define	FUNC_ARG2	511
+# define	FUNC_ARG3	512
+# define	UDF_RETURNS_SYM	513
+# define	UDF_SONAME_SYM	514
+# define	UDF_SYM	515
+# define	UNCOMMITTED_SYM	516
+# define	UNION_SYM	517
+# define	UNIQUE_SYM	518
+# define	USAGE	519
+# define	USER_STATS_SYM	520
+# define	USE_FRM	521
+# define	USE_SYM	522
+# define	USING	523
+# define	VALUES	524
+# define	VARIABLES	525
+# define	WHERE	526
+# define	WITH	527
+# define	WRITE_SYM	528
+# define	X509_SYM	529
+# define	XOR	530
+# define	COMPRESSED_SYM	531
+# define	BIGINT	532
+# define	BLOB_SYM	533
+# define	CHAR_SYM	534
+# define	CHANGED	535
+# define	COALESCE	536
+# define	DATETIME	537
+# define	DATE_SYM	538
+# define	DECIMAL_SYM	539
+# define	DOUBLE_SYM	540
+# define	ENUM	541
+# define	FAST_SYM	542
+# define	FLOAT_SYM	543
+# define	INT_SYM	544
+# define	LIMIT	545
+# define	LONGBLOB	546
+# define	LONGTEXT	547
+# define	MEDIUMBLOB	548
+# define	MEDIUMINT	549
+# define	MEDIUMTEXT	550
+# define	NUMERIC_SYM	551
+# define	PRECISION	552
+# define	QUICK	553
+# define	REAL	554
+# define	SIGNED_SYM	555
+# define	SMALLINT	556
+# define	STRING_SYM	557
+# define	TEXT_SYM	558
+# define	TIMESTAMP	559
+# define	TIME_SYM	560
+# define	TINYBLOB	561
+# define	TINYINT	562
+# define	TINYTEXT	563
+# define	ULONGLONG_NUM	564
+# define	UNSIGNED	565
+# define	VARBINARY	566
+# define	VARCHAR	567
+# define	VARYING	568
+# define	ZEROFILL	569
+# define	AGAINST	570
+# define	ATAN	571
+# define	BETWEEN_SYM	572
+# define	BIT_AND	573
+# define	BIT_OR	574
+# define	CASE_SYM	575
+# define	CONCAT	576
+# define	CONCAT_WS	577
+# define	CURDATE	578
+# define	CURTIME	579
+# define	DATABASE	580
+# define	DATE_ADD_INTERVAL	581
+# define	DATE_SUB_INTERVAL	582
+# define	DAY_HOUR_SYM	583
+# define	DAY_MINUTE_SYM	584
+# define	DAY_SECOND_SYM	585
+# define	DAY_SYM	586
+# define	DECODE_SYM	587
+# define	DES_ENCRYPT_SYM	588
+# define	DES_DECRYPT_SYM	589
+# define	ELSE	590
+# define	ELT_FUNC	591
+# define	ENCODE_SYM	592
+# define	ENCRYPT	593
+# define	EXPORT_SET	594
+# define	EXTRACT_SYM	595
+# define	FIELD_FUNC	596
+# define	FORMAT_SYM	597
+# define	FOR_SYM	598
+# define	FROM_UNIXTIME	599
+# define	GROUP_UNIQUE_USERS	600
+# define	HOUR_MINUTE_SYM	601
+# define	HOUR_SECOND_SYM	602
+# define	HOUR_SYM	603
+# define	IDENTIFIED_SYM	604
+# define	IF	605
+# define	INSERT_METHOD	606
+# define	INTERVAL_SYM	607
+# define	LAST_INSERT_ID	608
+# define	LEFT	609
+# define	LOCATE	610
+# define	MAKE_SET_SYM	611
+# define	MASTER_POS_WAIT	612
+# define	MINUTE_SECOND_SYM	613
+# define	MINUTE_SYM	614
+# define	MODE_SYM	615
+# define	MODIFY_SYM	616
+# define	MONTH_SYM	617
+# define	NOW_SYM	618
+# define	PASSWORD	619
+# define	POSITION_SYM	620
+# define	PROCEDURE	621
+# define	RAND	622
+# define	REPLACE	623
+# define	RIGHT	624
+# define	ROUND	625
+# define	SECOND_SYM	626
+# define	SHARE_SYM	627
+# define	SUBSTRING	628
+# define	SUBSTRING_INDEX	629
+# define	TRIM	630
+# define	UDA_CHAR_SUM	631
+# define	UDA_FLOAT_SUM	632
+# define	UDA_INT_SUM	633
+# define	UDF_CHAR_FUNC	634
+# define	UDF_FLOAT_FUNC	635
+# define	UDF_INT_FUNC	636
+# define	UNIQUE_USERS	637
+# define	UNIX_TIMESTAMP	638
+# define	USER	639
+# define	WEEK_SYM	640
+# define	WHEN_SYM	641
+# define	WORK_SYM	642
+# define	YEAR_MONTH_SYM	643
+# define	YEAR_SYM	644
+# define	YEARWEEK	645
+# define	BENCHMARK_SYM	646
+# define	END	647
+# define	THEN_SYM	648
+# define	SQL_BIG_RESULT	649
+# define	SQL_CACHE_SYM	650
+# define	SQL_CALC_FOUND_ROWS	651
+# define	SQL_NO_CACHE_SYM	652
+# define	SQL_SMALL_RESULT	653
+# define	SQL_BUFFER_RESULT	654
+# define	ISSUER_SYM	655
+# define	CIPHER_SYM	656
+# define	NEG	657
 
-
-
-/* Tokens.  */
-#ifndef YYTOKENTYPE
-# define YYTOKENTYPE
-   /* Put the tokens into the symbol table, so that GDB and other debuggers
-      know about them.  */
-   enum yytokentype {
-     END_OF_INPUT = 258,
-     CLOSE_SYM = 259,
-     HANDLER_SYM = 260,
-     LAST_SYM = 261,
-     NEXT_SYM = 262,
-     PREV_SYM = 263,
-     EQ = 264,
-     EQUAL_SYM = 265,
-     GE = 266,
-     GT_SYM = 267,
-     LE = 268,
-     LT = 269,
-     NE = 270,
-     IS = 271,
-     SHIFT_LEFT = 272,
-     SHIFT_RIGHT = 273,
-     SET_VAR = 274,
-     ABORT_SYM = 275,
-     ADD = 276,
-     AFTER_SYM = 277,
-     ALTER = 278,
-     ANALYZE_SYM = 279,
-     AVG_SYM = 280,
-     BEGIN_SYM = 281,
-     BINLOG_SYM = 282,
-     CHANGE = 283,
-     CLIENT_SYM = 284,
-     COMMENT_SYM = 285,
-     COMMIT_SYM = 286,
-     COUNT_SYM = 287,
-     CREATE = 288,
-     CROSS = 289,
-     CUBE_SYM = 290,
-     DELETE_SYM = 291,
-     DO_SYM = 292,
-     DROP = 293,
-     EVENTS_SYM = 294,
-     EXECUTE_SYM = 295,
-     FLUSH_SYM = 296,
-     INSERT = 297,
-     IO_THREAD = 298,
-     KILL_SYM = 299,
-     LOAD = 300,
-     LOCKS_SYM = 301,
-     LOCK_SYM = 302,
-     MASTER_SYM = 303,
-     MAX_SYM = 304,
-     MIN_SYM = 305,
-     NONE_SYM = 306,
-     OPTIMIZE = 307,
-     PURGE = 308,
-     REPAIR = 309,
-     REPLICATION = 310,
-     RESET_SYM = 311,
-     ROLLBACK_SYM = 312,
-     ROLLUP_SYM = 313,
-     SAVEPOINT_SYM = 314,
-     SELECT_SYM = 315,
-     SHOW = 316,
-     SLAVE = 317,
-     SQL_THREAD = 318,
-     START_SYM = 319,
-     STD_SYM = 320,
-     STOP_SYM = 321,
-     SUM_SYM = 322,
-     SUPER_SYM = 323,
-     TRUNCATE_SYM = 324,
-     UNLOCK_SYM = 325,
-     UPDATE_SYM = 326,
-     ACTION = 327,
-     AGGREGATE_SYM = 328,
-     ALL = 329,
-     AND = 330,
-     AS = 331,
-     ASC = 332,
-     AUTO_INC = 333,
-     AVG_ROW_LENGTH = 334,
-     BACKUP_SYM = 335,
-     BERKELEY_DB_SYM = 336,
-     BINARY = 337,
-     BIT_SYM = 338,
-     BOOL_SYM = 339,
-     BOOLEAN_SYM = 340,
-     BOTH = 341,
-     BY = 342,
-     CACHE_SYM = 343,
-     CASCADE = 344,
-     CAST_SYM = 345,
-     CHARSET = 346,
-     CHECKSUM_SYM = 347,
-     CHECK_SYM = 348,
-     COMMITTED_SYM = 349,
-     COLUMNS = 350,
-     COLUMN_SYM = 351,
-     CONCURRENT = 352,
-     CONSTRAINT = 353,
-     CONVERT_SYM = 354,
-     DATABASES = 355,
-     DATA_SYM = 356,
-     DEFAULT = 357,
-     DELAYED_SYM = 358,
-     DELAY_KEY_WRITE_SYM = 359,
-     DESC = 360,
-     DESCRIBE = 361,
-     DES_KEY_FILE = 362,
-     DISABLE_SYM = 363,
-     DISTINCT = 364,
-     DYNAMIC_SYM = 365,
-     ENABLE_SYM = 366,
-     ENCLOSED = 367,
-     ESCAPED = 368,
-     DIRECTORY_SYM = 369,
-     ESCAPE_SYM = 370,
-     EXISTS = 371,
-     EXTENDED_SYM = 372,
-     FILE_SYM = 373,
-     FIRST_SYM = 374,
-     FIXED_SYM = 375,
-     FLOAT_NUM = 376,
-     FORCE_SYM = 377,
-     FOREIGN = 378,
-     FROM = 379,
-     FULL = 380,
-     FULLTEXT_SYM = 381,
-     GLOBAL_SYM = 382,
-     GRANT = 383,
-     GRANTS = 384,
-     GREATEST_SYM = 385,
-     GROUP = 386,
-     HAVING = 387,
-     HEAP_SYM = 388,
-     HEX_NUM = 389,
-     HIGH_PRIORITY = 390,
-     HOSTS_SYM = 391,
-     IDENT = 392,
-     IGNORE_SYM = 393,
-     INDEX = 394,
-     INDEXES = 395,
-     INFILE = 396,
-     INNER_SYM = 397,
-     INNOBASE_SYM = 398,
-     INTO = 399,
-     IN_SYM = 400,
-     ISOLATION = 401,
-     ISAM_SYM = 402,
-     JOIN_SYM = 403,
-     KEYS = 404,
-     KEY_SYM = 405,
-     LEADING = 406,
-     LEAST_SYM = 407,
-     LEVEL_SYM = 408,
-     LEX_HOSTNAME = 409,
-     LIKE = 410,
-     LINES = 411,
-     LOCAL_SYM = 412,
-     LOG_SYM = 413,
-     LOGS_SYM = 414,
-     LONG_NUM = 415,
-     LONG_SYM = 416,
-     LOW_PRIORITY = 417,
-     MASTER_HOST_SYM = 418,
-     MASTER_USER_SYM = 419,
-     MASTER_LOG_FILE_SYM = 420,
-     MASTER_LOG_POS_SYM = 421,
-     MASTER_PASSWORD_SYM = 422,
-     MASTER_PORT_SYM = 423,
-     MASTER_CONNECT_RETRY_SYM = 424,
-     MASTER_SERVER_ID_SYM = 425,
-     RELAY_LOG_FILE_SYM = 426,
-     RELAY_LOG_POS_SYM = 427,
-     MATCH = 428,
-     MAX_ROWS = 429,
-     MAX_CONNECTIONS_PER_HOUR = 430,
-     MAX_QUERIES_PER_HOUR = 431,
-     MAX_UPDATES_PER_HOUR = 432,
-     MEDIUM_SYM = 433,
-     MERGE_SYM = 434,
-     MEMORY_SYM = 435,
-     MIN_ROWS = 436,
-     MYISAM_SYM = 437,
-     NATIONAL_SYM = 438,
-     NATURAL = 439,
-     NEW_SYM = 440,
-     NCHAR_SYM = 441,
-     NOT = 442,
-     NO_SYM = 443,
-     NULL_SYM = 444,
-     NUM = 445,
-     OFFSET_SYM = 446,
-     ON = 447,
-     OPEN_SYM = 448,
-     OPTION = 449,
-     OPTIONALLY = 450,
-     OR = 451,
-     OR_OR_CONCAT = 452,
-     ORDER_SYM = 453,
-     OUTER = 454,
-     OUTFILE = 455,
-     DUMPFILE = 456,
-     PACK_KEYS_SYM = 457,
-     PARTIAL = 458,
-     PRIMARY_SYM = 459,
-     PRIVILEGES = 460,
-     PROCESS = 461,
-     PROCESSLIST_SYM = 462,
-     QUERY_SYM = 463,
-     RAID_0_SYM = 464,
-     RAID_STRIPED_SYM = 465,
-     RAID_TYPE = 466,
-     RAID_CHUNKS = 467,
-     RAID_CHUNKSIZE = 468,
-     READ_SYM = 469,
-     REAL_NUM = 470,
-     REFERENCES = 471,
-     REGEXP = 472,
-     RELOAD = 473,
-     RENAME = 474,
-     REPEATABLE_SYM = 475,
-     REQUIRE_SYM = 476,
-     RESOURCES = 477,
-     RESTORE_SYM = 478,
-     RESTRICT = 479,
-     REVOKE = 480,
-     ROWS_SYM = 481,
-     ROW_FORMAT_SYM = 482,
-     ROW_SYM = 483,
-     SET = 484,
-     SERIALIZABLE_SYM = 485,
-     SESSION_SYM = 486,
-     SHUTDOWN = 487,
-     SSL_SYM = 488,
-     STARTING = 489,
-     STATUS_SYM = 490,
-     STRAIGHT_JOIN = 491,
-     SUBJECT_SYM = 492,
-     TABLES = 493,
-     TABLE_SYM = 494,
-     TEMPORARY = 495,
-     TERMINATED = 496,
-     TEXT_STRING = 497,
-     TO_SYM = 498,
-     TRAILING = 499,
-     TRANSACTION_SYM = 500,
-     TYPE_SYM = 501,
-     FUNC_ARG0 = 502,
-     FUNC_ARG1 = 503,
-     FUNC_ARG2 = 504,
-     FUNC_ARG3 = 505,
-     UDF_RETURNS_SYM = 506,
-     UDF_SONAME_SYM = 507,
-     UDF_SYM = 508,
-     UNCOMMITTED_SYM = 509,
-     UNION_SYM = 510,
-     UNIQUE_SYM = 511,
-     USAGE = 512,
-     USE_FRM = 513,
-     USE_SYM = 514,
-     USING = 515,
-     VALUES = 516,
-     VARIABLES = 517,
-     WHERE = 518,
-     WITH = 519,
-     WRITE_SYM = 520,
-     X509_SYM = 521,
-     XOR = 522,
-     COMPRESSED_SYM = 523,
-     BIGINT = 524,
-     BLOB_SYM = 525,
-     CHAR_SYM = 526,
-     CHANGED = 527,
-     COALESCE = 528,
-     DATETIME = 529,
-     DATE_SYM = 530,
-     DECIMAL_SYM = 531,
-     DOUBLE_SYM = 532,
-     ENUM = 533,
-     FAST_SYM = 534,
-     FLOAT_SYM = 535,
-     INT_SYM = 536,
-     LIMIT = 537,
-     LONGBLOB = 538,
-     LONGTEXT = 539,
-     MEDIUMBLOB = 540,
-     MEDIUMINT = 541,
-     MEDIUMTEXT = 542,
-     NUMERIC_SYM = 543,
-     PRECISION = 544,
-     QUICK = 545,
-     REAL = 546,
-     SIGNED_SYM = 547,
-     SMALLINT = 548,
-     STRING_SYM = 549,
-     TEXT_SYM = 550,
-     TIMESTAMP = 551,
-     TIME_SYM = 552,
-     TINYBLOB = 553,
-     TINYINT = 554,
-     TINYTEXT = 555,
-     ULONGLONG_NUM = 556,
-     UNSIGNED = 557,
-     VARBINARY = 558,
-     VARCHAR = 559,
-     VARYING = 560,
-     ZEROFILL = 561,
-     AGAINST = 562,
-     ATAN = 563,
-     BETWEEN_SYM = 564,
-     BIT_AND = 565,
-     BIT_OR = 566,
-     CASE_SYM = 567,
-     CONCAT = 568,
-     CONCAT_WS = 569,
-     CURDATE = 570,
-     CURTIME = 571,
-     DATABASE = 572,
-     DATE_ADD_INTERVAL = 573,
-     DATE_SUB_INTERVAL = 574,
-     DAY_HOUR_SYM = 575,
-     DAY_MINUTE_SYM = 576,
-     DAY_SECOND_SYM = 577,
-     DAY_SYM = 578,
-     DECODE_SYM = 579,
-     DES_ENCRYPT_SYM = 580,
-     DES_DECRYPT_SYM = 581,
-     ELSE = 582,
-     ELT_FUNC = 583,
-     ENCODE_SYM = 584,
-     ENCRYPT = 585,
-     EXPORT_SET = 586,
-     EXTRACT_SYM = 587,
-     FIELD_FUNC = 588,
-     FORMAT_SYM = 589,
-     FOR_SYM = 590,
-     FROM_UNIXTIME = 591,
-     GROUP_UNIQUE_USERS = 592,
-     HOUR_MINUTE_SYM = 593,
-     HOUR_SECOND_SYM = 594,
-     HOUR_SYM = 595,
-     IDENTIFIED_SYM = 596,
-     IF = 597,
-     INSERT_METHOD = 598,
-     INTERVAL_SYM = 599,
-     LAST_INSERT_ID = 600,
-     LEFT = 601,
-     LOCATE = 602,
-     MAKE_SET_SYM = 603,
-     MASTER_POS_WAIT = 604,
-     MINUTE_SECOND_SYM = 605,
-     MINUTE_SYM = 606,
-     MODE_SYM = 607,
-     MODIFY_SYM = 608,
-     MONTH_SYM = 609,
-     NOW_SYM = 610,
-     PASSWORD = 611,
-     POSITION_SYM = 612,
-     PROCEDURE = 613,
-     RAND = 614,
-     REPLACE = 615,
-     RIGHT = 616,
-     ROUND = 617,
-     SECOND_SYM = 618,
-     SHARE_SYM = 619,
-     SUBSTRING = 620,
-     SUBSTRING_INDEX = 621,
-     TRIM = 622,
-     UDA_CHAR_SUM = 623,
-     UDA_FLOAT_SUM = 624,
-     UDA_INT_SUM = 625,
-     UDF_CHAR_FUNC = 626,
-     UDF_FLOAT_FUNC = 627,
-     UDF_INT_FUNC = 628,
-     UNIQUE_USERS = 629,
-     UNIX_TIMESTAMP = 630,
-     USER = 631,
-     WEEK_SYM = 632,
-     WHEN_SYM = 633,
-     WORK_SYM = 634,
-     YEAR_MONTH_SYM = 635,
-     YEAR_SYM = 636,
-     YEARWEEK = 637,
-     BENCHMARK_SYM = 638,
-     END = 639,
-     THEN_SYM = 640,
-     SQL_BIG_RESULT = 641,
-     SQL_CACHE_SYM = 642,
-     SQL_CALC_FOUND_ROWS = 643,
-     SQL_NO_CACHE_SYM = 644,
-     SQL_SMALL_RESULT = 645,
-     SQL_BUFFER_RESULT = 646,
-     ISSUER_SYM = 647,
-     CIPHER_SYM = 648,
-     NEG = 649
-   };
-#endif
-#define END_OF_INPUT 258
-#define CLOSE_SYM 259
-#define HANDLER_SYM 260
-#define LAST_SYM 261
-#define NEXT_SYM 262
-#define PREV_SYM 263
-#define EQ 264
-#define EQUAL_SYM 265
-#define GE 266
-#define GT_SYM 267
-#define LE 268
-#define LT 269
-#define NE 270
-#define IS 271
-#define SHIFT_LEFT 272
-#define SHIFT_RIGHT 273
-#define SET_VAR 274
-#define ABORT_SYM 275
-#define ADD 276
-#define AFTER_SYM 277
-#define ALTER 278
-#define ANALYZE_SYM 279
-#define AVG_SYM 280
-#define BEGIN_SYM 281
-#define BINLOG_SYM 282
-#define CHANGE 283
-#define CLIENT_SYM 284
-#define COMMENT_SYM 285
-#define COMMIT_SYM 286
-#define COUNT_SYM 287
-#define CREATE 288
-#define CROSS 289
-#define CUBE_SYM 290
-#define DELETE_SYM 291
-#define DO_SYM 292
-#define DROP 293
-#define EVENTS_SYM 294
-#define EXECUTE_SYM 295
-#define FLUSH_SYM 296
-#define INSERT 297
-#define IO_THREAD 298
-#define KILL_SYM 299
-#define LOAD 300
-#define LOCKS_SYM 301
-#define LOCK_SYM 302
-#define MASTER_SYM 303
-#define MAX_SYM 304
-#define MIN_SYM 305
-#define NONE_SYM 306
-#define OPTIMIZE 307
-#define PURGE 308
-#define REPAIR 309
-#define REPLICATION 310
-#define RESET_SYM 311
-#define ROLLBACK_SYM 312
-#define ROLLUP_SYM 313
-#define SAVEPOINT_SYM 314
-#define SELECT_SYM 315
-#define SHOW 316
-#define SLAVE 317
-#define SQL_THREAD 318
-#define START_SYM 319
-#define STD_SYM 320
-#define STOP_SYM 321
-#define SUM_SYM 322
-#define SUPER_SYM 323
-#define TRUNCATE_SYM 324
-#define UNLOCK_SYM 325
-#define UPDATE_SYM 326
-#define ACTION 327
-#define AGGREGATE_SYM 328
-#define ALL 329
-#define AND 330
-#define AS 331
-#define ASC 332
-#define AUTO_INC 333
-#define AVG_ROW_LENGTH 334
-#define BACKUP_SYM 335
-#define BERKELEY_DB_SYM 336
-#define BINARY 337
-#define BIT_SYM 338
-#define BOOL_SYM 339
-#define BOOLEAN_SYM 340
-#define BOTH 341
-#define BY 342
-#define CACHE_SYM 343
-#define CASCADE 344
-#define CAST_SYM 345
-#define CHARSET 346
-#define CHECKSUM_SYM 347
-#define CHECK_SYM 348
-#define COMMITTED_SYM 349
-#define COLUMNS 350
-#define COLUMN_SYM 351
-#define CONCURRENT 352
-#define CONSTRAINT 353
-#define CONVERT_SYM 354
-#define DATABASES 355
-#define DATA_SYM 356
-#define DEFAULT 357
-#define DELAYED_SYM 358
-#define DELAY_KEY_WRITE_SYM 359
-#define DESC 360
-#define DESCRIBE 361
-#define DES_KEY_FILE 362
-#define DISABLE_SYM 363
-#define DISTINCT 364
-#define DYNAMIC_SYM 365
-#define ENABLE_SYM 366
-#define ENCLOSED 367
-#define ESCAPED 368
-#define DIRECTORY_SYM 369
-#define ESCAPE_SYM 370
-#define EXISTS 371
-#define EXTENDED_SYM 372
-#define FILE_SYM 373
-#define FIRST_SYM 374
-#define FIXED_SYM 375
-#define FLOAT_NUM 376
-#define FORCE_SYM 377
-#define FOREIGN 378
-#define FROM 379
-#define FULL 380
-#define FULLTEXT_SYM 381
-#define GLOBAL_SYM 382
-#define GRANT 383
-#define GRANTS 384
-#define GREATEST_SYM 385
-#define GROUP 386
-#define HAVING 387
-#define HEAP_SYM 388
-#define HEX_NUM 389
-#define HIGH_PRIORITY 390
-#define HOSTS_SYM 391
-#define IDENT 392
-#define IGNORE_SYM 393
-#define INDEX 394
-#define INDEXES 395
-#define INFILE 396
-#define INNER_SYM 397
-#define INNOBASE_SYM 398
-#define INTO 399
-#define IN_SYM 400
-#define ISOLATION 401
-#define ISAM_SYM 402
-#define JOIN_SYM 403
-#define KEYS 404
-#define KEY_SYM 405
-#define LEADING 406
-#define LEAST_SYM 407
-#define LEVEL_SYM 408
-#define LEX_HOSTNAME 409
-#define LIKE 410
-#define LINES 411
-#define LOCAL_SYM 412
-#define LOG_SYM 413
-#define LOGS_SYM 414
-#define LONG_NUM 415
-#define LONG_SYM 416
-#define LOW_PRIORITY 417
-#define MASTER_HOST_SYM 418
-#define MASTER_USER_SYM 419
-#define MASTER_LOG_FILE_SYM 420
-#define MASTER_LOG_POS_SYM 421
-#define MASTER_PASSWORD_SYM 422
-#define MASTER_PORT_SYM 423
-#define MASTER_CONNECT_RETRY_SYM 424
-#define MASTER_SERVER_ID_SYM 425
-#define RELAY_LOG_FILE_SYM 426
-#define RELAY_LOG_POS_SYM 427
-#define MATCH 428
-#define MAX_ROWS 429
-#define MAX_CONNECTIONS_PER_HOUR 430
-#define MAX_QUERIES_PER_HOUR 431
-#define MAX_UPDATES_PER_HOUR 432
-#define MEDIUM_SYM 433
-#define MERGE_SYM 434
-#define MEMORY_SYM 435
-#define MIN_ROWS 436
-#define MYISAM_SYM 437
-#define NATIONAL_SYM 438
-#define NATURAL 439
-#define NEW_SYM 440
-#define NCHAR_SYM 441
-#define NOT 442
-#define NO_SYM 443
-#define NULL_SYM 444
-#define NUM 445
-#define OFFSET_SYM 446
-#define ON 447
-#define OPEN_SYM 448
-#define OPTION 449
-#define OPTIONALLY 450
-#define OR 451
-#define OR_OR_CONCAT 452
-#define ORDER_SYM 453
-#define OUTER 454
-#define OUTFILE 455
-#define DUMPFILE 456
-#define PACK_KEYS_SYM 457
-#define PARTIAL 458
-#define PRIMARY_SYM 459
-#define PRIVILEGES 460
-#define PROCESS 461
-#define PROCESSLIST_SYM 462
-#define QUERY_SYM 463
-#define RAID_0_SYM 464
-#define RAID_STRIPED_SYM 465
-#define RAID_TYPE 466
-#define RAID_CHUNKS 467
-#define RAID_CHUNKSIZE 468
-#define READ_SYM 469
-#define REAL_NUM 470
-#define REFERENCES 471
-#define REGEXP 472
-#define RELOAD 473
-#define RENAME 474
-#define REPEATABLE_SYM 475
-#define REQUIRE_SYM 476
-#define RESOURCES 477
-#define RESTORE_SYM 478
-#define RESTRICT 479
-#define REVOKE 480
-#define ROWS_SYM 481
-#define ROW_FORMAT_SYM 482
-#define ROW_SYM 483
-#define SET 484
-#define SERIALIZABLE_SYM 485
-#define SESSION_SYM 486
-#define SHUTDOWN 487
-#define SSL_SYM 488
-#define STARTING 489
-#define STATUS_SYM 490
-#define STRAIGHT_JOIN 491
-#define SUBJECT_SYM 492
-#define TABLES 493
-#define TABLE_SYM 494
-#define TEMPORARY 495
-#define TERMINATED 496
-#define TEXT_STRING 497
-#define TO_SYM 498
-#define TRAILING 499
-#define TRANSACTION_SYM 500
-#define TYPE_SYM 501
-#define FUNC_ARG0 502
-#define FUNC_ARG1 503
-#define FUNC_ARG2 504
-#define FUNC_ARG3 505
-#define UDF_RETURNS_SYM 506
-#define UDF_SONAME_SYM 507
-#define UDF_SYM 508
-#define UNCOMMITTED_SYM 509
-#define UNION_SYM 510
-#define UNIQUE_SYM 511
-#define USAGE 512
-#define USE_FRM 513
-#define USE_SYM 514
-#define USING 515
-#define VALUES 516
-#define VARIABLES 517
-#define WHERE 518
-#define WITH 519
-#define WRITE_SYM 520
-#define X509_SYM 521
-#define XOR 522
-#define COMPRESSED_SYM 523
-#define BIGINT 524
-#define BLOB_SYM 525
-#define CHAR_SYM 526
-#define CHANGED 527
-#define COALESCE 528
-#define DATETIME 529
-#define DATE_SYM 530
-#define DECIMAL_SYM 531
-#define DOUBLE_SYM 532
-#define ENUM 533
-#define FAST_SYM 534
-#define FLOAT_SYM 535
-#define INT_SYM 536
-#define LIMIT 537
-#define LONGBLOB 538
-#define LONGTEXT 539
-#define MEDIUMBLOB 540
-#define MEDIUMINT 541
-#define MEDIUMTEXT 542
-#define NUMERIC_SYM 543
-#define PRECISION 544
-#define QUICK 545
-#define REAL 546
-#define SIGNED_SYM 547
-#define SMALLINT 548
-#define STRING_SYM 549
-#define TEXT_SYM 550
-#define TIMESTAMP 551
-#define TIME_SYM 552
-#define TINYBLOB 553
-#define TINYINT 554
-#define TINYTEXT 555
-#define ULONGLONG_NUM 556
-#define UNSIGNED 557
-#define VARBINARY 558
-#define VARCHAR 559
-#define VARYING 560
-#define ZEROFILL 561
-#define AGAINST 562
-#define ATAN 563
-#define BETWEEN_SYM 564
-#define BIT_AND 565
-#define BIT_OR 566
-#define CASE_SYM 567
-#define CONCAT 568
-#define CONCAT_WS 569
-#define CURDATE 570
-#define CURTIME 571
-#define DATABASE 572
-#define DATE_ADD_INTERVAL 573
-#define DATE_SUB_INTERVAL 574
-#define DAY_HOUR_SYM 575
-#define DAY_MINUTE_SYM 576
-#define DAY_SECOND_SYM 577
-#define DAY_SYM 578
-#define DECODE_SYM 579
-#define DES_ENCRYPT_SYM 580
-#define DES_DECRYPT_SYM 581
-#define ELSE 582
-#define ELT_FUNC 583
-#define ENCODE_SYM 584
-#define ENCRYPT 585
-#define EXPORT_SET 586
-#define EXTRACT_SYM 587
-#define FIELD_FUNC 588
-#define FORMAT_SYM 589
-#define FOR_SYM 590
-#define FROM_UNIXTIME 591
-#define GROUP_UNIQUE_USERS 592
-#define HOUR_MINUTE_SYM 593
-#define HOUR_SECOND_SYM 594
-#define HOUR_SYM 595
-#define IDENTIFIED_SYM 596
-#define IF 597
-#define INSERT_METHOD 598
-#define INTERVAL_SYM 599
-#define LAST_INSERT_ID 600
-#define LEFT 601
-#define LOCATE 602
-#define MAKE_SET_SYM 603
-#define MASTER_POS_WAIT 604
-#define MINUTE_SECOND_SYM 605
-#define MINUTE_SYM 606
-#define MODE_SYM 607
-#define MODIFY_SYM 608
-#define MONTH_SYM 609
-#define NOW_SYM 610
-#define PASSWORD 611
-#define POSITION_SYM 612
-#define PROCEDURE 613
-#define RAND 614
-#define REPLACE 615
-#define RIGHT 616
-#define ROUND 617
-#define SECOND_SYM 618
-#define SHARE_SYM 619
-#define SUBSTRING 620
-#define SUBSTRING_INDEX 621
-#define TRIM 622
-#define UDA_CHAR_SUM 623
-#define UDA_FLOAT_SUM 624
-#define UDA_INT_SUM 625
-#define UDF_CHAR_FUNC 626
-#define UDF_FLOAT_FUNC 627
-#define UDF_INT_FUNC 628
-#define UNIQUE_USERS 629
-#define UNIX_TIMESTAMP 630
-#define USER 631
-#define WEEK_SYM 632
-#define WHEN_SYM 633
-#define WORK_SYM 634
-#define YEAR_MONTH_SYM 635
-#define YEAR_SYM 636
-#define YEARWEEK 637
-#define BENCHMARK_SYM 638
-#define END 639
-#define THEN_SYM 640
-#define SQL_BIG_RESULT 641
-#define SQL_CACHE_SYM 642
-#define SQL_CALC_FOUND_ROWS 643
-#define SQL_NO_CACHE_SYM 644
-#define SQL_SMALL_RESULT 645
-#define SQL_BUFFER_RESULT 646
-#define ISSUER_SYM 647
-#define CIPHER_SYM 648
-#define NEG 649
-
-
-
-
-/* Copy the first part of user declarations.  */
 #line 19 "sql_yacc.yy"
 
 #define MYSQL_YACC
@@ -870,23 +431,9 @@
 }
 
 
-
-/* Enabling traces.  */
-#ifndef YYDEBUG
-# define YYDEBUG 0
-#endif
-
-/* Enabling verbose error messages.  */
-#ifdef YYERROR_VERBOSE
-# undef YYERROR_VERBOSE
-# define YYERROR_VERBOSE 1
-#else
-# define YYERROR_VERBOSE 0
-#endif
-
-#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
 #line 44 "sql_yacc.yy"
-typedef union YYSTYPE {
+#ifndef YYSTYPE
+typedef union {
   int  num;
   ulong ulong_num;
   ulonglong ulonglong_number;
@@ -913,163 +460,42 @@
   enum Item_udftype udf_type;
   thr_lock_type lock_type;
   interval_type interval;
-} YYSTYPE;
-/* Line 191 of yacc.c.  */
-#line 919 "sql_yacc.cc"
-# define yystype YYSTYPE /* obsolescent; will be withdrawn */
-# define YYSTYPE_IS_DECLARED 1
+} yystype;
+# define YYSTYPE yystype
 # define YYSTYPE_IS_TRIVIAL 1
 #endif
-
-
-
-/* Copy the second part of user declarations.  */
 #line 73 "sql_yacc.yy"
 
 bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);
-
-
-/* Line 214 of yacc.c.  */
-#line 934 "sql_yacc.cc"
-
-#if ! defined (yyoverflow) || YYERROR_VERBOSE
-
-# ifndef YYFREE
-#  define YYFREE free
-# endif
-# ifndef YYMALLOC
-#  define YYMALLOC malloc
-# endif
-
-/* The parser invokes alloca or malloc; define the necessary symbols.  */
-
-# ifdef YYSTACK_USE_ALLOCA
-#  if YYSTACK_USE_ALLOCA
-#   define YYSTACK_ALLOC alloca
-#  endif
-# else
-#  if defined (alloca) || defined (_ALLOCA_H)
-#   define YYSTACK_ALLOC alloca
-#  else
-#   ifdef __GNUC__
-#    define YYSTACK_ALLOC __builtin_alloca
-#   endif
-#  endif
-# endif
-
-# ifdef YYSTACK_ALLOC
-   /* Pacify GCC's `empty if-body' warning. */
-#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
-# else
-#  if defined (__STDC__) || defined (__cplusplus)
-#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
-#   define YYSIZE_T size_t
-#  endif
-#  define YYSTACK_ALLOC YYMALLOC
-#  define YYSTACK_FREE YYFREE
-# endif
-#endif /* ! defined (yyoverflow) || YYERROR_VERBOSE */
-
-
-#if (! defined (yyoverflow) \
-     && (! defined (__cplusplus) \
-	 || (defined (YYSTYPE_IS_TRIVIAL) && YYSTYPE_IS_TRIVIAL)))
-
-/* A type that is properly aligned for any stack member.  */
-union yyalloc
-{
-  short yyss;
-  YYSTYPE yyvs;
-  };
-
-/* The size of the maximum gap between one aligned stack and the next.  */
-# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)
-
-/* The size of an array large to enough to hold all stacks, each with
-   N elements.  */
-# define YYSTACK_BYTES(N) \
-     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
-      + YYSTACK_GAP_MAXIMUM)
-
-/* Copy COUNT objects from FROM to TO.  The source and destination do
-   not overlap.  */
-# ifndef YYCOPY
-#  if defined (__GNUC__) && 1 < __GNUC__
-#   define YYCOPY(To, From, Count) \
-      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
-#  else
-#   define YYCOPY(To, From, Count)		\
-      do					\
-	{					\
-	  register YYSIZE_T yyi;		\
-	  for (yyi = 0; yyi < (Count); yyi++)	\
-	    (To)[yyi] = (From)[yyi];		\
-	}					\
-      while (0)
-#  endif
-# endif
-
-/* Relocate STACK from its old location to the new one.  The
-   local variables YYSIZE and YYSTACKSIZE give the old and new number of
-   elements in the stack, and YYPTR gives the new location of the
-   stack.  Advance YYPTR to a properly aligned location for the next
-   stack.  */
-# define YYSTACK_RELOCATE(Stack)					\
-    do									\
-      {									\
-	YYSIZE_T yynewbytes;						\
-	YYCOPY (&yyptr->Stack, Stack, yysize);				\
-	Stack = &yyptr->Stack;						\
-	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
-	yyptr += yynewbytes / sizeof (*yyptr);				\
-      }									\
-    while (0)
-
+#ifndef YYDEBUG
+# define YYDEBUG 0
 #endif
 
-#if defined (__STDC__) || defined (__cplusplus)
-   typedef signed char yysigned_char;
-#else
-   typedef short yysigned_char;
-#endif
 
-/* YYFINAL -- State number of the termination state. */
-#define YYFINAL  412
-/* YYLAST -- Last index in YYTABLE.  */
-#define YYLAST   26073
-
-/* YYNTOKENS -- Number of terminals. */
-#define YYNTOKENS  412
-/* YYNNTS -- Number of nonterminals. */
-#define YYNNTS  371
-/* YYNRULES -- Number of rules. */
-#define YYNRULES  1294
-/* YYNRULES -- Number of states. */
-#define YYNSTATES  2418
-
-/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
-#define YYUNDEFTOK  2
-#define YYMAXUTOK   649
 
-#define YYTRANSLATE(YYX) 						\
-  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
+#define	YYFINAL		2493
+#define	YYFLAG		-32768
+#define	YYNTBASE	421
+
+/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
+#define YYTRANSLATE(x) ((unsigned)(x) <= 657 ? yytranslate[x] : 809)
 
-/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
-static const unsigned short yytranslate[] =
+/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
+static const short yytranslate[] =
 {
        0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,   407,     2,     2,     2,   400,   395,     2,
-     404,   405,   398,   397,   406,   396,   411,   399,     2,     2,
+       2,     2,     2,   416,     2,     2,     2,   409,   404,     2,
+     413,   414,   407,   406,   415,   405,   420,   408,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,   410,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,   419,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,   403,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,   412,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,   408,   394,   409,   401,     2,     2,     2,
+       2,     2,     2,   417,   403,   418,   411,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
@@ -1082,155 +508,153 @@
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
-       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
-      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
-      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
-      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
-      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
-      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
-      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
-     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
-     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
-     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
-     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
-     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
-     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
-     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
-     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
-     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
-     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
-     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
-     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
-     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
-     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
-     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
-     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
-     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
-     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
-     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
-     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
-     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
-     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
-     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
-     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
-     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
-     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
-     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
-     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
-     385,   386,   387,   388,   389,   390,   391,   392,   393,   402
+       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
+       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
+      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
+      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
+      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
+      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
+      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
+      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
+      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
+      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
+     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
+     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
+     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
+     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
+     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
+     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
+     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
+     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
+     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
+     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
+     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
+     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
+     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
+     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
+     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
+     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
+     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
+     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
+     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
+     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
+     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
+     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
+     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
+     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
+     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
+     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
+     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
+     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
+     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
+     396,   397,   398,   399,   400,   401,   402,   410
 };
 
 #if YYDEBUG
-/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
-   YYRHS.  */
-static const unsigned short yyprhs[] =
-{
-       0,     0,     3,     5,     8,    10,    12,    14,    16,    18,
-      20,    22,    24,    26,    28,    30,    32,    34,    36,    38,
-      40,    42,    44,    46,    48,    50,    52,    54,    56,    58,
-      60,    62,    64,    66,    68,    70,    72,    74,    76,    78,
-      80,    82,    84,    85,    91,    93,    97,   101,   105,   109,
-     113,   117,   121,   125,   129,   133,   134,   142,   143,   154,
-     159,   160,   170,   173,   176,   181,   182,   187,   188,   189,
-     195,   196,   204,   205,   211,   212,   214,   215,   217,   219,
-     222,   224,   225,   229,   230,   232,   234,   237,   241,   245,
-     249,   253,   257,   261,   265,   269,   273,   277,   281,   285,
-     289,   293,   297,   303,   307,   312,   316,   321,   326,   328,
-     330,   332,   334,   336,   338,   340,   342,   344,   346,   348,
-     350,   352,   354,   356,   358,   360,   361,   364,   365,   367,
-     369,   371,   373,   375,   379,   381,   383,   386,   389,   395,
-     404,   407,   410,   411,   413,   416,   417,   419,   422,   423,
-     428,   432,   436,   440,   443,   445,   451,   454,   459,   465,
-     470,   474,   476,   478,   480,   485,   487,   489,   491,   493,
-     495,   498,   501,   503,   505,   507,   509,   513,   517,   518,
-     524,   525,   531,   533,   535,   538,   541,   543,   546,   549,
-     551,   553,   555,   557,   559,   561,   563,   566,   567,   571,
-     573,   579,   580,   582,   585,   587,   589,   591,   593,   594,
-     598,   599,   601,   602,   604,   607,   609,   611,   614,   617,
-     619,   622,   624,   627,   630,   631,   633,   638,   642,   649,
-     650,   652,   655,   657,   661,   665,   668,   671,   673,   675,
-     678,   681,   684,   688,   690,   692,   695,   698,   702,   704,
-     706,   708,   710,   712,   713,   715,   717,   722,   725,   727,
-     732,   733,   735,   737,   741,   742,   749,   750,   752,   756,
-     759,   763,   766,   771,   772,   779,   780,   781,   790,   795,
-     799,   804,   808,   811,   814,   821,   827,   831,   833,   835,
-     836,   838,   839,   841,   842,   844,   846,   847,   850,   852,
-     853,   855,   857,   859,   863,   867,   871,   875,   876,   880,
-     882,   886,   887,   889,   891,   892,   899,   900,   907,   908,
-     914,   915,   917,   919,   922,   924,   926,   928,   929,   935,
-     936,   942,   943,   945,   947,   950,   952,   954,   956,   958,
-     960,   961,   967,   968,   973,   975,   979,   983,   985,   986,
-     991,   992,   999,  1000,  1006,  1008,  1010,  1012,  1015,  1018,
-    1027,  1028,  1030,  1033,  1035,  1037,  1039,  1041,  1043,  1045,
-    1047,  1049,  1051,  1053,  1055,  1056,  1059,  1064,  1068,  1070,
-    1072,  1077,  1078,  1079,  1081,  1083,  1084,  1087,  1090,  1092,
-    1094,  1095,  1098,  1100,  1102,  1108,  1115,  1121,  1128,  1132,
-    1136,  1140,  1144,  1149,  1155,  1159,  1164,  1168,  1173,  1177,
-    1181,  1185,  1189,  1193,  1197,  1201,  1205,  1209,  1213,  1217,
-    1221,  1225,  1229,  1233,  1237,  1241,  1247,  1253,  1259,  1266,
-    1270,  1274,  1278,  1282,  1287,  1293,  1297,  1302,  1306,  1311,
-    1315,  1319,  1323,  1327,  1331,  1335,  1339,  1343,  1347,  1351,
-    1355,  1359,  1363,  1367,  1371,  1375,  1379,  1385,  1391,  1393,
-    1399,  1406,  1412,  1419,  1423,  1427,  1431,  1436,  1442,  1446,
-    1451,  1455,  1460,  1464,  1468,  1472,  1476,  1480,  1484,  1488,
-    1492,  1496,  1500,  1504,  1508,  1512,  1516,  1520,  1524,  1528,
-    1534,  1540,  1542,  1544,  1546,  1551,  1554,  1559,  1561,  1564,
-    1567,  1570,  1573,  1577,  1582,  1589,  1599,  1602,  1609,  1616,
-    1623,  1627,  1632,  1639,  1648,  1653,  1660,  1665,  1670,  1675,
-    1682,  1685,  1688,  1693,  1702,  1711,  1715,  1722,  1729,  1734,
-    1741,  1748,  1755,  1760,  1767,  1772,  1779,  1788,  1799,  1812,
-    1819,  1824,  1831,  1838,  1843,  1852,  1863,  1869,  1876,  1880,
-    1885,  1892,  1899,  1908,  1915,  1922,  1927,  1934,  1941,  1950,
-    1955,  1960,  1963,  1968,  1973,  1980,  1985,  1989,  1998,  2005,
-    2010,  2017,  2022,  2031,  2038,  2047,  2054,  2063,  2068,  2076,
-    2084,  2092,  2099,  2106,  2111,  2116,  2121,  2126,  2131,  2136,
-    2147,  2151,  2156,  2160,  2165,  2172,  2177,  2182,  2189,  2196,
-    2203,  2204,  2206,  2211,  2216,  2221,  2227,  2232,  2233,  2234,
-    2242,  2253,  2258,  2263,  2268,  2273,  2274,  2278,  2280,  2282,
-    2284,  2287,  2289,  2292,  2294,  2296,  2298,  2299,  2302,  2304,
-    2308,  2310,  2314,  2315,  2318,  2320,  2324,  2325,  2327,  2328,
-    2331,  2332,  2335,  2339,  2345,  2346,  2348,  2352,  2354,  2358,
-    2362,  2366,  2372,  2373,  2382,  2390,  2391,  2402,  2409,  2417,
-    2418,  2429,  2436,  2441,  2443,  2446,  2449,  2450,  2455,  2466,
-    2467,  2469,  2470,  2473,  2476,  2479,  2480,  2486,  2490,  2492,
-    2494,  2496,  2500,  2502,  2504,  2506,  2508,  2510,  2512,  2514,
-    2516,  2518,  2520,  2522,  2524,  2526,  2527,  2529,  2531,  2532,
-    2535,  2536,  2538,  2539,  2542,  2543,  2544,  2548,  2551,  2552,
-    2553,  2558,  2563,  2566,  2567,  2570,  2573,  2574,  2576,  2577,
-    2582,  2587,  2590,  2591,  2593,  2595,  2596,  2597,  2601,  2603,
-    2607,  2611,  2612,  2615,  2617,  2619,  2621,  2623,  2625,  2627,
-    2629,  2631,  2633,  2635,  2636,  2637,  2644,  2645,  2647,  2651,
-    2653,  2656,  2657,  2664,  2668,  2669,  2673,  2680,  2681,  2688,
-    2693,  2697,  2699,  2703,  2705,  2706,  2709,  2710,  2712,  2713,
-    2714,  2722,  2723,  2724,  2731,  2732,  2734,  2736,  2738,  2740,
-    2742,  2745,  2747,  2749,  2751,  2755,  2760,  2761,  2765,  2766,
-    2770,  2773,  2777,  2779,  2782,  2783,  2787,  2788,  2794,  2798,
-    2800,  2804,  2806,  2810,  2812,  2814,  2815,  2817,  2818,  2823,
-    2824,  2826,  2830,  2832,  2834,  2836,  2837,  2838,  2850,  2856,
-    2860,  2861,  2863,  2864,  2869,  2870,  2877,  2878,  2884,  2885,
-    2892,  2894,  2898,  2901,  2906,  2907,  2910,  2911,  2914,  2916,
-    2918,  2922,  2923,  2925,  2926,  2930,  2933,  2937,  2942,  2947,
-    2954,  2971,  2974,  2977,  2978,  2985,  2990,  2993,  2996,  2999,
-    3003,  3005,  3009,  3013,  3016,  3019,  3020,  3023,  3024,  3027,
-    3028,  3030,  3032,  3034,  3035,  3038,  3039,  3042,  3043,  3048,
-    3051,  3053,  3055,  3056,  3058,  3060,  3061,  3065,  3069,  3071,
-    3072,  3076,  3081,  3084,  3086,  3088,  3090,  3092,  3094,  3096,
-    3098,  3100,  3101,  3103,  3104,  3108,  3112,  3114,  3116,  3118,
-    3121,  3122,  3129,  3132,  3135,  3136,  3152,  3158,  3163,  3164,
-    3166,  3167,  3169,  3171,  3172,  3174,  3176,  3177,  3180,  3183,
-    3185,  3189,  3194,  3198,  3202,  3203,  3206,  3209,  3211,  3215,
-    3219,  3220,  3224,  3226,  3229,  3231,  3233,  3235,  3237,  3239,
-    3241,  3243,  3245,  3247,  3249,  3252,  3255,  3258,  3260,  3262,
-    3266,  3272,  3274,  3276,  3280,  3285,  3291,  3293,  3297,  3300,
-    3302,  3306,  3309,  3311,  3315,  3317,  3319,  3321,  3323,  3325,
-    3327,  3331,  3333,  3335,  3337,  3339,  3341,  3343,  3345,  3347,
-    3349,  3351,  3353,  3355,  3357,  3359,  3361,  3363,  3365,  3367,
-    3369,  3371,  3373,  3375,  3377,  3379,  3381,  3383,  3385,  3387,
-    3389,  3391,  3393,  3395,  3397,  3399,  3401,  3403,  3405,  3407,
+static const short yyprhs[] =
+{
+       0,     0,     2,     5,     7,     9,    11,    13,    15,    17,
+      19,    21,    23,    25,    27,    29,    31,    33,    35,    37,
+      39,    41,    43,    45,    47,    49,    51,    53,    55,    57,
+      59,    61,    63,    65,    67,    69,    71,    73,    75,    77,
+      79,    81,    83,    84,    90,    92,    96,   100,   104,   108,
+     112,   116,   120,   124,   128,   132,   133,   141,   142,   153,
+     158,   159,   169,   172,   175,   180,   181,   186,   187,   188,
+     194,   195,   203,   204,   210,   211,   213,   214,   216,   218,
+     221,   223,   224,   228,   229,   231,   233,   236,   240,   244,
+     248,   252,   256,   260,   264,   268,   272,   276,   280,   284,
+     288,   292,   296,   302,   306,   311,   315,   320,   325,   327,
+     329,   331,   333,   335,   337,   339,   341,   343,   345,   347,
+     349,   351,   353,   355,   357,   359,   360,   363,   364,   366,
+     368,   370,   372,   374,   378,   380,   382,   385,   388,   394,
+     403,   406,   409,   410,   412,   415,   416,   418,   421,   422,
+     427,   431,   435,   439,   442,   444,   450,   453,   458,   464,
+     469,   473,   475,   477,   479,   484,   486,   488,   490,   492,
+     494,   497,   500,   502,   504,   506,   508,   512,   516,   517,
+     523,   524,   530,   532,   534,   537,   540,   542,   545,   548,
+     550,   552,   554,   556,   558,   560,   562,   565,   566,   570,
+     572,   578,   579,   581,   584,   586,   588,   590,   592,   593,
+     597,   598,   600,   601,   603,   606,   608,   610,   613,   616,
+     618,   621,   623,   626,   629,   630,   632,   637,   641,   648,
+     649,   651,   654,   656,   660,   664,   667,   670,   672,   674,
+     677,   680,   683,   687,   689,   691,   694,   697,   701,   703,
+     705,   707,   709,   711,   712,   714,   716,   721,   724,   726,
+     731,   732,   734,   736,   740,   741,   748,   749,   751,   755,
+     758,   762,   765,   770,   771,   778,   779,   780,   789,   794,
+     798,   803,   807,   810,   813,   820,   826,   830,   832,   834,
+     835,   837,   838,   840,   841,   843,   845,   846,   849,   851,
+     852,   854,   856,   858,   859,   865,   869,   873,   877,   878,
+     882,   884,   888,   889,   891,   893,   894,   897,   899,   903,
+     907,   911,   912,   919,   920,   927,   928,   934,   935,   937,
+     939,   942,   944,   946,   948,   949,   955,   956,   962,   963,
+     965,   967,   970,   972,   974,   976,   978,   980,   981,   987,
+     988,   993,   995,   999,  1003,  1005,  1006,  1011,  1012,  1019,
+    1020,  1026,  1028,  1030,  1032,  1035,  1038,  1047,  1048,  1050,
+    1053,  1055,  1057,  1059,  1061,  1063,  1065,  1067,  1069,  1071,
+    1073,  1075,  1076,  1079,  1084,  1088,  1090,  1092,  1097,  1098,
+    1099,  1101,  1103,  1104,  1107,  1110,  1112,  1114,  1115,  1118,
+    1120,  1122,  1128,  1135,  1141,  1148,  1152,  1156,  1160,  1164,
+    1169,  1175,  1179,  1184,  1188,  1193,  1197,  1201,  1205,  1209,
+    1213,  1217,  1221,  1225,  1229,  1233,  1237,  1241,  1245,  1249,
+    1253,  1257,  1261,  1267,  1273,  1279,  1286,  1290,  1294,  1298,
+    1302,  1307,  1313,  1317,  1322,  1326,  1331,  1335,  1339,  1343,
+    1347,  1351,  1355,  1359,  1363,  1367,  1371,  1375,  1379,  1383,
+    1387,  1391,  1395,  1399,  1405,  1411,  1413,  1419,  1426,  1432,
+    1439,  1443,  1447,  1451,  1456,  1462,  1466,  1471,  1475,  1480,
+    1484,  1488,  1492,  1496,  1500,  1504,  1508,  1512,  1516,  1520,
+    1524,  1528,  1532,  1536,  1540,  1544,  1548,  1554,  1560,  1562,
+    1564,  1566,  1571,  1574,  1579,  1581,  1584,  1587,  1590,  1593,
+    1597,  1602,  1609,  1619,  1622,  1629,  1636,  1643,  1647,  1652,
+    1659,  1668,  1673,  1680,  1685,  1690,  1695,  1702,  1705,  1708,
+    1713,  1722,  1731,  1735,  1742,  1749,  1754,  1761,  1768,  1775,
+    1780,  1787,  1792,  1799,  1808,  1819,  1832,  1839,  1844,  1851,
+    1858,  1863,  1872,  1883,  1889,  1896,  1900,  1905,  1912,  1919,
+    1928,  1935,  1942,  1947,  1954,  1961,  1970,  1975,  1980,  1983,
+    1988,  1993,  2000,  2005,  2009,  2018,  2025,  2030,  2037,  2042,
+    2051,  2058,  2067,  2074,  2083,  2088,  2096,  2104,  2112,  2119,
+    2126,  2131,  2136,  2141,  2146,  2151,  2156,  2167,  2171,  2176,
+    2180,  2185,  2192,  2197,  2202,  2209,  2216,  2223,  2224,  2226,
+    2231,  2236,  2241,  2247,  2252,  2253,  2254,  2262,  2273,  2274,
+    2275,  2282,  2283,  2284,  2291,  2292,  2293,  2300,  2305,  2310,
+    2315,  2320,  2321,  2325,  2327,  2329,  2331,  2334,  2336,  2339,
+    2341,  2343,  2345,  2346,  2349,  2351,  2355,  2357,  2361,  2362,
+    2365,  2367,  2371,  2372,  2374,  2375,  2378,  2379,  2382,  2386,
+    2392,  2393,  2395,  2399,  2401,  2405,  2409,  2413,  2419,  2420,
+    2429,  2437,  2438,  2449,  2456,  2464,  2465,  2476,  2483,  2488,
+    2490,  2493,  2496,  2497,  2502,  2513,  2514,  2516,  2517,  2520,
+    2523,  2526,  2527,  2533,  2537,  2539,  2541,  2543,  2547,  2549,
+    2551,  2553,  2555,  2557,  2559,  2561,  2563,  2565,  2567,  2569,
+    2571,  2573,  2574,  2576,  2578,  2579,  2582,  2583,  2585,  2586,
+    2589,  2590,  2591,  2595,  2598,  2599,  2600,  2605,  2610,  2613,
+    2614,  2617,  2620,  2621,  2623,  2624,  2629,  2634,  2637,  2638,
+    2640,  2642,  2643,  2644,  2648,  2650,  2654,  2658,  2659,  2662,
+    2664,  2666,  2668,  2670,  2672,  2674,  2676,  2678,  2680,  2682,
+    2683,  2684,  2691,  2692,  2694,  2698,  2700,  2703,  2704,  2711,
+    2715,  2716,  2720,  2727,  2728,  2735,  2740,  2744,  2746,  2750,
+    2752,  2753,  2756,  2757,  2759,  2760,  2761,  2769,  2770,  2771,
+    2778,  2779,  2781,  2783,  2785,  2787,  2789,  2792,  2794,  2796,
+    2798,  2802,  2807,  2808,  2812,  2813,  2817,  2820,  2824,  2826,
+    2829,  2830,  2834,  2835,  2841,  2845,  2847,  2851,  2853,  2857,
+    2859,  2861,  2862,  2864,  2865,  2870,  2871,  2873,  2877,  2879,
+    2881,  2883,  2884,  2885,  2897,  2903,  2907,  2908,  2910,  2911,
+    2916,  2917,  2924,  2925,  2931,  2932,  2939,  2941,  2945,  2948,
+    2953,  2954,  2957,  2958,  2961,  2963,  2965,  2969,  2970,  2972,
+    2973,  2977,  2980,  2984,  2989,  2994,  3001,  3018,  3021,  3024,
+    3025,  3032,  3037,  3040,  3043,  3046,  3049,  3052,  3055,  3059,
+    3061,  3065,  3069,  3072,  3075,  3076,  3079,  3080,  3083,  3084,
+    3086,  3088,  3090,  3091,  3094,  3095,  3098,  3099,  3104,  3107,
+    3109,  3111,  3112,  3114,  3116,  3117,  3121,  3125,  3127,  3128,
+    3132,  3137,  3140,  3142,  3144,  3146,  3148,  3150,  3152,  3154,
+    3156,  3158,  3160,  3161,  3163,  3164,  3168,  3172,  3174,  3175,
+    3179,  3181,  3184,  3185,  3189,  3190,  3197,  3200,  3203,  3204,
+    3220,  3226,  3231,  3232,  3234,  3235,  3237,  3239,  3240,  3242,
+    3244,  3245,  3248,  3251,  3253,  3257,  3262,  3266,  3270,  3271,
+    3274,  3277,  3279,  3283,  3287,  3288,  3292,  3294,  3297,  3299,
+    3301,  3303,  3305,  3307,  3309,  3311,  3313,  3315,  3317,  3320,
+    3323,  3326,  3328,  3330,  3334,  3340,  3342,  3344,  3348,  3353,
+    3359,  3361,  3365,  3368,  3370,  3374,  3377,  3379,  3383,  3385,
+    3387,  3389,  3391,  3393,  3395,  3399,  3401,  3403,  3405,  3407,
     3409,  3411,  3413,  3415,  3417,  3419,  3421,  3423,  3425,  3427,
     3429,  3431,  3433,  3435,  3437,  3439,  3441,  3443,  3445,  3447,
     3449,  3451,  3453,  3455,  3457,  3459,  3461,  3463,  3465,  3467,
@@ -1243,924 +667,908 @@
     3589,  3591,  3593,  3595,  3597,  3599,  3601,  3603,  3605,  3607,
     3609,  3611,  3613,  3615,  3617,  3619,  3621,  3623,  3625,  3627,
     3629,  3631,  3633,  3635,  3637,  3639,  3641,  3643,  3645,  3647,
-    3648,  3653,  3654,  3656,  3659,  3664,  3665,  3667,  3669,  3671,
-    3672,  3674,  3676,  3678,  3679,  3682,  3685,  3688,  3693,  3697,
-    3704,  3709,  3714,  3718,  3724,  3726,  3729,  3732,  3735,  3737,
-    3739,  3744,  3746,  3748,  3750,  3752,  3753,  3758,  3760,  3762,
-    3764,  3768,  3772,  3774,  3776,  3779,  3782,  3785,  3790,  3794,
-    3795,  3803,  3805,  3808,  3810,  3812,  3814,  3816,  3818,  3820,
-    3821,  3827,  3829,  3831,  3833,  3835,  3837,  3838,  3846,  3847,
-    3857,  3859,  3862,  3864,  3866,  3870,  3871,  3875,  3876,  3880,
-    3881,  3885,  3886,  3890,  3892,  3894,  3896,  3898,  3900,  3902,
-    3904,  3906,  3908,  3910,  3912,  3915,  3918,  3920,  3924,  3927,
-    3930,  3933,  3934,  3936,  3940,  3942,  3945,  3948,  3951,  3953,
-    3957,  3961,  3963,  3965,  3969,  3974,  3980,  3982,  3983,  3987,
-    3991,  3993,  3995,  3996,  3999,  4002,  4005,  4008,  4009,  4012,
-    4015,  4017,  4020,  4023,  4026,  4029,  4030,  4034,  4035,  4037,
-    4039,  4041,  4046,  4049,  4050,  4052,  4053,  4058,  4060,  4062,
-    4063,  4064,  4068,  4069,  4071
+    3649,  3651,  3653,  3655,  3657,  3659,  3661,  3663,  3665,  3667,
+    3669,  3671,  3673,  3675,  3677,  3679,  3681,  3683,  3685,  3687,
+    3689,  3691,  3693,  3695,  3697,  3699,  3701,  3703,  3705,  3707,
+    3709,  3711,  3713,  3715,  3717,  3719,  3721,  3722,  3727,  3728,
+    3730,  3733,  3738,  3739,  3741,  3743,  3745,  3746,  3748,  3750,
+    3752,  3753,  3756,  3759,  3762,  3767,  3771,  3778,  3783,  3788,
+    3792,  3798,  3800,  3803,  3806,  3809,  3811,  3813,  3818,  3820,
+    3822,  3824,  3826,  3827,  3832,  3834,  3836,  3838,  3842,  3846,
+    3848,  3850,  3853,  3856,  3859,  3864,  3868,  3869,  3877,  3879,
+    3882,  3884,  3886,  3888,  3890,  3892,  3894,  3895,  3901,  3903,
+    3905,  3907,  3909,  3911,  3912,  3920,  3921,  3931,  3933,  3936,
+    3938,  3940,  3944,  3945,  3949,  3950,  3954,  3955,  3959,  3960,
+    3964,  3966,  3968,  3970,  3972,  3974,  3976,  3978,  3980,  3982,
+    3984,  3986,  3989,  3992,  3994,  3998,  4001,  4004,  4007,  4008,
+    4010,  4014,  4016,  4019,  4022,  4025,  4027,  4031,  4035,  4037,
+    4039,  4043,  4048,  4054,  4056,  4057,  4061,  4065,  4067,  4069,
+    4070,  4073,  4076,  4079,  4082,  4083,  4086,  4089,  4091,  4094,
+    4097,  4100,  4103,  4104,  4108,  4109,  4111,  4113,  4115,  4120,
+    4123,  4124,  4126,  4127,  4132,  4134,  4136,  4137,  4138,  4142,
+    4143,  4145,  4147,  4148,  4153,  4154,  4164,  4165,  4179,  4182,
+    4185,  4190,  4191
 };
-
-/* YYRHS -- A `-1'-separated list of the rules' RHS. */
 static const short yyrhs[] =
 {
-     413,     0,    -1,     3,    -1,   414,     3,    -1,   487,    -1,
-     514,    -1,   507,    -1,   770,    -1,   415,    -1,   516,    -1,
-     773,    -1,   419,    -1,   653,    -1,   676,    -1,   613,    -1,
-     615,    -1,   748,    -1,   621,    -1,   680,    -1,   694,    -1,
-     732,    -1,   692,    -1,   521,    -1,   690,    -1,   523,    -1,
-     509,    -1,   624,    -1,   686,    -1,   505,    -1,   746,    -1,
-     774,    -1,   775,    -1,   527,    -1,   720,    -1,   500,    -1,
-     501,    -1,   666,    -1,   664,    -1,   739,    -1,   738,    -1,
-     648,    -1,   693,    -1,    -1,    28,    48,   243,   416,   417,
-      -1,   418,    -1,   417,   406,   418,    -1,   163,     9,   242,
-      -1,   164,     9,   242,    -1,   167,     9,   242,    -1,   165,
-       9,   242,    -1,   168,     9,   604,    -1,   166,     9,   605,
-      -1,   169,     9,   604,    -1,   171,     9,   242,    -1,   172,
-       9,   604,    -1,    -1,    33,   432,   239,   435,   714,   420,
-     423,    -1,    -1,    33,   482,   139,   716,   192,   714,   421,
-     404,   483,   405,    -1,    33,   317,   435,   716,    -1,    -1,
-      33,   444,   253,   716,   422,   251,   445,   252,   242,    -1,
-     404,   424,    -1,   436,   426,    -1,   446,   405,   436,   426,
-      -1,    -1,   429,   405,   425,   779,    -1,    -1,    -1,   698,
-     431,   429,   427,   776,    -1,    -1,   698,   431,   404,   429,
-     405,   428,   779,    -1,    -1,    60,   430,   535,   539,   443,
-      -1,    -1,    76,    -1,    -1,   433,    -1,   434,    -1,   434,
-     433,    -1,   240,    -1,    -1,   342,   187,   116,    -1,    -1,
-     437,    -1,   438,    -1,   438,   437,    -1,   246,     9,   439,
-      -1,   174,     9,   605,    -1,   181,     9,   605,    -1,    79,
-       9,   604,    -1,   356,     9,   242,    -1,    30,     9,   242,
-      -1,    78,     9,   605,    -1,   202,     9,   604,    -1,   202,
-       9,   102,    -1,    92,     9,   604,    -1,   104,     9,   604,
-      -1,   227,     9,   440,    -1,   211,     9,   441,    -1,   212,
-       9,   604,    -1,   213,     9,   604,    -1,   255,     9,   404,
-     617,   405,    -1,    91,   642,   716,    -1,   271,   229,   642,
-     716,    -1,   343,     9,   442,    -1,   101,   114,     9,   242,
-      -1,   139,   114,     9,   242,    -1,   147,    -1,   182,    -1,
-     179,    -1,   133,    -1,   180,    -1,    81,    -1,   143,    -1,
-     102,    -1,   120,    -1,   110,    -1,   268,    -1,   210,    -1,
-     209,    -1,   604,    -1,   188,    -1,   119,    -1,     6,    -1,
-      -1,   534,   538,    -1,    -1,    73,    -1,   294,    -1,   291,
-      -1,   281,    -1,   447,    -1,   446,   406,   447,    -1,   448,
-      -1,   449,    -1,   454,   450,    -1,   454,   474,    -1,   479,
-     485,   404,   483,   405,    -1,   452,   123,   150,   485,   404,
-     483,   405,   474,    -1,   453,   450,    -1,   452,   451,    -1,
-      -1,   451,    -1,    93,   546,    -1,    -1,   453,    -1,    98,
-     485,    -1,    -1,   713,   455,   456,   470,    -1,   461,   468,
-     465,    -1,   462,   469,   465,    -1,   280,   463,   465,    -1,
-      83,   468,    -1,    84,    -1,   459,   404,   190,   405,   473,
-      -1,   459,   473,    -1,    82,   404,   190,   405,    -1,   460,
-     404,   190,   405,   473,    -1,   303,   404,   190,   405,    -1,
-     381,   468,   465,    -1,   275,    -1,   297,    -1,   296,    -1,
-     296,   404,   190,   405,    -1,   274,    -1,   298,    -1,   270,
-      -1,   285,    -1,   283,    -1,   161,   303,    -1,   161,   460,
-      -1,   300,    -1,   295,    -1,   287,    -1,   284,    -1,   276,
-     463,   465,    -1,   288,   463,   465,    -1,    -1,   278,   457,
-     404,   486,   405,    -1,    -1,   229,   458,   404,   486,   405,
-      -1,   271,    -1,   186,    -1,   183,   271,    -1,   459,   305,
-      -1,   304,    -1,   183,   304,    -1,   186,   304,    -1,   281,
-      -1,   299,    -1,   293,    -1,   286,    -1,   269,    -1,   291,
-      -1,   277,    -1,   277,   289,    -1,    -1,   404,   190,   405,
-      -1,   464,    -1,   404,   190,   406,   190,   405,    -1,    -1,
-     466,    -1,   466,   467,    -1,   467,    -1,   292,    -1,   302,
-      -1,   306,    -1,    -1,   404,   190,   405,    -1,    -1,   464,
-      -1,    -1,   471,    -1,   471,   472,    -1,   472,    -1,   189,
-      -1,   187,   189,    -1,   102,   708,    -1,    78,    -1,   204,
-     150,    -1,   256,    -1,   256,   150,    -1,    30,   706,    -1,
-      -1,    82,    -1,   271,   229,   642,   716,    -1,   216,   714,
-     475,    -1,   216,   714,   404,   483,   405,   475,    -1,    -1,
-     476,    -1,   476,   477,    -1,   477,    -1,   192,    36,   478,
-      -1,   192,    71,   478,    -1,   173,   125,    -1,   173,   203,
-      -1,   224,    -1,    89,    -1,   229,   189,    -1,   188,    72,
-      -1,   229,   102,    -1,   452,   204,   150,    -1,   480,    -1,
-     126,    -1,   126,   480,    -1,   452,   256,    -1,   452,   256,
-     480,    -1,   150,    -1,   139,    -1,   149,    -1,   139,    -1,
-     140,    -1,    -1,   256,    -1,   126,    -1,   483,   406,   484,
-     599,    -1,   484,   599,    -1,   716,    -1,   716,   404,   190,
-     405,    -1,    -1,   713,    -1,   707,    -1,   486,   406,   707,
-      -1,    -1,    23,   496,   239,   714,   488,   489,    -1,    -1,
-     491,    -1,   489,   406,   491,    -1,    21,   495,    -1,   490,
-     448,   498,    -1,    21,   449,    -1,   490,   404,   446,   405,
-      -1,    -1,    28,   495,   713,   492,   454,   498,    -1,    -1,
-      -1,   353,   495,   713,   493,   456,   470,   494,   498,    -1,
-      38,   495,   713,   497,    -1,    38,   204,   150,    -1,    38,
-     123,   150,   485,    -1,    38,   480,   713,    -1,   108,   149,
-      -1,   111,   149,    -1,    23,   495,   713,   229,   102,   708,
-      -1,    23,   495,   713,    38,   102,    -1,   219,   499,   714,
-      -1,   437,    -1,   596,    -1,    -1,    96,    -1,    -1,   138,
-      -1,    -1,   224,    -1,    89,    -1,    -1,    22,   716,    -1,
-     119,    -1,    -1,   243,    -1,     9,    -1,    76,    -1,    64,
-      62,   503,    -1,    66,    62,   503,    -1,    62,    64,   503,
-      -1,    62,    66,   503,    -1,    -1,    64,   245,   502,    -1,
-     504,    -1,   503,   406,   504,    -1,    -1,    63,    -1,    43,
-      -1,    -1,   223,   734,   506,   617,   124,   242,    -1,    -1,
-      80,   734,   508,   617,   243,   242,    -1,    -1,    54,   734,
-     510,   617,   511,    -1,    -1,   512,    -1,   513,    -1,   513,
-     512,    -1,   290,    -1,   117,    -1,   258,    -1,    -1,    24,
-     734,   515,   617,   518,    -1,    -1,    93,   734,   517,   617,
-     518,    -1,    -1,   519,    -1,   520,    -1,   520,   519,    -1,
-     290,    -1,   279,    -1,   178,    -1,   117,    -1,   272,    -1,
-      -1,    52,   734,   522,   617,   518,    -1,    -1,   219,   734,
-     524,   525,    -1,   526,    -1,   525,   406,   526,    -1,   714,
-     243,   714,    -1,   528,    -1,    -1,    60,   531,   529,   776,
-      -1,    -1,   404,    60,   531,   405,   530,   779,    -1,    -1,
-     532,   535,   539,   533,   538,    -1,   600,    -1,   611,    -1,
-     534,    -1,   611,   534,    -1,   534,   611,    -1,   124,   571,
-     588,   592,   589,   595,   600,   606,    -1,    -1,   536,    -1,
-     536,   537,    -1,   537,    -1,   236,    -1,   135,    -1,   109,
-      -1,   390,    -1,   386,    -1,   391,    -1,   388,    -1,   389,
-      -1,   387,    -1,    74,    -1,    -1,   335,    71,    -1,    47,
-     145,   364,   352,    -1,   539,   406,   540,    -1,   540,    -1,
-     398,    -1,   541,   543,   542,   544,    -1,    -1,    -1,   710,
-      -1,   546,    -1,    -1,    76,   716,    -1,    76,   242,    -1,
-     716,    -1,   242,    -1,    -1,   404,   405,    -1,   547,    -1,
-     550,    -1,   546,   145,   404,   558,   405,    -1,   546,   187,
-     145,   404,   558,   405,    -1,   546,   309,   549,    75,   546,
-      -1,   546,   187,   309,   549,    75,   546,    -1,   546,   197,
-     546,    -1,   546,   196,   546,    -1,   546,   267,   546,    -1,
-     546,    75,   546,    -1,   546,   155,   550,   591,    -1,   546,
-     187,   155,   550,   591,    -1,   546,   217,   546,    -1,   546,
-     187,   217,   546,    -1,   546,    16,   189,    -1,   546,    16,
-     187,   189,    -1,   546,     9,   546,    -1,   546,    10,   546,
-      -1,   546,    11,   546,    -1,   546,    12,   546,    -1,   546,
-      13,   546,    -1,   546,    14,   546,    -1,   546,    15,   546,
-      -1,   546,    17,   546,    -1,   546,    18,   546,    -1,   546,
-     397,   546,    -1,   546,   396,   546,    -1,   546,   398,   546,
-      -1,   546,   399,   546,    -1,   546,   394,   546,    -1,   546,
-     403,   546,    -1,   546,   395,   546,    -1,   546,   400,   546,
-      -1,   546,   397,   344,   546,   584,    -1,   546,   396,   344,
-     546,   584,    -1,   548,   309,   549,    75,   546,    -1,   548,
-     187,   309,   549,    75,   546,    -1,   548,   197,   546,    -1,
-     548,   196,   546,    -1,   548,   267,   546,    -1,   548,    75,
-     546,    -1,   548,   155,   550,   591,    -1,   548,   187,   155,
-     550,   591,    -1,   548,   217,   546,    -1,   548,   187,   217,
-     546,    -1,   548,    16,   189,    -1,   548,    16,   187,   189,
-      -1,   548,     9,   546,    -1,   548,    10,   546,    -1,   548,
-      11,   546,    -1,   548,    12,   546,    -1,   548,    13,   546,
-      -1,   548,    14,   546,    -1,   548,    15,   546,    -1,   548,
-      17,   546,    -1,   548,    18,   546,    -1,   548,   397,   546,
-      -1,   548,   396,   546,    -1,   548,   398,   546,    -1,   548,
-     399,   546,    -1,   548,   394,   546,    -1,   548,   403,   546,
-      -1,   548,   395,   546,    -1,   548,   400,   546,    -1,   548,
-     397,   344,   546,   584,    -1,   548,   396,   344,   546,   584,
-      -1,   550,    -1,   549,   145,   404,   558,   405,    -1,   549,
-     187,   145,   404,   558,   405,    -1,   549,   309,   549,    75,
-     546,    -1,   549,   187,   309,   549,    75,   546,    -1,   549,
-     197,   546,    -1,   549,   196,   546,    -1,   549,   267,   546,
-      -1,   549,   155,   550,   591,    -1,   549,   187,   155,   550,
-     591,    -1,   549,   217,   546,    -1,   549,   187,   217,   546,
-      -1,   549,    16,   189,    -1,   549,    16,   187,   189,    -1,
-     549,     9,   546,    -1,   549,    10,   546,    -1,   549,    11,
-     546,    -1,   549,    12,   546,    -1,   549,    13,   546,    -1,
-     549,    14,   546,    -1,   549,    15,   546,    -1,   549,    17,
-     546,    -1,   549,    18,   546,    -1,   549,   397,   546,    -1,
-     549,   396,   546,    -1,   549,   398,   546,    -1,   549,   399,
-     546,    -1,   549,   394,   546,    -1,   549,   403,   546,    -1,
-     549,   395,   546,    -1,   549,   400,   546,    -1,   549,   397,
-     344,   546,   584,    -1,   549,   396,   344,   546,   584,    -1,
-     550,    -1,   712,    -1,   708,    -1,   410,   717,    19,   546,
-      -1,   410,   717,    -1,   410,   410,   726,   717,    -1,   552,
-      -1,   396,   546,    -1,   401,   546,    -1,   187,   546,    -1,
-     407,   546,    -1,   404,   546,   405,    -1,   408,   716,   546,
-     409,    -1,   173,   561,   307,   404,   546,   405,    -1,   173,
-     561,   307,   404,   546,   145,    85,   352,   405,    -1,    82,
-     546,    -1,    90,   404,   546,    76,   557,   405,    -1,   312,
-     565,   378,   567,   566,   384,    -1,    99,   404,   546,   406,
-     557,   405,    -1,   247,   404,   405,    -1,   248,   404,   546,
-     405,    -1,   249,   404,   546,   406,   546,   405,    -1,   250,
-     404,   546,   406,   546,   406,   546,   405,    -1,   308,   404,
-     546,   405,    -1,   308,   404,   546,   406,   546,   405,    -1,
-     271,   404,   558,   405,    -1,   273,   404,   558,   405,    -1,
-     313,   404,   558,   405,    -1,   314,   404,   546,   406,   558,
-     405,    -1,   315,   545,    -1,   316,   545,    -1,   316,   404,
-     546,   405,    -1,   318,   404,   546,   406,   344,   546,   584,
-     405,    -1,   319,   404,   546,   406,   344,   546,   584,   405,
-      -1,   317,   404,   405,    -1,   328,   404,   546,   406,   558,
-     405,    -1,   348,   404,   546,   406,   558,   405,    -1,   330,
-     404,   546,   405,    -1,   330,   404,   546,   406,   546,   405,
-      -1,   324,   404,   546,   406,   242,   405,    -1,   329,   404,
-     546,   406,   242,   405,    -1,   326,   404,   546,   405,    -1,
-     326,   404,   546,   406,   546,   405,    -1,   325,   404,   546,
-     405,    -1,   325,   404,   546,   406,   546,   405,    -1,   331,
-     404,   546,   406,   546,   406,   546,   405,    -1,   331,   404,
-     546,   406,   546,   406,   546,   406,   546,   405,    -1,   331,
-     404,   546,   406,   546,   406,   546,   406,   546,   406,   546,
-     405,    -1,   334,   404,   546,   406,   190,   405,    -1,   336,
-     404,   546,   405,    -1,   336,   404,   546,   406,   546,   405,
-      -1,   333,   404,   546,   406,   558,   405,    -1,   340,   404,
-     546,   405,    -1,   342,   404,   546,   406,   546,   406,   546,
-     405,    -1,    42,   404,   546,   406,   546,   406,   546,   406,
-     546,   405,    -1,   344,   546,   584,   397,   546,    -1,   344,
-     404,   546,   406,   558,   405,    -1,   345,   404,   405,    -1,
-     345,   404,   546,   405,    -1,   346,   404,   546,   406,   546,
-     405,    -1,   347,   404,   546,   406,   546,   405,    -1,   347,
-     404,   546,   406,   546,   406,   546,   405,    -1,   130,   404,
-     546,   406,   558,   405,    -1,   152,   404,   546,   406,   558,
-     405,    -1,   158,   404,   546,   405,    -1,   158,   404,   546,
-     406,   546,   405,    -1,   349,   404,   546,   406,   546,   405,
-      -1,   349,   404,   546,   406,   546,   406,   546,   405,    -1,
-     351,   404,   546,   405,    -1,   354,   404,   546,   405,    -1,
-     355,   545,    -1,   355,   404,   546,   405,    -1,   356,   404,
-     546,   405,    -1,   357,   404,   548,   145,   546,   405,    -1,
-     359,   404,   546,   405,    -1,   359,   404,   405,    -1,   360,
-     404,   546,   406,   546,   406,   546,   405,    -1,   361,   404,
-     546,   406,   546,   405,    -1,   362,   404,   546,   405,    -1,
-     362,   404,   546,   406,   546,   405,    -1,   363,   404,   546,
-     405,    -1,   365,   404,   546,   406,   546,   406,   546,   405,
-      -1,   365,   404,   546,   406,   546,   405,    -1,   365,   404,
-     546,   124,   546,   335,   546,   405,    -1,   365,   404,   546,
-     124,   546,   405,    -1,   366,   404,   546,   406,   546,   406,
-     546,   405,    -1,   367,   404,   546,   405,    -1,   367,   404,
-     151,   570,   124,   546,   405,    -1,   367,   404,   244,   570,
-     124,   546,   405,    -1,   367,   404,    86,   570,   124,   546,
-     405,    -1,   367,   404,   546,   124,   546,   405,    -1,    69,
-     404,   546,   406,   546,   405,    -1,   368,   404,   551,   405,
-      -1,   369,   404,   551,   405,    -1,   370,   404,   551,   405,
-      -1,   371,   404,   551,   405,    -1,   372,   404,   551,   405,
-      -1,   373,   404,   551,   405,    -1,   374,   404,   706,   406,
-     190,   406,   190,   406,   558,   405,    -1,   375,   404,   405,
-      -1,   375,   404,   546,   405,    -1,   376,   404,   405,    -1,
-     377,   404,   546,   405,    -1,   377,   404,   546,   406,   546,
-     405,    -1,   381,   404,   546,   405,    -1,   382,   404,   546,
-     405,    -1,   382,   404,   546,   406,   546,   405,    -1,   383,
-     404,   604,   406,   546,   405,    -1,   332,   404,   584,   124,
-     546,   405,    -1,    -1,   558,    -1,    25,   404,   555,   405,
-      -1,   310,   404,   555,   405,    -1,   311,   404,   555,   405,
-      -1,    32,   404,   587,   398,   405,    -1,    32,   404,   555,
-     405,    -1,    -1,    -1,    32,   404,   109,   553,   558,   554,
-     405,    -1,   337,   404,   706,   406,   190,   406,   190,   406,
-     555,   405,    -1,    50,   404,   555,   405,    -1,    49,   404,
-     555,   405,    -1,    65,   404,   555,   405,    -1,    67,   404,
-     555,   405,    -1,    -1,   587,   556,   546,    -1,    82,    -1,
-     271,    -1,   292,    -1,   292,   281,    -1,   302,    -1,   302,
-     281,    -1,   275,    -1,   297,    -1,   274,    -1,    -1,   559,
-     560,    -1,   546,    -1,   560,   406,   546,    -1,   562,    -1,
-     404,   562,   405,    -1,    -1,   563,   564,    -1,   712,    -1,
-     564,   406,   712,    -1,    -1,   546,    -1,    -1,   327,   546,
-      -1,    -1,   568,   569,    -1,   546,   385,   546,    -1,   569,
-     378,   546,   385,   546,    -1,    -1,   546,    -1,   404,   571,
-     405,    -1,   576,    -1,   571,   406,   571,    -1,   571,   575,
-     571,    -1,   571,   236,   571,    -1,   571,   575,   571,   192,
-     546,    -1,    -1,   571,   575,   571,   260,   572,   404,   583,
-     405,    -1,   571,   346,   578,   148,   571,   192,   546,    -1,
-      -1,   571,   346,   578,   148,   571,   573,   260,   404,   583,
-     405,    -1,   571,   184,   346,   578,   148,   571,    -1,   571,
-     361,   578,   148,   571,   192,   546,    -1,    -1,   571,   361,
-     578,   148,   571,   574,   260,   404,   583,   405,    -1,   571,
-     184,   361,   578,   148,   571,    -1,   571,   184,   148,   571,
-      -1,   148,    -1,   142,   148,    -1,    34,   148,    -1,    -1,
-     577,   714,   586,   579,    -1,   408,   716,   576,   346,   199,
-     148,   576,   192,   546,   409,    -1,    -1,   199,    -1,    -1,
-     259,   580,    -1,   122,   580,    -1,   138,   580,    -1,    -1,
-     480,   581,   404,   582,   405,    -1,   582,   406,   716,    -1,
-     716,    -1,   204,    -1,   716,    -1,   583,   406,   716,    -1,
-     320,    -1,   321,    -1,   322,    -1,   323,    -1,   338,    -1,
-     339,    -1,   340,    -1,   350,    -1,   351,    -1,   354,    -1,
-     363,    -1,   380,    -1,   381,    -1,    -1,    76,    -1,     9,
-      -1,    -1,   585,   716,    -1,    -1,    74,    -1,    -1,   263,
-     546,    -1,    -1,    -1,   132,   590,   546,    -1,   115,   242,
-      -1,    -1,    -1,   131,    87,   593,   594,    -1,   593,   406,
-     711,   599,    -1,   711,   599,    -1,    -1,   264,    35,    -1,
-     264,    58,    -1,    -1,   596,    -1,    -1,   198,    87,   597,
-     598,    -1,   598,   406,   711,   599,    -1,   711,   599,    -1,
-      -1,    77,    -1,   105,    -1,    -1,    -1,   282,   601,   602,
-      -1,   604,    -1,   604,   406,   604,    -1,   604,   191,   604,
-      -1,    -1,   282,   605,    -1,   190,    -1,   160,    -1,   301,
-      -1,   215,    -1,   121,    -1,   190,    -1,   301,    -1,   160,
-      -1,   215,    -1,   121,    -1,    -1,    -1,   358,   716,   607,
-     404,   608,   405,    -1,    -1,   609,    -1,   609,   406,   610,
-      -1,   610,    -1,   541,   546,    -1,    -1,   144,   200,   242,
-     612,   699,   702,    -1,   144,   201,   242,    -1,    -1,    37,
-     614,   646,    -1,    38,   620,   239,   619,   617,   497,    -1,
-      -1,    38,   139,   716,   192,   714,   616,    -1,    38,   317,
-     619,   716,    -1,    38,   253,   716,    -1,   618,    -1,   617,
-     406,   618,    -1,   714,    -1,    -1,   342,   116,    -1,    -1,
-     240,    -1,    -1,    -1,    42,   622,   627,   496,   629,   623,
-     631,    -1,    -1,    -1,   360,   625,   628,   629,   626,   631,
-      -1,    -1,   162,    -1,   103,    -1,   135,    -1,   652,    -1,
-     103,    -1,   144,   630,    -1,   630,    -1,   618,    -1,   635,
-      -1,   404,   405,   635,    -1,   404,   634,   405,   635,    -1,
-      -1,   229,   632,   639,    -1,    -1,   404,   634,   405,    -1,
-     404,   405,    -1,   634,   406,   709,    -1,   709,    -1,   261,
-     638,    -1,    -1,   429,   636,   776,    -1,    -1,   404,   429,
-     405,   637,   779,    -1,   638,   406,   643,    -1,   643,    -1,
-     639,   406,   640,    -1,   640,    -1,   712,   641,   647,    -1,
-       9,    -1,    19,    -1,    -1,   641,    -1,    -1,   404,   644,
-     645,   405,    -1,    -1,   646,    -1,   646,   406,   647,    -1,
-     647,    -1,   546,    -1,   102,    -1,    -1,    -1,    71,   649,
-     652,   496,   571,   229,   651,   650,   588,   595,   603,    -1,
-     651,   406,   712,   641,   546,    -1,   712,   641,   546,    -1,
-      -1,   162,    -1,    -1,    36,   654,   662,   655,    -1,    -1,
-     124,   714,   656,   588,   595,   603,    -1,    -1,   659,   657,
-     124,   571,   588,    -1,    -1,   124,   659,   658,   260,   571,
-     588,    -1,   660,    -1,   659,   406,   660,    -1,   716,   661,
-      -1,   716,   411,   716,   661,    -1,    -1,   411,   398,    -1,
-      -1,   663,   662,    -1,   290,    -1,   162,    -1,    69,   665,
-     618,    -1,    -1,   239,    -1,    -1,    61,   667,   668,    -1,
-     100,   671,    -1,   238,   670,   671,    -1,   239,   235,   670,
-     671,    -1,   193,   238,   670,   671,    -1,   672,    95,   673,
-     714,   670,   671,    -1,   185,    48,   335,    62,   264,   165,
-       9,   242,    75,   166,     9,   605,    75,   170,     9,   604,
-      -1,    48,   159,    -1,    62,   136,    -1,    -1,    27,    39,
-     674,   675,   669,   600,    -1,   481,   673,   714,   670,    -1,
-     235,   671,    -1,   143,   235,    -1,   672,   207,    -1,   725,
-     262,   671,    -1,   159,    -1,   129,   335,   718,    -1,    33,
-     239,   714,    -1,    48,   235,    -1,    62,   235,    -1,    -1,
-     673,   716,    -1,    -1,   155,   707,    -1,    -1,   125,    -1,
-     124,    -1,   145,    -1,    -1,   145,   242,    -1,    -1,   124,
-     605,    -1,    -1,   678,   714,   677,   679,    -1,   678,   527,
-      -1,   105,    -1,   106,    -1,    -1,   707,    -1,   716,    -1,
-      -1,    41,   681,   682,    -1,   682,   406,   683,    -1,   683,
-      -1,    -1,   734,   684,   685,    -1,   238,   264,   214,    47,
-      -1,   208,    88,    -1,   136,    -1,   205,    -1,   159,    -1,
-     235,    -1,    62,    -1,    48,    -1,   107,    -1,   222,    -1,
-      -1,   617,    -1,    -1,    56,   687,   688,    -1,   688,   406,
-     689,    -1,   689,    -1,    62,    -1,    48,    -1,   208,    88,
-      -1,    -1,    53,   691,    48,   159,   243,   242,    -1,    44,
-     546,    -1,   259,   716,    -1,    -1,    45,   101,   697,   696,
-     141,   242,   695,   698,   144,   239,   714,   699,   702,   705,
-     633,    -1,    45,   239,   714,   124,    48,    -1,    45,   101,
-     124,    48,    -1,    -1,   157,    -1,    -1,    97,    -1,   162,
-      -1,    -1,   360,    -1,   138,    -1,    -1,    95,   700,    -1,
-     700,   701,    -1,   701,    -1,   241,    87,   707,    -1,   195,
-     112,    87,   707,    -1,   112,    87,   707,    -1,   113,    87,
-     707,    -1,    -1,   156,   703,    -1,   703,   704,    -1,   704,
-      -1,   241,    87,   707,    -1,   234,    87,   707,    -1,    -1,
-     138,   190,   156,    -1,   242,    -1,   706,   242,    -1,   242,
-      -1,   134,    -1,   706,    -1,   190,    -1,   160,    -1,   301,
-      -1,   215,    -1,   121,    -1,   189,    -1,   134,    -1,   275,
-     706,    -1,   297,   706,    -1,   296,   706,    -1,   712,    -1,
-     710,    -1,   716,   411,   398,    -1,   716,   411,   716,   411,
-     398,    -1,   546,    -1,   716,    -1,   716,   411,   716,    -1,
-     411,   716,   411,   716,    -1,   716,   411,   716,   411,   716,
-      -1,   716,    -1,   716,   411,   716,    -1,   411,   716,    -1,
-     716,    -1,   716,   411,   716,    -1,   411,   716,    -1,   716,
-      -1,   716,   411,   716,    -1,   137,    -1,   719,    -1,   716,
-      -1,   242,    -1,   154,    -1,   717,    -1,   717,   410,   717,
-      -1,    72,    -1,    22,    -1,   307,    -1,    73,    -1,    78,
-      -1,    79,    -1,    25,    -1,    80,    -1,    26,    -1,    81,
-      -1,    27,    -1,    83,    -1,    84,    -1,    85,    -1,    88,
-      -1,   272,    -1,    91,    -1,    92,    -1,   393,    -1,    29,
-      -1,     4,    -1,    30,    -1,    94,    -1,    31,    -1,   268,
-      -1,    97,    -1,    35,    -1,   101,    -1,   274,    -1,   275,
-      -1,   323,    -1,   104,    -1,   107,    -1,   114,    -1,    37,
-      -1,   201,    -1,   110,    -1,   384,    -1,   278,    -1,   115,
-      -1,    39,    -1,    40,    -1,   117,    -1,   279,    -1,   108,
-      -1,   111,    -1,   125,    -1,   118,    -1,   119,    -1,   120,
-      -1,    41,    -1,   129,    -1,   127,    -1,   133,    -1,     5,
-      -1,   136,    -1,   340,    -1,   341,    -1,   140,    -1,   146,
-      -1,   147,    -1,   392,    -1,   143,    -1,   343,    -1,    43,
-      -1,     6,    -1,   153,    -1,   157,    -1,    46,    -1,   159,
-      -1,   174,    -1,    48,    -1,   163,    -1,   168,    -1,   165,
-      -1,   166,    -1,   164,    -1,   167,    -1,   170,    -1,   169,
-      -1,   175,    -1,   176,    -1,   177,    -1,   178,    -1,   179,
-      -1,   180,    -1,   351,    -1,   181,    -1,   353,    -1,   352,
-      -1,   354,    -1,   182,    -1,   183,    -1,   186,    -1,     7,
-      -1,   185,    -1,   188,    -1,    51,    -1,   191,    -1,   193,
-      -1,   202,    -1,   356,    -1,     8,    -1,   206,    -1,   207,
-      -1,   208,    -1,   290,    -1,   209,    -1,   212,    -1,   213,
-      -1,   210,    -1,   211,    -1,   171,    -1,   172,    -1,   218,
-      -1,    54,    -1,   220,    -1,    55,    -1,    56,    -1,   222,
-      -1,   223,    -1,    57,    -1,    58,    -1,   226,    -1,   227,
-      -1,   228,    -1,    59,    -1,   363,    -1,   230,    -1,   231,
-      -1,   292,    -1,   364,    -1,   232,    -1,    62,    -1,   387,
-      -1,   391,    -1,   389,    -1,    63,    -1,    64,    -1,   235,
-      -1,    66,    -1,   294,    -1,   237,    -1,    68,    -1,   240,
-      -1,   295,    -1,   245,    -1,    69,    -1,   296,    -1,   297,
-      -1,   246,    -1,   253,    -1,   254,    -1,   258,    -1,   262,
-      -1,   379,    -1,   266,    -1,   381,    -1,    -1,   229,   722,
-     721,   723,    -1,    -1,   194,    -1,   724,   727,    -1,   723,
-     406,   724,   727,    -1,    -1,   127,    -1,   157,    -1,   231,
-      -1,    -1,   157,    -1,   231,    -1,   127,    -1,    -1,   157,
-     411,    -1,   231,   411,    -1,   127,   411,    -1,   410,   717,
-     641,   546,    -1,   728,   641,   731,    -1,   410,   410,   726,
-     728,   641,   731,    -1,   245,   146,   153,   729,    -1,   271,
-     229,   642,   731,    -1,   356,   641,   730,    -1,   356,   335,
-     718,   641,   730,    -1,   716,    -1,   214,   254,    -1,   214,
-      94,    -1,   220,   214,    -1,   230,    -1,   242,    -1,   356,
-     404,   242,   405,    -1,   546,    -1,   102,    -1,   192,    -1,
-      74,    -1,    -1,    47,   734,   733,   735,    -1,   239,    -1,
-     238,    -1,   736,    -1,   735,   406,   736,    -1,   714,   586,
-     737,    -1,   214,    -1,   265,    -1,   162,   265,    -1,   214,
-     157,    -1,    70,   734,    -1,     5,   714,   193,   586,    -1,
-       5,   715,     4,    -1,    -1,     5,   715,   214,   740,   741,
-     588,   600,    -1,   742,    -1,   716,   743,    -1,   119,    -1,
-       7,    -1,   119,    -1,     7,    -1,     8,    -1,     6,    -1,
-      -1,   745,   744,   404,   646,   405,    -1,     9,    -1,    11,
-      -1,    13,    -1,    12,    -1,    14,    -1,    -1,   225,   747,
-     750,   192,   760,   124,   761,    -1,    -1,   128,   749,   750,
-     192,   760,   243,   761,   766,   767,    -1,   751,    -1,    74,
-     205,    -1,    74,    -1,   752,    -1,   751,   406,   752,    -1,
-      -1,    60,   753,   763,    -1,    -1,    42,   754,   763,    -1,
-      -1,    71,   755,   763,    -1,    -1,   216,   756,   763,    -1,
-      36,    -1,   257,    -1,   139,    -1,    23,    -1,    33,    -1,
-      38,    -1,    40,    -1,   218,    -1,   232,    -1,   206,    -1,
-     118,    -1,   128,   194,    -1,    61,   100,    -1,    68,    -1,
-      33,   240,   238,    -1,    47,   238,    -1,    55,    62,    -1,
-      55,    29,    -1,    -1,    75,    -1,   759,   757,   758,    -1,
-     759,    -1,   237,   242,    -1,   392,   242,    -1,   393,   242,
-      -1,   398,    -1,   716,   411,   398,    -1,   398,   411,   398,
-      -1,   714,    -1,   762,    -1,   761,   406,   762,    -1,   718,
-     341,    87,   242,    -1,   718,   341,    87,   356,   242,    -1,
-     718,    -1,    -1,   404,   764,   405,    -1,   764,   406,   765,
-      -1,   765,    -1,   716,    -1,    -1,   221,   758,    -1,   221,
-     233,    -1,   221,   266,    -1,   221,    51,    -1,    -1,   264,
-     768,    -1,   768,   769,    -1,   769,    -1,   128,   194,    -1,
-     176,   604,    -1,   177,   604,    -1,   175,   604,    -1,    -1,
-      26,   771,   772,    -1,    -1,   379,    -1,    31,    -1,    57,
-      -1,    57,   243,    59,   716,    -1,    59,   716,    -1,    -1,
-     777,    -1,    -1,   255,   782,   778,   528,    -1,   777,    -1,
-     780,    -1,    -1,    -1,   781,   595,   600,    -1,    -1,   109,
-      -1,    74,    -1
+       3,     0,   422,     3,     0,   495,     0,   526,     0,   519,
+       0,   790,     0,   423,     0,   528,     0,   793,     0,   427,
+       0,   671,     0,   694,     0,   631,     0,   633,     0,   768,
+       0,   639,     0,   698,     0,   714,     0,   752,     0,   803,
+       0,   712,     0,   533,     0,   710,     0,   535,     0,   521,
+       0,   642,     0,   704,     0,   517,     0,   766,     0,   794,
+       0,   795,     0,   539,     0,   740,     0,   508,     0,   510,
+       0,   684,     0,   682,     0,   759,     0,   758,     0,   666,
+       0,   713,     0,     0,    28,    51,   251,   424,   425,     0,
+     426,     0,   425,   415,   426,     0,   170,     9,   250,     0,
+     171,     9,   250,     0,   174,     9,   250,     0,   172,     9,
+     250,     0,   175,     9,   622,     0,   173,     9,   623,     0,
+     176,     9,   622,     0,   178,     9,   250,     0,   179,     9,
+     622,     0,     0,    33,   440,   246,   443,   734,   428,   431,
+       0,     0,    33,   490,   145,   736,   199,   734,   429,   413,
+     491,   414,     0,    33,   326,   443,   736,     0,     0,    33,
+     452,   261,   736,   430,   259,   453,   260,   250,     0,   413,
+     432,     0,   444,   434,     0,   454,   414,   444,   434,     0,
+       0,   437,   414,   433,   799,     0,     0,     0,   718,   439,
+     437,   435,   796,     0,     0,   718,   439,   413,   437,   414,
+     436,   799,     0,     0,    64,   438,   547,   551,   451,     0,
+       0,    82,     0,     0,   441,     0,   442,     0,   442,   441,
+       0,   248,     0,     0,   351,   194,   122,     0,     0,   445,
+       0,   446,     0,   446,   445,     0,   254,     9,   447,     0,
+     181,     9,   623,     0,   188,     9,   623,     0,    85,     9,
+     622,     0,   365,     9,   250,     0,    30,     9,   250,     0,
+      84,     9,   623,     0,   209,     9,   622,     0,   209,     9,
+     108,     0,    98,     9,   622,     0,   110,     9,   622,     0,
+     234,     9,   448,     0,   218,     9,   449,     0,   219,     9,
+     622,     0,   220,     9,   622,     0,   263,     9,   413,   635,
+     414,     0,    97,   660,   736,     0,   280,   236,   660,   736,
+       0,   352,     9,   450,     0,   107,   120,     9,   250,     0,
+     145,   120,     9,   250,     0,   154,     0,   189,     0,   186,
+       0,   139,     0,   187,     0,    87,     0,   150,     0,   108,
+       0,   126,     0,   116,     0,   277,     0,   217,     0,   216,
+       0,   622,     0,   195,     0,   125,     0,     6,     0,     0,
+     546,   550,     0,     0,    79,     0,   303,     0,   300,     0,
+     290,     0,   455,     0,   454,   415,   455,     0,   456,     0,
+     457,     0,   462,   458,     0,   462,   482,     0,   487,   493,
+     413,   491,   414,     0,   460,   129,   157,   493,   413,   491,
+     414,   482,     0,   461,   458,     0,   460,   459,     0,     0,
+     459,     0,    99,   558,     0,     0,   461,     0,   104,   493,
+       0,     0,   733,   463,   464,   478,     0,   469,   476,   473,
+       0,   470,   477,   473,     0,   289,   471,   473,     0,    89,
+     476,     0,    90,     0,   467,   413,   197,   414,   481,     0,
+     467,   481,     0,    88,   413,   197,   414,     0,   468,   413,
+     197,   414,   481,     0,   312,   413,   197,   414,     0,   390,
+     476,   473,     0,   284,     0,   306,     0,   305,     0,   305,
+     413,   197,   414,     0,   283,     0,   307,     0,   279,     0,
+     294,     0,   292,     0,   168,   312,     0,   168,   468,     0,
+     309,     0,   304,     0,   296,     0,   293,     0,   285,   471,
+     473,     0,   297,   471,   473,     0,     0,   287,   465,   413,
+     494,   414,     0,     0,   236,   466,   413,   494,   414,     0,
+     280,     0,   193,     0,   190,   280,     0,   467,   314,     0,
+     313,     0,   190,   313,     0,   193,   313,     0,   290,     0,
+     308,     0,   302,     0,   295,     0,   278,     0,   300,     0,
+     286,     0,   286,   298,     0,     0,   413,   197,   414,     0,
+     472,     0,   413,   197,   415,   197,   414,     0,     0,   474,
+       0,   474,   475,     0,   475,     0,   301,     0,   311,     0,
+     315,     0,     0,   413,   197,   414,     0,     0,   472,     0,
+       0,   479,     0,   479,   480,     0,   480,     0,   196,     0,
+     194,   196,     0,   108,   728,     0,    84,     0,   211,   157,
+       0,   264,     0,   264,   157,     0,    30,   726,     0,     0,
+      88,     0,   280,   236,   660,   736,     0,   223,   734,   483,
+       0,   223,   734,   413,   491,   414,   483,     0,     0,   484,
+       0,   484,   485,     0,   485,     0,   199,    36,   486,     0,
+     199,    76,   486,     0,   180,   131,     0,   180,   210,     0,
+     231,     0,    95,     0,   236,   196,     0,   195,    78,     0,
+     236,   108,     0,   460,   211,   157,     0,   488,     0,   132,
+       0,   132,   488,     0,   460,   264,     0,   460,   264,   488,
+       0,   157,     0,   145,     0,   156,     0,   145,     0,   146,
+       0,     0,   264,     0,   132,     0,   491,   415,   492,   617,
+       0,   492,   617,     0,   736,     0,   736,   413,   197,   414,
+       0,     0,   733,     0,   727,     0,   494,   415,   727,     0,
+       0,    23,   504,   246,   734,   496,   497,     0,     0,   499,
+       0,   497,   415,   499,     0,    21,   503,     0,   498,   456,
+     506,     0,    21,   457,     0,   498,   413,   454,   414,     0,
+       0,    28,   503,   733,   500,   462,   506,     0,     0,     0,
+     362,   503,   733,   501,   464,   478,   502,   506,     0,    38,
+     503,   733,   505,     0,    38,   211,   157,     0,    38,   129,
+     157,   493,     0,    38,   488,   733,     0,   114,   156,     0,
+     117,   156,     0,    23,   503,   733,   236,   108,   728,     0,
+      23,   503,   733,    38,   108,     0,   226,   507,   734,     0,
+     445,     0,   614,     0,     0,   102,     0,     0,   144,     0,
+       0,   231,     0,    95,     0,     0,    22,   736,     0,   125,
+       0,     0,   251,     0,     9,     0,    82,     0,     0,    68,
+      66,   512,   509,   514,     0,    70,    66,   512,     0,    66,
+      68,   512,     0,    66,    70,   512,     0,     0,    68,   253,
+     511,     0,   513,     0,   512,   415,   513,     0,     0,    67,
+       0,    45,     0,     0,    75,   515,     0,   516,     0,   515,
+     415,   516,     0,   172,     9,   250,     0,   173,     9,   623,
+       0,     0,   230,   754,   518,   635,   130,   250,     0,     0,
+      86,   754,   520,   635,   251,   250,     0,     0,    58,   754,
+     522,   635,   523,     0,     0,   524,     0,   525,     0,   525,
+     524,     0,   299,     0,   123,     0,   267,     0,     0,    24,
+     754,   527,   635,   530,     0,     0,    99,   754,   529,   635,
+     530,     0,     0,   531,     0,   532,     0,   532,   531,     0,
+     299,     0,   288,     0,   185,     0,   123,     0,   281,     0,
+       0,    55,   754,   534,   635,   530,     0,     0,   226,   754,
+     536,   537,     0,   538,     0,   537,   415,   538,     0,   734,
+     251,   734,     0,   540,     0,     0,    64,   543,   541,   796,
+       0,     0,   413,    64,   543,   414,   542,   799,     0,     0,
+     544,   547,   551,   545,   550,     0,   618,     0,   629,     0,
+     546,     0,   629,   546,     0,   546,   629,     0,   130,   589,
+     606,   610,   607,   613,   618,   624,     0,     0,   548,     0,
+     548,   549,     0,   549,     0,   243,     0,   141,     0,   115,
+       0,   399,     0,   395,     0,   400,     0,   397,     0,   398,
+       0,   396,     0,    80,     0,     0,   344,    76,     0,    49,
+     152,   373,   361,     0,   551,   415,   552,     0,   552,     0,
+     407,     0,   553,   555,   554,   556,     0,     0,     0,   730,
+       0,   558,     0,     0,    82,   736,     0,    82,   250,     0,
+     736,     0,   250,     0,     0,   413,   414,     0,   559,     0,
+     562,     0,   558,   152,   413,   576,   414,     0,   558,   194,
+     152,   413,   576,   414,     0,   558,   318,   561,    81,   558,
+       0,   558,   194,   318,   561,    81,   558,     0,   558,   204,
+     558,     0,   558,   203,   558,     0,   558,   276,   558,     0,
+     558,    81,   558,     0,   558,   162,   562,   609,     0,   558,
+     194,   162,   562,   609,     0,   558,   224,   558,     0,   558,
+     194,   224,   558,     0,   558,    16,   196,     0,   558,    16,
+     194,   196,     0,   558,     9,   558,     0,   558,    10,   558,
+       0,   558,    11,   558,     0,   558,    12,   558,     0,   558,
+      13,   558,     0,   558,    14,   558,     0,   558,    15,   558,
+       0,   558,    17,   558,     0,   558,    18,   558,     0,   558,
+     406,   558,     0,   558,   405,   558,     0,   558,   407,   558,
+       0,   558,   408,   558,     0,   558,   403,   558,     0,   558,
+     412,   558,     0,   558,   404,   558,     0,   558,   409,   558,
+       0,   558,   406,   353,   558,   602,     0,   558,   405,   353,
+     558,   602,     0,   560,   318,   561,    81,   558,     0,   560,
+     194,   318,   561,    81,   558,     0,   560,   204,   558,     0,
+     560,   203,   558,     0,   560,   276,   558,     0,   560,    81,
+     558,     0,   560,   162,   562,   609,     0,   560,   194,   162,
+     562,   609,     0,   560,   224,   558,     0,   560,   194,   224,
+     558,     0,   560,    16,   196,     0,   560,    16,   194,   196,
+       0,   560,     9,   558,     0,   560,    10,   558,     0,   560,
+      11,   558,     0,   560,    12,   558,     0,   560,    13,   558,
+       0,   560,    14,   558,     0,   560,    15,   558,     0,   560,
+      17,   558,     0,   560,    18,   558,     0,   560,   406,   558,
+       0,   560,   405,   558,     0,   560,   407,   558,     0,   560,
+     408,   558,     0,   560,   403,   558,     0,   560,   412,   558,
+       0,   560,   404,   558,     0,   560,   409,   558,     0,   560,
+     406,   353,   558,   602,     0,   560,   405,   353,   558,   602,
+       0,   562,     0,   561,   152,   413,   576,   414,     0,   561,
+     194,   152,   413,   576,   414,     0,   561,   318,   561,    81,
+     558,     0,   561,   194,   318,   561,    81,   558,     0,   561,
+     204,   558,     0,   561,   203,   558,     0,   561,   276,   558,
+       0,   561,   162,   562,   609,     0,   561,   194,   162,   562,
+     609,     0,   561,   224,   558,     0,   561,   194,   224,   558,
+       0,   561,    16,   196,     0,   561,    16,   194,   196,     0,
+     561,     9,   558,     0,   561,    10,   558,     0,   561,    11,
+     558,     0,   561,    12,   558,     0,   561,    13,   558,     0,
+     561,    14,   558,     0,   561,    15,   558,     0,   561,    17,
+     558,     0,   561,    18,   558,     0,   561,   406,   558,     0,
+     561,   405,   558,     0,   561,   407,   558,     0,   561,   408,
+     558,     0,   561,   403,   558,     0,   561,   412,   558,     0,
+     561,   404,   558,     0,   561,   409,   558,     0,   561,   406,
+     353,   558,   602,     0,   561,   405,   353,   558,   602,     0,
+     562,     0,   732,     0,   728,     0,   419,   737,    19,   558,
+       0,   419,   737,     0,   419,   419,   746,   737,     0,   564,
+       0,   405,   558,     0,   411,   558,     0,   194,   558,     0,
+     416,   558,     0,   413,   558,   414,     0,   417,   736,   558,
+     418,     0,   180,   579,   316,   413,   558,   414,     0,   180,
+     579,   316,   413,   558,   152,    91,   361,   414,     0,    88,
+     558,     0,    96,   413,   558,    82,   575,   414,     0,   321,
+     583,   387,   585,   584,   393,     0,   105,   413,   558,   415,
+     575,   414,     0,   255,   413,   414,     0,   256,   413,   558,
+     414,     0,   257,   413,   558,   415,   558,   414,     0,   258,
+     413,   558,   415,   558,   415,   558,   414,     0,   317,   413,
+     558,   414,     0,   317,   413,   558,   415,   558,   414,     0,
+     280,   413,   576,   414,     0,   282,   413,   576,   414,     0,
+     322,   413,   576,   414,     0,   323,   413,   558,   415,   576,
+     414,     0,   324,   557,     0,   325,   557,     0,   325,   413,
+     558,   414,     0,   327,   413,   558,   415,   353,   558,   602,
+     414,     0,   328,   413,   558,   415,   353,   558,   602,   414,
+       0,   326,   413,   414,     0,   337,   413,   558,   415,   576,
+     414,     0,   357,   413,   558,   415,   576,   414,     0,   339,
+     413,   558,   414,     0,   339,   413,   558,   415,   558,   414,
+       0,   333,   413,   558,   415,   250,   414,     0,   338,   413,
+     558,   415,   250,   414,     0,   335,   413,   558,   414,     0,
+     335,   413,   558,   415,   558,   414,     0,   334,   413,   558,
+     414,     0,   334,   413,   558,   415,   558,   414,     0,   340,
+     413,   558,   415,   558,   415,   558,   414,     0,   340,   413,
+     558,   415,   558,   415,   558,   415,   558,   414,     0,   340,
+     413,   558,   415,   558,   415,   558,   415,   558,   415,   558,
+     414,     0,   343,   413,   558,   415,   197,   414,     0,   345,
+     413,   558,   414,     0,   345,   413,   558,   415,   558,   414,
+       0,   342,   413,   558,   415,   576,   414,     0,   349,   413,
+     558,   414,     0,   351,   413,   558,   415,   558,   415,   558,
+     414,     0,    44,   413,   558,   415,   558,   415,   558,   415,
+     558,   414,     0,   353,   558,   602,   406,   558,     0,   353,
+     413,   558,   415,   576,   414,     0,   354,   413,   414,     0,
+     354,   413,   558,   414,     0,   355,   413,   558,   415,   558,
+     414,     0,   356,   413,   558,   415,   558,   414,     0,   356,
+     413,   558,   415,   558,   415,   558,   414,     0,   136,   413,
+     558,   415,   576,   414,     0,   159,   413,   558,   415,   576,
+     414,     0,   165,   413,   558,   414,     0,   165,   413,   558,
+     415,   558,   414,     0,   358,   413,   558,   415,   558,   414,
+       0,   358,   413,   558,   415,   558,   415,   558,   414,     0,
+     360,   413,   558,   414,     0,   363,   413,   558,   414,     0,
+     364,   557,     0,   364,   413,   558,   414,     0,   365,   413,
+     558,   414,     0,   366,   413,   560,   152,   558,   414,     0,
+     368,   413,   558,   414,     0,   368,   413,   414,     0,   369,
+     413,   558,   415,   558,   415,   558,   414,     0,   370,   413,
+     558,   415,   558,   414,     0,   371,   413,   558,   414,     0,
+     371,   413,   558,   415,   558,   414,     0,   372,   413,   558,
+     414,     0,   374,   413,   558,   415,   558,   415,   558,   414,
+       0,   374,   413,   558,   415,   558,   414,     0,   374,   413,
+     558,   130,   558,   344,   558,   414,     0,   374,   413,   558,
+     130,   558,   414,     0,   375,   413,   558,   415,   558,   415,
+     558,   414,     0,   376,   413,   558,   414,     0,   376,   413,
+     158,   588,   130,   558,   414,     0,   376,   413,   252,   588,
+     130,   558,   414,     0,   376,   413,    92,   588,   130,   558,
+     414,     0,   376,   413,   558,   130,   558,   414,     0,    73,
+     413,   558,   415,   558,   414,     0,   377,   413,   563,   414,
+       0,   378,   413,   563,   414,     0,   379,   413,   563,   414,
+       0,   380,   413,   563,   414,     0,   381,   413,   563,   414,
+       0,   382,   413,   563,   414,     0,   383,   413,   726,   415,
+     197,   415,   197,   415,   576,   414,     0,   384,   413,   414,
+       0,   384,   413,   558,   414,     0,   385,   413,   414,     0,
+     386,   413,   558,   414,     0,   386,   413,   558,   415,   558,
+     414,     0,   390,   413,   558,   414,     0,   391,   413,   558,
+     414,     0,   391,   413,   558,   415,   558,   414,     0,   392,
+     413,   622,   415,   558,   414,     0,   341,   413,   602,   130,
+     558,   414,     0,     0,   576,     0,    25,   413,   573,   414,
+       0,   319,   413,   573,   414,     0,   320,   413,   573,   414,
+       0,    32,   413,   605,   407,   414,     0,    32,   413,   573,
+     414,     0,     0,     0,    32,   413,   115,   565,   576,   566,
+     414,     0,   346,   413,   726,   415,   197,   415,   197,   415,
+     573,   414,     0,     0,     0,    56,   413,   567,   576,   568,
+     414,     0,     0,     0,    77,   413,   569,   576,   570,   414,
+       0,     0,     0,    42,   413,   571,   576,   572,   414,     0,
+      53,   413,   573,   414,     0,    52,   413,   573,   414,     0,
+      69,   413,   573,   414,     0,    71,   413,   573,   414,     0,
+       0,   605,   574,   558,     0,    88,     0,   280,     0,   301,
+       0,   301,   290,     0,   311,     0,   311,   290,     0,   284,
+       0,   306,     0,   283,     0,     0,   577,   578,     0,   558,
+       0,   578,   415,   558,     0,   580,     0,   413,   580,   414,
+       0,     0,   581,   582,     0,   732,     0,   582,   415,   732,
+       0,     0,   558,     0,     0,   336,   558,     0,     0,   586,
+     587,     0,   558,   394,   558,     0,   587,   387,   558,   394,
+     558,     0,     0,   558,     0,   413,   589,   414,     0,   594,
+       0,   589,   415,   589,     0,   589,   593,   589,     0,   589,
+     243,   589,     0,   589,   593,   589,   199,   558,     0,     0,
+     589,   593,   589,   269,   590,   413,   601,   414,     0,   589,
+     355,   596,   155,   589,   199,   558,     0,     0,   589,   355,
+     596,   155,   589,   591,   269,   413,   601,   414,     0,   589,
+     191,   355,   596,   155,   589,     0,   589,   370,   596,   155,
+     589,   199,   558,     0,     0,   589,   370,   596,   155,   589,
+     592,   269,   413,   601,   414,     0,   589,   191,   370,   596,
+     155,   589,     0,   589,   191,   155,   589,     0,   155,     0,
+     149,   155,     0,    34,   155,     0,     0,   595,   734,   604,
+     597,     0,   417,   736,   594,   355,   206,   155,   594,   199,
+     558,   418,     0,     0,   206,     0,     0,   268,   598,     0,
+     128,   598,     0,   144,   598,     0,     0,   488,   599,   413,
+     600,   414,     0,   600,   415,   736,     0,   736,     0,   211,
+       0,   736,     0,   601,   415,   736,     0,   329,     0,   330,
+       0,   331,     0,   332,     0,   347,     0,   348,     0,   349,
+       0,   359,     0,   360,     0,   363,     0,   372,     0,   389,
+       0,   390,     0,     0,    82,     0,     9,     0,     0,   603,
+     736,     0,     0,    80,     0,     0,   272,   558,     0,     0,
+       0,   138,   608,   558,     0,   121,   250,     0,     0,     0,
+     137,    93,   611,   612,     0,   611,   415,   731,   617,     0,
+     731,   617,     0,     0,   273,    35,     0,   273,    62,     0,
+       0,   614,     0,     0,   205,    93,   615,   616,     0,   616,
+     415,   731,   617,     0,   731,   617,     0,     0,    83,     0,
+     111,     0,     0,     0,   291,   619,   620,     0,   622,     0,
+     622,   415,   622,     0,   622,   198,   622,     0,     0,   291,
+     623,     0,   197,     0,   167,     0,   310,     0,   222,     0,
+     127,     0,   197,     0,   310,     0,   167,     0,   222,     0,
+     127,     0,     0,     0,   367,   736,   625,   413,   626,   414,
+       0,     0,   627,     0,   627,   415,   628,     0,   628,     0,
+     553,   558,     0,     0,   151,   207,   250,   630,   719,   722,
+       0,   151,   208,   250,     0,     0,    37,   632,   664,     0,
+      38,   638,   246,   637,   635,   505,     0,     0,    38,   145,
+     736,   199,   734,   634,     0,    38,   326,   637,   736,     0,
+      38,   261,   736,     0,   636,     0,   635,   415,   636,     0,
+     734,     0,     0,   351,   122,     0,     0,   248,     0,     0,
+       0,    44,   640,   645,   504,   647,   641,   649,     0,     0,
+       0,   369,   643,   646,   647,   644,   649,     0,     0,   169,
+       0,   109,     0,   141,     0,   670,     0,   109,     0,   151,
+     648,     0,   648,     0,   636,     0,   653,     0,   413,   414,
+     653,     0,   413,   652,   414,   653,     0,     0,   236,   650,
+     657,     0,     0,   413,   652,   414,     0,   413,   414,     0,
+     652,   415,   729,     0,   729,     0,   270,   656,     0,     0,
+     437,   654,   796,     0,     0,   413,   437,   414,   655,   799,
+       0,   656,   415,   661,     0,   661,     0,   657,   415,   658,
+       0,   658,     0,   732,   659,   665,     0,     9,     0,    19,
+       0,     0,   659,     0,     0,   413,   662,   663,   414,     0,
+       0,   664,     0,   664,   415,   665,     0,   665,     0,   558,
+       0,   108,     0,     0,     0,    76,   667,   670,   504,   589,
+     236,   669,   668,   606,   613,   621,     0,   669,   415,   732,
+     659,   558,     0,   732,   659,   558,     0,     0,   169,     0,
+       0,    36,   672,   680,   673,     0,     0,   130,   734,   674,
+     606,   613,   621,     0,     0,   677,   675,   130,   589,   606,
+       0,     0,   130,   677,   676,   269,   589,   606,     0,   678,
+       0,   677,   415,   678,     0,   736,   679,     0,   736,   420,
+     736,   679,     0,     0,   420,   407,     0,     0,   681,   680,
+       0,   299,     0,   169,     0,    73,   683,   636,     0,     0,
+     246,     0,     0,    65,   685,   686,     0,   106,   689,     0,
+     245,   688,   689,     0,   246,   242,   688,   689,     0,   200,
+     245,   688,   689,     0,   690,   101,   691,   734,   688,   689,
+       0,   192,    51,   344,    66,   273,   172,     9,   250,    81,
+     173,     9,   623,    81,   177,     9,   622,     0,    51,   166,
+       0,    66,   142,     0,     0,    27,    39,   692,   693,   687,
+     618,     0,   489,   691,   734,   688,     0,   242,   689,     0,
+     266,   689,     0,   247,   689,     0,   147,   689,     0,   150,
+     242,     0,   690,   214,     0,   745,   271,   689,     0,   166,
+       0,   135,   344,   738,     0,    33,   246,   734,     0,    51,
+     242,     0,    66,   242,     0,     0,   691,   736,     0,     0,
+     162,   727,     0,     0,   131,     0,   130,     0,   152,     0,
+       0,   152,   250,     0,     0,   130,   623,     0,     0,   696,
+     734,   695,   697,     0,   696,   539,     0,   111,     0,   112,
+       0,     0,   727,     0,   736,     0,     0,    41,   699,   700,
+       0,   700,   415,   701,     0,   701,     0,     0,   754,   702,
+     703,     0,   245,   273,   221,    49,     0,   215,    94,     0,
+     142,     0,   212,     0,   166,     0,   242,     0,    66,     0,
+      51,     0,   113,     0,   229,     0,   247,     0,   147,     0,
+       0,   635,     0,     0,    60,   705,   706,     0,   706,   415,
+     707,     0,   707,     0,     0,    66,   708,   709,     0,    51,
+       0,   215,    94,     0,     0,   195,    57,    27,     0,     0,
+      57,   711,    51,   166,   251,   250,     0,    46,   558,     0,
+     268,   736,     0,     0,    47,   107,   717,   716,   148,   250,
+     715,   718,   151,   246,   734,   719,   722,   725,   651,     0,
+      47,   246,   734,   130,    51,     0,    47,   107,   130,    51,
+       0,     0,   164,     0,     0,   103,     0,   169,     0,     0,
+     369,     0,   144,     0,     0,   101,   720,     0,   720,   721,
+       0,   721,     0,   249,    93,   727,     0,   202,   118,    93,
+     727,     0,   118,    93,   727,     0,   119,    93,   727,     0,
+       0,   163,   723,     0,   723,   724,     0,   724,     0,   249,
+      93,   727,     0,   241,    93,   727,     0,     0,   144,   197,
+     163,     0,   250,     0,   726,   250,     0,   250,     0,   140,
+       0,   726,     0,   197,     0,   167,     0,   310,     0,   222,
+       0,   127,     0,   196,     0,   140,     0,   284,   726,     0,
+     306,   726,     0,   305,   726,     0,   732,     0,   730,     0,
+     736,   420,   407,     0,   736,   420,   736,   420,   407,     0,
+     558,     0,   736,     0,   736,   420,   736,     0,   420,   736,
+     420,   736,     0,   736,   420,   736,   420,   736,     0,   736,
+       0,   736,   420,   736,     0,   420,   736,     0,   736,     0,
+     736,   420,   736,     0,   420,   736,     0,   736,     0,   736,
+     420,   736,     0,   143,     0,   739,     0,   736,     0,   250,
+       0,   161,     0,   737,     0,   737,   419,   737,     0,    78,
+       0,    22,     0,   316,     0,    79,     0,    84,     0,    85,
+       0,    25,     0,    86,     0,    26,     0,    87,     0,    27,
+       0,    89,     0,    90,     0,    91,     0,    94,     0,   281,
+       0,    97,     0,    98,     0,   402,     0,    29,     0,     4,
+       0,    30,     0,   100,     0,    31,     0,   277,     0,   103,
+       0,    35,     0,   107,     0,   283,     0,   284,     0,   332,
+       0,   110,     0,   113,     0,   120,     0,    37,     0,   208,
+       0,   116,     0,   393,     0,   287,     0,   121,     0,    39,
+       0,    40,     0,   123,     0,   288,     0,   114,     0,   117,
+       0,   131,     0,   124,     0,   125,     0,   126,     0,    41,
+       0,   135,     0,   133,     0,    42,     0,   139,     0,     5,
+       0,   142,     0,   349,     0,   350,     0,   146,     0,   153,
+       0,   154,     0,   401,     0,   150,     0,   352,     0,    45,
+       0,     6,     0,   160,     0,   164,     0,    48,     0,   166,
+       0,   181,     0,    51,     0,   170,     0,   175,     0,   172,
+       0,   173,     0,   171,     0,   174,     0,   177,     0,   176,
+       0,   182,     0,   183,     0,   184,     0,   185,     0,   186,
+       0,   187,     0,   360,     0,   188,     0,   362,     0,   361,
+       0,   363,     0,   189,     0,   190,     0,   193,     0,     7,
+       0,   192,     0,   195,     0,    54,     0,   198,     0,   200,
+       0,    56,     0,   209,     0,   365,     0,     8,     0,   213,
+       0,   214,     0,   215,     0,   299,     0,   216,     0,   219,
+       0,   220,     0,   217,     0,   218,     0,   178,     0,   179,
+       0,   225,     0,    58,     0,   227,     0,    59,     0,    60,
+       0,   229,     0,   230,     0,    61,     0,    62,     0,   233,
+       0,   234,     0,   235,     0,    63,     0,   372,     0,   237,
+       0,   238,     0,   301,     0,   373,     0,   239,     0,    66,
+       0,   396,     0,   400,     0,   398,     0,    67,     0,    68,
+       0,   242,     0,    70,     0,   303,     0,   244,     0,    72,
+       0,   248,     0,   304,     0,   253,     0,    73,     0,   305,
+       0,   306,     0,   254,     0,   261,     0,   262,     0,    77,
+       0,   267,     0,   271,     0,   388,     0,   275,     0,   390,
+       0,     0,   236,   742,   741,   743,     0,     0,   201,     0,
+     744,   747,     0,   743,   415,   744,   747,     0,     0,   133,
+       0,   164,     0,   238,     0,     0,   164,     0,   238,     0,
+     133,     0,     0,   164,   420,     0,   238,   420,     0,   133,
+     420,     0,   419,   737,   659,   558,     0,   748,   659,   751,
+       0,   419,   419,   746,   748,   659,   751,     0,   253,   153,
+     160,   749,     0,   280,   236,   660,   751,     0,   365,   659,
+     750,     0,   365,   344,   738,   659,   750,     0,   736,     0,
+     221,   262,     0,   221,   100,     0,   227,   221,     0,   237,
+       0,   250,     0,   365,   413,   250,   414,     0,   558,     0,
+     108,     0,   199,     0,    80,     0,     0,    49,   754,   753,
+     755,     0,   246,     0,   245,     0,   756,     0,   755,   415,
+     756,     0,   734,   604,   757,     0,   221,     0,   274,     0,
+     169,   274,     0,   221,   164,     0,    74,   754,     0,     5,
+     734,   200,   604,     0,     5,   735,     4,     0,     0,     5,
+     735,   221,   760,   761,   606,   618,     0,   762,     0,   736,
+     763,     0,   125,     0,     7,     0,   125,     0,     7,     0,
+       8,     0,     6,     0,     0,   765,   764,   413,   664,   414,
+       0,     9,     0,    11,     0,    13,     0,    12,     0,    14,
+       0,     0,   232,   767,   770,   199,   780,   130,   781,     0,
+       0,   134,   769,   770,   199,   780,   251,   781,   786,   787,
+       0,   771,     0,    80,   212,     0,    80,     0,   772,     0,
+     771,   415,   772,     0,     0,    64,   773,   783,     0,     0,
+      44,   774,   783,     0,     0,    76,   775,   783,     0,     0,
+     223,   776,   783,     0,    36,     0,   265,     0,   145,     0,
+      23,     0,    33,     0,    38,     0,    40,     0,   225,     0,
+     239,     0,   213,     0,   124,     0,   134,   201,     0,    65,
+     106,     0,    72,     0,    33,   248,   245,     0,    49,   245,
+       0,    59,    66,     0,    59,    29,     0,     0,    81,     0,
+     779,   777,   778,     0,   779,     0,   244,   250,     0,   401,
+     250,     0,   402,   250,     0,   407,     0,   736,   420,   407,
+       0,   407,   420,   407,     0,   734,     0,   782,     0,   781,
+     415,   782,     0,   738,   350,    93,   250,     0,   738,   350,
+      93,   365,   250,     0,   738,     0,     0,   413,   784,   414,
+       0,   784,   415,   785,     0,   785,     0,   736,     0,     0,
+     228,   778,     0,   228,   240,     0,   228,   275,     0,   228,
+      54,     0,     0,   273,   788,     0,   788,   789,     0,   789,
+       0,   134,   201,     0,   183,   622,     0,   184,   622,     0,
+     182,   622,     0,     0,    26,   791,   792,     0,     0,   388,
+       0,    31,     0,    61,     0,    61,   251,    63,   736,     0,
+      63,   736,     0,     0,   797,     0,     0,   263,   802,   798,
+     540,     0,   797,     0,   800,     0,     0,     0,   801,   613,
+     618,     0,     0,   115,     0,    80,     0,     0,    50,    51,
+     804,   805,     0,     0,   172,     9,   250,   415,   177,     9,
+     622,   806,   808,     0,     0,   172,     9,   250,   415,   177,
+       9,   622,   415,   145,     9,   250,   807,   808,     0,   134,
+     238,     0,   232,   238,     0,   232,   238,   273,    46,     0,
+       0,   273,    27,     0
 };
 
-/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
-static const unsigned short yyrline[] =
+#endif
+
+#if YYDEBUG
+/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
+static const short yyrline[] =
 {
-       0,   609,   609,   623,   626,   627,   628,   629,   630,   631,
-     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
+       0,   617,   632,   634,   636,   637,   638,   639,   640,   641,
      642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
      652,   653,   654,   655,   656,   657,   658,   659,   660,   661,
-     662,   663,   669,   668,   679,   680,   683,   688,   693,   698,
-     703,   708,   725,   730,   735,   747,   746,   766,   765,   782,
-     790,   789,   805,   806,   809,   810,   810,   814,   816,   815,
-     818,   817,   823,   822,   838,   839,   842,   843,   846,   847,
-     850,   853,   854,   856,   858,   861,   862,   865,   866,   867,
-     868,   869,   870,   871,   872,   873,   874,   875,   876,   877,
-     878,   879,   880,   893,   894,   895,   896,   897,   900,   901,
-     902,   903,   904,   905,   906,   909,   910,   911,   912,   915,
-     916,   917,   920,   921,   922,   924,   926,   929,   930,   933,
-     934,   935,   938,   939,   943,   944,   948,   949,   956,   962,
-     966,   970,   976,   978,   982,   985,   987,   990,   994,   993,
-    1011,  1012,  1013,  1014,  1016,  1018,  1020,  1022,  1025,  1027,
-    1030,  1031,  1032,  1033,  1034,  1036,  1037,  1039,  1041,  1043,
-    1045,  1047,  1048,  1049,  1050,  1051,  1052,  1054,  1056,  1056,
-    1062,  1062,  1070,  1071,  1072,  1075,  1076,  1077,  1078,  1081,
-    1082,  1083,  1084,  1085,  1088,  1090,  1091,  1095,  1096,  1097,
-    1100,  1107,  1108,  1111,  1112,  1115,  1116,  1117,  1120,  1121,
-    1124,  1125,  1128,  1129,  1132,  1133,  1136,  1137,  1138,  1139,
-    1140,  1141,  1142,  1143,  1146,  1147,  1148,  1152,  1153,  1159,
-    1160,  1163,  1164,  1168,  1169,  1170,  1171,  1174,  1175,  1176,
-    1177,  1178,  1181,  1182,  1183,  1184,  1185,  1186,  1189,  1190,
-    1193,  1194,  1195,  1198,  1199,  1200,  1203,  1204,  1207,  1208,
-    1211,  1212,  1215,  1216,  1224,  1223,  1250,  1251,  1252,  1255,
-    1258,  1259,  1260,  1262,  1261,  1268,  1275,  1267,  1285,  1291,
-    1296,  1297,  1304,  1305,  1306,  1312,  1318,  1330,  1331,  1334,
-    1335,  1338,  1339,  1342,  1343,  1344,  1347,  1348,  1349,  1352,
-    1353,  1354,  1355,  1361,  1368,  1375,  1382,  1390,  1390,  1395,
-    1396,  1399,  1400,  1401,  1406,  1405,  1416,  1415,  1426,  1425,
-    1436,  1437,  1440,  1441,  1444,  1445,  1446,  1450,  1449,  1461,
-    1460,  1471,  1472,  1475,  1476,  1479,  1480,  1481,  1482,  1483,
-    1487,  1486,  1498,  1497,  1506,  1507,  1510,  1523,  1526,  1526,
-    1528,  1528,  1532,  1532,  1539,  1540,  1541,  1542,  1543,  1546,
-    1549,  1551,  1554,  1555,  1558,  1559,  1565,  1566,  1567,  1568,
-    1574,  1580,  1581,  1585,  1588,  1590,  1598,  1609,  1610,  1611,
-    1619,  1630,  1633,  1636,  1637,  1640,  1641,  1642,  1643,  1644,
-    1647,  1648,  1651,  1652,  1656,  1658,  1660,  1662,  1664,  1665,
-    1666,  1667,  1668,  1669,  1670,  1671,  1672,  1673,  1674,  1675,
-    1676,  1677,  1678,  1679,  1680,  1681,  1682,  1683,  1684,  1685,
-    1686,  1687,  1688,  1689,  1690,  1691,  1693,  1698,  1700,  1702,
-    1703,  1704,  1705,  1706,  1707,  1708,  1709,  1710,  1711,  1712,
-    1713,  1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,  1722,
-    1723,  1724,  1725,  1726,  1727,  1728,  1729,  1731,  1733,  1737,
-    1739,  1741,  1743,  1745,  1746,  1747,  1748,  1749,  1750,  1751,
-    1752,  1753,  1754,  1755,  1756,  1757,  1758,  1759,  1760,  1761,
-    1762,  1763,  1764,  1765,  1766,  1767,  1768,  1769,  1770,  1771,
-    1773,  1775,  1778,  1779,  1780,  1785,  1790,  1795,  1796,  1797,
-    1798,  1799,  1800,  1801,  1802,  1805,  1808,  1809,  1810,  1812,
-    1813,  1815,  1817,  1819,  1821,  1823,  1825,  1827,  1829,  1831,
-    1833,  1835,  1837,  1842,  1844,  1846,  1851,  1853,  1855,  1860,
-    1861,  1863,  1865,  1867,  1869,  1871,  1873,  1875,  1877,  1879,
-    1881,  1883,  1887,  1889,  1891,  1893,  1895,  1898,  1900,  1906,
-    1911,  1913,  1915,  1917,  1919,  1921,  1923,  1925,  1930,  1935,
-    1937,  1939,  1941,  1943,  1947,  1949,  1951,  1953,  1955,  1957,
-    1959,  1960,  1962,  1964,  1966,  1968,  1970,  1972,  1974,  1976,
-    1978,  1980,  1982,  1984,  1991,  1998,  2005,  2012,  2019,  2026,
-    2030,  2035,  2037,  2039,  2045,  2047,  2049,  2051,  2053,  2058,
-    2062,  2063,  2066,  2068,  2070,  2072,  2074,  2077,  2079,  2076,
-    2082,  2084,  2086,  2088,  2090,  2095,  2094,  2103,  2104,  2105,
-    2106,  2107,  2108,  2109,  2110,  2111,  2115,  2115,  2120,  2121,
-    2124,  2125,  2128,  2128,  2133,  2134,  2137,  2138,  2141,  2142,
-    2145,  2145,  2150,  2156,  2164,  2165,  2168,  2169,  2170,  2171,
-    2172,  2174,  2178,  2176,  2186,  2189,  2188,  2196,  2202,  2205,
-    2204,  2212,  2218,  2222,  2223,  2224,  2228,  2228,  2241,  2245,
-    2246,  2249,  2250,  2256,  2263,  2272,  2272,  2276,  2278,  2280,
-    2284,  2290,  2298,  2299,  2300,  2301,  2302,  2303,  2304,  2305,
-    2306,  2307,  2308,  2309,  2310,  2312,  2314,  2315,  2318,  2319,
-    2322,  2324,  2328,  2329,  2337,  2339,  2339,  2350,  2351,  2358,
-    2360,  2363,  2365,  2369,  2370,  2376,  2388,  2390,  2394,  2393,
-    2407,  2409,  2413,  2414,  2415,  2419,  2421,  2420,  2435,  2441,
-    2447,  2457,  2461,  2465,  2466,  2467,  2468,  2469,  2472,  2473,
-    2474,  2475,  2476,  2478,  2481,  2480,  2494,  2495,  2498,  2499,
-    2502,  2513,  2512,  2520,  2533,  2532,  2548,  2555,  2555,  2565,
-    2572,  2581,  2582,  2585,  2589,  2590,  2594,  2595,  2602,  2604,
-    2602,  2614,  2620,  2613,  2629,  2630,  2631,  2632,  2636,  2637,
-    2640,  2641,  2644,  2653,  2654,  2655,  2657,  2656,  2666,  2667,
-    2668,  2671,  2672,  2675,  2676,  2676,  2677,  2677,  2681,  2682,
-    2685,  2687,  2690,  2698,  2699,  2703,  2704,  2709,  2708,  2721,
-    2722,  2725,  2730,  2738,  2739,  2746,  2755,  2745,  2769,  2774,
-    2781,  2782,  2788,  2787,  2801,  2800,  2809,  2808,  2812,  2811,
-    2818,  2819,  2822,  2828,  2838,  2839,  2843,  2844,  2847,  2848,
-    2851,  2862,  2864,  2868,  2868,  2873,  2875,  2881,  2888,  2895,
-    2903,  2913,  2917,  2922,  2921,  2928,  2936,  2938,  2940,  2942,
-    2948,  2950,  2957,  2963,  2967,  2973,  2974,  2976,  2978,  2981,
-    2982,  2985,  2986,  2989,  2990,  2993,  2994,  3000,  2999,  3009,
-    3014,  3015,  3018,  3019,  3020,  3028,  3027,  3037,  3038,  3041,
-    3041,  3042,  3043,  3044,  3045,  3046,  3047,  3048,  3049,  3050,
-    3051,  3054,  3055,  3059,  3058,  3067,  3068,  3071,  3072,  3073,
-    3077,  3076,  3090,  3104,  3113,  3112,  3129,  3137,  3143,  3144,
-    3147,  3148,  3149,  3153,  3154,  3155,  3157,  3159,  3162,  3163,
-    3166,  3167,  3173,  3174,  3176,  3178,  3181,  3182,  3185,  3186,
-    3188,  3190,  3196,  3197,  3201,  3202,  3209,  3210,  3211,  3212,
-    3213,  3214,  3215,  3217,  3218,  3219,  3220,  3227,  3228,  3231,
-    3232,  3237,  3240,  3245,  3250,  3255,  3263,  3264,  3265,  3268,
-    3269,  3270,  3274,  3275,  3279,  3280,  3291,  3292,  3293,  3296,
-    3302,  3312,  3313,  3314,  3315,  3316,  3317,  3318,  3319,  3320,
-    3321,  3322,  3323,  3324,  3325,  3326,  3327,  3328,  3329,  3330,
-    3331,  3332,  3333,  3334,  3335,  3336,  3337,  3338,  3339,  3340,
-    3341,  3342,  3343,  3344,  3345,  3346,  3347,  3348,  3349,  3350,
-    3351,  3352,  3353,  3354,  3355,  3356,  3357,  3358,  3359,  3360,
-    3361,  3362,  3363,  3364,  3365,  3366,  3367,  3368,  3369,  3370,
-    3371,  3372,  3373,  3374,  3375,  3376,  3377,  3378,  3379,  3380,
-    3381,  3382,  3383,  3384,  3385,  3386,  3387,  3388,  3389,  3390,
-    3391,  3392,  3393,  3394,  3395,  3396,  3397,  3398,  3399,  3400,
-    3401,  3402,  3403,  3404,  3405,  3406,  3407,  3408,  3409,  3410,
-    3411,  3412,  3413,  3414,  3415,  3416,  3417,  3418,  3419,  3420,
-    3421,  3422,  3423,  3424,  3425,  3426,  3427,  3428,  3429,  3430,
-    3431,  3432,  3433,  3434,  3435,  3436,  3437,  3438,  3439,  3440,
-    3441,  3442,  3443,  3444,  3445,  3446,  3447,  3448,  3449,  3450,
-    3451,  3452,  3453,  3454,  3455,  3456,  3457,  3458,  3459,  3460,
-    3461,  3462,  3463,  3464,  3465,  3466,  3467,  3468,  3469,  3475,
-    3474,  3486,  3487,  3490,  3491,  3494,  3495,  3496,  3497,  3501,
-    3502,  3503,  3504,  3508,  3509,  3510,  3511,  3515,  3519,  3524,
-    3529,  3536,  3543,  3553,  3560,  3570,  3571,  3572,  3573,  3577,
-    3578,  3592,  3593,  3594,  3595,  3603,  3602,  3611,  3612,  3615,
-    3616,  3619,  3623,  3624,  3625,  3626,  3629,  3637,  3643,  3650,
-    3649,  3662,  3663,  3666,  3667,  3670,  3671,  3672,  3673,  3675,
-    3674,  3684,  3685,  3686,  3687,  3688,  3694,  3693,  3711,  3710,
-    3728,  3729,  3730,  3733,  3734,  3737,  3737,  3738,  3738,  3739,
-    3739,  3740,  3740,  3741,  3742,  3743,  3744,  3745,  3746,  3747,
-    3748,  3749,  3750,  3751,  3752,  3753,  3754,  3755,  3756,  3757,
-    3758,  3763,  3764,  3768,  3769,  3773,  3783,  3793,  3806,  3818,
-    3830,  3842,  3853,  3854,  3863,  3877,  3879,  3885,  3889,  3892,
-    3893,  3896,  3915,  3916,  3920,  3924,  3928,  3935,  3936,  3939,
-    3940,  3943,  3944,  3949,  3954,  3961,  3961,  3965,  3966,  3969,
-    3972,  3976,  3982,  3994,  3995,  3999,  3998,  4020,  4021,  4027,
-    4029,  4029,  4049,  4050,  4051
+     662,   663,   664,   665,   666,   667,   668,   669,   670,   671,
+     672,   673,   677,   677,   688,   690,   692,   697,   702,   707,
+     712,   717,   734,   739,   744,   755,   755,   775,   775,   792,
+     799,   799,   814,   816,   818,   820,   820,   823,   825,   825,
+     827,   827,   831,   831,   847,   849,   851,   853,   855,   857,
+     859,   862,   864,   866,   868,   870,   872,   874,   876,   877,
+     878,   879,   880,   881,   882,   883,   884,   885,   886,   887,
+     888,   889,   890,   903,   904,   905,   906,   907,   909,   911,
+     912,   913,   914,   915,   916,   918,   920,   921,   922,   924,
+     926,   927,   929,   931,   932,   934,   936,   938,   940,   942,
+     944,   945,   947,   949,   952,   954,   957,   959,   965,   972,
+     976,   980,   986,   988,   991,   995,   997,   999,  1002,  1002,
+    1020,  1022,  1023,  1024,  1026,  1028,  1030,  1032,  1035,  1037,
+    1040,  1041,  1042,  1043,  1044,  1046,  1047,  1049,  1051,  1053,
+    1055,  1057,  1058,  1059,  1060,  1061,  1062,  1064,  1066,  1066,
+    1072,  1072,  1079,  1081,  1082,  1084,  1086,  1087,  1088,  1090,
+    1092,  1093,  1094,  1095,  1097,  1100,  1101,  1104,  1106,  1107,
+    1109,  1116,  1118,  1120,  1122,  1124,  1126,  1127,  1129,  1131,
+    1133,  1135,  1137,  1139,  1141,  1143,  1145,  1147,  1148,  1149,
+    1150,  1151,  1152,  1153,  1155,  1157,  1158,  1161,  1163,  1168,
+    1170,  1172,  1174,  1177,  1179,  1180,  1181,  1183,  1185,  1186,
+    1187,  1188,  1190,  1192,  1193,  1194,  1195,  1196,  1198,  1200,
+    1202,  1204,  1205,  1207,  1209,  1210,  1212,  1214,  1216,  1218,
+    1220,  1222,  1224,  1226,  1232,  1232,  1260,  1261,  1262,  1264,
+    1267,  1269,  1270,  1271,  1271,  1277,  1277,  1277,  1295,  1301,
+    1306,  1307,  1314,  1315,  1316,  1322,  1328,  1340,  1341,  1343,
+    1345,  1347,  1349,  1351,  1353,  1354,  1356,  1358,  1359,  1361,
+    1363,  1364,  1365,  1370,  1370,  1379,  1386,  1393,  1401,  1401,
+    1406,  1408,  1410,  1412,  1413,  1416,  1418,  1429,  1431,  1433,
+    1438,  1456,  1456,  1466,  1466,  1476,  1476,  1487,  1489,  1491,
+    1493,  1495,  1497,  1498,  1500,  1500,  1511,  1511,  1522,  1524,
+    1526,  1528,  1530,  1532,  1533,  1534,  1535,  1537,  1537,  1548,
+    1548,  1557,  1559,  1561,  1574,  1577,  1577,  1579,  1579,  1583,
+    1583,  1590,  1592,  1593,  1594,  1595,  1597,  1601,  1603,  1605,
+    1607,  1609,  1611,  1617,  1618,  1619,  1620,  1626,  1632,  1633,
+    1637,  1640,  1642,  1650,  1660,  1662,  1663,  1670,  1681,  1684,
+    1687,  1689,  1691,  1693,  1694,  1695,  1696,  1698,  1700,  1703,
+    1704,  1707,  1710,  1712,  1714,  1716,  1717,  1718,  1719,  1720,
+    1721,  1722,  1723,  1724,  1725,  1726,  1727,  1728,  1729,  1730,
+    1731,  1732,  1733,  1734,  1735,  1736,  1737,  1738,  1739,  1740,
+    1741,  1742,  1743,  1745,  1749,  1752,  1754,  1755,  1756,  1757,
+    1758,  1759,  1760,  1761,  1762,  1763,  1764,  1765,  1766,  1767,
+    1768,  1769,  1770,  1771,  1772,  1773,  1774,  1775,  1776,  1777,
+    1778,  1779,  1780,  1781,  1783,  1785,  1788,  1791,  1793,  1795,
+    1797,  1798,  1799,  1800,  1801,  1802,  1803,  1804,  1805,  1806,
+    1807,  1808,  1809,  1810,  1811,  1812,  1813,  1814,  1815,  1816,
+    1817,  1818,  1819,  1820,  1821,  1822,  1823,  1825,  1827,  1829,
+    1831,  1832,  1837,  1842,  1847,  1848,  1849,  1850,  1851,  1852,
+    1853,  1854,  1857,  1860,  1861,  1862,  1864,  1865,  1867,  1869,
+    1871,  1873,  1875,  1877,  1879,  1881,  1883,  1885,  1887,  1889,
+    1894,  1896,  1898,  1903,  1905,  1907,  1912,  1913,  1915,  1917,
+    1919,  1921,  1923,  1925,  1927,  1929,  1931,  1933,  1935,  1939,
+    1941,  1943,  1945,  1947,  1950,  1952,  1958,  1963,  1965,  1967,
+    1969,  1971,  1973,  1975,  1977,  1982,  1987,  1989,  1991,  1993,
+    1995,  1999,  2001,  2003,  2005,  2007,  2009,  2011,  2012,  2014,
+    2016,  2018,  2020,  2022,  2024,  2026,  2028,  2030,  2032,  2034,
+    2036,  2043,  2050,  2057,  2064,  2071,  2078,  2082,  2087,  2089,
+    2091,  2097,  2099,  2101,  2103,  2105,  2110,  2113,  2115,  2117,
+    2120,  2122,  2124,  2126,  2128,  2128,  2128,  2134,  2136,  2136,
+    2136,  2142,  2142,  2142,  2148,  2148,  2148,  2154,  2156,  2158,
+    2160,  2163,  2163,  2172,  2174,  2175,  2176,  2177,  2178,  2179,
+    2180,  2181,  2184,  2184,  2189,  2191,  2193,  2195,  2197,  2197,
+    2202,  2204,  2206,  2208,  2210,  2212,  2214,  2214,  2219,  2226,
+    2233,  2235,  2237,  2239,  2240,  2241,  2242,  2244,  2246,  2246,
+    2256,  2258,  2258,  2266,  2272,  2274,  2274,  2282,  2288,  2291,
+    2293,  2294,  2297,  2297,  2311,  2314,  2316,  2318,  2320,  2326,
+    2333,  2341,  2341,  2345,  2348,  2350,  2353,  2360,  2367,  2369,
+    2370,  2371,  2372,  2373,  2374,  2375,  2376,  2377,  2378,  2379,
+    2380,  2382,  2384,  2385,  2387,  2389,  2392,  2394,  2397,  2399,
+    2407,  2409,  2409,  2419,  2421,  2428,  2430,  2432,  2435,  2438,
+    2440,  2446,  2458,  2460,  2462,  2462,  2476,  2479,  2482,  2484,
+    2485,  2488,  2490,  2490,  2504,  2511,  2517,  2525,  2531,  2534,
+    2536,  2537,  2538,  2539,  2541,  2543,  2544,  2545,  2546,  2548,
+    2550,  2550,  2563,  2565,  2567,  2569,  2571,  2581,  2581,  2590,
+    2602,  2602,  2617,  2625,  2625,  2635,  2642,  2650,  2652,  2654,
+    2658,  2660,  2663,  2665,  2671,  2671,  2671,  2682,  2682,  2682,
+    2698,  2700,  2701,  2702,  2705,  2707,  2709,  2711,  2713,  2722,
+    2724,  2725,  2726,  2726,  2735,  2737,  2738,  2740,  2742,  2744,
+    2746,  2746,  2747,  2747,  2750,  2752,  2754,  2756,  2759,  2768,
+    2769,  2772,  2774,  2777,  2777,  2790,  2792,  2794,  2800,  2807,
+    2809,  2814,  2814,  2814,  2838,  2844,  2850,  2852,  2856,  2856,
+    2869,  2869,  2878,  2878,  2881,  2881,  2887,  2889,  2891,  2898,
+    2907,  2909,  2912,  2914,  2916,  2918,  2920,  2932,  2934,  2938,
+    2938,  2942,  2945,  2951,  2958,  2965,  2973,  2983,  2987,  2991,
+    2991,  2998,  3006,  3008,  3010,  3012,  3014,  3016,  3018,  3024,
+    3026,  3033,  3039,  3043,  3048,  3050,  3052,  3054,  3056,  3058,
+    3060,  3062,  3064,  3066,  3068,  3070,  3074,  3074,  3085,  3089,
+    3091,  3093,  3095,  3096,  3102,  3102,  3112,  3114,  3116,  3116,
+    3118,  3119,  3120,  3121,  3122,  3123,  3124,  3125,  3126,  3127,
+    3128,  3129,  3131,  3133,  3135,  3135,  3144,  3146,  3148,  3148,
+    3151,  3152,  3154,  3156,  3161,  3161,  3175,  3190,  3198,  3198,
+    3214,  3222,  3228,  3230,  3232,  3234,  3235,  3238,  3240,  3241,
+    3243,  3245,  3247,  3249,  3251,  3253,  3259,  3260,  3262,  3264,
+    3266,  3268,  3270,  3272,  3274,  3276,  3281,  3283,  3286,  3288,
+    3294,  3296,  3297,  3298,  3299,  3300,  3301,  3303,  3304,  3305,
+    3306,  3312,  3314,  3316,  3318,  3322,  3325,  3331,  3336,  3341,
+    3348,  3350,  3351,  3353,  3355,  3356,  3359,  3361,  3364,  3366,
+    3376,  3378,  3379,  3381,  3388,  3397,  3399,  3400,  3401,  3402,
+    3403,  3404,  3405,  3406,  3407,  3408,  3409,  3410,  3411,  3412,
+    3413,  3414,  3415,  3416,  3417,  3418,  3419,  3420,  3421,  3422,
+    3423,  3424,  3425,  3426,  3427,  3428,  3429,  3430,  3431,  3432,
+    3433,  3434,  3435,  3436,  3437,  3438,  3439,  3440,  3441,  3442,
+    3443,  3444,  3445,  3446,  3447,  3448,  3449,  3450,  3451,  3452,
+    3453,  3454,  3455,  3456,  3457,  3458,  3459,  3460,  3461,  3462,
+    3463,  3464,  3465,  3466,  3467,  3468,  3469,  3470,  3471,  3472,
+    3473,  3474,  3475,  3476,  3477,  3478,  3479,  3480,  3481,  3482,
+    3483,  3484,  3485,  3486,  3487,  3488,  3489,  3490,  3491,  3492,
+    3493,  3494,  3495,  3496,  3497,  3498,  3499,  3500,  3501,  3502,
+    3503,  3504,  3505,  3506,  3507,  3508,  3509,  3510,  3511,  3512,
+    3513,  3514,  3515,  3516,  3517,  3518,  3519,  3520,  3521,  3522,
+    3523,  3524,  3525,  3526,  3527,  3528,  3529,  3530,  3531,  3532,
+    3533,  3534,  3535,  3536,  3537,  3538,  3539,  3540,  3541,  3542,
+    3543,  3544,  3545,  3546,  3547,  3548,  3549,  3550,  3551,  3552,
+    3553,  3554,  3555,  3556,  3557,  3558,  3562,  3562,  3574,  3576,
+    3578,  3580,  3582,  3584,  3585,  3586,  3589,  3591,  3592,  3593,
+    3596,  3598,  3599,  3600,  3603,  3608,  3613,  3618,  3625,  3632,
+    3642,  3648,  3658,  3660,  3661,  3662,  3665,  3667,  3680,  3682,
+    3683,  3684,  3690,  3690,  3699,  3701,  3703,  3705,  3707,  3711,
+    3713,  3714,  3715,  3717,  3725,  3732,  3738,  3738,  3750,  3752,
+    3754,  3756,  3758,  3760,  3761,  3762,  3763,  3763,  3772,  3774,
+    3775,  3776,  3777,  3781,  3781,  3798,  3798,  3816,  3818,  3819,
+    3821,  3823,  3825,  3825,  3827,  3827,  3828,  3828,  3829,  3829,
+    3830,  3831,  3832,  3833,  3834,  3835,  3836,  3837,  3838,  3839,
+    3840,  3841,  3842,  3843,  3844,  3845,  3846,  3847,  3851,  3853,
+    3856,  3858,  3861,  3872,  3882,  3894,  3907,  3919,  3931,  3941,
+    3943,  3951,  3966,  3968,  3972,  3978,  3980,  3982,  3984,  4004,
+    4005,  4009,  4013,  4017,  4023,  4025,  4027,  4029,  4031,  4033,
+    4038,  4043,  4049,  4049,  4053,  4055,  4057,  4060,  4065,  4070,
+    4082,  4084,  4086,  4086,  4108,  4110,  4112,  4117,  4117,  4137,
+    4139,  4140,  4145,  4145,  4157,  4157,  4164,  4164,  4171,  4175,
+    4179,  4186,  4188
 };
 #endif
 
-#if YYDEBUG || YYERROR_VERBOSE
-/* YYTNME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
-   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
+
+#if (YYDEBUG) || defined YYERROR_VERBOSE
+
+/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
 static const char *const yytname[] =
 {
-  "$end", "error", "$undefined", "END_OF_INPUT", "CLOSE_SYM",
-  "HANDLER_SYM", "LAST_SYM", "NEXT_SYM", "PREV_SYM", "EQ", "EQUAL_SYM",
-  "GE", "GT_SYM", "LE", "LT", "NE", "IS", "SHIFT_LEFT", "SHIFT_RIGHT",
-  "SET_VAR", "ABORT_SYM", "ADD", "AFTER_SYM", "ALTER", "ANALYZE_SYM",
-  "AVG_SYM", "BEGIN_SYM", "BINLOG_SYM", "CHANGE", "CLIENT_SYM",
-  "COMMENT_SYM", "COMMIT_SYM", "COUNT_SYM", "CREATE", "CROSS", "CUBE_SYM",
-  "DELETE_SYM", "DO_SYM", "DROP", "EVENTS_SYM", "EXECUTE_SYM", "FLUSH_SYM",
-  "INSERT", "IO_THREAD", "KILL_SYM", "LOAD", "LOCKS_SYM", "LOCK_SYM",
-  "MASTER_SYM", "MAX_SYM", "MIN_SYM", "NONE_SYM", "OPTIMIZE", "PURGE",
-  "REPAIR", "REPLICATION", "RESET_SYM", "ROLLBACK_SYM", "ROLLUP_SYM",
-  "SAVEPOINT_SYM", "SELECT_SYM", "SHOW", "SLAVE", "SQL_THREAD",
-  "START_SYM", "STD_SYM", "STOP_SYM", "SUM_SYM", "SUPER_SYM",
-  "TRUNCATE_SYM", "UNLOCK_SYM", "UPDATE_SYM", "ACTION", "AGGREGATE_SYM",
-  "ALL", "AND", "AS", "ASC", "AUTO_INC", "AVG_ROW_LENGTH", "BACKUP_SYM",
-  "BERKELEY_DB_SYM", "BINARY", "BIT_SYM", "BOOL_SYM", "BOOLEAN_SYM",
-  "BOTH", "BY", "CACHE_SYM", "CASCADE", "CAST_SYM", "CHARSET",
-  "CHECKSUM_SYM", "CHECK_SYM", "COMMITTED_SYM", "COLUMNS", "COLUMN_SYM",
-  "CONCURRENT", "CONSTRAINT", "CONVERT_SYM", "DATABASES", "DATA_SYM",
-  "DEFAULT", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DESC", "DESCRIBE",
-  "DES_KEY_FILE", "DISABLE_SYM", "DISTINCT", "DYNAMIC_SYM", "ENABLE_SYM",
-  "ENCLOSED", "ESCAPED", "DIRECTORY_SYM", "ESCAPE_SYM", "EXISTS",
-  "EXTENDED_SYM", "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM",
-  "FORCE_SYM", "FOREIGN", "FROM", "FULL", "FULLTEXT_SYM", "GLOBAL_SYM",
-  "GRANT", "GRANTS", "GREATEST_SYM", "GROUP", "HAVING", "HEAP_SYM",
-  "HEX_NUM", "HIGH_PRIORITY", "HOSTS_SYM", "IDENT", "IGNORE_SYM", "INDEX",
-  "INDEXES", "INFILE", "INNER_SYM", "INNOBASE_SYM", "INTO", "IN_SYM",
-  "ISOLATION", "ISAM_SYM", "JOIN_SYM", "KEYS", "KEY_SYM", "LEADING",
-  "LEAST_SYM", "LEVEL_SYM", "LEX_HOSTNAME", "LIKE", "LINES", "LOCAL_SYM",
-  "LOG_SYM", "LOGS_SYM", "LONG_NUM", "LONG_SYM", "LOW_PRIORITY",
-  "MASTER_HOST_SYM", "MASTER_USER_SYM", "MASTER_LOG_FILE_SYM",
-  "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM",
-  "MASTER_CONNECT_RETRY_SYM", "MASTER_SERVER_ID_SYM", "RELAY_LOG_FILE_SYM",
-  "RELAY_LOG_POS_SYM", "MATCH", "MAX_ROWS", "MAX_CONNECTIONS_PER_HOUR",
-  "MAX_QUERIES_PER_HOUR", "MAX_UPDATES_PER_HOUR", "MEDIUM_SYM",
-  "MERGE_SYM", "MEMORY_SYM", "MIN_ROWS", "MYISAM_SYM", "NATIONAL_SYM",
-  "NATURAL", "NEW_SYM", "NCHAR_SYM", "NOT", "NO_SYM", "NULL_SYM", "NUM",
-  "OFFSET_SYM", "ON", "OPEN_SYM", "OPTION", "OPTIONALLY", "OR",
-  "OR_OR_CONCAT", "ORDER_SYM", "OUTER", "OUTFILE", "DUMPFILE",
-  "PACK_KEYS_SYM", "PARTIAL", "PRIMARY_SYM", "PRIVILEGES", "PROCESS",
-  "PROCESSLIST_SYM", "QUERY_SYM", "RAID_0_SYM", "RAID_STRIPED_SYM",
-  "RAID_TYPE", "RAID_CHUNKS", "RAID_CHUNKSIZE", "READ_SYM", "REAL_NUM",
-  "REFERENCES", "REGEXP", "RELOAD", "RENAME", "REPEATABLE_SYM",
-  "REQUIRE_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "REVOKE",
-  "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM", "SET", "SERIALIZABLE_SYM",
-  "SESSION_SYM", "SHUTDOWN", "SSL_SYM", "STARTING", "STATUS_SYM",
-  "STRAIGHT_JOIN", "SUBJECT_SYM", "TABLES", "TABLE_SYM", "TEMPORARY",
-  "TERMINATED", "TEXT_STRING", "TO_SYM", "TRAILING", "TRANSACTION_SYM",
-  "TYPE_SYM", "FUNC_ARG0", "FUNC_ARG1", "FUNC_ARG2", "FUNC_ARG3",
-  "UDF_RETURNS_SYM", "UDF_SONAME_SYM", "UDF_SYM", "UNCOMMITTED_SYM",
-  "UNION_SYM", "UNIQUE_SYM", "USAGE", "USE_FRM", "USE_SYM", "USING",
-  "VALUES", "VARIABLES", "WHERE", "WITH", "WRITE_SYM", "X509_SYM", "XOR",
-  "COMPRESSED_SYM", "BIGINT", "BLOB_SYM", "CHAR_SYM", "CHANGED",
-  "COALESCE", "DATETIME", "DATE_SYM", "DECIMAL_SYM", "DOUBLE_SYM", "ENUM",
-  "FAST_SYM", "FLOAT_SYM", "INT_SYM", "LIMIT", "LONGBLOB", "LONGTEXT",
-  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "NUMERIC_SYM", "PRECISION",
-  "QUICK", "REAL", "SIGNED_SYM", "SMALLINT", "STRING_SYM", "TEXT_SYM",
-  "TIMESTAMP", "TIME_SYM", "TINYBLOB", "TINYINT", "TINYTEXT",
-  "ULONGLONG_NUM", "UNSIGNED", "VARBINARY", "VARCHAR", "VARYING",
-  "ZEROFILL", "AGAINST", "ATAN", "BETWEEN_SYM", "BIT_AND", "BIT_OR",
-  "CASE_SYM", "CONCAT", "CONCAT_WS", "CURDATE", "CURTIME", "DATABASE",
-  "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL", "DAY_HOUR_SYM",
-  "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM", "DECODE_SYM",
-  "DES_ENCRYPT_SYM", "DES_DECRYPT_SYM", "ELSE", "ELT_FUNC", "ENCODE_SYM",
-  "ENCRYPT", "EXPORT_SET", "EXTRACT_SYM", "FIELD_FUNC", "FORMAT_SYM",
-  "FOR_SYM", "FROM_UNIXTIME", "GROUP_UNIQUE_USERS", "HOUR_MINUTE_SYM",
-  "HOUR_SECOND_SYM", "HOUR_SYM", "IDENTIFIED_SYM", "IF", "INSERT_METHOD",
-  "INTERVAL_SYM", "LAST_INSERT_ID", "LEFT", "LOCATE", "MAKE_SET_SYM",
-  "MASTER_POS_WAIT", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MODE_SYM",
-  "MODIFY_SYM", "MONTH_SYM", "NOW_SYM", "PASSWORD", "POSITION_SYM",
-  "PROCEDURE", "RAND", "REPLACE", "RIGHT", "ROUND", "SECOND_SYM",
-  "SHARE_SYM", "SUBSTRING", "SUBSTRING_INDEX", "TRIM", "UDA_CHAR_SUM",
-  "UDA_FLOAT_SUM", "UDA_INT_SUM", "UDF_CHAR_FUNC", "UDF_FLOAT_FUNC",
-  "UDF_INT_FUNC", "UNIQUE_USERS", "UNIX_TIMESTAMP", "USER", "WEEK_SYM",
-  "WHEN_SYM", "WORK_SYM", "YEAR_MONTH_SYM", "YEAR_SYM", "YEARWEEK",
-  "BENCHMARK_SYM", "END", "THEN_SYM", "SQL_BIG_RESULT", "SQL_CACHE_SYM",
-  "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT",
-  "SQL_BUFFER_RESULT", "ISSUER_SYM", "CIPHER_SYM", "'|'", "'&'", "'-'",
-  "'+'", "'*'", "'/'", "'%'", "'~'", "NEG", "'^'", "'('", "')'", "','",
-  "'!'", "'{'", "'}'", "'@'", "'.'", "$accept", "query", "verb_clause",
-  "change", "@1", "master_defs", "master_def", "create", "@2", "@3", "@4",
-  "create2", "create2a", "@5", "create3", "@6", "@7", "create_select",
-  "@8", "opt_as", "opt_table_options", "table_options", "table_option",
-  "opt_if_not_exists", "opt_create_table_options", "create_table_options",
-  "create_table_option", "table_types", "row_types", "raid_types",
-  "merge_insert_types", "opt_select_from", "udf_func_type", "udf_type",
-  "field_list", "field_list_item", "column_def", "key_def",
-  "opt_check_constraint", "check_constraint", "opt_constraint",
-  "constraint", "field_spec", "@9", "type", "@10", "@11", "char",
-  "varchar", "int_type", "real_type", "float_options", "precision",
-  "field_options", "field_opt_list", "field_option", "opt_len",
-  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
-  "opt_binary", "references", "opt_on_delete", "opt_on_delete_list",
-  "opt_on_delete_item", "delete_option", "key_type", "key_or_index",
-  "keys_or_index", "opt_unique_or_fulltext", "key_list", "key_part",
-  "opt_ident", "string_list", "alter", "@12", "alter_list", "add_column",
-  "alter_list_item", "@13", "@14", "@15", "opt_column", "opt_ignore",
-  "opt_restrict", "opt_place", "opt_to", "slave", "start", "@16",
-  "slave_thread_opts", "slave_thread_opt", "restore", "@17", "backup",
-  "@18", "repair", "@19", "opt_mi_repair_type", "mi_repair_types",
-  "mi_repair_type", "analyze", "@20", "check", "@21", "opt_mi_check_type",
-  "mi_check_types", "mi_check_type", "optimize", "@22", "rename", "@23",
-  "table_to_table_list", "table_to_table", "select", "select_init", "@24",
-  "@25", "select_part2", "@26", "select_into", "select_from",
-  "select_options", "select_option_list", "select_option",
-  "select_lock_type", "select_item_list", "select_item", "remember_name",
-  "remember_end", "select_item2", "select_alias", "optional_braces",
-  "expr", "expr_expr", "no_in_expr", "no_and_expr", "simple_expr",
-  "udf_expr_list", "sum_expr", "@27", "@28", "in_sum_expr", "@29",
-  "cast_type", "expr_list", "@30", "expr_list2", "ident_list_arg",
-  "ident_list", "@31", "ident_list2", "opt_expr", "opt_else", "when_list",
-  "@32", "when_list2", "opt_pad", "join_table_list", "@33", "@34", "@35",
-  "normal_join", "join_table", "@36", "opt_outer", "opt_key_definition",
-  "key_usage_list", "@37", "key_usage_list2", "using_list", "interval",
-  "table_alias", "opt_table_alias", "opt_all", "where_clause",
-  "having_clause", "@38", "opt_escape", "group_clause", "group_list",
-  "olap_opt", "opt_order_clause", "order_clause", "@39", "order_list",
-  "order_dir", "limit_clause", "@40", "limit_options",
-  "delete_limit_clause", "ULONG_NUM", "ulonglong_num", "procedure_clause",
-  "@41", "procedure_list", "procedure_list2", "procedure_item", "into",
-  "@42", "do", "@43", "drop", "@44", "table_list", "table_name",
-  "if_exists", "opt_temporary", "insert", "@45", "@46", "replace", "@47",
-  "@48", "insert_lock_option", "replace_lock_option", "insert2",
-  "insert_table", "insert_field_spec", "@49", "opt_field_spec", "fields",
-  "insert_values", "@50", "@51", "values_list", "ident_eq_list",
-  "ident_eq_value", "equal", "opt_equal", "no_braces", "@52", "opt_values",
-  "values", "expr_or_default", "update", "@53", "@54", "update_list",
-  "opt_low_priority", "delete", "@55", "single_multi", "@56", "@57", "@58",
-  "table_wild_list", "table_wild_one", "opt_wild", "opt_delete_options",
-  "opt_delete_option", "truncate", "opt_table_sym", "show", "@59",
-  "show_param", "@60", "opt_db", "wild", "opt_full", "from_or_in",
-  "binlog_in", "binlog_from", "describe", "@61", "describe_command",
-  "opt_describe_column", "flush", "@62", "flush_options", "flush_option",
-  "@63", "opt_table_list", "reset", "@64", "reset_options", "reset_option",
-  "purge", "@65", "kill", "use", "load", "@66", "opt_local",
-  "load_data_lock", "opt_duplicate", "opt_field_term", "field_term_list",
-  "field_term", "opt_line_term", "line_term_list", "line_term",
-  "opt_ignore_lines", "text_literal", "text_string", "literal",
-  "insert_ident", "table_wild", "order_ident", "simple_ident",
-  "field_ident", "table_ident", "table_ident_ref", "ident",
-  "ident_or_text", "user", "keyword", "set", "@67", "opt_option",
-  "option_value_list", "option_type", "opt_var_type", "opt_var_ident_type",
-  "option_value", "internal_variable_name", "isolation_types",
-  "text_or_password", "set_expr_or_default", "lock", "@68",
-  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
-  "unlock", "handler", "@69", "handler_read_or_scan",
-  "handler_scan_function", "handler_rkey_function", "@70",
-  "handler_rkey_mode", "revoke", "@71", "grant", "@72", "grant_privileges",
-  "grant_privilege_list", "grant_privilege", "@73", "@74", "@75", "@76",
-  "opt_and", "require_list", "require_list_element", "opt_table",
-  "user_list", "grant_user", "opt_column_list", "column_list",
-  "column_list_id", "require_clause", "grant_options", "grant_option_list",
-  "grant_option", "begin", "@77", "opt_work", "commit", "rollback",
-  "savepoint", "opt_union", "union_list", "@78", "union_opt",
-  "optional_order_or_limit", "@79", "union_option", 0
+  "$", "error", "$undefined.", "END_OF_INPUT", "CLOSE_SYM", "HANDLER_SYM", 
+  "LAST_SYM", "NEXT_SYM", "PREV_SYM", "EQ", "EQUAL_SYM", "GE", "GT_SYM", 
+  "LE", "LT", "NE", "IS", "SHIFT_LEFT", "SHIFT_RIGHT", "SET_VAR", 
+  "ABORT_SYM", "ADD", "AFTER_SYM", "ALTER", "ANALYZE_SYM", "AVG_SYM", 
+  "BEGIN_SYM", "BINLOG_SYM", "CHANGE", "CLIENT_SYM", "COMMENT_SYM", 
+  "COMMIT_SYM", "COUNT_SYM", "CREATE", "CROSS", "CUBE_SYM", "DELETE_SYM", 
+  "DO_SYM", "DROP", "EVENTS_SYM", "EXECUTE_SYM", "FLUSH_SYM", "HASH_SYM", 
+  "IEEE754_TO_STRING_SYM", "INSERT", "IO_THREAD", "KILL_SYM", "LOAD", 
+  "LOCKS_SYM", "LOCK_SYM", "MAKE", "MASTER_SYM", "MAX_SYM", "MIN_SYM", 
+  "NONE_SYM", "OPTIMIZE", "ORDERED_CHECKSUM_SYM", "PURGE", "REPAIR", 
+  "REPLICATION", "RESET_SYM", "ROLLBACK_SYM", "ROLLUP_SYM", 
+  "SAVEPOINT_SYM", "SELECT_SYM", "SHOW", "SLAVE", "SQL_THREAD", 
+  "START_SYM", "STD_SYM", "STOP_SYM", "SUM_SYM", "SUPER_SYM", 
+  "TRUNCATE_SYM", "UNLOCK_SYM", "UNTIL_SYM", "UPDATE_SYM", 
+  "UNORDERED_CHECKSUM_SYM", "ACTION", "AGGREGATE_SYM", "ALL", "AND", "AS", 
+  "ASC", "AUTO_INC", "AVG_ROW_LENGTH", "BACKUP_SYM", "BERKELEY_DB_SYM", 
+  "BINARY", "BIT_SYM", "BOOL_SYM", "BOOLEAN_SYM", "BOTH", "BY", 
+  "CACHE_SYM", "CASCADE", "CAST_SYM", "CHARSET", "CHECKSUM_SYM", 
+  "CHECK_SYM", "COMMITTED_SYM", "COLUMNS", "COLUMN_SYM", "CONCURRENT", 
+  "CONSTRAINT", "CONVERT_SYM", "DATABASES", "DATA_SYM", "DEFAULT", 
+  "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DESC", "DESCRIBE", 
+  "DES_KEY_FILE", "DISABLE_SYM", "DISTINCT", "DYNAMIC_SYM", "ENABLE_SYM", 
+  "ENCLOSED", "ESCAPED", "DIRECTORY_SYM", "ESCAPE_SYM", "EXISTS", 
+  "EXTENDED_SYM", "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM", 
+  "FORCE_SYM", "FOREIGN", "FROM", "FULL", "FULLTEXT_SYM", "GLOBAL_SYM", 
+  "GRANT", "GRANTS", "GREATEST_SYM", "GROUP", "HAVING", "HEAP_SYM", 
+  "HEX_NUM", "HIGH_PRIORITY", "HOSTS_SYM", "IDENT", "IGNORE_SYM", "INDEX", 
+  "INDEXES", "INDEX_STATS_SYM", "INFILE", "INNER_SYM", "INNOBASE_SYM", 
+  "INTO", "IN_SYM", "ISOLATION", "ISAM_SYM", "JOIN_SYM", "KEYS", 
+  "KEY_SYM", "LEADING", "LEAST_SYM", "LEVEL_SYM", "LEX_HOSTNAME", "LIKE", 
+  "LINES", "LOCAL_SYM", "LOG_SYM", "LOGS_SYM", "LONG_NUM", "LONG_SYM", 
+  "LOW_PRIORITY", "MASTER_HOST_SYM", "MASTER_USER_SYM", 
+  "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM", 
+  "MASTER_PORT_SYM", "MASTER_CONNECT_RETRY_SYM", "MASTER_SERVER_ID_SYM", 
+  "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM", "MATCH", "MAX_ROWS", 
+  "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", 
+  "MAX_UPDATES_PER_HOUR", "MEDIUM_SYM", "MERGE_SYM", "MEMORY_SYM", 
+  "MIN_ROWS", "MYISAM_SYM", "NATIONAL_SYM", "NATURAL", "NEW_SYM", 
+  "NCHAR_SYM", "NOT", "NO_SYM", "NULL_SYM", "NUM", "OFFSET_SYM", "ON", 
+  "OPEN_SYM", "OPTION", "OPTIONALLY", "OR", "OR_OR_CONCAT", "ORDER_SYM", 
+  "OUTER", "OUTFILE", "DUMPFILE", "PACK_KEYS_SYM", "PARTIAL", 
+  "PRIMARY_SYM", "PRIVILEGES", "PROCESS", "PROCESSLIST_SYM", "QUERY_SYM", 
+  "RAID_0_SYM", "RAID_STRIPED_SYM", "RAID_TYPE", "RAID_CHUNKS", 
+  "RAID_CHUNKSIZE", "READ_SYM", "REAL_NUM", "REFERENCES", "REGEXP", 
+  "RELOAD", "RENAME", "REPEATABLE_SYM", "REQUIRE_SYM", "RESOURCES", 
+  "RESTORE_SYM", "RESTRICT", "REVOKE", "ROWS_SYM", "ROW_FORMAT_SYM", 
+  "ROW_SYM", "SET", "SERIALIZABLE_SYM", "SESSION_SYM", "SHUTDOWN", 
+  "SSL_SYM", "STARTING", "STATUS_SYM", "STRAIGHT_JOIN", "SUBJECT_SYM", 
+  "TABLES", "TABLE_SYM", "TABLE_STATS_SYM", "TEMPORARY", "TERMINATED", 
+  "TEXT_STRING", "TO_SYM", "TRAILING", "TRANSACTION_SYM", "TYPE_SYM", 
+  "FUNC_ARG0", "FUNC_ARG1", "FUNC_ARG2", "FUNC_ARG3", "UDF_RETURNS_SYM", 
+  "UDF_SONAME_SYM", "UDF_SYM", "UNCOMMITTED_SYM", "UNION_SYM", 
+  "UNIQUE_SYM", "USAGE", "USER_STATS_SYM", "USE_FRM", "USE_SYM", "USING", 
+  "VALUES", "VARIABLES", "WHERE", "WITH", "WRITE_SYM", "X509_SYM", "XOR", 
+  "COMPRESSED_SYM", "BIGINT", "BLOB_SYM", "CHAR_SYM", "CHANGED", 
+  "COALESCE", "DATETIME", "DATE_SYM", "DECIMAL_SYM", "DOUBLE_SYM", "ENUM", 
+  "FAST_SYM", "FLOAT_SYM", "INT_SYM", "LIMIT", "LONGBLOB", "LONGTEXT", 
+  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "NUMERIC_SYM", "PRECISION", 
+  "QUICK", "REAL", "SIGNED_SYM", "SMALLINT", "STRING_SYM", "TEXT_SYM", 
+  "TIMESTAMP", "TIME_SYM", "TINYBLOB", "TINYINT", "TINYTEXT", 
+  "ULONGLONG_NUM", "UNSIGNED", "VARBINARY", "VARCHAR", "VARYING", 
+  "ZEROFILL", "AGAINST", "ATAN", "BETWEEN_SYM", "BIT_AND", "BIT_OR", 
+  "CASE_SYM", "CONCAT", "CONCAT_WS", "CURDATE", "CURTIME", "DATABASE", 
+  "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL", "DAY_HOUR_SYM", 
+  "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM", "DECODE_SYM", 
+  "DES_ENCRYPT_SYM", "DES_DECRYPT_SYM", "ELSE", "ELT_FUNC", "ENCODE_SYM", 
+  "ENCRYPT", "EXPORT_SET", "EXTRACT_SYM", "FIELD_FUNC", "FORMAT_SYM", 
+  "FOR_SYM", "FROM_UNIXTIME", "GROUP_UNIQUE_USERS", "HOUR_MINUTE_SYM", 
+  "HOUR_SECOND_SYM", "HOUR_SYM", "IDENTIFIED_SYM", "IF", "INSERT_METHOD", 
+  "INTERVAL_SYM", "LAST_INSERT_ID", "LEFT", "LOCATE", "MAKE_SET_SYM", 
+  "MASTER_POS_WAIT", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MODE_SYM", 
+  "MODIFY_SYM", "MONTH_SYM", "NOW_SYM", "PASSWORD", "POSITION_SYM", 
+  "PROCEDURE", "RAND", "REPLACE", "RIGHT", "ROUND", "SECOND_SYM", 
+  "SHARE_SYM", "SUBSTRING", "SUBSTRING_INDEX", "TRIM", "UDA_CHAR_SUM", 
+  "UDA_FLOAT_SUM", "UDA_INT_SUM", "UDF_CHAR_FUNC", "UDF_FLOAT_FUNC", 
+  "UDF_INT_FUNC", "UNIQUE_USERS", "UNIX_TIMESTAMP", "USER", "WEEK_SYM", 
+  "WHEN_SYM", "WORK_SYM", "YEAR_MONTH_SYM", "YEAR_SYM", "YEARWEEK", 
+  "BENCHMARK_SYM", "END", "THEN_SYM", "SQL_BIG_RESULT", "SQL_CACHE_SYM", 
+  "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", 
+  "SQL_BUFFER_RESULT", "ISSUER_SYM", "CIPHER_SYM", "'|'", "'&'", "'-'", 
+  "'+'", "'*'", "'/'", "'%'", "NEG", "'~'", "'^'", "'('", "')'", "','", 
+  "'!'", "'{'", "'}'", "'@'", "'.'", "query", "verb_clause", "change", 
+  "@1", "master_defs", "master_def", "create", "@2", "@3", "@4", 
+  "create2", "create2a", "@5", "create3", "@6", "@7", "create_select", 
+  "@8", "opt_as", "opt_table_options", "table_options", "table_option", 
+  "opt_if_not_exists", "opt_create_table_options", "create_table_options", 
+  "create_table_option", "table_types", "row_types", "raid_types", 
+  "merge_insert_types", "opt_select_from", "udf_func_type", "udf_type", 
+  "field_list", "field_list_item", "column_def", "key_def", 
+  "opt_check_constraint", "check_constraint", "opt_constraint", 
+  "constraint", "field_spec", "@9", "type", "@10", "@11", "char", 
+  "varchar", "int_type", "real_type", "float_options", "precision", 
+  "field_options", "field_opt_list", "field_option", "opt_len", 
+  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute", 
+  "opt_binary", "references", "opt_on_delete", "opt_on_delete_list", 
+  "opt_on_delete_item", "delete_option", "key_type", "key_or_index", 
+  "keys_or_index", "opt_unique_or_fulltext", "key_list", "key_part", 
+  "opt_ident", "string_list", "alter", "@12", "alter_list", "add_column", 
+  "alter_list_item", "@13", "@14", "@15", "opt_column", "opt_ignore", 
+  "opt_restrict", "opt_place", "opt_to", "slave", "@16", "start", "@17", 
+  "slave_thread_opts", "slave_thread_opt", "slave_until", 
+  "slave_until_opts", "master_file_def", "restore", "@18", "backup", 
+  "@19", "repair", "@20", "opt_mi_repair_type", "mi_repair_types", 
+  "mi_repair_type", "analyze", "@21", "check", "@22", "opt_mi_check_type", 
+  "mi_check_types", "mi_check_type", "optimize", "@23", "rename", "@24", 
+  "table_to_table_list", "table_to_table", "select", "select_init", "@25", 
+  "@26", "select_part2", "@27", "select_into", "select_from", 
+  "select_options", "select_option_list", "select_option", 
+  "select_lock_type", "select_item_list", "select_item", "remember_name", 
+  "remember_end", "select_item2", "select_alias", "optional_braces", 
+  "expr", "expr_expr", "no_in_expr", "no_and_expr", "simple_expr", 
+  "udf_expr_list", "sum_expr", "@28", "@29", "@30", "@31", "@32", "@33", 
+  "@34", "@35", "in_sum_expr", "@36", "cast_type", "expr_list", "@37", 
+  "expr_list2", "ident_list_arg", "ident_list", "@38", "ident_list2", 
+  "opt_expr", "opt_else", "when_list", "@39", "when_list2", "opt_pad", 
+  "join_table_list", "@40", "@41", "@42", "normal_join", "join_table", 
+  "@43", "opt_outer", "opt_key_definition", "key_usage_list", "@44", 
+  "key_usage_list2", "using_list", "interval", "table_alias", 
+  "opt_table_alias", "opt_all", "where_clause", "having_clause", "@45", 
+  "opt_escape", "group_clause", "group_list", "olap_opt", 
+  "opt_order_clause", "order_clause", "@46", "order_list", "order_dir", 
+  "limit_clause", "@47", "limit_options", "delete_limit_clause", 
+  "ULONG_NUM", "ulonglong_num", "procedure_clause", "@48", 
+  "procedure_list", "procedure_list2", "procedure_item", "into", "@49", 
+  "do", "@50", "drop", "@51", "table_list", "table_name", "if_exists", 
+  "opt_temporary", "insert", "@52", "@53", "replace", "@54", "@55", 
+  "insert_lock_option", "replace_lock_option", "insert2", "insert_table", 
+  "insert_field_spec", "@56", "opt_field_spec", "fields", "insert_values", 
+  "@57", "@58", "values_list", "ident_eq_list", "ident_eq_value", "equal", 
+  "opt_equal", "no_braces", "@59", "opt_values", "values", 
+  "expr_or_default", "update", "@60", "@61", "update_list", 
+  "opt_low_priority", "delete", "@62", "single_multi", "@63", "@64", 
+  "@65", "table_wild_list", "table_wild_one", "opt_wild", 
+  "opt_delete_options", "opt_delete_option", "truncate", "opt_table_sym", 
+  "show", "@66", "show_param", "@67", "opt_db", "wild", "opt_full", 
+  "from_or_in", "binlog_in", "binlog_from", "describe", "@68", 
+  "describe_command", "opt_describe_column", "flush", "@69", 
+  "flush_options", "flush_option", "@70", "opt_table_list", "reset", 
+  "@71", "reset_options", "reset_option", "@72", "reset_slave_option", 
+  "purge", "@73", "kill", "use", "load", "@74", "opt_local", 
+  "load_data_lock", "opt_duplicate", "opt_field_term", "field_term_list", 
+  "field_term", "opt_line_term", "line_term_list", "line_term", 
+  "opt_ignore_lines", "text_literal", "text_string", "literal", 
+  "insert_ident", "table_wild", "order_ident", "simple_ident", 
+  "field_ident", "table_ident", "table_ident_ref", "ident", 
+  "ident_or_text", "user", "keyword", "set", "@75", "opt_option", 
+  "option_value_list", "option_type", "opt_var_type", 
+  "opt_var_ident_type", "option_value", "internal_variable_name", 
+  "isolation_types", "text_or_password", "set_expr_or_default", "lock", 
+  "@76", "table_or_tables", "table_lock_list", "table_lock", 
+  "lock_option", "unlock", "handler", "@77", "handler_read_or_scan", 
+  "handler_scan_function", "handler_rkey_function", "@78", 
+  "handler_rkey_mode", "revoke", "@79", "grant", "@80", 
+  "grant_privileges", "grant_privilege_list", "grant_privilege", "@81", 
+  "@82", "@83", "@84", "opt_and", "require_list", "require_list_element", 
+  "opt_table", "user_list", "grant_user", "opt_column_list", 
+  "column_list", "column_list_id", "require_clause", "grant_options", 
+  "grant_option_list", "grant_option", "begin", "@85", "opt_work", 
+  "commit", "rollback", "savepoint", "opt_union", "union_list", "@86", 
+  "union_opt", "optional_order_or_limit", "@87", "union_option", "make", 
+  "@88", "make_master_defs", "@89", "@90", "make_master_with_defs", 0
 };
 #endif
 
-# ifdef YYPRINT
-/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
-   token YYLEX-NUM.  */
-static const unsigned short yytoknum[] =
-{
-       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
-     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
-     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
-     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
-     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
-     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
-     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
-     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
-     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
-     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
-     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
-     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
-     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
-     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
-     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
-     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
-     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
-     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
-     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
-     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
-     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
-     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
-     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
-     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
-     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
-     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
-     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
-     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
-     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
-     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
-     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
-     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
-     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
-     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
-     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
-     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
-     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
-     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
-     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
-     645,   646,   647,   648,   124,    38,    45,    43,    42,    47,
-      37,   126,   649,    94,    40,    41,    44,    33,   123,   125,
-      64,    46
-};
-# endif
-
-/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
-static const unsigned short yyr1[] =
+/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
+static const short yyr1[] =
 {
-       0,   412,   413,   413,   414,   414,   414,   414,   414,   414,
-     414,   414,   414,   414,   414,   414,   414,   414,   414,   414,
-     414,   414,   414,   414,   414,   414,   414,   414,   414,   414,
-     414,   414,   414,   414,   414,   414,   414,   414,   414,   414,
-     414,   414,   416,   415,   417,   417,   418,   418,   418,   418,
-     418,   418,   418,   418,   418,   420,   419,   421,   419,   419,
-     422,   419,   423,   423,   424,   425,   424,   426,   427,   426,
-     428,   426,   430,   429,   431,   431,   432,   432,   433,   433,
-     434,   435,   435,   436,   436,   437,   437,   438,   438,   438,
-     438,   438,   438,   438,   438,   438,   438,   438,   438,   438,
-     438,   438,   438,   438,   438,   438,   438,   438,   439,   439,
-     439,   439,   439,   439,   439,   440,   440,   440,   440,   441,
-     441,   441,   442,   442,   442,   443,   443,   444,   444,   445,
-     445,   445,   446,   446,   447,   447,   448,   448,   449,   449,
-     449,   449,   450,   450,   451,   452,   452,   453,   455,   454,
-     456,   456,   456,   456,   456,   456,   456,   456,   456,   456,
-     456,   456,   456,   456,   456,   456,   456,   456,   456,   456,
-     456,   456,   456,   456,   456,   456,   456,   456,   457,   456,
-     458,   456,   459,   459,   459,   460,   460,   460,   460,   461,
-     461,   461,   461,   461,   462,   462,   462,   463,   463,   463,
-     464,   465,   465,   466,   466,   467,   467,   467,   468,   468,
-     469,   469,   470,   470,   471,   471,   472,   472,   472,   472,
-     472,   472,   472,   472,   473,   473,   473,   474,   474,   475,
-     475,   476,   476,   477,   477,   477,   477,   478,   478,   478,
-     478,   478,   479,   479,   479,   479,   479,   479,   480,   480,
-     481,   481,   481,   482,   482,   482,   483,   483,   484,   484,
-     485,   485,   486,   486,   488,   487,   489,   489,   489,   490,
-     491,   491,   491,   492,   491,   493,   494,   491,   491,   491,
-     491,   491,   491,   491,   491,   491,   491,   491,   491,   495,
-     495,   496,   496,   497,   497,   497,   498,   498,   498,   499,
-     499,   499,   499,   500,   500,   500,   500,   502,   501,   503,
-     503,   504,   504,   504,   506,   505,   508,   507,   510,   509,
-     511,   511,   512,   512,   513,   513,   513,   515,   514,   517,
-     516,   518,   518,   519,   519,   520,   520,   520,   520,   520,
-     522,   521,   524,   523,   525,   525,   526,   527,   529,   528,
-     530,   528,   532,   531,   533,   533,   533,   533,   533,   534,
-     535,   535,   536,   536,   537,   537,   537,   537,   537,   537,
-     537,   537,   537,   537,   538,   538,   538,   539,   539,   539,
-     540,   541,   542,   543,   543,   544,   544,   544,   544,   544,
-     545,   545,   546,   546,   547,   547,   547,   547,   547,   547,
-     547,   547,   547,   547,   547,   547,   547,   547,   547,   547,
-     547,   547,   547,   547,   547,   547,   547,   547,   547,   547,
-     547,   547,   547,   547,   547,   547,   547,   548,   548,   548,
-     548,   548,   548,   548,   548,   548,   548,   548,   548,   548,
-     548,   548,   548,   548,   548,   548,   548,   548,   548,   548,
-     548,   548,   548,   548,   548,   548,   548,   548,   548,   549,
-     549,   549,   549,   549,   549,   549,   549,   549,   549,   549,
-     549,   549,   549,   549,   549,   549,   549,   549,   549,   549,
-     549,   549,   549,   549,   549,   549,   549,   549,   549,   549,
-     549,   549,   550,   550,   550,   550,   550,   550,   550,   550,
-     550,   550,   550,   550,   550,   550,   550,   550,   550,   550,
-     550,   550,   550,   550,   550,   550,   550,   550,   550,   550,
-     550,   550,   550,   550,   550,   550,   550,   550,   550,   550,
-     550,   550,   550,   550,   550,   550,   550,   550,   550,   550,
-     550,   550,   550,   550,   550,   550,   550,   550,   550,   550,
-     550,   550,   550,   550,   550,   550,   550,   550,   550,   550,
-     550,   550,   550,   550,   550,   550,   550,   550,   550,   550,
-     550,   550,   550,   550,   550,   550,   550,   550,   550,   550,
-     550,   550,   550,   550,   550,   550,   550,   550,   550,   550,
-     550,   550,   550,   550,   550,   550,   550,   550,   550,   550,
-     551,   551,   552,   552,   552,   552,   552,   553,   554,   552,
-     552,   552,   552,   552,   552,   556,   555,   557,   557,   557,
-     557,   557,   557,   557,   557,   557,   559,   558,   560,   560,
-     561,   561,   563,   562,   564,   564,   565,   565,   566,   566,
-     568,   567,   569,   569,   570,   570,   571,   571,   571,   571,
-     571,   571,   572,   571,   571,   573,   571,   571,   571,   574,
-     571,   571,   571,   575,   575,   575,   577,   576,   576,   578,
-     578,   579,   579,   579,   579,   581,   580,   582,   582,   582,
-     583,   583,   584,   584,   584,   584,   584,   584,   584,   584,
-     584,   584,   584,   584,   584,   585,   585,   585,   586,   586,
-     587,   587,   588,   588,   589,   590,   589,   591,   591,   592,
-     592,   593,   593,   594,   594,   594,   595,   595,   597,   596,
-     598,   598,   599,   599,   599,   600,   601,   600,   602,   602,
-     602,   603,   603,   604,   604,   604,   604,   604,   605,   605,
-     605,   605,   605,   606,   607,   606,   608,   608,   609,   609,
-     610,   612,   611,   611,   614,   613,   615,   616,   615,   615,
-     615,   617,   617,   618,   619,   619,   620,   620,   622,   623,
-     621,   625,   626,   624,   627,   627,   627,   627,   628,   628,
-     629,   629,   630,   631,   631,   631,   632,   631,   633,   633,
-     633,   634,   634,   635,   636,   635,   637,   635,   638,   638,
-     639,   639,   640,   641,   641,   642,   642,   644,   643,   645,
-     645,   646,   646,   647,   647,   649,   650,   648,   651,   651,
-     652,   652,   654,   653,   656,   655,   657,   655,   658,   655,
-     659,   659,   660,   660,   661,   661,   662,   662,   663,   663,
-     664,   665,   665,   667,   666,   668,   668,   668,   668,   668,
-     668,   668,   668,   669,   668,   668,   668,   668,   668,   668,
-     668,   668,   668,   668,   668,   670,   670,   671,   671,   672,
-     672,   673,   673,   674,   674,   675,   675,   677,   676,   676,
-     678,   678,   679,   679,   679,   681,   680,   682,   682,   684,
-     683,   683,   683,   683,   683,   683,   683,   683,   683,   683,
-     683,   685,   685,   687,   686,   688,   688,   689,   689,   689,
-     691,   690,   692,   693,   695,   694,   694,   694,   696,   696,
-     697,   697,   697,   698,   698,   698,   699,   699,   700,   700,
-     701,   701,   701,   701,   702,   702,   703,   703,   704,   704,
-     705,   705,   706,   706,   707,   707,   708,   708,   708,   708,
-     708,   708,   708,   708,   708,   708,   708,   709,   709,   710,
-     710,   711,   712,   712,   712,   712,   713,   713,   713,   714,
-     714,   714,   715,   715,   716,   716,   717,   717,   717,   718,
-     718,   719,   719,   719,   719,   719,   719,   719,   719,   719,
-     719,   719,   719,   719,   719,   719,   719,   719,   719,   719,
-     719,   719,   719,   719,   719,   719,   719,   719,   719,   719,
-     719,   719,   719,   719,   719,   719,   719,   719,   719,   719,
-     719,   719,   719,   719,   719,   719,   719,   719,   719,   719,
-     719,   719,   719,   719,   719,   719,   719,   719,   719,   719,
-     719,   719,   719,   719,   719,   719,   719,   719,   719,   719,
-     719,   719,   719,   719,   719,   719,   719,   719,   719,   719,
-     719,   719,   719,   719,   719,   719,   719,   719,   719,   719,
-     719,   719,   719,   719,   719,   719,   719,   719,   719,   719,
-     719,   719,   719,   719,   719,   719,   719,   719,   719,   719,
-     719,   719,   719,   719,   719,   719,   719,   719,   719,   719,
-     719,   719,   719,   719,   719,   719,   719,   719,   719,   719,
-     719,   719,   719,   719,   719,   719,   719,   719,   719,   719,
-     719,   719,   719,   719,   719,   719,   719,   719,   719,   719,
-     719,   719,   719,   719,   719,   719,   719,   719,   719,   721,
-     720,   722,   722,   723,   723,   724,   724,   724,   724,   725,
-     725,   725,   725,   726,   726,   726,   726,   727,   727,   727,
-     727,   727,   727,   727,   728,   729,   729,   729,   729,   730,
-     730,   731,   731,   731,   731,   733,   732,   734,   734,   735,
-     735,   736,   737,   737,   737,   737,   738,   739,   739,   740,
-     739,   741,   741,   742,   742,   743,   743,   743,   743,   744,
-     743,   745,   745,   745,   745,   745,   747,   746,   749,   748,
-     750,   750,   750,   751,   751,   753,   752,   754,   752,   755,
-     752,   756,   752,   752,   752,   752,   752,   752,   752,   752,
-     752,   752,   752,   752,   752,   752,   752,   752,   752,   752,
-     752,   757,   757,   758,   758,   759,   759,   759,   760,   760,
-     760,   760,   761,   761,   762,   762,   762,   763,   763,   764,
-     764,   765,   766,   766,   766,   766,   766,   767,   767,   768,
-     768,   769,   769,   769,   769,   771,   770,   772,   772,   773,
-     774,   774,   775,   776,   776,   778,   777,   779,   779,   780,
-     781,   780,   782,   782,   782
+       0,   421,   421,   422,   422,   422,   422,   422,   422,   422,
+     422,   422,   422,   422,   422,   422,   422,   422,   422,   422,
+     422,   422,   422,   422,   422,   422,   422,   422,   422,   422,
+     422,   422,   422,   422,   422,   422,   422,   422,   422,   422,
+     422,   422,   424,   423,   425,   425,   426,   426,   426,   426,
+     426,   426,   426,   426,   426,   428,   427,   429,   427,   427,
+     430,   427,   431,   431,   432,   433,   432,   434,   435,   434,
+     436,   434,   438,   437,   439,   439,   440,   440,   441,   441,
+     442,   443,   443,   444,   444,   445,   445,   446,   446,   446,
+     446,   446,   446,   446,   446,   446,   446,   446,   446,   446,
+     446,   446,   446,   446,   446,   446,   446,   446,   447,   447,
+     447,   447,   447,   447,   447,   448,   448,   448,   448,   449,
+     449,   449,   450,   450,   450,   451,   451,   452,   452,   453,
+     453,   453,   454,   454,   455,   455,   456,   456,   457,   457,
+     457,   457,   458,   458,   459,   460,   460,   461,   463,   462,
+     464,   464,   464,   464,   464,   464,   464,   464,   464,   464,
+     464,   464,   464,   464,   464,   464,   464,   464,   464,   464,
+     464,   464,   464,   464,   464,   464,   464,   464,   465,   464,
+     466,   464,   467,   467,   467,   468,   468,   468,   468,   469,
+     469,   469,   469,   469,   470,   470,   470,   471,   471,   471,
+     472,   473,   473,   474,   474,   475,   475,   475,   476,   476,
+     477,   477,   478,   478,   479,   479,   480,   480,   480,   480,
+     480,   480,   480,   480,   481,   481,   481,   482,   482,   483,
+     483,   484,   484,   485,   485,   485,   485,   486,   486,   486,
+     486,   486,   487,   487,   487,   487,   487,   487,   488,   488,
+     489,   489,   489,   490,   490,   490,   491,   491,   492,   492,
+     493,   493,   494,   494,   496,   495,   497,   497,   497,   498,
+     499,   499,   499,   500,   499,   501,   502,   499,   499,   499,
+     499,   499,   499,   499,   499,   499,   499,   499,   499,   503,
+     503,   504,   504,   505,   505,   505,   506,   506,   506,   507,
+     507,   507,   507,   509,   508,   508,   508,   508,   511,   510,
+     512,   512,   513,   513,   513,   514,   514,   515,   515,   516,
+     516,   518,   517,   520,   519,   522,   521,   523,   523,   524,
+     524,   525,   525,   525,   527,   526,   529,   528,   530,   530,
+     531,   531,   532,   532,   532,   532,   532,   534,   533,   536,
+     535,   537,   537,   538,   539,   541,   540,   542,   540,   544,
+     543,   545,   545,   545,   545,   545,   546,   547,   547,   548,
+     548,   549,   549,   549,   549,   549,   549,   549,   549,   549,
+     549,   550,   550,   550,   551,   551,   551,   552,   553,   554,
+     555,   555,   556,   556,   556,   556,   556,   557,   557,   558,
+     558,   559,   559,   559,   559,   559,   559,   559,   559,   559,
+     559,   559,   559,   559,   559,   559,   559,   559,   559,   559,
+     559,   559,   559,   559,   559,   559,   559,   559,   559,   559,
+     559,   559,   559,   559,   560,   560,   560,   560,   560,   560,
+     560,   560,   560,   560,   560,   560,   560,   560,   560,   560,
+     560,   560,   560,   560,   560,   560,   560,   560,   560,   560,
+     560,   560,   560,   560,   560,   560,   561,   561,   561,   561,
+     561,   561,   561,   561,   561,   561,   561,   561,   561,   561,
+     561,   561,   561,   561,   561,   561,   561,   561,   561,   561,
+     561,   561,   561,   561,   561,   561,   561,   561,   561,   562,
+     562,   562,   562,   562,   562,   562,   562,   562,   562,   562,
+     562,   562,   562,   562,   562,   562,   562,   562,   562,   562,
+     562,   562,   562,   562,   562,   562,   562,   562,   562,   562,
+     562,   562,   562,   562,   562,   562,   562,   562,   562,   562,
+     562,   562,   562,   562,   562,   562,   562,   562,   562,   562,
+     562,   562,   562,   562,   562,   562,   562,   562,   562,   562,
+     562,   562,   562,   562,   562,   562,   562,   562,   562,   562,
+     562,   562,   562,   562,   562,   562,   562,   562,   562,   562,
+     562,   562,   562,   562,   562,   562,   562,   562,   562,   562,
+     562,   562,   562,   562,   562,   562,   562,   562,   562,   562,
+     562,   562,   562,   562,   562,   562,   562,   563,   563,   564,
+     564,   564,   564,   564,   565,   566,   564,   564,   567,   568,
+     564,   569,   570,   564,   571,   572,   564,   564,   564,   564,
+     564,   574,   573,   575,   575,   575,   575,   575,   575,   575,
+     575,   575,   577,   576,   578,   578,   579,   579,   581,   580,
+     582,   582,   583,   583,   584,   584,   586,   585,   587,   587,
+     588,   588,   589,   589,   589,   589,   589,   589,   590,   589,
+     589,   591,   589,   589,   589,   592,   589,   589,   589,   593,
+     593,   593,   595,   594,   594,   596,   596,   597,   597,   597,
+     597,   599,   598,   600,   600,   600,   601,   601,   602,   602,
+     602,   602,   602,   602,   602,   602,   602,   602,   602,   602,
+     602,   603,   603,   603,   604,   604,   605,   605,   606,   606,
+     607,   608,   607,   609,   609,   610,   610,   611,   611,   612,
+     612,   612,   613,   613,   615,   614,   616,   616,   617,   617,
+     617,   618,   619,   618,   620,   620,   620,   621,   621,   622,
+     622,   622,   622,   622,   623,   623,   623,   623,   623,   624,
+     625,   624,   626,   626,   627,   627,   628,   630,   629,   629,
+     632,   631,   633,   634,   633,   633,   633,   635,   635,   636,
+     637,   637,   638,   638,   640,   641,   639,   643,   644,   642,
+     645,   645,   645,   645,   646,   646,   647,   647,   648,   649,
+     649,   649,   650,   649,   651,   651,   651,   652,   652,   653,
+     654,   653,   655,   653,   656,   656,   657,   657,   658,   659,
+     659,   660,   660,   662,   661,   663,   663,   664,   664,   665,
+     665,   667,   668,   666,   669,   669,   670,   670,   672,   671,
+     674,   673,   675,   673,   676,   673,   677,   677,   678,   678,
+     679,   679,   680,   680,   681,   681,   682,   683,   683,   685,
+     684,   686,   686,   686,   686,   686,   686,   686,   686,   687,
+     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
+     686,   686,   686,   686,   688,   688,   689,   689,   690,   690,
+     691,   691,   692,   692,   693,   693,   695,   694,   694,   696,
+     696,   697,   697,   697,   699,   698,   700,   700,   702,   701,
+     701,   701,   701,   701,   701,   701,   701,   701,   701,   701,
+     701,   701,   703,   703,   705,   704,   706,   706,   708,   707,
+     707,   707,   709,   709,   711,   710,   712,   713,   715,   714,
+     714,   714,   716,   716,   717,   717,   717,   718,   718,   718,
+     719,   719,   720,   720,   721,   721,   721,   721,   722,   722,
+     723,   723,   724,   724,   725,   725,   726,   726,   727,   727,
+     728,   728,   728,   728,   728,   728,   728,   728,   728,   728,
+     728,   729,   729,   730,   730,   731,   732,   732,   732,   732,
+     733,   733,   733,   734,   734,   734,   735,   735,   736,   736,
+     737,   737,   737,   738,   738,   739,   739,   739,   739,   739,
+     739,   739,   739,   739,   739,   739,   739,   739,   739,   739,
+     739,   739,   739,   739,   739,   739,   739,   739,   739,   739,
+     739,   739,   739,   739,   739,   739,   739,   739,   739,   739,
+     739,   739,   739,   739,   739,   739,   739,   739,   739,   739,
+     739,   739,   739,   739,   739,   739,   739,   739,   739,   739,
+     739,   739,   739,   739,   739,   739,   739,   739,   739,   739,
+     739,   739,   739,   739,   739,   739,   739,   739,   739,   739,
+     739,   739,   739,   739,   739,   739,   739,   739,   739,   739,
+     739,   739,   739,   739,   739,   739,   739,   739,   739,   739,
+     739,   739,   739,   739,   739,   739,   739,   739,   739,   739,
+     739,   739,   739,   739,   739,   739,   739,   739,   739,   739,
+     739,   739,   739,   739,   739,   739,   739,   739,   739,   739,
+     739,   739,   739,   739,   739,   739,   739,   739,   739,   739,
+     739,   739,   739,   739,   739,   739,   739,   739,   739,   739,
+     739,   739,   739,   739,   739,   739,   739,   739,   739,   739,
+     739,   739,   739,   739,   739,   739,   741,   740,   742,   742,
+     743,   743,   744,   744,   744,   744,   745,   745,   745,   745,
+     746,   746,   746,   746,   747,   747,   747,   747,   747,   747,
+     747,   748,   749,   749,   749,   749,   750,   750,   751,   751,
+     751,   751,   753,   752,   754,   754,   755,   755,   756,   757,
+     757,   757,   757,   758,   759,   759,   760,   759,   761,   761,
+     762,   762,   763,   763,   763,   763,   764,   763,   765,   765,
+     765,   765,   765,   767,   766,   769,   768,   770,   770,   770,
+     771,   771,   773,   772,   774,   772,   775,   772,   776,   772,
+     772,   772,   772,   772,   772,   772,   772,   772,   772,   772,
+     772,   772,   772,   772,   772,   772,   772,   772,   777,   777,
+     778,   778,   779,   779,   779,   780,   780,   780,   780,   781,
+     781,   782,   782,   782,   783,   783,   784,   784,   785,   786,
+     786,   786,   786,   786,   787,   787,   788,   788,   789,   789,
+     789,   789,   791,   790,   792,   792,   793,   794,   794,   795,
+     796,   796,   798,   797,   799,   799,   800,   801,   800,   802,
+     802,   802,   804,   803,   806,   805,   807,   805,   805,   805,
+     805,   808,   808
 };
 
-/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
-static const unsigned char yyr2[] =
+/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
+static const short yyr2[] =
 {
-       0,     2,     1,     2,     1,     1,     1,     1,     1,     1,
+       0,     1,     2,     1,     1,     1,     1,     1,     1,     1,
        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
@@ -2190,75 +1598,77 @@
        3,     2,     4,     0,     6,     0,     0,     8,     4,     3,
        4,     3,     2,     2,     6,     5,     3,     1,     1,     0,
        1,     0,     1,     0,     1,     1,     0,     2,     1,     0,
-       1,     1,     1,     3,     3,     3,     3,     0,     3,     1,
-       3,     0,     1,     1,     0,     6,     0,     6,     0,     5,
-       0,     1,     1,     2,     1,     1,     1,     0,     5,     0,
-       5,     0,     1,     1,     2,     1,     1,     1,     1,     1,
-       0,     5,     0,     4,     1,     3,     3,     1,     0,     4,
-       0,     6,     0,     5,     1,     1,     1,     2,     2,     8,
-       0,     1,     2,     1,     1,     1,     1,     1,     1,     1,
-       1,     1,     1,     1,     0,     2,     4,     3,     1,     1,
-       4,     0,     0,     1,     1,     0,     2,     2,     1,     1,
-       0,     2,     1,     1,     5,     6,     5,     6,     3,     3,
-       3,     3,     4,     5,     3,     4,     3,     4,     3,     3,
+       1,     1,     1,     0,     5,     3,     3,     3,     0,     3,
+       1,     3,     0,     1,     1,     0,     2,     1,     3,     3,
+       3,     0,     6,     0,     6,     0,     5,     0,     1,     1,
+       2,     1,     1,     1,     0,     5,     0,     5,     0,     1,
+       1,     2,     1,     1,     1,     1,     1,     0,     5,     0,
+       4,     1,     3,     3,     1,     0,     4,     0,     6,     0,
+       5,     1,     1,     1,     2,     2,     8,     0,     1,     2,
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     0,     2,     4,     3,     1,     1,     4,     0,     0,
+       1,     1,     0,     2,     2,     1,     1,     0,     2,     1,
+       1,     5,     6,     5,     6,     3,     3,     3,     3,     4,
+       5,     3,     4,     3,     4,     3,     3,     3,     3,     3,
        3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
-       3,     3,     3,     3,     3,     5,     5,     5,     6,     3,
+       3,     3,     5,     5,     5,     6,     3,     3,     3,     3,
+       4,     5,     3,     4,     3,     4,     3,     3,     3,     3,
+       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
+       3,     3,     3,     5,     5,     1,     5,     6,     5,     6,
        3,     3,     3,     4,     5,     3,     4,     3,     4,     3,
        3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
-       3,     3,     3,     3,     3,     3,     5,     5,     1,     5,
-       6,     5,     6,     3,     3,     3,     4,     5,     3,     4,
-       3,     4,     3,     3,     3,     3,     3,     3,     3,     3,
-       3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
-       5,     1,     1,     1,     4,     2,     4,     1,     2,     2,
-       2,     2,     3,     4,     6,     9,     2,     6,     6,     6,
-       3,     4,     6,     8,     4,     6,     4,     4,     4,     6,
-       2,     2,     4,     8,     8,     3,     6,     6,     4,     6,
-       6,     6,     4,     6,     4,     6,     8,    10,    12,     6,
-       4,     6,     6,     4,     8,    10,     5,     6,     3,     4,
-       6,     6,     8,     6,     6,     4,     6,     6,     8,     4,
-       4,     2,     4,     4,     6,     4,     3,     8,     6,     4,
-       6,     4,     8,     6,     8,     6,     8,     4,     7,     7,
-       7,     6,     6,     4,     4,     4,     4,     4,     4,    10,
-       3,     4,     3,     4,     6,     4,     4,     6,     6,     6,
-       0,     1,     4,     4,     4,     5,     4,     0,     0,     7,
-      10,     4,     4,     4,     4,     0,     3,     1,     1,     1,
-       2,     1,     2,     1,     1,     1,     0,     2,     1,     3,
-       1,     3,     0,     2,     1,     3,     0,     1,     0,     2,
-       0,     2,     3,     5,     0,     1,     3,     1,     3,     3,
-       3,     5,     0,     8,     7,     0,    10,     6,     7,     0,
-      10,     6,     4,     1,     2,     2,     0,     4,    10,     0,
-       1,     0,     2,     2,     2,     0,     5,     3,     1,     1,
-       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
-       1,     1,     1,     1,     1,     0,     1,     1,     0,     2,
-       0,     1,     0,     2,     0,     0,     3,     2,     0,     0,
-       4,     4,     2,     0,     2,     2,     0,     1,     0,     4,
-       4,     2,     0,     1,     1,     0,     0,     3,     1,     3,
-       3,     0,     2,     1,     1,     1,     1,     1,     1,     1,
-       1,     1,     1,     0,     0,     6,     0,     1,     3,     1,
-       2,     0,     6,     3,     0,     3,     6,     0,     6,     4,
-       3,     1,     3,     1,     0,     2,     0,     1,     0,     0,
-       7,     0,     0,     6,     0,     1,     1,     1,     1,     1,
-       2,     1,     1,     1,     3,     4,     0,     3,     0,     3,
-       2,     3,     1,     2,     0,     3,     0,     5,     3,     1,
-       3,     1,     3,     1,     1,     0,     1,     0,     4,     0,
-       1,     3,     1,     1,     1,     0,     0,    11,     5,     3,
-       0,     1,     0,     4,     0,     6,     0,     5,     0,     6,
-       1,     3,     2,     4,     0,     2,     0,     2,     1,     1,
-       3,     0,     1,     0,     3,     2,     3,     4,     4,     6,
-      16,     2,     2,     0,     6,     4,     2,     2,     2,     3,
-       1,     3,     3,     2,     2,     0,     2,     0,     2,     0,
-       1,     1,     1,     0,     2,     0,     2,     0,     4,     2,
-       1,     1,     0,     1,     1,     0,     3,     3,     1,     0,
-       3,     4,     2,     1,     1,     1,     1,     1,     1,     1,
-       1,     0,     1,     0,     3,     3,     1,     1,     1,     2,
-       0,     6,     2,     2,     0,    15,     5,     4,     0,     1,
-       0,     1,     1,     0,     1,     1,     0,     2,     2,     1,
-       3,     4,     3,     3,     0,     2,     2,     1,     3,     3,
-       0,     3,     1,     2,     1,     1,     1,     1,     1,     1,
-       1,     1,     1,     1,     2,     2,     2,     1,     1,     3,
-       5,     1,     1,     3,     4,     5,     1,     3,     2,     1,
-       3,     2,     1,     3,     1,     1,     1,     1,     1,     1,
-       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       3,     3,     3,     3,     3,     3,     5,     5,     1,     1,
+       1,     4,     2,     4,     1,     2,     2,     2,     2,     3,
+       4,     6,     9,     2,     6,     6,     6,     3,     4,     6,
+       8,     4,     6,     4,     4,     4,     6,     2,     2,     4,
+       8,     8,     3,     6,     6,     4,     6,     6,     6,     4,
+       6,     4,     6,     8,    10,    12,     6,     4,     6,     6,
+       4,     8,    10,     5,     6,     3,     4,     6,     6,     8,
+       6,     6,     4,     6,     6,     8,     4,     4,     2,     4,
+       4,     6,     4,     3,     8,     6,     4,     6,     4,     8,
+       6,     8,     6,     8,     4,     7,     7,     7,     6,     6,
+       4,     4,     4,     4,     4,     4,    10,     3,     4,     3,
+       4,     6,     4,     4,     6,     6,     6,     0,     1,     4,
+       4,     4,     5,     4,     0,     0,     7,    10,     0,     0,
+       6,     0,     0,     6,     0,     0,     6,     4,     4,     4,
+       4,     0,     3,     1,     1,     1,     2,     1,     2,     1,
+       1,     1,     0,     2,     1,     3,     1,     3,     0,     2,
+       1,     3,     0,     1,     0,     2,     0,     2,     3,     5,
+       0,     1,     3,     1,     3,     3,     3,     5,     0,     8,
+       7,     0,    10,     6,     7,     0,    10,     6,     4,     1,
+       2,     2,     0,     4,    10,     0,     1,     0,     2,     2,
+       2,     0,     5,     3,     1,     1,     1,     3,     1,     1,
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     0,     1,     1,     0,     2,     0,     1,     0,     2,
+       0,     0,     3,     2,     0,     0,     4,     4,     2,     0,
+       2,     2,     0,     1,     0,     4,     4,     2,     0,     1,
+       1,     0,     0,     3,     1,     3,     3,     0,     2,     1,
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
+       0,     6,     0,     1,     3,     1,     2,     0,     6,     3,
+       0,     3,     6,     0,     6,     4,     3,     1,     3,     1,
+       0,     2,     0,     1,     0,     0,     7,     0,     0,     6,
+       0,     1,     1,     1,     1,     1,     2,     1,     1,     1,
+       3,     4,     0,     3,     0,     3,     2,     3,     1,     2,
+       0,     3,     0,     5,     3,     1,     3,     1,     3,     1,
+       1,     0,     1,     0,     4,     0,     1,     3,     1,     1,
+       1,     0,     0,    11,     5,     3,     0,     1,     0,     4,
+       0,     6,     0,     5,     0,     6,     1,     3,     2,     4,
+       0,     2,     0,     2,     1,     1,     3,     0,     1,     0,
+       3,     2,     3,     4,     4,     6,    16,     2,     2,     0,
+       6,     4,     2,     2,     2,     2,     2,     2,     3,     1,
+       3,     3,     2,     2,     0,     2,     0,     2,     0,     1,
+       1,     1,     0,     2,     0,     2,     0,     4,     2,     1,
+       1,     0,     1,     1,     0,     3,     3,     1,     0,     3,
+       4,     2,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     0,     1,     0,     3,     3,     1,     0,     3,
+       1,     2,     0,     3,     0,     6,     2,     2,     0,    15,
+       5,     4,     0,     1,     0,     1,     1,     0,     1,     1,
+       0,     2,     2,     1,     3,     4,     3,     3,     0,     2,
+       2,     1,     3,     3,     0,     3,     1,     2,     1,     1,
+       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
+       2,     1,     1,     3,     5,     1,     1,     3,     4,     5,
+       1,     3,     2,     1,     3,     2,     1,     3,     1,     1,
+       1,     1,     1,     1,     3,     1,     1,     1,     1,     1,
        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
@@ -2273,6158 +1683,6322 @@
        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
-       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
-       4,     0,     1,     2,     4,     0,     1,     1,     1,     0,
-       1,     1,     1,     0,     2,     2,     2,     4,     3,     6,
-       4,     4,     3,     5,     1,     2,     2,     2,     1,     1,
-       4,     1,     1,     1,     1,     0,     4,     1,     1,     1,
-       3,     3,     1,     1,     2,     2,     2,     4,     3,     0,
-       7,     1,     2,     1,     1,     1,     1,     1,     1,     0,
-       5,     1,     1,     1,     1,     1,     0,     7,     0,     9,
-       1,     2,     1,     1,     3,     0,     3,     0,     3,     0,
-       3,     0,     3,     1,     1,     1,     1,     1,     1,     1,
-       1,     1,     1,     1,     2,     2,     1,     3,     2,     2,
-       2,     0,     1,     3,     1,     2,     2,     2,     1,     3,
-       3,     1,     1,     3,     4,     5,     1,     0,     3,     3,
-       1,     1,     0,     2,     2,     2,     2,     0,     2,     2,
-       1,     2,     2,     2,     2,     0,     3,     0,     1,     1,
-       1,     4,     2,     0,     1,     0,     4,     1,     1,     0,
-       0,     3,     0,     1,     1
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     1,     0,     4,     0,     1,
+       2,     4,     0,     1,     1,     1,     0,     1,     1,     1,
+       0,     2,     2,     2,     4,     3,     6,     4,     4,     3,
+       5,     1,     2,     2,     2,     1,     1,     4,     1,     1,
+       1,     1,     0,     4,     1,     1,     1,     3,     3,     1,
+       1,     2,     2,     2,     4,     3,     0,     7,     1,     2,
+       1,     1,     1,     1,     1,     1,     0,     5,     1,     1,
+       1,     1,     1,     0,     7,     0,     9,     1,     2,     1,
+       1,     3,     0,     3,     0,     3,     0,     3,     0,     3,
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     2,     2,     1,     3,     2,     2,     2,     0,     1,
+       3,     1,     2,     2,     2,     1,     3,     3,     1,     1,
+       3,     4,     5,     1,     0,     3,     3,     1,     1,     0,
+       2,     2,     2,     2,     0,     2,     2,     1,     2,     2,
+       2,     2,     0,     3,     0,     1,     1,     1,     4,     2,
+       0,     1,     0,     4,     1,     1,     0,     0,     3,     0,
+       1,     1,     0,     4,     0,     9,     0,    13,     2,     2,
+       4,     0,     2
 };
 
-/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
-   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
-   means the default is an error.  */
-static const unsigned short yydefact[] =
-{
-       0,     2,     0,   291,     0,  1275,     0,  1279,    76,   822,
-     754,   766,   885,   768,     0,     0,     0,     0,   910,     0,
-     903,  1280,     0,   352,   843,     0,     0,     0,   841,     0,
-     815,     0,     0,   880,   881,  1208,     0,     0,  1206,  1141,
-       0,   771,     0,     0,     0,     8,    11,     4,    34,    35,
-      28,     6,    25,     5,     9,    22,    24,    32,   347,    14,
-      15,    17,    26,    40,    12,    37,    36,    13,     0,    18,
-      27,    23,    21,    41,    19,    33,    20,    39,    38,    29,
-      16,     7,    10,    30,    31,  1001,  1035,  1046,  1075,  1083,
-     982,   987,   989,   991,  1000,  1002,  1004,  1007,  1015,  1021,
-    1022,  1031,  1045,  1049,  1052,  1078,  1096,  1098,  1099,  1102,
-    1103,  1107,  1114,  1118,  1119,  1121,  1124,  1128,   981,   984,
-     985,   986,   988,   990,   992,   993,   994,   995,   997,   998,
-    1003,  1006,  1008,  1012,  1013,  1025,  1017,  1026,  1014,  1020,
-    1023,  1028,  1029,  1030,  1027,  1033,  1032,  1034,  1036,   974,
-    1039,  1043,  1040,  1041,  1047,  1048,  1050,  1053,  1057,  1055,
-    1056,  1058,  1054,  1060,  1059,  1093,  1094,  1051,  1061,  1062,
-    1063,  1064,  1065,  1066,  1068,  1072,  1073,  1076,  1074,  1077,
-    1079,  1080,  1016,  1081,  1084,  1085,  1086,  1088,  1091,  1092,
-    1089,  1090,  1095,  1097,  1100,  1101,  1104,  1105,  1106,  1109,
-    1110,  1113,  1120,  1123,  1125,  1127,  1131,  1132,  1133,  1134,
-    1135,  1137,  1005,   996,  1009,  1010,  1019,  1024,  1087,  1111,
-    1122,  1126,  1129,  1130,   983,  1011,  1037,  1038,  1044,  1067,
-    1070,  1069,  1071,  1082,  1108,  1112,  1136,  1138,  1018,  1115,
-    1117,  1116,  1042,   999,     0,     0,     0,   972,   975,   292,
-       0,  1178,  1177,   327,  1277,     0,   128,   255,    80,   254,
-      81,     0,    77,    78,     0,     0,   836,     0,     0,   767,
-       0,   764,     0,     0,   774,   987,     0,     0,     0,     0,
-       0,     0,  1128,     0,     0,     0,   951,     0,   953,     0,
-       0,   948,   632,     0,   952,   947,   950,   942,     0,     0,
-       0,     0,     0,     0,  1010,  1129,  1130,   949,     0,     0,
-       0,   636,     0,     0,   390,   390,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,  1037,     0,     0,     0,     0,     0,     0,     0,  1067,
-    1071,   390,  1082,     0,     0,     0,     0,     0,  1108,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,  1138,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   912,   392,   393,   497,   946,   493,   492,   962,
-     920,     0,  1175,   340,     0,   318,     0,     0,  1282,   348,
-     360,   869,   311,   311,   311,   307,   311,   842,     0,  1186,
-     820,   316,   329,     0,   342,   314,     0,  1142,  1139,   913,
-     820,   352,     1,     3,   879,   877,   969,   971,   695,  1188,
-    1189,     0,     0,     0,  1278,  1276,    42,     0,     0,    81,
-      79,     0,     0,   839,   838,     0,   836,   814,   813,   755,
-     812,     0,   760,     0,     0,   764,   898,   897,   899,   893,
-     895,   894,     0,   900,   896,  1178,   886,   888,   889,   776,
-     777,   775,   291,   700,   700,     0,   700,   700,   700,   700,
-       0,   506,     0,     0,     0,     0,     0,   632,     0,   630,
-       0,   500,     0,     0,     0,     0,   626,   626,   954,   956,
-     955,     0,   700,   700,   637,     0,   626,     0,     0,   520,
-       0,   521,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   561,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     626,   626,   626,   626,   626,   626,     0,     0,     0,     0,
-       0,     0,     0,   498,   499,     0,   501,     0,   978,   977,
-    1153,   976,   495,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   943,     0,   921,     0,   922,   918,     0,     0,     0,
-       0,     0,   908,   907,     0,   904,   906,     0,  1283,   373,
-     366,   365,   364,   368,   372,   370,   371,   367,   369,   381,
-     361,   363,     0,     0,     0,     0,   867,   870,  1152,     0,
-     251,   252,     0,   250,  1150,   860,     0,     0,  1151,   867,
-     865,     0,     0,   844,     0,     0,   313,   312,   305,   309,
-     306,   303,   308,   304,   840,   763,   821,   291,     0,     0,
-    1226,  1227,  1223,  1228,  1229,  1217,     0,     0,  1215,     0,
-    1236,  1219,  1212,  1233,     0,  1225,  1232,  1221,  1230,  1231,
-    1224,     0,  1210,  1213,     0,     0,     0,  1145,   779,     0,
-     778,     0,   882,     0,   697,   696,     0,  1187,     0,   973,
-     264,   331,   761,     0,     0,    59,     0,    60,     0,     0,
-     823,   826,   830,   834,   837,     0,     0,   765,   759,     0,
-     892,     0,     0,   901,     0,   701,     0,   615,   607,     0,
-     615,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   633,   634,   510,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   640,     0,     0,   391,
-       0,   525,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   682,   683,   684,   685,   686,   687,   688,   689,   690,
-     691,   692,   693,   694,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   548,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   458,   566,     0,     0,     0,     0,
-       0,     0,     0,   644,   644,   644,     0,     0,   601,     0,
-       0,     0,     0,     0,     0,   590,     0,   592,     0,     0,
-       0,   737,   734,   733,   736,   735,     0,   502,     0,     0,
-       0,     0,     0,     0,     0,   408,   409,   410,   411,   412,
-     413,   414,     0,   406,   415,   416,   401,   626,   708,     0,
-       0,     0,     0,   399,   398,   404,   400,     0,   491,   421,
-     423,     0,   418,     0,   417,   419,   420,   424,   422,   963,
-     917,   919,     0,     0,   695,  1176,  1179,   331,     0,   320,
-     909,     0,  1281,  1292,   349,  1284,   379,   725,   378,     0,
-     362,   873,     0,   851,   863,   852,   864,     0,   845,     0,
-     857,     0,   865,   856,   871,   872,   867,     0,   865,     0,
-       0,   858,   867,   311,   666,     0,   331,     0,  1257,  1238,
-    1240,  1239,  1257,  1235,  1257,  1211,  1234,  1257,     0,     0,
-     343,   344,     0,     0,     0,  1146,  1147,  1148,  1140,     0,
-       0,   782,   772,   781,   350,   945,   944,   878,   883,   884,
-     970,   699,  1075,  1029,     0,   702,  1191,   266,   338,   337,
-     339,   336,   335,     0,   328,   332,   333,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,    43,    44,    82,    55,
-       0,     0,   828,   824,   969,     0,     0,     0,   832,   811,
-     757,   293,     0,   887,   902,   890,   769,   602,     0,   626,
-     606,     0,     0,   612,   611,   613,   614,     0,     0,     0,
-     626,   626,   555,     0,   631,     0,     0,   511,     0,     0,
-     516,   628,   627,   517,   514,     0,   603,   604,   638,     0,
-     518,   626,   522,     0,     0,     0,   534,     0,   532,     0,
-     626,     0,   528,     0,     0,     0,   626,     0,   540,     0,
-       0,   543,     0,   626,     0,   549,     0,     0,   626,     0,
-     559,   560,   562,   563,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   565,     0,     0,   569,     0,   571,     0,     0,     0,
-     645,     0,     0,     0,     0,   577,   583,   584,   585,   586,
-     587,   588,     0,   591,   593,     0,   595,   596,     0,     0,
-     503,  1156,  1154,  1155,   496,   494,   964,   407,     0,     0,
-     402,   626,   708,   405,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   916,     0,     0,   341,
-       0,   325,   326,   324,   319,   321,   322,   905,  1294,  1293,
-    1285,   666,     0,   726,   381,   374,   356,   354,   355,   382,
-     384,   383,   962,     0,   875,   862,   868,   979,   861,     0,
-     867,   846,   866,   867,   865,     0,   859,   310,   666,     0,
-       0,   647,     0,     0,   330,  1237,     0,  1218,  1216,  1220,
-    1222,  1248,  1251,   969,     0,  1214,     0,     0,     0,     0,
-    1145,  1127,     0,     0,     0,  1164,  1143,     0,   780,     0,
-    1290,  1198,  1196,  1197,  1201,  1202,  1204,  1203,  1205,  1195,
-    1192,  1199,     0,   725,   289,   289,   289,     0,   289,     0,
-       0,   805,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   299,     0,     0,     0,     0,
-       0,   289,     0,   287,    85,   265,     0,   267,   288,   762,
-     334,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,    83,     0,    57,     0,   702,     0,   831,   666,   835,
-     834,   758,   295,   294,   756,   891,     0,   616,   608,   605,
-       0,     0,   617,   618,   625,   623,   619,   624,   621,     0,
-       0,     0,     0,     0,     0,   635,     0,     0,     0,     0,
-       0,     0,     0,   641,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   546,     0,     0,     0,     0,   439,   440,   441,   442,
-     443,   444,   445,     0,   437,   446,   447,   432,     0,   708,
-       0,     0,     0,   430,   429,   435,   431,     0,   452,   454,
-       0,   449,     0,   448,   450,   451,   455,   453,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   394,   707,     0,   403,     0,   472,   473,   474,
-     475,   476,   477,   478,     0,   470,   479,   480,   396,   626,
-     708,     0,     0,     0,     0,   464,   463,   468,   465,     0,
-     485,   487,     0,   482,     0,   481,   483,   484,   488,   486,
-     426,   425,   965,   914,     0,  1182,  1183,  1181,  1180,   911,
-     323,     0,   702,     0,     0,     0,   377,     0,     0,   353,
-     358,   357,   385,     0,   874,     0,   853,     0,     0,   848,
-     847,   855,   865,     0,   666,     0,     0,   663,     0,     0,
-     666,   669,   669,   666,   666,   695,   317,  1261,     0,  1260,
-       0,     0,     0,   345,   346,   315,     0,     0,     0,   805,
-     803,   804,     0,     0,  1153,     0,     0,    72,   786,     0,
-       0,   794,   773,   783,  1287,   351,  1288,   716,     0,   703,
-    1190,   290,   260,   244,   249,   248,   271,     0,   142,   260,
-     243,   269,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   806,     0,     0,     0,     0,   282,   283,     0,     0,
-       0,   718,     0,     0,     0,     0,   301,   302,   300,     0,
-       0,     0,     0,   805,     0,     0,     0,    86,     0,   145,
-       0,   296,   142,   148,   966,    46,    47,    49,   742,   740,
-     738,   741,   739,    51,    48,    50,    52,    53,    54,    45,
-     145,    56,   923,    84,   131,   130,   129,     0,     0,   666,
-     716,   970,   702,     0,   833,   770,     0,     0,   582,   620,
-     622,   507,   509,   553,   554,   556,     0,   504,   512,     0,
-     629,   515,   639,   508,     0,     0,   519,     0,     0,   530,
-     535,   533,   526,   531,   529,     0,   599,   542,   539,   541,
-       0,     0,   547,   550,   551,     0,   527,   557,     0,   438,
-     564,   433,   708,   436,     0,     0,     0,     0,     0,   568,
-     570,     0,   575,   573,     0,     0,     0,     0,     0,   581,
-       0,   594,   597,   598,   395,   397,   471,     0,   466,   626,
-     708,   469,     0,     0,     0,     0,   923,  1184,  1185,  1286,
-     709,   751,   753,   727,   728,     0,   375,     0,   389,   380,
-     388,   959,   963,   876,   725,   980,     0,   867,   646,     0,
-     665,   664,   666,   669,   669,   816,     0,   650,   670,     0,
-       0,   648,   649,   671,  1258,     0,  1250,  1249,  1256,  1262,
-    1252,  1207,  1144,     0,     0,     0,  1169,     0,  1162,     0,
-       0,  1174,  1172,  1173,  1171,  1158,   360,     0,   807,   793,
-     799,     0,     0,     0,   792,   958,   957,  1283,   725,   717,
-       0,   147,   261,   245,     0,     0,     0,   246,   141,   140,
-     143,     0,     0,   273,    92,   260,   279,   281,   293,    93,
-      90,   103,    96,     0,    97,     0,    88,    89,     0,    95,
-      94,   120,   119,    99,   121,   100,   101,   286,   115,   117,
-     116,   118,    98,   113,   111,   114,   108,   110,   112,   109,
-      87,     0,     0,   124,   123,   122,   105,   275,    91,   268,
-       0,   132,   134,   135,   968,     0,   298,   270,     0,   136,
-     137,     0,     0,    62,     0,     0,   925,   924,    63,    74,
-       0,     0,   702,   731,   827,   609,     0,     0,     0,   642,
-       0,     0,     0,     0,     0,     0,     0,     0,   434,     0,
-     427,   457,   456,     0,     0,     0,     0,   580,   578,   579,
-       0,   459,     0,   467,     0,   461,   490,   489,     0,     0,
-     704,   926,     0,     0,     0,   387,   386,     0,   854,     0,
-     849,     0,   662,     0,     0,     0,   702,     0,   666,   666,
-       0,   652,     0,     0,     0,   667,  1259,     0,     0,     0,
-    1267,     0,     0,  1168,  1160,  1161,     0,     0,     0,  1157,
-     381,   787,   801,     0,   809,     0,     0,   784,   796,     0,
-       0,   795,  1291,     0,   144,   260,   242,   247,     0,     0,
-       0,     0,   280,   278,   106,   107,   961,   719,   722,     0,
-     104,     0,   272,   145,   297,   229,     0,   208,   154,     0,
-       0,   183,   180,   193,   167,   182,   165,   161,   197,   195,
-     178,   197,   189,   169,   175,   168,   192,   174,   197,   194,
-     191,   173,   163,   162,   166,   190,   172,     0,   186,   208,
-     212,   224,     0,   208,   210,   967,    65,    83,    75,     0,
-      61,     0,   722,   258,   829,     0,   825,     0,     0,   513,
-       0,   523,   524,   536,     0,   700,   544,   552,   558,   428,
-     567,   574,   572,   576,   626,   460,   462,     0,     0,   705,
-     716,     0,   934,   730,   729,   376,   960,     0,     0,   666,
-     666,     0,   716,   819,   655,   659,   651,     0,   675,   673,
-     674,   672,     0,  1266,  1264,     0,  1265,     0,     0,  1263,
-    1241,  1253,     0,  1209,  1166,  1165,  1167,  1163,     0,     0,
-     125,     0,     0,     0,   810,   798,  1290,   785,   791,  1200,
-       0,     0,   285,     0,   296,     0,   723,   724,   721,   102,
-     212,   133,     0,     0,     0,   227,   230,   232,     0,     0,
-     153,   170,     0,   171,   184,   187,   188,     0,     0,   201,
-     199,   196,     0,   201,   201,     0,     0,   201,     0,   219,
-       0,     0,   216,     0,   221,   149,   213,   215,   225,     0,
-     185,     0,   156,     0,   201,     0,   211,   201,  1290,   923,
-       0,    68,    58,     0,   257,     0,   732,     0,   505,   643,
-       0,     0,     0,     0,   713,   722,     0,   725,     0,     0,
-       0,     0,   927,   929,     0,   752,     0,   666,   657,   661,
-       0,   731,     0,     0,     0,     0,     0,     0,  1254,     0,
-    1245,  1246,  1247,  1242,     0,     0,     0,     0,     0,  1268,
-    1270,  1170,  1159,    73,   374,   800,   802,   808,   797,     0,
-     138,     0,     0,     0,   284,   274,   722,   276,   235,   236,
-       0,     0,     0,   231,     0,     0,     0,     0,   205,   206,
-     207,   176,   202,   204,     0,   152,   177,     0,     0,   160,
-     223,   218,   217,   220,   222,   214,   805,     0,     0,   150,
-       0,   151,    66,    64,     0,  1283,   722,     0,   545,   537,
-       0,   610,   589,   926,     0,     0,   710,   712,   706,   743,
-       0,     0,     0,     0,   928,     0,     0,   935,   937,     0,
-       0,   818,   817,   654,     0,   658,     0,     0,   680,     0,
-    1255,  1243,  1271,  1274,  1272,  1273,  1269,   126,     0,   720,
-     296,   238,     0,   237,     0,   233,   234,   229,   157,   209,
-       0,   262,   198,     0,   203,     0,   164,   159,     0,   224,
-     224,    70,    69,   256,   259,     0,   934,   714,   715,   722,
-       0,   359,   932,   933,     0,   930,     0,     0,   936,     0,
-       0,     0,     0,   653,     0,   679,     0,   678,     0,   277,
-     240,   241,   239,   228,   181,     0,     0,   179,   226,   155,
-     158,  1290,   538,   940,   711,   744,   931,   939,   938,     0,
-       0,     0,     0,   681,   676,     0,   139,   263,   200,    71,
-       0,   788,     0,     0,   668,   656,   660,   677,     0,     0,
-     915,   381,     0,   941,   790,     0,     0,     0,   747,   749,
-       0,   789,   750,   745,   381,     0,   748,   850
+/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
+   doesn't specify something else to do.  Zero means the default is an
+   error. */
+static const short yydefact[] =
+{
+       0,     1,     0,   291,     0,  1302,     0,  1306,    76,   838,
+     770,   782,   904,   784,     0,     0,     0,     0,     0,   934,
+       0,   924,  1307,     0,   359,   859,     0,     0,     0,   857,
+       0,   831,     0,     0,   899,   900,  1235,     0,     0,  1233,
+    1168,     0,   787,     0,     0,     7,    10,     3,    34,    35,
+      28,     5,    25,     4,     8,    22,    24,    32,   354,    13,
+      14,    16,    26,    40,    11,    37,    36,    12,     0,    17,
+      27,    23,    21,    41,    18,    33,    19,    39,    38,    29,
+      15,     6,     9,    30,    31,    20,  1025,  1060,  1071,  1100,
+    1109,  1006,  1011,  1013,  1015,  1024,  1026,  1028,  1031,  1039,
+    1045,  1046,  1055,  1058,  1070,  1074,  1077,  1103,  1106,  1122,
+    1124,  1125,  1128,  1129,  1133,  1140,  1144,  1145,  1147,  1150,
+    1154,  1160,  1005,  1008,  1009,  1010,  1012,  1014,  1016,  1017,
+    1018,  1019,  1021,  1022,  1027,  1030,  1032,  1036,  1037,  1049,
+    1041,  1050,  1038,  1044,  1047,  1052,  1053,  1054,  1051,  1057,
+    1056,  1059,  1061,   998,  1064,  1068,  1065,  1066,  1072,  1073,
+    1075,  1078,  1082,  1080,  1081,  1083,  1079,  1085,  1084,  1119,
+    1120,  1076,  1086,  1087,  1088,  1089,  1090,  1091,  1093,  1097,
+    1098,  1101,  1099,  1102,  1104,  1105,  1040,  1107,  1110,  1111,
+    1112,  1114,  1117,  1118,  1115,  1116,  1121,  1123,  1126,  1127,
+    1130,  1131,  1132,  1135,  1136,  1139,  1146,  1149,  1151,  1153,
+    1157,  1158,  1159,  1161,  1162,  1164,  1029,  1020,  1033,  1034,
+    1043,  1048,  1113,  1137,  1148,  1152,  1155,  1156,  1007,  1035,
+    1062,  1063,  1069,  1092,  1095,  1094,  1096,  1108,  1134,  1138,
+    1163,  1165,  1042,  1141,  1143,  1142,  1067,  1023,     0,     0,
+       0,   996,   999,   292,     0,  1205,  1204,   334,  1304,     0,
+     128,   255,    80,   254,    81,     0,    77,    78,     0,     0,
+     852,     0,     0,   783,     0,   780,     0,     0,   790,  1011,
+       0,  1058,     0,     0,     0,  1106,     0,     0,  1154,  1160,
+       0,     0,     0,   975,     0,   977,     0,     0,   972,   648,
+       0,   976,   971,   974,   966,     0,     0,     0,     0,     0,
+       0,  1034,  1155,  1156,   973,     0,     0,     0,   652,     0,
+       0,   397,   397,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,  1062,     0,
+       0,     0,     0,     0,     0,     0,  1092,  1096,   397,  1108,
+       0,     0,     0,     0,     0,  1134,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1165,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   936,
+     399,   400,   504,   970,   500,   499,   986,   944,     0,  1202,
+    1322,   347,     0,   325,     0,     0,  1309,   355,   367,   888,
+     312,   312,   312,   308,   312,   858,     0,  1213,   836,   323,
+     336,     0,   349,   321,     0,  1169,  1166,   937,   836,   359,
+       2,   898,   896,   993,   995,   711,  1215,  1216,     0,     0,
+       0,  1305,  1303,    42,     0,     0,    81,    79,     0,     0,
+     855,   854,     0,   852,   830,   829,   771,   828,     0,   776,
+       0,     0,   780,   917,   916,   918,   912,   921,   914,   913,
+       0,   919,   915,  1205,   920,   905,   907,   908,   792,   793,
+     791,   291,   716,   716,   624,     0,   716,   716,   618,   716,
+     716,     0,   621,   513,     0,     0,     0,     0,     0,   648,
+       0,   646,     0,   507,     0,     0,     0,     0,   642,   642,
+     978,   980,   979,     0,   716,   716,   653,     0,   642,     0,
+       0,   527,     0,   528,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   568,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   642,   642,   642,   642,   642,   642,     0,     0,
+       0,     0,     0,     0,     0,   505,   506,     0,   508,     0,
+    1002,  1001,  1180,  1000,   502,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   967,     0,   945,     0,   946,   942,     0,
+       0,     0,     0,     0,     0,   930,   928,     0,   925,   927,
+       0,  1310,   380,   373,   372,   371,   375,   379,   377,   378,
+     374,   376,   388,   368,   370,     0,     0,     0,     0,   886,
+     889,  1179,     0,   251,   252,   886,     0,   250,  1177,   879,
+       0,     0,  1178,   886,   884,     0,   886,   886,     0,   860,
+       0,     0,   314,   313,   306,   310,   307,   303,   309,   305,
+     856,   779,   837,   291,     0,     0,  1253,  1254,  1250,  1255,
+    1256,  1244,     0,     0,  1242,     0,  1263,  1246,  1239,  1260,
+       0,  1252,  1259,  1248,  1257,  1258,  1251,     0,  1237,  1240,
+       0,     0,     0,  1172,   795,     0,   794,     0,   901,     0,
+     713,   712,     0,  1214,     0,   997,   264,   338,   777,     0,
+       0,    59,     0,    60,     0,     0,   839,   842,   846,   850,
+     853,     0,     0,   781,   775,     0,   911,     0,     0,   922,
+       0,   717,     0,   631,   614,     0,   631,   642,     0,     0,
+       0,   642,     0,     0,     0,   642,     0,     0,     0,     0,
+       0,     0,     0,   649,   650,   517,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   656,     0,     0,   398,     0,
+     532,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     698,   699,   700,   701,   702,   703,   704,   705,   706,   707,
+     708,   709,   710,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   555,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   465,   573,     0,     0,     0,     0,     0,
+       0,     0,   660,   660,   660,     0,     0,   608,     0,     0,
+       0,     0,     0,     0,   597,     0,   599,     0,     0,     0,
+     753,   750,   749,   752,   751,     0,   509,     0,     0,     0,
+       0,     0,     0,     0,   415,   416,   417,   418,   419,   420,
+     421,     0,   413,   422,   423,   408,   642,   724,     0,     0,
+       0,     0,   406,   405,   411,   407,     0,   498,   428,   430,
+       0,   425,     0,   424,   426,   427,   431,   429,   987,   941,
+     943,     0,     0,   711,  1203,  1206,     0,     0,     0,  1323,
+     338,     0,   327,   932,   931,     0,  1308,  1319,   356,  1311,
+     386,   741,   385,     0,   369,   892,     0,   867,   882,   868,
+     883,     0,   861,     0,   875,   876,     0,   884,   872,   890,
+     891,   886,     0,   884,   874,   873,     0,     0,   877,   886,
+     312,   315,   682,     0,   338,     0,  1284,  1265,  1267,  1266,
+    1284,  1262,  1284,  1238,  1261,  1284,     0,     0,   350,   351,
+       0,     0,     0,  1173,  1174,  1175,  1167,     0,     0,   798,
+     788,   797,   357,   969,   968,   897,   902,   903,   994,   715,
+    1100,  1053,     0,   718,  1218,   266,   345,   344,   346,   343,
+     342,     0,   335,   339,   340,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,    43,    44,    82,    55,     0,     0,
+     844,   840,   993,     0,     0,     0,   848,   827,   773,   293,
+       0,   906,   923,   909,   785,   609,     0,   642,   613,     0,
+     625,     0,   628,   627,   619,   629,   630,     0,   622,     0,
+       0,   642,   642,   562,     0,   647,     0,     0,   518,     0,
+       0,   523,   644,   643,   524,   521,     0,   610,   611,   654,
+       0,   525,   642,   529,     0,     0,     0,   541,     0,   539,
+       0,   642,     0,   535,     0,     0,     0,   642,     0,   547,
+       0,     0,   550,     0,   642,     0,   556,     0,     0,   642,
+       0,   566,   567,   569,   570,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   572,     0,     0,   576,     0,   578,     0,     0,
+       0,   661,     0,     0,     0,     0,   584,   590,   591,   592,
+     593,   594,   595,     0,   598,   600,     0,   602,   603,     0,
+       0,   510,  1183,  1181,  1182,   503,   501,   988,   414,     0,
+       0,   409,   642,   724,   412,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   940,     0,     0,
+    1328,     0,  1329,   348,     0,   332,   333,   331,   326,   328,
+     329,     0,   929,   926,  1321,  1320,  1312,   682,     0,   742,
+     388,   381,   363,   361,   362,   389,   391,   390,   986,     0,
+     894,   881,   887,  1003,   880,     0,   886,   862,   885,   886,
+     884,     0,   878,   311,     0,   304,   682,     0,     0,   663,
+       0,     0,   337,  1264,     0,  1245,  1243,  1247,  1249,  1275,
+    1278,   993,     0,  1241,     0,     0,     0,     0,  1172,  1153,
+       0,     0,     0,  1191,  1170,     0,   796,     0,  1317,  1225,
+    1223,  1224,  1228,  1229,  1231,  1230,  1232,  1222,  1219,  1226,
+       0,   741,   289,   289,   289,     0,   289,     0,     0,   821,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   299,     0,     0,     0,     0,     0,   289,
+       0,   287,    85,   265,     0,   267,   288,   778,   341,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,    83,
+       0,    57,     0,   718,     0,   847,   682,   851,   850,   774,
+     295,   294,   772,   910,     0,   632,   615,   612,     0,     0,
+       0,     0,     0,   633,   634,   641,   639,   635,   640,   637,
+       0,     0,     0,     0,     0,     0,   651,     0,     0,     0,
+       0,     0,     0,     0,   657,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   553,     0,     0,     0,     0,   446,   447,   448,
+     449,   450,   451,   452,     0,   444,   453,   454,   439,     0,
+     724,     0,     0,     0,   437,   436,   442,   438,     0,   459,
+     461,     0,   456,     0,   455,   457,   458,   462,   460,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   401,   723,     0,   410,     0,   479,   480,
+     481,   482,   483,   484,   485,     0,   477,   486,   487,   403,
+     642,   724,     0,     0,     0,     0,   471,   470,   475,   472,
+       0,   492,   494,     0,   489,     0,   488,   490,   491,   495,
+     493,   433,   432,   989,   938,     0,  1209,  1210,  1208,  1207,
+       0,     0,   935,   330,     0,     0,   718,     0,     0,     0,
+     384,     0,     0,   360,   365,   364,   392,     0,   893,     0,
+     869,     0,     0,   864,   863,   871,   884,     0,     0,   316,
+     317,     0,   682,     0,     0,   679,     0,     0,   682,   685,
+     685,   682,   682,   711,   324,  1288,     0,  1287,     0,     0,
+       0,   352,   353,   322,     0,     0,     0,   821,   819,   820,
+       0,     0,  1180,     0,     0,    72,   802,     0,     0,   810,
+     789,   799,  1314,   358,  1315,   732,     0,   719,  1217,   290,
+     260,   244,   249,   248,   271,     0,   142,   260,   243,   269,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   822,
+       0,     0,     0,     0,   282,   283,     0,     0,     0,   734,
+       0,     0,     0,     0,   301,   302,   300,     0,     0,     0,
+       0,   821,     0,     0,     0,    86,     0,   145,     0,   296,
+     142,   148,   990,    46,    47,    49,   758,   756,   754,   757,
+     755,    51,    48,    50,    52,    53,    54,    45,   145,    56,
+     947,    84,   131,   130,   129,     0,     0,   682,   732,   994,
+     718,     0,   849,   786,     0,   626,     0,   620,   589,   623,
+     636,   638,   514,   516,   560,   561,   563,     0,   511,   519,
+       0,   645,   522,   655,   515,     0,     0,   526,     0,     0,
+     537,   542,   540,   533,   538,   536,     0,   606,   549,   546,
+     548,     0,     0,   554,   557,   558,     0,   534,   564,     0,
+     445,   571,   440,   724,   443,     0,     0,     0,     0,     0,
+     575,   577,     0,   582,   580,     0,     0,     0,     0,     0,
+     588,     0,   601,   604,   605,   402,   404,   478,     0,   473,
+     642,   724,   476,     0,     0,     0,     0,   947,  1211,  1212,
+       0,  1330,   933,  1313,   725,   767,   769,   743,   744,     0,
+     382,     0,   396,   387,   395,   983,   987,   895,   741,  1004,
+       0,   886,     0,     0,     0,   662,     0,   681,   680,   682,
+     685,   685,   832,     0,   666,   686,     0,     0,   664,   665,
+     687,  1285,     0,  1277,  1276,  1283,  1289,  1279,  1234,  1171,
+       0,     0,     0,  1196,     0,  1189,     0,     0,  1201,  1199,
+    1200,  1198,  1185,   367,     0,   823,   809,   815,     0,     0,
+       0,   808,   982,   981,  1310,   741,   733,     0,   147,   261,
+     245,     0,     0,     0,   246,   141,   140,   143,     0,     0,
+     273,    92,   260,   279,   281,   293,    93,    90,   103,    96,
+       0,    97,     0,    88,    89,     0,    95,    94,   120,   119,
+      99,   121,   100,   101,   286,   115,   117,   116,   118,    98,
+     113,   111,   114,   108,   110,   112,   109,    87,     0,     0,
+     124,   123,   122,   105,   275,    91,   268,     0,   132,   134,
+     135,   992,     0,   298,   270,     0,   136,   137,     0,     0,
+      62,     0,     0,   949,   948,    63,    74,     0,     0,   718,
+     747,   843,   616,     0,     0,     0,   658,     0,     0,     0,
+       0,     0,     0,     0,     0,   441,     0,   434,   464,   463,
+       0,     0,     0,     0,   587,   585,   586,     0,   466,     0,
+     474,     0,   468,   497,   496,     0,     0,     0,   720,   950,
+       0,     0,     0,   394,   393,     0,   870,     0,   865,   319,
+     320,   318,     0,   678,     0,     0,     0,   718,     0,   682,
+     682,     0,   668,     0,     0,     0,   683,  1286,     0,     0,
+       0,  1294,     0,     0,  1195,  1187,  1188,     0,     0,     0,
+    1184,   388,   803,   817,     0,   825,     0,     0,   800,   812,
+       0,     0,   811,  1318,     0,   144,   260,   242,   247,     0,
+       0,     0,     0,   280,   278,   106,   107,   985,   735,   738,
+       0,   104,     0,   272,   145,   297,   229,     0,   208,   154,
+       0,     0,   183,   180,   193,   167,   182,   165,   161,   197,
+     195,   178,   197,   189,   169,   175,   168,   192,   174,   197,
+     194,   191,   173,   163,   162,   166,   190,   172,     0,   186,
+     208,   212,   224,     0,   208,   210,   991,    65,    83,    75,
+       0,    61,     0,   738,   258,   845,     0,   841,     0,     0,
+     520,     0,   530,   531,   543,     0,   716,   551,   559,   565,
+     435,   574,   581,   579,   583,   642,   467,   469,     0,     0,
+       0,   721,   732,     0,   958,   746,   745,   383,   984,     0,
+       0,   682,   682,     0,   732,   835,   671,   675,   667,     0,
+     691,   689,   690,   688,     0,  1293,  1291,     0,  1292,     0,
+       0,  1290,  1268,  1280,     0,  1236,  1193,  1192,  1194,  1190,
+       0,     0,   125,     0,     0,     0,   826,   814,  1317,   801,
+     807,  1227,     0,     0,   285,     0,   296,     0,   739,   740,
+     737,   102,   212,   133,     0,     0,     0,   227,   230,   232,
+       0,     0,   153,   170,     0,   171,   184,   187,   188,     0,
+       0,   201,   199,   196,     0,   201,   201,     0,     0,   201,
+       0,   219,     0,     0,   216,     0,   221,   149,   213,   215,
+     225,     0,   185,     0,   156,     0,   201,     0,   211,   201,
+    1317,   947,     0,    68,    58,     0,   257,     0,   748,     0,
+     512,   659,     0,     0,     0,     0,  1324,   729,   738,     0,
+     741,     0,     0,     0,     0,   951,   953,     0,   768,     0,
+     682,   673,   677,     0,   747,     0,     0,     0,     0,     0,
+       0,  1281,     0,  1272,  1273,  1274,  1269,     0,     0,     0,
+       0,     0,  1295,  1297,  1197,  1186,    73,   381,   816,   818,
+     824,   813,     0,   138,     0,     0,     0,   284,   274,   738,
+     276,   235,   236,     0,     0,     0,   231,     0,     0,     0,
+       0,   205,   206,   207,   176,   202,   204,     0,   152,   177,
+       0,     0,   160,   223,   218,   217,   220,   222,   214,   821,
+       0,     0,   150,     0,   151,    66,    64,     0,  1310,   738,
+       0,   552,   544,     0,   617,   596,   950,     0,  1331,     0,
+       0,   726,   728,   722,   759,     0,     0,     0,     0,   952,
+       0,     0,   959,   961,     0,     0,   834,   833,   670,     0,
+     674,     0,     0,   696,     0,  1282,  1270,  1298,  1301,  1299,
+    1300,  1296,   126,     0,   736,   296,   238,     0,   237,     0,
+     233,   234,   229,   157,   209,     0,   262,   198,     0,   203,
+       0,   164,   159,     0,   224,   224,    70,    69,   256,   259,
+       0,   958,     0,     0,  1325,   730,   731,   738,     0,   366,
+     956,   957,     0,   954,     0,     0,   960,     0,     0,     0,
+       0,   669,     0,   695,     0,   694,     0,   277,   240,   241,
+     239,   228,   181,     0,     0,   179,   226,   155,   158,  1317,
+     545,   964,     0,  1332,   727,   760,   955,   963,   962,     0,
+       0,     0,     0,   697,   692,     0,   139,   263,   200,    71,
+       0,   804,  1326,     0,     0,   684,   672,   676,   693,     0,
+       0,   939,  1331,   388,     0,   965,   806,     0,  1327,     0,
+       0,   763,   765,     0,   805,   766,   761,   388,     0,   764,
+     866,     0,     0,     0
 };
 
-/* YYDEFGOTO[NTERM-NUM]. */
 static const short yydefgoto[] =
 {
-      -1,    43,    44,    45,   703,   986,   987,    46,  1311,  1618,
-     990,  1611,  1853,  2158,  1858,  2265,  2371,  1531,  1766,  2019,
-     261,   262,   263,   428,  1612,  1293,  1294,  1830,  1822,  1813,
-    1836,  2213,   264,  1617,  1840,  1841,  1842,  1843,  1789,  1790,
-    1547,  1548,  1592,  1851,  2010,  2132,  2127,  2011,  2012,  2013,
-    2014,  2129,  2130,  2241,  2242,  2243,  2120,  2157,  2145,  2146,
-    2147,  2152,  1850,  2115,  2116,  2117,  2315,  1549,  1550,   642,
-     265,  2021,  2022,  1781,  2320,    47,   967,  1295,  1296,  1297,
-    1961,  1971,  2310,  1551,   250,  1324,  1847,  1579,    48,    49,
-     652,   648,   649,    50,   685,    51,   658,    52,   601,  1184,
-    1185,  1186,    53,   423,    54,   659,   974,   975,   976,    55,
-     599,    56,   684,   940,   941,    57,    58,   608,  1250,   389,
-     390,  1195,  1196,   619,   620,   621,  1479,   897,   898,   899,
-    1482,  1199,  1719,   499,   438,   373,   803,   867,   374,   817,
-     375,  1009,  1626,   726,  1008,  1339,   818,   751,  1032,   478,
-     479,   480,   744,   495,  1351,  1038,  1039,  1353,  1111,  1220,
-    2067,  2193,  2195,  1504,  1221,  1222,  1739,  1925,  2069,  2197,
-    2356,  2297,   784,   696,   697,   727,  1263,  2050,  2176,  1140,
-    1900,  2174,  2276,  1778,  1779,  1808,  1967,  2108,  1197,  1475,
-    1713,  2026,   836,  1603,  2341,  2392,  2407,  2408,  2409,  1198,
-    1901,    59,   267,    60,  1321,   701,   702,   444,   272,    61,
-     274,  1326,    62,   410,  1249,   462,   689,   952,   953,  1532,
-    1767,  2400,  1773,  1533,  1777,  2096,  1769,  1941,  1942,  1561,
-    1562,  1770,  1944,  2093,   439,   440,    63,   400,  1916,  1735,
-     657,    64,   266,   710,  1315,   996,  1314,   711,   712,   998,
-     435,   436,    65,   398,    66,   391,   643,  1724,   916,   908,
-     644,   917,  1204,  1486,    67,   692,    68,   957,    69,   273,
-     456,   457,   723,  1005,    70,   386,   605,   606,    71,   384,
-      72,    73,    74,  1706,   882,   596,  1859,  2052,  2182,  2183,
-    2185,  2287,  2288,  2391,   376,  2321,   377,  1774,  1775,  1968,
-     378,  1593,   655,   246,   379,  1207,  1748,   248,    75,   687,
-     408,   948,   949,   645,   842,  1246,  1247,  1934,  1758,  1765,
-      76,   598,   458,   885,   886,  1467,    77,    78,   698,   965,
-     966,  1260,  1538,  1261,    79,   406,    80,   403,   681,   682,
-     683,   932,   928,   934,   937,  2204,  2079,  2080,  1234,  1749,
-    1750,  1227,  1508,  1509,  1930,  2083,  2209,  2210,    81,   254,
-     425,    82,    83,    84,   894,  1534,  1471,  1535,  1536,  1537,
-    1190
+    2491,    44,    45,   719,  1014,  1015,    46,  1349,  1666,  1018,
+    1659,  1910,  2220,  1915,  2328,  2439,  1579,  1823,  2080,   265,
+     266,   267,   435,  1660,  1331,  1332,  1887,  1879,  1870,  1893,
+    2276,   268,  1665,  1897,  1898,  1899,  1900,  1846,  1847,  1595,
+    1596,  1640,  1908,  2071,  2194,  2189,  2072,  2073,  2074,  2075,
+    2191,  2192,  2304,  2305,  2306,  2182,  2219,  2207,  2208,  2209,
+    2214,  1907,  2177,  2178,  2179,  2380,  1597,  1598,   658,   269,
+    2082,  2083,  1838,  2385,    47,   995,  1333,  1334,  1335,  2022,
+    2032,  2375,  1599,   254,  1362,  1904,  1627,    48,   951,    49,
+     668,   664,   665,  1255,  1539,  1540,    50,   701,    51,   674,
+      52,   614,  1218,  1219,  1220,    53,   430,    54,   675,  1002,
+    1003,  1004,    55,   612,    56,   700,   968,   969,    57,    58,
+     621,  1288,   397,   398,  1231,  1232,   632,   633,   634,  1523,
+     921,   922,   923,  1526,  1235,  1773,   511,   445,   380,   822,
+     886,   381,   836,   382,  1037,  1674,   751,  1370,   755,  1372,
+     747,  1368,   742,  1036,  1380,   837,   770,  1063,   490,   491,
+     492,   763,   507,  1392,  1069,  1070,  1394,  1142,  1258,  2129,
+    2256,  2258,  1552,  1259,  1260,  1796,  1986,  2131,  2260,  2424,
+    2362,   803,   712,   713,   743,  1301,  2112,  2239,  1171,  1958,
+    2237,  2341,  1835,  1836,  1865,  2028,  2170,  1233,  1519,  1767,
+    2087,   855,  1651,  2409,  2463,  2480,  2481,  2482,  1234,  1959,
+      59,   271,    60,  1359,   717,   718,   451,   276,    61,   278,
+    1364,    62,   418,  1287,   471,   705,   980,   981,  1580,  1824,
+    2471,  1830,  1581,  1834,  2158,  1826,  2002,  2003,  1609,  1610,
+    1827,  2005,  2155,   446,   447,    63,   408,  1977,  1792,   673,
+      64,   270,   726,  1353,  1024,  1352,   727,   728,  1026,   442,
+     443,    65,   406,    66,   399,   659,  1778,   941,   932,   660,
+     942,  1240,  1530,    67,   708,    68,   985,    69,   277,   465,
+     466,   739,  1033,    70,   394,   618,   619,   913,  1222,    71,
+     392,    72,    73,    74,  1757,   901,   608,  1916,  2114,  2245,
+    2246,  2248,  2352,  2353,  2461,   383,  2386,   384,  1831,  1832,
+    2029,   385,  1641,   671,   250,   386,  1243,  1805,   252,    75,
+     703,   416,   976,   977,   661,   861,  1284,  1285,  1995,  1815,
+    1822,    76,   610,   467,   904,   905,  1508,    77,    78,   714,
+     993,   994,  1298,  1586,  1299,    79,   414,    80,   411,   697,
+     698,   699,   960,   956,   962,   965,  2267,  2141,  2142,  1272,
+    1806,  1807,  1265,  1556,  1557,  1991,  2145,  2272,  2273,    81,
+     258,   432,    82,    83,    84,   918,  1582,  1515,  1583,  1584,
+    1585,  1226,    85,   611,   909,  2338,  2472,  2404
 };
 
-/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
-   STATE-NUM.  */
-#define YYPACT_NINF -2178
 static const short yypact[] =
 {
-    1913, -2178, 11608,   125,   211, -2178,   322, -2178,   522, -2178,
-   -2178,    11, -2178, -2178,  5219,    22,   211,   211, -2178,   211,
-   -2178,   172, 25025, -2178, -2178,   579,    48,   361,   189,   211,
-   -2178,   211,   211, -2178, -2178, -2178,   211,   211, -2178,   240,
-   25025, -2178,   383,   459,   464, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,  9263, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178, 25025,   284,   129,  -102, -2178, -2178,
-     293, -2178, -2178, -2178,   159,   302, -2178, -2178, -2178, -2178,
-     224,   314, -2178,   370,   360,   488,   -34,  3179, 25025, -2178,
-   25025,   295,   408,  1062,   270,   254,   282,   289,   298,   321,
-     329,   336,   339,  5219,   344,   354, -2178,   372, -2178,   417,
-     424, -2178,   437,  5219, -2178, -2178, -2178, -2178,   439,   441,
-     443,   449,   453,   458,   463,   463,   463, -2178,   460,   462,
-     478,  5219,   486,   490,   492,   494,   514,   529,   531,   537,
-     541,   568,   570,   586,   588,   590,   592,   593,   595,   596,
-     597,   599,   601,  5627,   604,   605,   606,   607,   608,   612,
-     613,   616,   617,   619,   620,   622,   626,   627,   629,   630,
-     631,   632,   634,   638,   643,   644,   646,   647,   649,   651,
-     654,   656,   657,   658,   659,  5219,  5219,  5219,  5219, 25025,
-   12778, 25025, 21894, -2178, -2178, -2178,   532, -2178, -2178,   401,
-      50, 11608, -2178, -2178,   865, -2178,   196,   892, -2178, -2178,
-      21,  1651,   190,   190,   190, -2178,   190, -2178, 11608, -2178,
-     795, -2178, -2178,  2012, -2178, -2178,  2012, -2178, -2178, -2178,
-      73, -2178, -2178, -2178, -2178, -2178,   666, -2178,   162, -2178,
-   -2178, 25025, 11608, 11608, -2178, -2178, -2178,   895, 25025,   224,
-   -2178, 25025, 25025, -2178, -2178, 23855,   -34, -2178, 21894,   685,
-   -2178,   902, -2178,   980, 25025,   295, -2178, -2178, -2178, -2178,
-   -2178, -2178,  1012, -2178, -2178,   837,   696, -2178, -2178, -2178,
-   -2178, -2178,   125,  1029,    93,  5219,  1029,  1029,  1029,  1029,
-    5219,   -73,  5219,  5219,  5219,  5219,  5219, -2178,   798, -2178,
-   11998,   -73,   702,  5219,  5219,  5219, -2178, -2178,   532,   532,
-     532,  5219,  1029,  1029, 21894,   728, -2178,  5219,   703, -2178,
-    3587, -2178,   704,  5219,  5219,  5219,  5219,  5219,  5219,  5219,
-    5219,  5219,   589,  5219,  5219,  5219,   463,  5219,  5219,  5219,
-   21703,  3995,  5219,  5219,  5219,  5219,  5219,  5219,  3587, -2178,
-    5219,  5219,  4403,  5219,  5219,  5219,  5219,  5219,  5219,  2363,
-     707,   707,   707,   707,   707,   707,   463,  4811,   708,  5219,
-    5219,  5219,   425,   -73,   -73, 16903,   -73,  5219, -2178, -2178,
-     312, -2178,  1095,   705,  5219,  5219,  5219,  5219,  5219,  5219,
-    5219,   465,  5219,  5219,  5219,   713,  5219,   272,  5219,  5219,
-    5219,  5219,  5219,  5219,  5219,  6035,  6443,  5219,  5219,  5219,
-    5219, -2178, 25025, -2178,  1072, -2178,   965,  1001, 11608, 11608,
-     967, 11608, -2178, -2178,  1039,   722, -2178, 25025,   875, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,   734,
-      21, -2178,  1094,   903,   -16,     4,   979, -2178, -2178,   811,
-   -2178, -2178,   912, -2178, -2178, -2178,  1100,   926, -2178,   979,
-     301,   930,   301, -2178,    36,   904, -2178, -2178,   761, -2178,
-     761,   761, -2178,   761, -2178, -2178, -2178,   125, 11608, 11608,
-   -2178,   931, -2178, -2178, -2178, -2178,   932,   149, -2178,  1075,
-   -2178, -2178,   972, -2178,   986, -2178, -2178, -2178, -2178, -2178,
-   -2178,   990,   779, -2178, 11608, 11608,  1002,   484, -2178, 10043,
-   -2178,   792, 22685, 25025, -2178, -2178, 25025, -2178, 25415,  1006,
-   -2178,   -59, -2178,  1024,  1084, -2178, 11608, -2178,  1009, 11608,
-   -2178,   799, -2178,   793, -2178,  3179, 11608, -2178, -2178, 11608,
-   -2178,   992,  1062, 11608, 10043, -2178,   802, -2178, -2178,   803,
-     812, 14810,   804,   807,   813,   814, 14886, 21731, 14970, 15037,
-   15118, 13829,   820,   819,   810, -2178, -2178, 16998, 15161, 15284,
-     821,  5219,   823, 13857,   824,   827, -2178,   834, 15308, -2178,
-   17020, -2178, 15382, 15407, 15475, 13873, 13976, 15530, 15573, 14020,
-   15721, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178,  1116, 15805, 15819, 14093,   -89, 17213,
-   15832, 14136,   844, -2178, 17235, 15845, 15888, 16078, 16121, 17257,
-   17310, 17332, 17525, 21969, -2178, -2178, 17547, 16134, 16159, 14283,
-   17569, 14326, 16174,  5219,  5219,  5219, 16805,   838, -2178,   839,
-     840,   841,   842,   843,   -43, -2178, 17672, -2178, 14382, 17828,
-   14449, -2178, -2178, -2178, -2178, -2178,   845, -2178,   966,   849,
-     850,   852, 23075,  5219, 25025,   269,   269,   269,   269,   269,
-     269,   269,  1061, -2178,   420,   420,  1721, -2178,  1149,   861,
-    5219,  5219,  5219,   859,   859,   269,   859, 22158, -2178,   332,
-     357,  5627,   -74,  5627,   -74,   -73,   -73,   -73,  1079,   857,
-   -2178, -2178,  1128,  1223,   151,   866, -2178,   -59,  1030,     7,
-   -2178,   196, -2178,    98, -2178, -2178, -2178,   -42, -2178,  5219,
-   -2178,  1129, 11608, -2178, -2178, -2178, -2178,    27, -2178, 23075,
-   -2178,   941,   301, -2178, -2178, -2178,   979, 25025,   301, 11608,
-     301, -2178,   979,   190,    53,  -126,   -59,  1040,   873, -2178,
-   -2178, -2178,   873, -2178,   873, -2178, -2178,   873, 10433, 25816,
-     874, -2178,  1036,   -46, 10433, -2178, -2178, -2178,   877, 13558,
-   11608, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178,    59,    64,   818,  1018, -2178, 19965, -2178, -2178,
-   -2178, -2178, -2178, 11608, -2178, -2178,   500,  1276,  1277,  1278,
-    1279,  1280,  1281,  1282,  1284,  1286,   890, -2178, -2178, -2178,
-    1047, 11608,   799, -2178,    25, 25025,  1175, 20247, -2178, -2178,
-   -2178,     8,  1255, -2178,   897, -2178, -2178, -2178,  5219, -2178,
-   -2178,   899,  5219, -2178, -2178, -2178, -2178,  5219,   509,   509,
-   -2178, -2178, -2178,  5219, -2178,  5219, 11998, -2178,  5219,  5219,
-   -2178, 21894,   901, -2178, -2178,  5219, -2178, -2178,   978,  5219,
-   -2178, -2178, -2178,   969,   971,  1067, -2178,  5219, -2178,  5219,
-   -2178,  1068, -2178,  5219,  5219,  5219, -2178,  1121, -2178,  5219,
-    1136, -2178,  5219, -2178,  5219, -2178,  5219,  5219, -2178,  5219,
-   -2178, -2178, -2178, -2178,  5219,  5219,  5219,  5219,  5219,  5219,
-    5219,   572,  5219,  5219,  5219,  5219,  5219,   263,  5219,  5219,
-    5219,  5219,  5219,  5219,  5219,  6851,  7259,  5219,  5219,  5219,
-    5219, -2178,  5219,  5219, -2178,  5219, -2178,  5219,  5219,  5219,
-   21894,  1203,  1204,  1205,  5219, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178,  1140, -2178, -2178,  5219, -2178, -2178,  5219,  5219,
-   -2178, -2178, -2178, -2178, -2178, 21894, -2178, -2178,   927,  1089,
-   -2178, -2178,  1149,   269, 22183,  5219,  5219,  5219,  5219,  5219,
-    5219,  5219,   584,  5219,  5219,  5219,   929,  5219,   313,  5219,
-    5219,  5219,  5219,  5219,  5219,  5219,  7667,  8075,  5219,  5219,
-    5219,  5219, 21703, 21703, 25025,  1092, -2178,   -17, 11608, -2178,
-    1093, -2178, -2178, -2178, -2178, -2178,    12, -2178, -2178, -2178,
-   -2178,    53,   470, -2178, -2178,    26,  1192, -2178,  1215, -2178,
-   21894, -2178,   936,  1099,  1218, -2178, -2178,   933, -2178,  1287,
-     979, -2178, -2178,   979,   301, 11608, -2178, -2178,    53, 25025,
-      31, -2178, 11608,  1106, -2178, -2178, 25025, -2178, -2178, -2178,
-   -2178,   940, -2178,   942,  1109, -2178, 11608, 11608,  1112,  1231,
-     484,  1210,  1130,    62, 13168, -2178, -2178,   173, -2178,   -15,
-      85, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178,  5219,  1076,  1088,  1261,  1261,  1358,   642,  1359,
-    1361,   173,  1362,  1258,  1364,  1225,  1227,  1263,  1371,  1374,
-    1297,  1377,  1378,  1379,  1380,    76,  1382,  1384,  1385,  1166,
-    1387,  1261,  1390, -2178, 19859,   995, 10828, -2178, -2178, -2178,
-   -2178,  1160,  1161,  1165,   521,  1167,   425,   425,  1169,   425,
-    1024,  2107,   191, -2178,  1148,  1018, 20247, -2178,    53, -2178,
-    1003, -2178, -2178, -2178, -2178, -2178,   -15, 21894, -2178, -2178,
-   16394, 17895, -2178, -2178, -2178, -2178,  1134, -2178,  1138,  1015,
-    1016,  1017,  1019, 17944, 17977, -2178, 17990, 16437,  5219, 18021,
-    5219,  1042, 21747,  1045,  1022,  5219,  5219,  1023, 18045, 18259,
-    1025,  1026, 18292, 16476, 18304,  1027,  1031, 18418,  1032, 16492,
-    1034,   -74, 18452, 14547,  1035, 14572,   269,   269,   269,   269,
-     269,   269,   269,  1240, -2178,   420,   420,  1721, 18521,  1149,
-    5219,  5219,  5219,   859,   859,   269,   859, 22195,   332,   357,
-    5627,   -74,  5627,   -74,   -73,   -73,   -73,  1079, 16585, 18566,
-   18756, 16752, 14596, 16709,  5219,  5219,  5219, 18783,  1037, 18856,
-   18880, 18973, -2178, -2178,  1041, -2178,  5219,   269,   269,   269,
-     269,   269,   269,   269,  1248, -2178,   420,   420,  1721, -2178,
-    1149,  1044,  5219,  5219,  5219,   859,   859,   269,   859, 22206,
-     332,   357,  5627,   -74,  5627,   -74,   -73,   -73,   -73,  1079,
-     844,   844, -2178, -2178,  1184,  1293, -2178, -2178, -2178, -2178,
-   -2178,    -3,    41,  1211,  1212,   425, -2178,  1310,  1386, -2178,
-   -2178, -2178, 23465, 20642, -2178,   521, -2178, 23075,  1194, -2178,
-   -2178, -2178,   301,   130,  1051,  1312,  1313, -2178,   -41, 11998,
-      53,  1264,  1264,    53,    53,  1303, -2178, -2178,   215, -2178,
-    1066, 21037, 23075, -2178, -2178, -2178, 23075, 13558,  1314,   173,
-   -2178, -2178, 23075,  -107,   312,   173,  2771, -2178, -2178,  1064,
-    9653, -2178, -2178, -2178, -2178, -2178, -2178,  1267,  1065, 21894,
-   -2178, -2178, 12388,   102, -2178, -2178, -2178,   508,   530, 12388,
-   -2178, -2178, 12388, 12388,  1224,  1320,  1321, 12388, 12388,   521,
-     425, -2178, 25025,   425,  1463,   425, -2178, -2178,  1464,   521,
-     521, -2178,     6,    -5,   425,   425, -2178, -2178, -2178, 11608,
-      24,   701,  1070,   173,   192, 12388,  1233, -2178, 19965,  8873,
-   25025,   135,    29, -2178,  1071, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-    8483, -2178,    30, -2178, -2178, -2178, -2178,  1226,  1073,    53,
-    1267,   274,    41,  1078, -2178, -2178,  1074,  5219, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178,   -22, -2178, -2178,  5219,
-   21894, -2178, 21894, -2178,  5219,  5219, -2178, 21703, 21703, -2178,
-   -2178, -2178, -2178, -2178, -2178,  5219, -2178, -2178, -2178, -2178,
-    1294,  5219, -2178, -2178, -2178,  5219, -2178, -2178,  5219, -2178,
-   -2178, -2178,  1149,   269, 22251,  5219, 21703, 21703,  5219, -2178,
-   -2178,  5219, -2178, -2178,  5219,  5219, 19046, 19070, 19193, -2178,
-    1296, -2178, -2178, -2178, -2178,  1721, -2178,  1083, -2178, -2178,
-    1149,   269, 22306,  5219, 21703, 21703,   -52, -2178, -2178, -2178,
-    1352, -2178, -2178, -2178,   -85,  1125, -2178, 24245, -2178, -2178,
-   -2178, -2178,  1081, -2178,  1076, -2178,  1325,   979, -2178,  1147,
-   -2178, -2178,    53,  1264,  1264,  1090,   173,   452, -2178,  1349,
-    1350,   452,    38,    16, -2178, 25025, -2178, -2178,  1158,  -106,
-   -2178,  1096, -2178,   221,  2771,   173, -2178,  1101, -2178, 25025,
-    5219, -2178, -2178, -2178, 21894, -2178,    21, 11998, -2178,  1102,
-   -2178,    -6,  1107,   391, -2178, -2178, -2178,   875,  1076, -2178,
-    3179, -2178, -2178, -2178,  5219,  1356,  1357,   102, -2178, -2178,
-   -2178,  1113,    87, -2178, -2178, 12388, -2178, -2178,    47, -2178,
-   -2178, -2178, -2178,  1269, -2178,  1271, -2178, -2178,  5219, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178, 11608, 25025, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-     394, -2178, -2178, -2178, -2178, 25025, -2178, -2178, 11608, -2178,
-   -2178, 25547, 25025, -2178,  1114,   402, -2178, -2178, -2178,  1424,
-    1283, 25025,    41,  1236, -2178, -2178, 16738,  1170, 19307, 21894,
-   21850,  1118,  1122, 14615,  1115, 19382, 19407, 19421, -2178,  5219,
-    1721,   844,   844, 19475, 19500, 19531, 19722, -2178, -2178, -2178,
-    1120, -2178,  1124, -2178,  5219,  1721,   844,   844,  1389,  1443,
-    1399,  1439,   425,   425,  1183, -2178, -2178, 21432, -2178,  1527,
-   -2178,  1338,   452,  1393,  1394, 11998,  1018,  5219,    53,    53,
-    5219, -2178,   102,   102,   102, -2178, -2178,  1451,   158, 23075,
-    1285,   134,  1329, -2178, -2178, -2178,  -107,  1302,   173, 21894,
-     734,  1139, -2178,   173,  3179,  1064,  1486, -2178, -2178,    -6,
-   11998, -2178, -2178,   409, 21894, 12388, -2178, -2178, 25025,  1446,
-    1450, 12388, -2178, -2178, -2178, -2178, 21894,  1151,   113,   430,
-   -2178, 25547, -2178,  8873, -2178,   -72,  1150,  1155, -2178,   506,
-     -70,  1249, -2178, -2178, -2178, -2178, -2178, -2178,  1157,  1275,
-   -2178,  1157, -2178, -2178, -2178, -2178, -2178, -2178,  1157, -2178,
-   -2178, -2178,  1163, -2178, -2178, -2178, -2178,  1164, -2178,  1155,
-     598,   -21,  1168,  1155,  1171, -2178, -2178, 19859, -2178,    -1,
-   -2178,   432,   113,  1172, -2178,   521, -2178,  5219,  1173, -2178,
-    5219, -2178, -2178, -2178,  5219,  1029, -2178, -2178, -2178,  1721,
-   -2178, -2178, -2178, -2178, -2178, -2178,  1721,  1326,  5219, -2178,
-    1267,   547,  1413, -2178, -2178, -2178, -2178,  1328,  1423,    53,
-      53,   173,  1267, 21894,   553,   555, 21894,  1176, -2178, -2178,
-   -2178, -2178,   -94, -2178, -2178,  1331, -2178,  1339,  1342, -2178,
-      84, -2178,   618, -2178, -2178, -2178, -2178, -2178,  1181,  2771,
-     -44, 11998,  3179,  1185,   685, -2178,    85, -2178, -2178, -2178,
-    1187,   444, -2178,   731,   135,  5219, -2178, -2178, -2178, -2178,
-     598, -2178,    33,   145, 25025, -2178,    14, -2178,  1402,  1403,
-   -2178, -2178,  1289, -2178, -2178, -2178, -2178,  1191,  1408,   186,
-   -2178, -2178,  1196,   186,   186,  1411,  1412,   186,   463, -2178,
-     731,  1400, -2178,  1453,  1454, -2178,   598, -2178, -2178,  1376,
-   -2178,  1416, -2178,  1417,   186,  1419, -2178,   186,    85,    30,
-    1486, -2178, -2178, 25025, -2178,  1420, -2178, 19832, -2178, 21894,
-   14696,  1206,  1207, 11608,   142,   113,  5219,  1076,  1526,  1528,
-    1502,  1531,   547, -2178,   -57, -2178,  1544,  1051,   452,   452,
-    5219,  1236,  5219,  1360,  5219,  1363, 25025,  1217, -2178,  1383,
-   -2178, -2178, -2178, -2178,   233,  1428,   425,   425,   425,   618,
-   -2178, -2178, -2178, -2178,    26, -2178, -2178, -2178, -2178, 25025,
-   -2178,   463,   463,   463, -2178, -2178,   113, -2178, -2178, -2178,
-     364,   364,   450, -2178,  1219,  1221,    27,   454, -2178, -2178,
-   -2178, -2178,   186, -2178,    27, -2178, -2178,  1228,  1232, -2178,
-     532, -2178, -2178, -2178, -2178, -2178,   173,  1234,  1235, -2178,
-    1222, -2178, -2178, -2178,  1237,   875,   113,  1238, -2178, -2178,
-    5219, -2178, -2178,  1439,   168,  5219, -2178, -2178, 21894,  1272,
-      27,    27,  1549,    27, -2178,  1554,  1557,   -57, -2178,  1465,
-    1455, 21894, -2178, 21894,  1242, 21894,  1244,   473, -2178, 24635,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,   479, -2178,
-     135, -2178,  1578, -2178,    40, -2178, -2178,    14, -2178, -2178,
-     482, -2178, -2178,  1462, -2178,   499, -2178, -2178, 25025,    39,
-      39, -2178, -2178, -2178, -2178, 19845,  1413, -2178, -2178,   113,
-   25025, -2178, -2178, -2178,    27, -2178,    27,    27, -2178,  1644,
-    5219, 25025, 25025, -2178, 25025, -2178,   520, -2178,  1438, -2178,
-   -2178, -2178, -2178, -2178, -2178,    27,  1251, -2178, -2178, -2178,
-   -2178,    85, -2178,  1519, -2178, -2178, -2178, -2178, -2178,   521,
-    1307,   525,   544, -2178, -2178, 25025, -2178, -2178, -2178, -2178,
-    1469,  1262,  1265,  1595, -2178, -2178, -2178, -2178,  1516, 11218,
-   -2178,  1268,  1506, -2178, -2178,   548,  5219,  1274,  1288, -2178,
-    1668, -2178, 21894, -2178, -2178,   425, -2178, -2178
+    1729,-32768, 11646,    95,   425,-32768,   196,-32768,   603,-32768,
+  -32768,   492,-32768,-32768,  5233,    22,   425,   360,   425,-32768,
+     425,-32768,   174, 26509,-32768,-32768,   112,    53,   375,   218,
+     425,-32768,   425,   425,-32768,-32768,-32768,   425,   425,-32768,
+     294, 26509,-32768,   486,   574,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  9247,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768, 26509,   401,
+     128,   -76,-32768,-32768,   314,-32768,-32768,-32768,   241,   356,
+  -32768,-32768,-32768,-32768,   287,   415,-32768,   435,   436,   568,
+     266,  3223, 26509,-32768, 26509,   338,   469,   750,    33,   309,
+     311,   315,   319,   321,   328,   334,   352,   355,   363,   387,
+    5233,   398,   416,-32768,   418,-32768,   420,   422,-32768,   424,
+    5233,-32768,-32768,-32768,-32768,   429,   445,   452,   456,   470,
+     473,   629,   629,   629,-32768,   488,   494,   499,  5233,   509,
+     513,   526,   539,   548,   564,   575,   589,   594,   617,   620,
+     621,   622,   625,   626,   627,   628,   630,   632,   635,   638,
+    5635,   639,   640,   641,   642,   644,   645,   646,   648,   649,
+     651,   652,   654,   656,   658,   659,   660,   664,   665,   666,
+     668,   669,   671,   673,   676,   678,   680,   689,   694,   695,
+     700,   718,  5233,  5233,  5233,  5233, 26509, 12843, 26509, 22969,
+  -32768,-32768,-32768,   691,-32768,-32768,   537,    27, 11646,-32768,
+  -32768,-32768,   947,-32768,   428,   979,-32768,-32768,   551,  1968,
+     183,   183,   183,-32768,   183,-32768, 11646,-32768,   897,-32768,
+  -32768, 15051,-32768,-32768, 15051,-32768,-32768,-32768,    68,-32768,
+  -32768,-32768,-32768,   707,-32768,   161,-32768,-32768, 26509, 11646,
+   11646,-32768,-32768,-32768,   938, 26509,   287,-32768, 26509, 26509,
+  -32768,-32768, 25312,   266,-32768, 22969,   719,-32768,   934,-32768,
+    1014, 26509,   338,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+    1044,-32768,-32768,   867,-32768,   727,-32768,-32768,-32768,-32768,
+  -32768,    95,  1063,    89,-32768,  5233,  1063,  1063,-32768,  1063,
+    1063,  5233,-32768,   -91,  5233,  5233,  5233,  5233,  5233,-32768,
+     828,-32768, 12045,   -91,   731,  5233,  5233,  5233,-32768,-32768,
+     691,   691,   691,  5233,  1063,  1063, 22969,   760,-32768,  5233,
+     734,-32768,  3625,-32768,   741,  5233,  5233,  5233,  5233,  5233,
+    5233,  5233,  5233,  5233,   975,  5233,  5233,  5233,   629,  5233,
+    5233,  5233, 22860,  4027,  5233,  5233,  5233,  5233,  5233,  5233,
+    3625,-32768,  5233,  5233,  4429,  5233,  5233,  5233,  5233,  5233,
+    5233,  2419,   742,   742,   742,   742,   742,   742,   629,  4831,
+     743,  5233,  5233,  5233,     4,   -91,   -91, 17659,   -91,  5233,
+  -32768,-32768,   476,-32768,  1141,   744,  5233,  5233,  5233,  5233,
+    5233,  5233,  5233,   238,  5233,  5233,  5233,   748,  5233,   462,
+    5233,  5233,  5233,  5233,  5233,  5233,  5233,  6037,  6439,  5233,
+    5233,  5233,  5233,-32768, 26509,-32768,  1111,-32768,   999,  1035,
+   11646,   571, 11646,  1007, 11646,-32768,-32768,  1083,   763,-32768,
+   26509,   916,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,   786,   551,-32768,  1155,   951,   -26,   280,  1036,
+  -32768,-32768,   855,-32768,-32768,  1036,   958,-32768,-32768,-32768,
+    1150,   960,-32768,  1036,   331,   967,  1036,  1036,   331,-32768,
+      37,   939,-32768,-32768,   796,-32768,   796,   796,-32768,   796,
+  -32768,-32768,-32768,    95, 11646, 11646,-32768,   964,-32768,-32768,
+  -32768,-32768,   968,   125,-32768,  1108,-32768,-32768,  1003,-32768,
+    1015,-32768,-32768,-32768,-32768,-32768,-32768,  1018,   805,-32768,
+   11646, 11646,  1022,   480,-32768, 10045,-32768,   808, 24115, 26509,
+  -32768,-32768, 26509,-32768, 26908,  1023,-32768,   -17,-32768,  1064,
+    1105,-32768, 11646,-32768,  1029, 11646,-32768,   814,-32768,   810,
+  -32768,  3223, 11646,-32768,-32768, 11646,-32768,  1010,   750, 11646,
+   10045,-32768,   818,-32768,-32768,   827,   837,-32768,  2027,   831,
+     833,-32768,   836,   840, 15031,-32768, 22876, 15123, 15347, 15361,
+   13949,   842,   838,   844,-32768,-32768, 17681, 15439, 15453,   843,
+    5233,   846, 13965,   847,   849,-32768,   850, 15466,-32768, 17704,
+  -32768, 15782, 15795, 15808, 14008, 14041, 15821, 15900, 14057, 16138,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,  1135, 16230, 16243, 14279,   -55, 17952, 16256,
+   14325,   860,-32768, 18036, 16335, 16573, 16604, 16665, 18110, 18148,
+   18264, 18307, 22980,-32768,-32768, 18381, 16678, 16771, 14378, 18461,
+   14495, 16946,  5233,  5233,  5233, 17579,   853,-32768,   856,   857,
+     864,   865,   868,    -6,-32768, 18480,-32768, 14548, 18556, 14574,
+  -32768,-32768,-32768,-32768,-32768,   854,-32768,  1859,   863,   866,
+     869, 24514,  5233, 26509,   384,   384,   384,   384,   384,   384,
+     384,  1078,-32768,   349,   349,   441,-32768,  1163,   872,  5233,
+    5233,  5233,   244,   244,   384,   244, 23290,-32768,   400,   149,
+    5635,    35,  5635,    35,   -91,   -91,   -91,  1093,   873,-32768,
+  -32768,  1140,  1244,   138,   881,-32768,  1060,  1290,  1062,-32768,
+     -17,  1051,   -25,  1113,-32768,   428,-32768,   107,-32768,-32768,
+  -32768,   -18,-32768,  5233,-32768,  1151, 11646,-32768,-32768,-32768,
+  -32768,    -1,-32768, 24514,-32768,-32768,   965,   331,-32768,-32768,
+  -32768,  1036, 26509,   331,-32768,-32768, 11646,   331,-32768,  1036,
+     183,  1235,   219,   -32,   -17,  1066,   899,-32768,-32768,-32768,
+     899,-32768,   899,-32768,-32768,   899, 10444, 15944,   898,-32768,
+    1065,   -47, 10444,-32768,-32768,-32768,   900, 13641, 11646,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+      79,   101,   997,  1042,-32768,  1962,-32768,-32768,-32768,-32768,
+  -32768, 11646,-32768,-32768,   585,  1308,  1309,  1310,  1311,  1312,
+    1316,  1317,  1321,  1322,   918,-32768,-32768,-32768,  1080, 11646,
+     814,-32768,     9, 26509,  1211, 21340,-32768,-32768,-32768,   -20,
+    1293,-32768,   929,-32768,-32768,-32768,  5233,-32768,-32768,   931,
+  -32768,  5233,-32768,-32768,-32768,-32768,-32768,  5233,-32768,    39,
+      39,-32768,-32768,-32768,  5233,-32768,  5233, 12045,-32768,  5233,
+    5233,-32768, 22969,   936,-32768,-32768,  5233,-32768,-32768,  1013,
+    5233,-32768,-32768,-32768,   993,  1000,  1106,-32768,  5233,-32768,
+    5233,-32768,  1107,-32768,  5233,  5233,  5233,-32768,  1158,-32768,
+    5233,  1161,-32768,  5233,-32768,  5233,-32768,  5233,  5233,-32768,
+    5233,-32768,-32768,-32768,-32768,  5233,  5233,  5233,  5233,  5233,
+    5233,  5233,   337,  5233,  5233,  5233,  5233,  5233,   -27,  5233,
+    5233,  5233,  5233,  5233,  5233,  5233,  6841,  7243,  5233,  5233,
+    5233,  5233,-32768,  5233,  5233,-32768,  5233,-32768,  5233,  5233,
+    5233, 22969,  1229,  1230,  1231,  5233,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,  1165,-32768,-32768,  5233,-32768,-32768,  5233,
+    5233,-32768,-32768,-32768,-32768,-32768, 22969,-32768,-32768,   952,
+    1117,-32768,-32768,  1163,   384, 23323,  5233,  5233,  5233,  5233,
+    5233,  5233,  5233,   508,  5233,  5233,  5233,   955,  5233,   512,
+    5233,  5233,  5233,  5233,  5233,  5233,  5233,  7645,  8047,  5233,
+    5233,  5233,  5233, 22860, 22860, 26509,  1119,-32768,   442, 11646,
+  -32768,  1120,  1098,-32768,  1122,-32768,-32768,-32768,-32768,-32768,
+       2,  1318,-32768,-32768,-32768,-32768,-32768,   219,   544,-32768,
+  -32768,    25,  1222,-32768,  1246,-32768, 22969,-32768,   954,  1127,
+    1248,-32768,-32768,   961,-32768,  1325,  1036,-32768,-32768,  1036,
+     331, 11646,-32768,-32768,   611,-32768,   219, 26509,    45,-32768,
+   11646,  1138,-32768,-32768, 26509,-32768,-32768,-32768,-32768,   972,
+  -32768,   973,  1143,-32768, 11646, 11646,  1147,  1269,   480,  1247,
+    1166,    59, 13242,-32768,-32768,   169,-32768,    -5,    85,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+    5233,  1110,   758,  1301,  1301,  1397,   809,  1398,  1400,   169,
+    1401,  1291,  1403,  1257,  1258,  1295,  1407,  1408,  1326,  1409,
+    1411,  1412,  1414,    90,  1415,  1416,  1417,  1191,  1419,  1301,
+    1420,-32768, 15856,  1017, 10848,-32768,-32768,-32768,-32768,  1184,
+    1186,  1187,   528,  1188,     4,     4,  1189,     4,  1064,  1298,
+     479,-32768,  1171,  1042, 21340,-32768,   219,-32768,  1021,-32768,
+  -32768,-32768,-32768,-32768,    -5, 22969,-32768,-32768,  1030, 17020,
+    1034, 18578,  1037,-32768,-32768,-32768,-32768,  1159,-32768,  1160,
+    1038,  1039,  1040,  1041, 18677, 18752,-32768, 18795, 17039,  5233,
+   18907,  5233,  1067, 22919,  1069,  1045,  5233,  5233,  1047, 18991,
+   19024,  1049,  1050, 19220, 17100, 19259,  1052,  1055, 19273,  1043,
+   17113,  1056,    35, 19320, 14597,  1058, 14654,   384,   384,   384,
+     384,   384,   384,   384,  1277,-32768,   349,   349,   441, 19375,
+    1163,  5233,  5233,  5233,   244,   244,   384,   244, 23397,   400,
+     149,  5635,    35,  5635,    35,   -91,   -91,   -91,  1093, 17330,
+   19492, 19549, 17602, 14926, 17383,  5233,  5233,  5233, 19594,  1061,
+   19821, 19833, 19864,-32768,-32768,  1068,-32768,  5233,   384,   384,
+     384,   384,   384,   384,   384,  1279,-32768,   349,   349,   441,
+  -32768,  1163,  1071,  5233,  5233,  5233,   244,   244,   384,   244,
+   23415,   400,   149,  5635,    35,  5635,    35,   -91,   -91,   -91,
+    1093,   860,   860,-32768,-32768,  1203,  1314,-32768,-32768,-32768,
+    1072,  1434,-32768,-32768,  1438,     6,    75,  1238,  1239,     4,
+  -32768,  1329,  1418,-32768,-32768,-32768, 24913, 21744,-32768,   528,
+  -32768, 24514,  1218,-32768,-32768,-32768,   331,  1484,  1486,  1081,
+  -32768,   484,  1082,  1342,  1343,-32768,    44, 12045,   219,  1294,
+    1294,   219,   219,  1199,-32768,-32768,   405,-32768,  1094, 22148,
+   24514,-32768,-32768,-32768, 24514, 13641,  1344,   169,-32768,-32768,
+   24514,  -113,   476,   169,  2821,-32768,-32768,  1089,  9646,-32768,
+  -32768,-32768,-32768,-32768,-32768,  1300,  1090, 22969,-32768,-32768,
+   12444,   339,-32768,-32768,-32768,    52,   714, 12444,-32768,-32768,
+   12444, 12444,  1256,  1351,  1352, 12444, 12444,   528,     4,-32768,
+   26509,     4,  1501,     4,-32768,-32768,  1502,   528,   528,-32768,
+      78,    16,     4,     4,-32768,-32768,-32768, 11646,    18,   769,
+    1099,   169,   115, 12444,  1263,-32768,  1962,  8848, 26509,    96,
+     373,-32768,  1095,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  8449,-32768,
+      62,-32768,-32768,-32768,-32768,  1254,  1109,   219,  1300,   276,
+      75,  1112,-32768,-32768,  1114,-32768,  5233,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   -22,-32768,-32768,
+    5233, 22969,-32768, 22969,-32768,  5233,  5233,-32768, 22860, 22860,
+  -32768,-32768,-32768,-32768,-32768,-32768,  5233,-32768,-32768,-32768,
+  -32768,  1323,  5233,-32768,-32768,-32768,  5233,-32768,-32768,  5233,
+  -32768,-32768,-32768,  1163,   384, 23444,  5233, 22860, 22860,  5233,
+  -32768,-32768,  5233,-32768,-32768,  5233,  5233, 19913, 20132, 20151,
+  -32768,  1324,-32768,-32768,-32768,-32768,   441,-32768,  1116,-32768,
+  -32768,  1163,   384, 23727,  5233, 22860, 22860,   -36,-32768,-32768,
+    1346,-32768,-32768,-32768,  1389,-32768,-32768,-32768,   -62,  1162,
+  -32768, 25711,-32768,-32768,-32768,-32768,  1118,-32768,  1110,-32768,
+    1359,  1036,  1283,   528,   611,-32768,  1179,-32768,-32768,   219,
+    1294,  1294,  1124,   169,   466,-32768,  1381,  1382,   466,    24,
+      21,-32768, 26509,-32768,-32768,  1190,  -100,-32768,  1126,-32768,
+     261,  2821,   169,-32768,  1129,-32768, 26509,  5233,-32768,-32768,
+  -32768, 22969,-32768,   551, 12045,-32768,  1130,-32768,     7,  1132,
+     413,-32768,-32768,-32768,   916,  1110,-32768,  3223,-32768,-32768,
+  -32768,  5233,  1387,  1390,   339,-32768,-32768,-32768,  1136,    77,
+  -32768,-32768, 12444,-32768,-32768,    55,-32768,-32768,-32768,-32768,
+    1303,-32768,  1305,-32768,-32768,  5233,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768, 11646, 26509,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   426,-32768,-32768,
+  -32768,-32768, 26509,-32768,-32768, 11646,-32768,-32768,  2004, 26509,
+  -32768,  1134,   457,-32768,-32768,-32768,  1468,  1306, 26509,    75,
+    1260,-32768,-32768, 17484,  1198, 20182, 22969, 22952,  1146,  1153,
+   15004,  1156, 20243, 20349, 20466,-32768,  5233,   441,   860,   860,
+   20511, 20620, 20779, 20795,-32768,-32768,-32768,  1157,-32768,  1167,
+  -32768,  5233,   441,   860,   860,  1422,  1556,  1477,  1436,  1474,
+       4,     4,  1216,-32768,-32768, 22552,-32768,  1570,-32768,-32768,
+  -32768,-32768,  1374,   466,  1427,  1428, 12045,  1042,  5233,   219,
+     219,  5233,-32768,   339,   339,   339,-32768,-32768,  1491,   102,
+   24514,  1313,    23,  1364,-32768,-32768,-32768,  -113,  1337,   169,
+   22969,   786,  1174,-32768,   169,  3223,  1089,  1526,-32768,-32768,
+       7, 12045,-32768,-32768,   460, 22969, 12444,-32768,-32768, 26509,
+    1483,  1485, 12444,-32768,-32768,-32768,-32768, 22969,  1177,    92,
+     463,-32768,  2004,-32768,  8848,-32768,   -85,  1181,  1183,-32768,
+     624,   -96,  1284,-32768,-32768,-32768,-32768,-32768,-32768,  1192,
+    1302,-32768,  1192,-32768,-32768,-32768,-32768,-32768,-32768,  1192,
+  -32768,-32768,-32768,  1193,-32768,-32768,-32768,-32768,  1194,-32768,
+    1183,   570,     3,  1196,  1183,  1197,-32768,-32768, 15856,-32768,
+       8,-32768,   481,    92,  1202,-32768,   528,-32768,  5233,  1204,
+  -32768,  5233,-32768,-32768,-32768,  5233,  1063,-32768,-32768,-32768,
+     441,-32768,-32768,-32768,-32768,-32768,-32768,   441,  1355,     4,
+    5233,-32768,  1300,   653,  1439,-32768,-32768,-32768,-32768,  1361,
+    1457,   219,   219,   169,  1300, 22969,   530,   677, 22969,  1206,
+  -32768,-32768,-32768,-32768,   198,-32768,-32768,  1366,-32768,  1367,
+    1370,-32768,    32,-32768,    26,-32768,-32768,-32768,-32768,-32768,
+    1207,  2821,   -33, 12045,  3223,  1208,   719,-32768,    85,-32768,
+  -32768,-32768,  1210,   491,-32768,  1079,    96,  5233,-32768,-32768,
+  -32768,-32768,   570,-32768,    15,   117, 26509,-32768,   282,-32768,
+    1429,  1430,-32768,-32768,  1319,-32768,-32768,-32768,-32768,  1215,
+    1433,   379,-32768,-32768,  1219,   379,   379,  1437,  1440,   379,
+     629,-32768,  1079,  1442,-32768,  1467,  1482,-32768,   570,-32768,
+  -32768,  1404,-32768,  1444,-32768,  1445,   379,  1446,-32768,   379,
+      85,    62,  1526,-32768,-32768, 26509,-32768,  1448,-32768, 20888,
+  -32768, 22969, 15018,  1232,  1233, 11646,  1240,  -118,    92,  5233,
+    1110,  1560,  1561,  1539,  1565,   653,-32768,   248,-32768,  1578,
+    1082,   466,   466,  5233,  1260,  5233,  1391,  5233,  1392, 26509,
+    1249,-32768,  1421,-32768,-32768,-32768,-32768,   145,  1463,     4,
+       4,     4,    26,-32768,-32768,-32768,-32768,    25,-32768,-32768,
+  -32768,-32768, 26509,-32768,   629,   629,   629,-32768,-32768,    92,
+  -32768,-32768,-32768,   531,   531,   495,-32768,  1251,  1253,    -1,
+     503,-32768,-32768,-32768,-32768,   379,-32768,    -1,-32768,-32768,
+    1259,  1261,-32768,   691,-32768,-32768,-32768,-32768,-32768,   169,
+    1262,  1264,-32768,  1255,-32768,-32768,-32768,  1265,   916,    92,
+    1267,-32768,-32768,  5233,-32768,-32768,  1474,  1523,  1399,   150,
+    5233,-32768,-32768, 22969,  1307,    -1,    -1,  1584,    -1,-32768,
+    1589,  1590,   248,-32768,  1511,  1488, 22969,-32768, 22969,  1275,
+   22969,  1276,   545,-32768, 26110,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,   553,-32768,    96,-32768,  1612,-32768,   305,
+  -32768,-32768,   282,-32768,-32768,   557,-32768,-32768,  1494,-32768,
+     559,-32768,-32768, 26509,    29,    29,-32768,-32768,-32768,-32768,
+   20949,  1439,  1683,  1666,-32768,-32768,-32768,    92, 26509,-32768,
+  -32768,-32768,    -1,-32768,    -1,    -1,-32768,  1685,  5233, 26509,
+   26509,-32768, 26509,-32768,   566,-32768,  1472,-32768,-32768,-32768,
+  -32768,-32768,-32768,    -1,  1285,-32768,-32768,-32768,-32768,    85,
+  -32768,  1553,  1450,-32768,-32768,-32768,-32768,-32768,-32768,   528,
+    1935,   576,   579,-32768,-32768, 26509,-32768,-32768,-32768,-32768,
+    1504,  1292,-32768,  1297,  1617,-32768,-32768,-32768,-32768,  1540,
+   11247,-32768,  1399,  1299,  1527,-32768,-32768,   586,-32768,  5233,
+    1315,  1320,-32768,  1698,-32768, 22969,-32768,-32768,     4,-32768,
+  -32768,  1708,  1714,-32768
 };
 
-/* YYPGOTO[NTERM-NUM].  */
 static const short yypgoto[] =
 {
-   -2178, -2178, -2178, -2178, -2178, -2178,   373, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178,  -479, -2178, -2178, -1498, -2178, -2178,
-   -2178,  1422, -2178,  1253,  -331, -1267, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178,    77,  -285,   393,   426,    99,   150,
-   -2178, -2178,  -269, -2178,  -276, -2178, -2178,  -283,  -281, -2178,
-   -2178, -1553,  -314, -1169, -2178,  -531, -1503, -2178,  -398, -2178,
-    -432, -1374,  -641,  -599, -2178,  -397,  -511, -2178, -1204, -2178,
-   -2178, -1819,  -442, -1501,  -522, -2178, -2178, -2178, -2178,   136,
-   -2178, -2178, -2178,  -636,  -351,   -75, -1995, -2178, -2178, -2178,
-   -2178,   281,   805, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-     539, -2178, -2178, -2178, -2178, -2178,  -738,   750, -2178, -2178,
-   -2178, -2178, -2178, -2178,   491,  1661,   271, -2178, -2178,  1330,
-   -2178, -2178, -1195,   -26, -2178,  1126,  -469,  -193,   554, -2177,
-   -2178, -2178, -2178,  -146,   -10, -2178, -2178,  -810,  -484,   225,
-   -2178, -2178, -2178,  -453, -2178,   730,  -417, -2178, -2178, -2178,
-    1290, -2178, -2178, -2178, -2178, -2178, -2178, -2178,   148, -1167,
-   -2178, -2178, -2178, -2178, -1464, -2178, -1340, -2178,  -957, -2178,
-   -2178, -1365,  -474, -2178,  -856,  1291, -1278, -2178, -2178, -1086,
-   -2178, -2178, -2178, -1579,  -938, -2178, -2178, -1967, -1245, -2178,
-   -2178,  -439, -1284, -1476, -2178, -2178, -2178, -2178,  -661,   558,
-   -2178, -2178, -2178, -2178, -2178,  -582,  -338,  1311, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178,  1038,   808,   433,
-   -2178, -2178,  -639, -1578, -2178, -2178, -2178, -2178,  -330, -1194,
-   -1493,  -182, -2178, -2178, -1610,  -714, -2178, -2178, -2178, -2178,
-    1354, -2178, -2178, -2178, -2178, -2178, -2178,  1056,   771, -1286,
-    1332, -2178, -2178, -2178, -2178, -2178, -2178, -2178,  -876,  -604,
-   -2178,  -568, -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,
-   -2178,  1048, -2178, -2178, -2178, -2178, -2178,   878, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178,    65,  -501, -2178,  -409,
-    -561, -2178,  -510, -2178,  -299,  -684, -1940,  -171,   882, -1930,
-    -459, -1453,     0, -2178,    -2,  -358,  -878, -2178, -2178, -2178,
-   -2178, -2178,   542, -2178,   259,   267,    28, -2178,  -151, -1704,
-   -2178, -2178,  1381, -2178,   610, -2178, -2178, -2178, -2178, -2178,
-   -2178, -2178, -2178, -2178, -2178, -2178, -2178, -2178,  1391, -2178,
-     847, -2178, -2178, -2178, -2178, -2178,  -415, -2178,   848,   279,
-    -133,  -224, -2178,    54, -2178, -2178, -2178,  -408, -2178, -2178,
-   -2178, -2178, -2178, -2178, -1734,  -598, -2178, -2012, -2178, -2178,
-   -2178
+  -32768,-32768,-32768,-32768,-32768,   372,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,  -500,-32768,-32768, -1538,-32768,-32768,-32768,
+    1456,-32768,  1288,  -351, -1315,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,    70,  -304,   397,   431,    97,   143,-32768,
+  -32768,  -283,-32768,  -292,-32768,-32768,  -299,  -298,-32768,-32768,
+   -1845,  -332, -1421,-32768,  -560, -1604,-32768,  -426,-32768,  -461,
+   -1501,  -678,  -633,-32768,  -428,  -543,-32768, -1239,-32768,-32768,
+   -1897,  -471, -1553,  -551,-32768,-32768,-32768,-32768,   122,-32768,
+  -32768,-32768,  -415,  -312,   -94, -2064,-32768,-32768,-32768,-32768,
+  -32768,   258,   813,-32768,-32768,   -16,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,   552,-32768,-32768,-32768,-32768,-32768,  -762,
+     755,-32768,-32768,-32768,-32768,-32768,-32768,   490,  1703,   259,
+  -32768,-32768,  1358,-32768,-32768, -1219,   -43,-32768,  1148,  -495,
+    -218,   555, -2297,-32768,-32768,-32768,  -159,   -10,-32768,-32768,
+    -827,  -501,   459,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,  -467,-32768,   738,  -453,-32768,-32768,-32768,  1327,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   185, -1194,-32768,
+  -32768,-32768,-32768, -1519,-32768, -1456,-32768,  -960,-32768,-32768,
+   -1391,  -503,-32768,  -872,  1331, -1289,-32768,-32768, -1126,-32768,
+  -32768,-32768, -1632,  -969,-32768,-32768, -1997, -1287,-32768,-32768,
+    -463, -1284, -1507,-32768,-32768,-32768,-32768,  -691,   577,-32768,
+  -32768,-32768,-32768,-32768,  -594,  -333,  1354,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,  1070,   820,   444,-32768,
+  -32768,  -659, -1723,-32768,-32768,-32768,-32768,  -341, -1189, -1542,
+    -193,-32768,-32768, -1721,  -724,-32768,-32768,-32768,-32768,  1402,
+  -32768,-32768,-32768,-32768,-32768,-32768,  1092,   795, -1282,  1376,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,  -894,  -629,-32768,
+    -581,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+    1084,-32768,-32768,-32768,-32768,-32768,   906,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,    66,  -512,-32768,
+    -420,  -575,-32768,  -525,-32768,  -310,  -697, -2004,  -182,   907,
+   -2009,  -484, -1549,    17,-32768,    -2,  -347,  -901,-32768,-32768,
+  -32768,-32768,-32768,   554,-32768,   262,   268,    19,-32768,  -161,
+   -1758,-32768,-32768,  1121,-32768,   633,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1423,
+  -32768,   871,-32768,-32768,-32768,-32768,-32768,  -424,-32768,   874,
+     275,  -146,  -163,-32768,    43,-32768,-32768,-32768,  -425,-32768,
+  -32768,-32768,-32768,-32768,-32768, -1784,  -616,-32768, -2068,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,  -624
 };
 
-/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
-   positive, shift that token.  If negative, reduce the rule which
-   number is the opposite.  If zero, do what YYDEFACT says.
-   If YYTABLE_NINF, syntax error.  */
-#define YYTABLE_NINF -1290
+
+#define	YYLAST		27310
+
+
 static const short yytable[] =
 {
-     247,   999,   245,  1481,   372,   488,   489,   490,   958,  1723,
-     895,   729,   562,   732,   733,   734,   735,   887,  1540,   889,
-     388,   745,  1605,  1606,  1472,  1608,  1754,  1587,  1177,  1298,
-    1729,  1208,  1772,   -67,  1624,   913,  1210,  1620,   409,   754,
-     755,  1863,  1213,  1951,  1613,  1527,   792,   804,  1791,  1523,
-    1935,  1493,  1144,  1526,  1527,  2164,  1425,    23,   968,  1527,
-     654,  2148, -1194,  1867,  1557,  1495,   416, -1193,   415,   750,
-     752,  1520,  1495,  1477,   919,  1495,   925,   926,  1238,   757,
-    1191,  1521,  1191,  1799,  2218,  1576,  1856, -1244, -1289,  1782,
-    1832,  -969,   858,  1806,  1807,   609,  1782,  1322,   868,  1792,
-    1793,  2112,  1192,   943,  1797,  1798,  1902,  1732,  1809,  2225,
-     394,   724,  1854,   577,   577,  1928,   831,  1223,  2175,   969,
-    2113,  2148,  1784,   380,  1181,  1959,  1818,   831,   433,  1181,
-     610,   920,  1837,   419,  1819,  1756,  1322,  1001,  1922,  2101,
-     905,  1004,  2361,   903,  1820,  1464,  2262,   593,  2198,  1179,
-     268,  1622,  1577,   591,  1923,   832,   611,  1845,  2228,  2203,
-     694,   955,  1740,  2224,  1495,  -698,   832,   725,  1856,   501,
-    1953,   694,  1188,  1496,   594,  2226,   688,  2285,   930,  1497,
-    1496,  2230,  1520,  1496,  2286,   833,  1497,  2112,  1224,  1497,
-    2106,  1714,  1521,  1947,  1710,   529,   833,  1465,  1833,   591,
-    2251,  2124,   728,  2337,  1811,  1812,  2113,  1189,  2277,  2073,
-     834,   931,   595,   970,  1528,  1498,  2231,   788,  2107,   904,
-     971,   834,  1498,  1206,  2406,  1498,  2338,   695,  2084,  2362,
-    1920,   972,  1323,   646,  2125,   656,  2229,  2406,   695,   906,
-    1193,  1544,   417,   921,   602,  1848,  1529,   824,  1466,  1757,
-    2149,   269,  1545,   647,  1846,  1529,   434,   612,   603,  2309,
-    1499,   381,  2199,   249,   270,  1182,   441,  1500,   442,   956,
-    1182,  1323,  1496,   471,  1500,  1924,  1800,  1500,  1497,  1802,
-     973,  1804,  1397,   481,  2150,  -834,   572,   573,  1810,  1814,
-    1815,  1816,  1821,   395,  1962,  2232,   835,  1183,  1921,  2333,
-    1929,   494,  1183,  1671,  1262,  1733,   924,   835,  1857,   421,
-    2149,  1834,  1211,  -698,  1498,  2359,  1960,  1060,  1216,  1578,
-    1734,  1903, -1194,   520,   587,   588,   589, -1193,   271,   590,
-     590,  1760,  2114,  1737,  2094,  1624,  1741,  1742,  1491,  1783,
-     893, -1194,  1782,   420,  1864,  2339, -1193,   973, -1244,   572,
-     573,   951,  1215,  1449,  1698,   553,   554,   555,   556,  2389,
-     973,  1478,  1194,  1122,  1194,  -698,  1500,   557,   561,   563,
-     255,  2097,  2374,   459,   572,   573,  1142,  1501,   868,   416,
-    1835,   597,   857,  2151,  1501,  2212,   951,  1501,  2085,  1530,
-    1857,  2074,  1502,  1913,  1914,  2075,   416,  1522,  1946,  1502,
-    2308,    42,  1502,  2160,   604,   460,  2274,   613,   614,   615,
-     616,   617,   618,   973,   973,   387,  -698,   859,  1390,   699,
-     416,   416,   700,   396,  2076,   914,   705,   860,   397,   707,
-     708,  -834,   461,   713,   407,  1931,  1316,  1503,  2133,   839,
-    1138,  1932,   718,   411,  1503,  2134,   915,  1503,  1772,   251,
-     252,  1933,  1862,  2311,  2100,   731,   577,  1218,  1441,   412,
-     736,  1219,   737,   738,   739,   740,   741,   413,  1442,   840,
-    2075,  2177,  1614,   747,   748,   749,  1501,   418,  2238,  1908,
-    1391,   753,  1615,  2191,  1134,  1616,  1495,   758,  2239,   861,
-     760,  1502,  2240,   762,   763,   764,   765,   766,   767,   768,
-     769,   770,  1782,   785,   786,   787,  2137,   789,   790,   791,
-    2154,   794,   795,   796,   797,   798,   799,   800,   801,   577,
-     802,  2161,   806,   807,   808,   809,   810,   811,   812,   816,
-    1443,  2332,   422,  1952,  -834,  1728,  1503,   826,   424,   828,
-     829,   830,  1917,   841,   577,   426,   831,   838,  2275,  2166,
-    2077,  2078,  2312,   429,   845,   846,   847,   848,   849,   850,
-     851,  1936,   854,   855,   856,  1912,   427,  1345,   863,   864,
-     865,   866,  1392,   869,   870,   872,   874,   875,   876,   877,
-     878,   862,  1674,  1957,  2024,   832,  1878,  1495,  2313,  1495,
-     879,  1332,  1328,  2314,  1496,   256,   416,   416,   884,   416,
-    1497,  1784,  1389,  1341,  1342,   892,  1489,   577,   868,  1490,
-     258,   945,   951,   431,  1893,   833,  1727,   968,  2053,  2054,
-    1744,  1745,  1444,  1784,  1354,  2077,  2078,   432,  2138,  1552,
-    1553,  1785,  1558,  1360,  1702,  1299,  1498,   443,  2062,  1365,
-     834,   946,  1598,   392,  1755,   393,  1370,   445,   257,  1743,
-    1298,  1374,   852,  -146,   853,  1585,   416,   416,   463,  2178,
-    2179,  -253,  2264,   583,   584,   585,   586,   587,   588,   589,
-    1473,  1474,   590,  1440,   650,   651,  2139,   653,   969,   868,
-    -834,  1599,   416,   416,   942,  1623,   464,   416,  1500,  1980,
-     959,   960,  1981,   465,   961,  1496,   964,  1496,  1460,  1461,
-    2140,  1497,   466,  1497,   416,   297,   989,   994,  1228,   993,
-    1229,  1600,  1786,  1230,   416,   947,  1000,   416,  2068,  2068,
-    2068,   416,   416,  2290,  1424,   467,   835,   584,   585,   586,
-     587,   588,   589,   468,  -146,   590,  1601,  1498,  1541,  1498,
-     469,  1031,  2180,   470,  2089,  2192,  2205,  2194,   472,  2092,
-    1613,  2064,  2065,   585,   586,   587,   588,   589,   473,  1383,
-     590,  1384,   258,  2328,  1787,  1555,   819,   820,   821,   822,
-     823,  1434,   970,  1435,   591,  -127,   474,  1985,   259,   971,
-    1333,  1544,  1823,  1334,  1335,  2141,  -146,  2142,  2181,  1500,
-     972,  1500,  1545,  2206,  2207,  2208,  1949,  1950,  1501,  1972,
-    1973,  1336,  2143,  1110,  1110,  1110,  1337,  2017,  1973,  2121,
-    2008,  1338,   592,  1502,  2099,   715,   585,   586,   587,   588,
-     589,   475,  1602,   590,  1251,  1252,  1253,  1254,   476,  1255,
-    1256,  1257,  1258,  1135,  1824,  2109,   973,  2162,  2163,   260,
-     561,   477,  1136,   482,  1825,   483,  1556,   484,  1826,  2220,
-    2163,  1143,   286,   485,  2144,  2317,  2163,   486,  1503,  2322,
-    2323,  1172,   487,  1173,   491,   288,   492,  2190,   564,   565,
-     566,   567,   568,   569,   570,   571,   572,   573,  2353,  2354,
-    1827,  1828,   493,  1829,  2358,  2163,  1525,  2364,  2365,  1200,
-     496,   291,  2188,  2189,   497,  2214,   498,  1202,   500,  1501,
-     416,  1501,  1205,  2393,  2367,  2365,  1672,   561,   868,   771,
-     772,   773,   774,   600,  1502,  1212,  1502,   416,   502,  1214,
-     294,   295,  2303,  2304,  2305,  2384,  2385,   775,   776,   777,
-    2395,  2354,  2279,   503,   574,   504,  1233,  1259,  1232,   778,
-     779,   505,  1233,   780,  1232,   506,   296,  1245,   416,  2396,
-    2354,   607,   781,  2411,  1950,  2369,  2370,   656,  1700,  1503,
-     868,  1503,  1112,  1113,  2245,  2246,  2070,  2071,  2249,   782,
-     783,   416,   507,   297,   508,   564,   565,   566,   567,   568,
-     569,   570,   571,   572,   573,  2259,  2381,  2382,  2261,   416,
-     509,  1313,   510,   713,   511,  1320,   512,   513,  1327,   514,
-     515,   516,  1330,   517,   575,   518,  2221,  1331,   521,   522,
-     523,   524,   525,  1343,   576,  1344,   526,   527,  1346,  1347,
-     528,   530,  1697,   531,   532,  1349,   533,  2222,  2223,  1352,
-     534,   535,   307,   536,   537,   538,   539,  1358,   540,  1359,
-    1736,   574,   541,  1362,  1363,  1364,   577,   542,   543,  1367,
-     544,   545,  1369,   546,  1371,   547,  1372,  1373,   548,  1375,
-     549,   550,   551,   552,  1376,  1377,  1378,  1379,  1380,  1381,
-    1382,  1776,  1385,  1386,  1387,  1388,   580,   693,  1393,  1394,
-    1395,  1396,   704,  1398,  1399,  1401,  1403,  1404,  1405,  1406,
-    1407,   715,  1408,  1409,   716,  1410,   717,  1411,  1412,  1413,
-     720,   721,   722,   725,  1417,   743,   756,   746,   759,   761,
-     446,   575,  -600,   827,   843,  1419,   844,   857,  1420,  1421,
-     880,   576,   881,  1910,   447,   883,   888,   890,   891,  1725,
-     893,  2417,   896,   901,   907,  1427,  1428,  1429,  1430,  1431,
-    1432,  1433,   902,  1436,  1437,  1438,   909,   910,   911,  1445,
-    1446,  1447,  1448,   577,  1450,  1451,  1453,  1455,  1456,  1457,
-    1458,  1459,   578,   579,   912,   918,   922,   923,   582,   448,
-     929,   927,  1462,  1871,  1872,   933,   416,   935,   884,   895,
-     936,  -145,   938,   580,  1541,   939,  1542,   977,   978,   979,
-     980,   981,   982,   983,   944,   984,   985,   954,   449,  -970,
-     988,   991,  1881,  1882,   997,   995,  1002,  1007,  1010,  1013,
-    1011,  -145,  1014,   416,  1543,  1492,  1026,  1494,  1015,  1016,
-     416,   450,  1505,  1025,  1507,  1024,  1030,  1544,  1033,  1036,
-    1896,  1897,  1037,   581,   416,   416,   942,  1514,  1545,  1040,
-    1055,  1064,   561,  1116,  1117,  1118,  1119,  1120,  1121,  1969,
-    1137,  1129,  1539,   583,   584,   585,   586,   587,   588,   589,
-    1131,  1132,   590,  1133,  1139,  1141,   577,   451,  1174,  1175,
-     452,  1176,  1178,  1180,  1203,   582,  1209,  1226,  1225,  1237,
-    1236,  1262,  1892,  1240,   453,  1301,  1302,  1303,  1304,  1305,
-    1306,  1307,  -145,  1308,  1594,  1309,  1310,   454,  1312,  1318,
-     455,   252,  1325,   973,  1329,  1350,  -698,  1348,  1943,  1357,
-    1361,  1366,   694,  1355,  1621,  1356,   564,   565,   566,   567,
-     568,   569,   570,   571,   572,   573,  1368,  1414,  1415,  1416,
-    1418,  1423,  1422,  1439,  1463,  1469,  1192,  -698,  1640,  1191,
-    1642,  1484,  1485,  1487,  -145,  1647,  1648,  1483,  1506,  1488,
-    -698,  1510,  1512,  1511,  1515,  1516,  1518,  1541,  1193,  1519,
-     583,   584,   585,   586,   587,   588,   589,  1554,  1559,   590,
-    1560,  1563,  1564,  1565,  1566,  1130,  1567,  1568,  2216,   695,
-    1569,  1673,   574,  1570,  1571,   253,  1572,  1573,  1574,  1575,
-    1676,  1580,  1677,  1581,  1582,  1583,  1584,   382,   383,  1586,
-     385,  1588,  1595,  1596,  1686,  1687,  1688,  1597,  1619,  1604,
-     399,  1607,   401,   402,  1623,  1629,  1695,   404,   405,  1630,
-    1631,  1632,  1633,  1645,  1634,  -698,  1643,  1646,  1649,  1669,
-    1652,  1653,  1657,  1701,  -698,  -698,  1658,  1696,  1660,  1662,
-    1666,  -698,  1704,  1690,  1705,  -698,  1694,  -698,  1699,  1707,
-    1708,  -698,   575,  1711,  1712,  1715,  2061,  1716,  1726,  1219,
-    1730,  1731,   576,  1738,  1746,  1280,  1794,  1753,  1768,  1780,
-    1795,  1796,  1803,  1805,  1831,  1838,  1319,  1861,  1860,  1865,
-    1720,  1722,  1852,  1899,  1874,   561,  1890,  -698,  1891,  1904,
-    1909,  1776,  1907,  1911,   577,  -698,  1915,  1918,  1919,  1927,
-    2018,  -698,  1929,   578,   579,  1937,  1955,  1956,  1945,   960,
-     561,  1964,  1948,  1965,   561,  1245,  1764,  1958,  2025,  2016,
-     561,  2035,  2028,  2031,   580,  2020,  2044,  2032,  1202,  2045,
-    2048,  2049,  -698,  2047,  2051,  2055,  2057,  2058,  2072,  -698,
-    1594,  2059,  2060,  2086,  2088,  2091,  1527,  1594,  2102,  2082,
-    1594,  1594,  2103,  2126,  2118,  1594,  1594,  2105,  -698,  2119,
-    1801,  2128,  -698,  -698,  2131,  2173,  -698,  2135,  2136,  2184,
-    2186,  2187,  2153,  2200,   581,  2155,  2165,   416,  2168,  1817,
-    2196,  2201,  2171,  1594,  2202,  -698,  2211,  1594,  1844,  2252,
-    2217,  2219,  2234,  2235,  2150,  2236,  2342,  2343,  2237,  2345,
-    2244,  2247,  2248,  2253,  2254,  2256,  2257,  2258,  1594,  2260,
-    2267,  2271,  2272,  2280,  2282,  2281,   582,  1866,  2283,  2289,
-    2294,  2299,  2302,  2296,  2318,  2300,  2319,  2172,  2323,  1868,
-    2340,  2349,  1943,  2326,  1869,  1870,  2344,  2327,  -698,  2329,
-    2330,  2346,  2331,  2334,  2347,  1873,  2351,  2350,  2352,  -698,
-    2360,  1875,  2366,  2379,  1848,  1876,  2388,  2390,  1877,  2398,
-    2376,  -698,  2377,  2378,  -698,  1880,  2399,   895,  1883,  2401,
-    2402,  1884,  2403,  -746,  1885,  1886,  2410,  2415,   622,  2413,
-    2263,  2387,   706,  1609,   623,   430,  2159,  1855,  2111,  1591,
-    1546,  1849,  2104,  1895,  2414,  2110,  2122,  1788,  2123,   624,
-    2156,   583,   584,   585,   586,   587,   588,   589,  -698,  -698,
-     590,  2324,  2227,   625,  2255,  1906,  2394,  2386,  2363,  2233,
-    2316,  2266,  2325,  1963,  1839,  1470,  1300,  1513,  1217,   414,
-     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
-    1940,   691,  1709,  1507,  1764,  2307,   900,  2090,  1476,  1340,
-    1939,   626,  2292,  2416,  1480,   730,   719,  1245,  1248,  1625,
-    2405,  2215,  1006,  2095,   690,   992,  1317,   742,   714,  1187,
-    1003,  1898,  2336,  2284,  1954,  2373,   627,  2348,   628,  2098,
-     629,  1201,  1517,  1759,  1752,  2087,  1235,  1938,  1468,  2301,
-     630,   631,  1239,  1594,   632,  1751,  2081,   686,  1966,  1926,
-     633,  2306,     0,     0,     0,     0,     0,     0,   634,     0,
-     635,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   416,
-    1970,     0,     0,     0,     0,     0,   636,     0,     0,  2250,
-       0,     0,     0,  1974,   637,     0,   416,     0,  1975,     0,
-    2015,     0,     0,     0,     0,     0,     0,     0,     0,  2023,
-       0,     0,     0,     0,     0,     0,   575,     0,     0,  2039,
-       0,     0,     0,     0,     0,     0,   576,     0,     0,     0,
-       0,     0,   638,     0,  2046,     0,   639,     0,     0,   640,
-     641,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,  1462,     0,  2063,   577,     0,
-    2066,     0,     0, -1149,     0,     0,     1,     0,     2,     0,
-       0,     0,   488,   489,   490,     0,     0,   561,     0,     0,
-       0,     0,     0,     0,     0,     0,     3,     4,   580,     5,
-    1776,     6,     0,     0,     7,     0,     8,     0,  1202,     9,
-      10,    11,     0,  1594,    12,    13,  2023,    14,    15,  1594,
-      16,     0,     0,     0,     0,    17,    18,    19,     0,    20,
-      21,  1594,    22,    23,    24,    25,     0,    26,     0,    27,
-       0,     0,    28,    29,    30,     0,     0,     0,     0,     0,
-       0,     0,     0,    31,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,    32,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,  2167,    33,    34,
-    2169,     0,     0,     0,  2170,     0,     0,     0,     0,     0,
-     582,     0,     0,     0,     0,   660,     0,     0,  1966,     0,
-       0,    35,     0,     0,     0,   661,     0,     0,   662,     0,
-     663,     0,   664,     0,   665,     0,     0,     0,     0,   666,
-       0,     0,     0,     0,     0,     0,     0,   667,     0,     0,
-       0,     0,   668,   669,     0,     0,     0,     0,     0,  1764,
-     670,     0,     0,   671,     0,     0,   672,     0,     0,     0,
-       0,     0,     0,     0,     0,  1966,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,  2023,     0,     0,   583,   584,   585,   586,   587,
-     588,   589,     0,     0,   590,     0,     0,     0,     0,     0,
-     673,     0,    36,     0,     0,     0,    37,  1267,    38,     0,
-     674,     0,    39,     0,     0,     0,     0,     0,     0,     0,
-       0,   675,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,  2023,     0,     0,     0,     0,  2278,     0,     0,     0,
-       0,   416,    40,  2273,     0,     0,     0,     0,     0,     0,
-    2291,     0,  2293,     0,  2295,  1269,  1270,     0,     0,     0,
-       0,     0,     0,     0,  2298,     0,     0,     0,  1271,  1272,
-       0,     0,     0,     0,     0,     0,     0,     0,  1273,     0,
-       0,  1274,     0,     0,     0,     0,     0,  2023,   676,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   677,     0,
-     678,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   679,     0,  1277,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-    2335,     0,     0,     0,     0,  1966,     0,     0,     0,   680,
-       0,     0,     0,    41,     0,     0,     0,     0,     0,     0,
-       0,  1278,     0,     0,     0,     0,     0,     0,  1279,     0,
-       0,     0,     0,     0,     0,     0,     0,  2357,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1281,
-       0,     0,     0,     0,     0,     0,     0,    42,  1282,  1283,
-    1284,     0,     0,     0,     0,     0,  2368,     0,     0,     0,
-       0,     0,     0,     0,  1286,     0,     0,     0,  2375,     0,
-    2380,     0,     0,     0,     0,     0,     0,     0,     0,  2298,
-    2298,     0,  2383,  1287,     0,     0,     0,     0,     0,     0,
-       0,     0,  1288,     0,     0,     0,     0,    85,    86,    87,
-      88,    89,     0,     0,     0,     0,     0,     0,  1289,     0,
-       0,     0,     0,  2397,     0,    90,     0,     0,   275,    92,
-      93,     0,    94,    95,    96,   276,  2412,  1202,    97,     0,
-      98,     0,    99,   100,   101,   277,   102,     0,     0,   103,
-       0,   104,   278,   279,   105,     0,     0,   106,   107,   108,
-     109,   110,   111,     0,     0,   112,   113,   114,   280,   115,
-     281,   116,   282,     0,     0,   118,   119,     0,     0,     0,
-       0,   120,   121,   122,   123,   283,   124,   125,   126,   813,
-    1290,   127,     0,   284,   128,   129,     0,   130,     0,     0,
-     131,     0,   285,  1292,   132,     0,     0,   133,     0,     0,
-     134,   135,     0,   136,   137,     0,     0,   138,   139,     0,
-     140,   141,   142,   143,   286,     0,     0,     0,   144,     0,
-     145,     0,   146,   287,     0,     0,   147,   288,     0,   148,
-     149,     0,     0,   150,     0,     0,   151,     0,     0,   152,
-     153,  1610,     0,     0,   814,   289,   154,     0,     0,     0,
-     155,   290,   156,   291,     0,     0,   157,   158,   159,   160,
-     161,   162,   163,   164,   165,   166,   292,   167,   168,   169,
-     170,   171,   172,   173,   174,   175,   176,     0,   177,   178,
-     293,   179,   294,   295,   180,     0,   181,     0,     0,     0,
-       0,     0,     0,     0,   182,   183,     0,     0,     0,   184,
-     185,   186,   187,   188,   189,   190,   191,     0,   296,     0,
-       0,   192,     0,   193,     0,   194,   195,     0,     0,   196,
-     197,   198,     0,   199,   200,   201,     0,     0,   202,     0,
-     203,     0,     0,   204,     0,   297,     0,   815,   205,   206,
-     298,   299,   300,   301,     0,     0,   207,   208,     0,     0,
-       0,   209,     0,     0,     0,   210,     0,     0,     0,   211,
-       0,   212,     0,     0,   302,   213,   303,   214,   304,     0,
-       0,   216,   217,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   218,     0,   219,     0,   220,   221,   305,
-     306,     0,     0,     0,   307,     0,     0,     0,     0,     0,
-     224,   308,     0,   309,   310,   311,   312,   313,   314,   315,
-     316,   317,   318,     0,     0,     0,   225,   319,   320,   321,
-       0,   322,   323,   324,   325,   326,   327,   328,     0,   329,
-     330,     0,     0,   331,   227,   332,   228,   333,   334,   335,
-     336,   337,   338,     0,   339,   230,   231,   340,   341,   342,
-     343,     0,   344,   345,   346,   347,   348,   235,   349,   350,
-     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
-     361,     0,   236,     0,   362,   363,   364,   238,     0,     0,
-     239,     0,   240,     0,   241,   242,   243,     0,     0,   365,
-       0,     0,     0,     0,   366,     0,     0,   367,     0,     0,
-     368,   369,     0,   370,   371,    85,    86,    87,    88,    89,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,    90,     0,     0,   275,    92,    93,     0,
-      94,    95,    96,   276,     0,     0,    97,     0,    98,     0,
-      99,   100,   101,   277,   102,     0,     0,   103,     0,   104,
-     278,   279,   105,     0,     0,   106,   107,   108,   109,   110,
-     111,     0,     0,   112,   113,   114,   280,   115,   281,   116,
-     282,     0,     0,   118,   119,  1761,     0,     0,     0,   120,
-     121,   122,   123,   283,   124,   125,   126,     0,     0,   127,
-       0,   284,   128,   129,     0,   130,     0,     0,   131,     0,
-     285,     0,   132,  1762,     0,   133,     0,     0,   134,   135,
-       0,   136,   137,     0,     0,   138,   139,     0,   140,   141,
-     142,   143,   286,     0,     0,     0,   144,     0,   145,     0,
-     146,   287,     0,     0,   147,   288,     0,   148,   149,     0,
-       0,   150,     0,     0,   151,     0,     0,   152,   153,     0,
-       0,     0,     0,   289,   154,     0,     0,     0,   155,   290,
-     156,   291,     0,     0,   157,   158,   159,   160,   161,   162,
-     163,   164,   165,   166,   292,   167,   168,   169,   170,   171,
-     172,   173,   174,   175,   176,     0,   177,   178,   293,   179,
-     294,   295,   180,  1763,   181,     0,     0,     0,     0,     0,
-       0,     0,   182,   183,     0,     0,     0,   184,   185,   186,
-     187,   188,   189,   190,   191,     0,   296,     0,     0,   192,
-       0,   193,     0,   194,   195,     0,     0,   196,   197,   198,
-       0,   199,   200,   201,     0,     0,   202,     0,   203,     0,
-       0,   204,     0,   297,     0,     0,   205,   206,   298,   299,
-     300,   301,     0,     0,   207,   208,     0,     0,     0,   209,
-       0,     0,     0,   210,     0,     0,     0,   211,     0,   212,
-       0,     0,   302,   213,   303,   214,   304,     0,     0,   216,
-     217,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   218,     0,   219,     0,   220,   221,   305,   306,     0,
-       0,     0,   307,     0,     0,     0,     0,     0,   224,   308,
-       0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
-     318,     0,     0,     0,   225,   319,   320,   321,     0,   322,
-     323,   324,   325,   326,   327,   328,     0,   329,   330,     0,
-       0,   331,   227,   332,   228,   333,   334,   335,   336,   337,
-     338,     0,   339,   230,   231,   340,   341,   342,   343,     0,
-     344,   345,   346,   347,   348,   235,   349,   350,   351,   352,
-     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
-     236,     0,   362,   363,   364,   238,     0,     0,   239,     0,
-     240,     0,   241,   242,   243,     0,     0,   365,     0,     0,
-       0,     0,   366,     0,     0,   367,     0,     0,   368,   369,
-       0,   370,   371,    85,    86,    87,    88,    89,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,    90,     0,     0,   275,    92,    93,     0,    94,    95,
-      96,   276,     0,     0,    97,     0,    98,     0,    99,   100,
-     101,   277,   102,     0,     0,   103,     0,   104,   278,   279,
-     105,     0,     0,   106,   107,   108,   109,   110,   111,     0,
-       0,   112,   113,   114,   280,   115,   281,   116,   282,     0,
-       0,   118,   119,     0,     0,     0,     0,   120,   121,   122,
-     123,   283,   124,   125,   126,     0,     0,   127,     0,   284,
-     128,   129,     0,   130,     0,     0,   131,     0,   285,     0,
-     132,   437,     0,   133,     0,     0,   134,   135,     0,   136,
-     137,     0,     0,   138,   139,     0,   140,   141,   142,   143,
-     286,     0,     0,     0,   144,     0,   145,     0,   146,   287,
-       0,     0,   147,   288,     0,   148,   149,     0,     0,   150,
-       0,     0,   151,     0,     0,   152,   153,     0,     0,     0,
-       0,   289,   154,     0,     0,     0,   155,   290,   156,   291,
-       0,     0,   157,   158,   159,   160,   161,   162,   163,   164,
-     165,   166,   292,   167,   168,   169,   170,   171,   172,   173,
-     174,   175,   176,     0,   177,   178,   293,   179,   294,   295,
-     180,     0,   181,     0,     0,     0,     0,     0,     0,     0,
-     182,   183,     0,     0,     0,   184,   185,   186,   187,   188,
-     189,   190,   191,     0,   296,     0,     0,   192,     0,   193,
-       0,   194,   195,     0,     0,   196,   197,   198,     0,   199,
-     200,   201,     0,     0,   202,     0,   203,     0,     0,   204,
-       0,   297,     0,     0,   205,   206,   298,   299,   300,   301,
-       0,     0,   207,   208,     0,     0,     0,   209,     0,     0,
-       0,   210,     0,     0,     0,   211,     0,   212,     0,     0,
-     302,   213,   303,   214,   304,     0,     0,   216,   217,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   218,
-       0,   219,     0,   220,   221,   305,   306,     0,     0,     0,
-     307,     0,     0,     0,     0,     0,   224,   308,     0,   309,
-     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
-       0,     0,   225,   319,   320,   321,     0,   322,   323,   324,
-     325,   326,   327,   328,     0,   329,   330,     0,     0,   331,
-     227,   332,   228,   333,   334,   335,   336,   337,   338,     0,
-     339,   230,   231,   340,   341,   342,   343,     0,   344,   345,
-     346,   347,   348,   235,   349,   350,   351,   352,   353,   354,
-     355,   356,   357,   358,   359,   360,   361,     0,   236,     0,
-     362,   363,   364,   238,     0,     0,   239,     0,   240,     0,
-     241,   242,   243,     0,     0,   365,     0,     0,     0,     0,
-     366,     0,     0,   367,     0,     0,   368,   369,     0,   370,
-     371,    85,    86,    87,    88,    89,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,    90,
-       0,     0,   275,    92,    93,     0,    94,    95,    96,   276,
-       0,     0,    97,     0,    98,     0,    99,   100,   101,   277,
-     102,     0,     0,   103,     0,   104,   278,   279,   105,     0,
-       0,   106,   107,   108,   109,   110,   111,     0,     0,   112,
-     113,   114,   280,   115,   281,   116,   282,     0,     0,   118,
-     119,     0,     0,     0,     0,   120,   121,   122,   123,   283,
-     124,   125,   126,     0,     0,   127,     0,   284,   128,   129,
-       0,   130,     0,     0,   131,     0,   285,     0,   132,     0,
-       0,   133,     0,     0,   134,   135,     0,   136,   137,     0,
-       0,   138,   139,     0,   140,   141,   142,   143,   286,     0,
-       0,     0,   144,     0,   145,     0,   146,   287,     0,     0,
-     147,   288,     0,   148,   149,     0,     0,   150,     0,     0,
-     151,     0,     0,   152,   153,     0,     0,     0,     0,   289,
-     154,     0,     0,     0,   155,   290,   156,   291,     0,     0,
-     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
-     292,   167,   168,   169,   170,   171,   172,   173,   174,   175,
-     176,     0,   177,   178,   293,   179,   294,   295,   180,     0,
-     181,     0,     0,     0,     0,     0,     0,     0,   182,   183,
-       0,     0,     0,   184,   185,   186,   187,   188,   189,   190,
-     191,     0,   296,     0,     0,   192,     0,   193,     0,   194,
-     195,     0,     0,   196,   197,   198,     0,   199,   200,   201,
-       0,     0,   202,     0,   203,     0,     0,   204,     0,   297,
-       0,     0,   205,   206,   298,   299,   300,   301,     0,     0,
-     207,   208,     0,     0,     0,   209,     0,     0,     0,   210,
-       0,     0,     0,   211,     0,   212,     0,     0,   302,   213,
-     303,   214,   304,     0,     0,   216,   217,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   218,     0,   219,
-       0,   220,   221,   305,   306,     0,     0,     0,   307,     0,
-       0,     0,     0,     0,   224,   308,     0,   309,   310,   311,
-     312,   313,   314,   315,   316,   317,   318,     0,     0,     0,
-     225,   319,   320,   321,     0,   322,   323,   324,   325,   326,
-     327,   328,     0,   329,   330,     0,     0,   331,   227,   332,
-     228,   333,   334,   335,   336,   337,   338,     0,   339,   230,
-     231,   340,   341,   342,   343,     0,   344,   345,   346,   347,
-     348,   235,   349,   350,   351,   352,   353,   354,   355,   356,
-     357,   358,   359,   360,   361,     0,   236,     0,   362,   363,
-     364,   238,     0,     0,   239,     0,   240,     0,   241,   242,
-     243,     0,     0,   365,     0,     0,     0,     0,   366,     0,
-       0,   367,   759,     0,   368,   369,     0,   370,   371,    85,
-      86,    87,    88,    89,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,    90,     0,     0,
-     275,    92,    93,     0,    94,    95,    96,   276,     0,     0,
-      97,     0,    98,     0,    99,   100,   101,   277,   102,     0,
-       0,   103,     0,   104,   278,   279,   105,     0,     0,   106,
-     107,   108,   109,   110,   111,     0,     0,   112,   113,   114,
-     280,   115,   281,   116,   282,     0,     0,   118,   119,     0,
-       0,     0,     0,   120,   121,   122,   123,   283,   124,   125,
-     126,     0,     0,   127,     0,   284,   128,   129,     0,   130,
-       0,     0,   131,     0,   285,     0,   132,     0,     0,   133,
-       0,     0,   134,   135,     0,   136,   137,     0,     0,   138,
-     139,     0,   140,   141,   142,   143,   286,     0,     0,     0,
-     144,     0,   145,     0,   146,   287,     0,     0,   147,   288,
-       0,   148,   149,     0,     0,   150,     0,     0,   151,     0,
-       0,   152,   153,     0,     0,     0,     0,   289,   154,     0,
-       0,     0,   155,   290,   156,   291,     0,     0,   157,   158,
-     159,   160,   161,   162,   163,   164,   165,   166,   292,   167,
-     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
-     177,   178,   293,   179,   294,   295,   180,     0,   181,     0,
-       0,     0,     0,     0,     0,     0,   182,   183,     0,     0,
-       0,   184,   185,   186,   187,   188,   189,   190,   191,     0,
-     296,     0,     0,   192,     0,   193,     0,   194,   195,     0,
-       0,   196,   197,   198,     0,   199,   200,   201,     0,     0,
-     202,     0,   203,     0,     0,   204,     0,   297,     0,     0,
-     205,   206,   298,   299,   300,   301,     0,     0,   207,   208,
-       0,     0,     0,   209,     0,     0,     0,   210,     0,     0,
-       0,   211,     0,   212,     0,     0,   302,   213,   303,   214,
-     304,     0,     0,   216,   217,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   218,     0,   219,     0,   220,
-     221,   305,   306,     0,     0,     0,   307,     0,     0,     0,
-       0,     0,   224,   308,     0,   309,   310,   311,   312,   313,
-     314,   315,   316,   317,   318,     0,     0,     0,   225,   319,
-     320,   321,     0,   322,   323,   324,   325,   326,   327,   328,
-       0,   329,   330,     0,     0,   331,   227,   332,   228,   333,
-     334,   335,   336,   337,   338,     0,   339,   230,   231,   340,
-     341,   342,   343,     0,   344,   345,   346,   347,   348,   235,
-     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
-     359,   360,   361,     0,   236,     0,   362,   363,   364,   238,
-       0,     0,   239,     0,   240,     0,   241,   242,   243,     0,
-       0,   365,     0,     0,     0,     0,   366,     0,     0,   367,
-     793,     0,   368,   369,     0,   370,   371,    85,    86,    87,
-      88,    89,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,    90,     0,     0,   275,    92,
-      93,     0,    94,    95,    96,   276,     0,     0,    97,     0,
-      98,     0,    99,   100,   101,   277,   102,     0,     0,   103,
-       0,   104,   278,   279,   105,     0,     0,   106,   107,   108,
-     109,   110,   111,     0,     0,   112,   113,   114,   280,   115,
-     281,   116,   282,     0,     0,   118,   119,     0,     0,     0,
-       0,   120,   121,   122,   123,   283,   124,   125,   126,     0,
-       0,   127,     0,   284,   128,   129,     0,   130,     0,     0,
-     131,     0,   285,     0,   132,     0,     0,   133,     0,     0,
-     134,   135,     0,   136,   137,     0,     0,   138,   139,     0,
-     140,   141,   142,   143,   286,     0,     0,     0,   144,     0,
-     145,     0,   146,   287,     0,     0,   147,   288,     0,   148,
-     149,     0,     0,   150,     0,     0,   151,     0,     0,   152,
-     153,     0,     0,     0,     0,   289,   154,     0,     0,     0,
-     155,   290,   156,   291,     0,     0,   157,   158,   159,   160,
-     161,   162,   163,   164,   165,   166,   292,   167,   168,   169,
-     170,   171,   172,   173,   174,   175,   176,     0,   177,   178,
-     293,   179,   294,   295,   180,     0,   181,     0,     0,     0,
-       0,     0,     0,     0,   182,   183,     0,     0,     0,   184,
-     185,   186,   187,   188,   189,   190,   191,     0,   296,     0,
-       0,   192,     0,   193,     0,   194,   195,     0,     0,   196,
-     197,   198,     0,   199,   200,   201,     0,     0,   202,     0,
-     203,     0,     0,   204,     0,   297,     0,     0,   205,   206,
-     298,   299,   300,   301,     0,     0,   207,   208,     0,     0,
-       0,   209,     0,     0,     0,   210,     0,     0,     0,   211,
-       0,   212,     0,     0,   302,   213,   303,   214,   304,     0,
-       0,   216,   217,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   218,     0,   219,     0,   220,   221,   305,
-     306,     0,     0,     0,   307,     0,     0,     0,     0,     0,
-     224,   308,     0,   309,   310,   311,   312,   313,   314,   315,
-     316,   317,   318,     0,     0,     0,   225,   319,   320,   321,
-       0,   322,   323,   324,   325,   326,   327,   328,     0,   329,
-     330,     0,     0,   331,   227,   332,   228,   333,   334,   335,
-     336,   337,   338,     0,   339,   230,   231,   340,   341,   342,
-     343,     0,   344,   345,   346,   347,   348,   235,   349,   350,
-     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
-     361,     0,   236,     0,   362,   363,   364,   238,     0,     0,
-     239,     0,   240,     0,   241,   242,   243,     0,     0,   365,
-       0,     0,     0,     0,   366,     0,     0,   367,   805,     0,
-     368,   369,     0,   370,   371,    85,    86,    87,    88,    89,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,    90,     0,     0,   275,    92,    93,     0,
-      94,    95,    96,   276,     0,     0,    97,     0,    98,     0,
-      99,   100,   101,   277,   102,     0,     0,   103,     0,   104,
-     278,   279,   105,     0,     0,   106,   107,   108,   109,   110,
-     111,     0,     0,   112,   113,   114,   280,   115,   281,   116,
-     282,     0,     0,   118,   119,     0,     0,     0,     0,   120,
-     121,   122,   123,   283,   124,   125,   126,     0,     0,   127,
-       0,   284,   128,   129,     0,   130,     0,     0,   131,     0,
-     285,     0,   132,     0,     0,   133,     0,     0,   134,   135,
-       0,   136,   137,     0,     0,   138,   139,     0,   140,   141,
-     142,   143,   286,     0,     0,     0,   144,     0,   145,     0,
-     146,   287,     0,     0,   147,   288,     0,   148,   149,     0,
-       0,   150,     0,     0,   151,     0,     0,   152,   153,     0,
-       0,     0,     0,   289,   154,     0,     0,     0,   155,   290,
-     156,   291,     0,     0,   157,   158,   159,   160,   161,   162,
-     163,   164,   165,   166,   292,   167,   168,   169,   170,   171,
-     172,   173,   174,   175,   176,     0,   177,   178,   293,   179,
-     294,   295,   180,     0,   181,     0,     0,     0,     0,     0,
-       0,     0,   182,   183,     0,     0,     0,   184,   185,   186,
-     187,   188,   189,   190,   191,     0,   296,     0,     0,   192,
-       0,   193,     0,   194,   195,     0,     0,   196,   197,   198,
-       0,   199,   200,   201,     0,     0,   202,     0,   203,     0,
-       0,   204,     0,   297,     0,     0,   205,   206,   298,   299,
-     300,   301,     0,     0,   207,   208,     0,     0,     0,   209,
-       0,     0,     0,   210,     0,     0,     0,   211,     0,   212,
-       0,     0,   302,   213,   303,   214,   304,     0,     0,   216,
-     217,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   218,     0,   219,     0,   220,   221,   305,   306,     0,
-       0,     0,   307,     0,     0,     0,     0,     0,   224,   308,
-       0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
-     318,     0,     0,     0,   225,   319,   320,   321,     0,   322,
-     323,   324,   325,   326,   327,   328,     0,   329,   330,     0,
-       0,   331,   227,   332,   228,   333,   334,   335,   336,   337,
-     338,     0,   339,   230,   231,   340,   341,   342,   343,     0,
-     344,   345,   346,   347,   348,   235,   349,   350,   351,   352,
-     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
-     236,     0,   362,   363,   364,   238,     0,     0,   239,     0,
-     240,     0,   241,   242,   243,     0,     0,   365,     0,     0,
-       0,     0,   366,     0,     0,   367,   825,     0,   368,   369,
-       0,   370,   371,    85,    86,    87,    88,    89,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,    90,     0,     0,   275,    92,    93,     0,    94,    95,
-      96,   276,     0,     0,    97,     0,    98,     0,    99,   100,
-     101,   277,   102,     0,     0,   103,     0,   104,   278,   279,
-     105,     0,     0,   106,   107,   108,   109,   110,   111,     0,
-       0,   112,   113,   114,   280,   115,   281,   116,   282,     0,
-       0,   118,   119,     0,     0,     0,     0,   120,   121,   122,
-     123,   283,   124,   125,   126,     0,     0,   127,     0,   284,
-     128,   129,     0,   130,     0,     0,   131,     0,   285,     0,
-     132,     0,     0,   133,     0,     0,   134,   135,     0,   136,
-     137,     0,     0,   138,   139,     0,   140,   141,   142,   143,
-     286,     0,     0,     0,   144,     0,   145,     0,   146,   287,
-       0,     0,   147,   288,     0,   148,   149,     0,     0,   150,
-       0,     0,   151,     0,     0,   152,   153,     0,     0,     0,
-       0,   289,   154,     0,     0,     0,   155,   290,   156,   291,
-       0,     0,   157,   158,   159,   160,   161,   162,   163,   164,
-     165,   166,   292,   167,   168,   169,   170,   171,   172,   173,
-     174,   175,   176,     0,   177,   178,   293,   179,   294,   295,
-     180,     0,   181,     0,     0,     0,     0,     0,     0,     0,
-     182,   183,     0,     0,     0,   184,   185,   186,   187,   188,
-     189,   190,   191,     0,   296,     0,     0,   192,     0,   193,
-       0,   194,   195,     0,     0,   196,   197,   198,     0,   199,
-     200,   201,     0,     0,   202,     0,   203,     0,     0,   204,
-       0,   297,     0,     0,   205,   206,   298,   299,   300,   301,
-       0,     0,   207,   208,     0,     0,     0,   209,     0,     0,
-       0,   210,     0,     0,     0,   211,     0,   212,     0,     0,
-     302,   213,   303,   214,   304,     0,     0,   216,   217,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   218,
-       0,   219,     0,   220,   221,   305,   306,     0,     0,     0,
-     307,     0,     0,     0,     0,     0,   224,   308,     0,   309,
-     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
-       0,     0,   225,   319,   320,   321,     0,   322,   323,   324,
-     325,   326,   327,   328,     0,   329,   330,     0,     0,   331,
-     227,   332,   228,   333,   334,   335,   336,   337,   338,     0,
-     339,   230,   231,   340,   341,   342,   343,     0,   344,   345,
-     346,   347,   348,   235,   349,   350,   351,   352,   353,   354,
-     355,   356,   357,   358,   359,   360,   361,     0,   236,     0,
-     362,   363,   364,   238,     0,     0,   239,     0,   240,     0,
-     241,   242,   243,     0,     0,   365,     0,     0,     0,     0,
-     366,     0,     0,   367,     0,     0,   368,   369,     0,   370,
-     371,    85,    86,    87,    88,    89,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,    90,
-       0,     0,   275,    92,    93,     0,    94,    95,    96,   276,
-       0,     0,    97,     0,    98,     0,    99,   100,   101,   277,
-     102,     0,     0,   103,     0,   104,   278,   279,   105,     0,
-       0,   106,   107,   108,   109,   110,   111,     0,     0,   112,
-     113,   114,   280,   115,   281,   116,   282,     0,     0,   118,
-     119,     0,     0,     0,     0,   120,   121,   122,   123,   283,
-     124,   125,   126,     0,     0,   127,     0,   284,   128,   129,
-       0,   130,     0,     0,   131,     0,   285,     0,   132,     0,
-       0,   133,     0,     0,   134,   135,     0,   136,   137,     0,
-       0,   138,   139,     0,   140,   141,   142,   143,   286,     0,
-       0,     0,   144,     0,   145,     0,   146,   287,     0,     0,
-     147,   288,     0,   148,   149,     0,     0,   150,     0,     0,
-     151,     0,     0,   152,   153,     0,     0,     0,     0,   289,
-     154,     0,     0,     0,   155,   290,   156,   291,     0,     0,
-     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
-     292,   167,   168,   169,   170,   171,   172,   173,   174,   175,
-     176,     0,   177,   178,   293,   179,   294,   295,   180,     0,
-     181,     0,     0,     0,     0,     0,     0,     0,   182,   183,
-       0,     0,     0,   184,   185,   186,   187,   188,   189,   190,
-     191,     0,   296,     0,     0,   192,     0,   193,     0,   194,
-     195,     0,     0,   196,   197,   198,     0,   199,   200,   201,
-       0,     0,   202,     0,   203,     0,     0,   204,     0,   297,
-       0,     0,   205,   206,   298,   299,   300,   301,     0,     0,
-     207,   208,     0,     0,     0,   209,     0,     0,     0,   210,
-       0,     0,     0,   211,     0,   212,     0,     0,   302,   213,
-     303,   214,   304,     0,     0,   216,   217,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   218,     0,   219,
-       0,   220,   221,   305,   306,     0,     0,     0,   307,     0,
-       0,     0,     0,     0,   224,   308,     0,   309,   310,   311,
-     312,   313,   314,   315,   316,   317,   318,     0,     0,     0,
-     225,   319,   320,   321,     0,   322,   323,   324,   325,   326,
-     327,   328,     0,   329,   330,     0,     0,   331,   227,   332,
-     228,   333,   334,   335,   336,   337,   338,     0,   339,   230,
-     231,   340,   341,   342,   343,     0,   344,   345,   346,   347,
-     348,   235,   349,   350,   351,   352,   353,   354,   355,   356,
-     357,   358,   359,   360,   361,     0,   236,     0,   362,   363,
-     364,   238,     0,     0,   239,     0,   240,     0,   241,   242,
-     243,     0,     0,   365,     0,     0,     0,     0,   366,     0,
-       0,   519,     0,     0,   368,   369,     0,   370,   371,    85,
-      86,    87,    88,    89,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,    90,     0,     0,
-     275,    92,    93,     0,    94,    95,    96,   276,     0,     0,
-      97,     0,    98,     0,    99,   100,   101,   277,   102,     0,
-       0,   103,     0,   104,   278,   279,   105,     0,     0,   106,
-     107,   108,   109,   110,   111,     0,     0,   112,   113,   114,
-     280,   115,   281,   116,   282,     0,     0,   118,   119,     0,
-       0,     0,     0,   120,   121,   122,   123,   283,   124,   125,
-     126,     0,     0,   127,     0,   284,   128,   129,     0,   130,
-       0,     0,   131,     0,   285,     0,   132,     0,     0,   133,
-       0,     0,   134,   135,     0,   136,   137,     0,     0,   138,
-     139,     0,   140,   141,   142,   143,   286,     0,     0,     0,
-     144,     0,   145,     0,   146,   287,     0,     0,   147,   288,
-       0,   148,   149,     0,     0,   150,     0,     0,   151,     0,
-       0,   152,   153,     0,     0,     0,     0,   289,   154,     0,
-       0,     0,   155,   290,   156,   291,     0,     0,   157,   158,
-     159,   160,   161,   162,   163,   164,   165,   166,   292,   167,
-     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
-     177,   178,   293,   179,   294,   295,   180,     0,   181,     0,
-       0,     0,     0,     0,     0,     0,   182,   183,     0,     0,
-       0,   184,   185,   186,   187,   188,   189,   190,   191,     0,
-     296,     0,     0,   192,     0,   193,     0,   194,   195,     0,
-       0,   196,   197,   198,     0,   199,   200,   201,     0,     0,
-     202,     0,   203,     0,     0,   204,     0,   297,     0,     0,
-     205,   206,   298,   299,   300,   301,     0,     0,   207,   208,
-       0,     0,     0,   209,     0,     0,     0,   210,     0,     0,
-       0,   211,     0,   212,     0,     0,   302,   213,   303,   214,
-     304,     0,     0,   216,   217,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   218,     0,   219,     0,   220,
-     221,   305,   306,     0,     0,     0,   307,     0,     0,     0,
-       0,     0,   224,   308,     0,   309,   310,   311,   312,   313,
-     314,   315,   316,   317,   318,     0,     0,     0,   225,   319,
-     320,   321,     0,   322,   323,   324,   325,   326,   327,   328,
-       0,   329,   330,     0,     0,   331,   227,   332,   228,   871,
-     334,   335,   336,   337,   338,     0,   339,   230,   231,   340,
-     341,   342,   343,     0,   344,   345,   346,   347,   348,   235,
-     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
-     359,   360,   361,     0,   236,     0,   362,   363,   364,   238,
-       0,     0,   239,     0,   240,     0,   241,   242,   243,     0,
-       0,   365,     0,     0,     0,     0,   366,     0,     0,   367,
-       0,     0,   368,   369,     0,   370,   371,    85,    86,    87,
-      88,    89,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,    90,     0,     0,   275,    92,
-      93,     0,    94,    95,    96,   276,     0,     0,    97,     0,
-      98,     0,    99,   100,   101,   277,   102,     0,     0,   103,
-       0,   104,   278,   279,   105,     0,     0,   106,   107,   108,
-     109,   110,   111,     0,     0,   112,   113,   114,   280,   115,
-     281,   116,   282,     0,     0,   118,   119,     0,     0,     0,
-       0,   120,   121,   122,   123,   283,   124,   125,   126,     0,
-       0,   127,     0,   284,   128,   129,     0,   130,     0,     0,
-     131,     0,   285,     0,   132,     0,     0,   133,     0,     0,
-     134,   135,     0,   136,   137,     0,     0,   138,   139,     0,
-     140,   141,   142,   143,   286,     0,     0,     0,   144,     0,
-     145,     0,   146,   287,     0,     0,   147,   288,     0,   148,
-     149,     0,     0,   150,     0,     0,   151,     0,     0,   152,
-     153,     0,     0,     0,     0,   289,   154,     0,     0,     0,
-     155,   290,   156,   291,     0,     0,   157,   158,   159,   160,
-     161,   162,   163,   164,   165,   166,   292,   167,   168,   169,
-     170,   171,   172,   173,   174,   175,   176,     0,   177,   178,
-     293,   179,   294,   295,   180,     0,   181,     0,     0,     0,
-       0,     0,     0,     0,   182,   183,     0,     0,     0,   184,
-     185,   186,   187,   188,   189,   190,   191,     0,   296,     0,
-       0,   192,     0,   193,     0,   194,   195,     0,     0,   196,
-     197,   198,     0,   199,   200,   201,     0,     0,   202,     0,
-     203,     0,     0,   204,     0,   297,     0,     0,   205,   206,
-     298,   299,   300,   301,     0,     0,   207,   208,     0,     0,
-       0,   209,     0,     0,     0,   210,     0,     0,     0,   211,
-       0,   212,     0,     0,   302,   213,   303,   214,   304,     0,
-       0,   216,   217,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   218,     0,   219,     0,   220,   221,   305,
-     306,     0,     0,     0,   307,     0,     0,     0,     0,     0,
-     224,   308,     0,   309,   310,   311,   312,   313,   314,   315,
-     316,   317,   318,     0,     0,     0,   225,   319,   320,   321,
-       0,   322,   323,   324,   325,   326,   327,   328,     0,   329,
-     330,     0,     0,   331,   227,   332,   228,   873,   334,   335,
-     336,   337,   338,     0,   339,   230,   231,   340,   341,   342,
-     343,     0,   344,   345,   346,   347,   348,   235,   349,   350,
-     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
-     361,     0,   236,     0,   362,   363,   364,   238,     0,     0,
-     239,     0,   240,     0,   241,   242,   243,     0,     0,   365,
-       0,     0,     0,     0,   366,     0,     0,   367,     0,     0,
-     368,   369,     0,   370,   371,    85,    86,    87,    88,    89,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,    90,     0,     0,   275,    92,    93,     0,
-      94,    95,    96,   276,     0,     0,    97,     0,    98,     0,
-      99,   100,   101,   277,   102,     0,     0,   103,     0,   104,
-     278,   279,   105,     0,     0,   106,   107,   108,   109,   110,
-     111,     0,     0,   112,   113,   114,   280,   115,   281,   116,
-     282,     0,     0,   118,   119,     0,     0,     0,     0,   120,
-     121,   122,   123,   283,   124,   125,   126,     0,     0,   127,
-       0,   284,   128,   129,     0,   130,     0,     0,   131,     0,
-     285,     0,   132,     0,     0,   133,     0,     0,   134,   135,
-       0,   136,   137,     0,     0,   138,   139,     0,   140,   141,
-     142,   143,   286,     0,     0,     0,   144,     0,   145,     0,
-     146,   287,     0,     0,   147,   288,     0,   148,   149,     0,
-       0,   150,     0,     0,   151,     0,     0,   152,   153,     0,
-       0,     0,     0,   289,   154,     0,     0,     0,   155,   290,
-     156,   291,     0,     0,   157,   158,   159,   160,   161,   162,
-     163,   164,   165,   166,   292,   167,   168,   169,   170,   171,
-     172,   173,   174,   175,   176,     0,   177,   178,   293,   179,
-     294,   295,   180,     0,   181,     0,     0,     0,     0,     0,
-       0,     0,   182,   183,     0,     0,     0,   184,   185,   186,
-     187,   188,   189,   190,   191,     0,   296,     0,     0,   192,
-       0,   193,     0,   194,   195,     0,     0,   196,   197,   198,
-       0,   199,   200,   201,     0,     0,   202,     0,   203,     0,
-       0,   204,     0,   297,     0,     0,   205,   206,   298,   299,
-     300,   301,     0,     0,   207,   208,     0,     0,     0,   209,
-       0,     0,     0,   210,     0,     0,     0,   211,     0,   212,
-       0,     0,   302,   213,   303,   214,   304,     0,     0,   216,
-     217,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   218,     0,   219,     0,   220,   221,   305,   306,     0,
-       0,     0,   307,     0,     0,     0,     0,     0,   224,   308,
-       0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
-     318,     0,     0,     0,   225,   319,   320,   321,     0,   322,
-     323,   324,   325,   326,   327,   328,     0,   329,   330,     0,
-       0,   331,   227,   332,   228,  1400,   334,   335,   336,   337,
-     338,     0,   339,   230,   231,   340,   341,   342,   343,     0,
-     344,   345,   346,   347,   348,   235,   349,   350,   351,   352,
-     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
-     236,     0,   362,   363,   364,   238,     0,     0,   239,     0,
-     240,     0,   241,   242,   243,     0,     0,   365,     0,     0,
-       0,     0,   366,     0,     0,   367,     0,     0,   368,   369,
-       0,   370,   371,    85,    86,    87,    88,    89,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,    90,     0,     0,   275,    92,    93,     0,    94,    95,
-      96,   276,     0,     0,    97,     0,    98,     0,    99,   100,
-     101,   277,   102,     0,     0,   103,     0,   104,   278,   279,
-     105,     0,     0,   106,   107,   108,   109,   110,   111,     0,
-       0,   112,   113,   114,   280,   115,   281,   116,   282,     0,
-       0,   118,   119,     0,     0,     0,     0,   120,   121,   122,
-     123,   283,   124,   125,   126,     0,     0,   127,     0,   284,
-     128,   129,     0,   130,     0,     0,   131,     0,   285,     0,
-     132,     0,     0,   133,     0,     0,   134,   135,     0,   136,
-     137,     0,     0,   138,   139,     0,   140,   141,   142,   143,
-     286,     0,     0,     0,   144,     0,   145,     0,   146,   287,
-       0,     0,   147,   288,     0,   148,   149,     0,     0,   150,
-       0,     0,   151,     0,     0,   152,   153,     0,     0,     0,
-       0,   289,   154,     0,     0,     0,   155,   290,   156,   291,
-       0,     0,   157,   158,   159,   160,   161,   162,   163,   164,
-     165,   166,   292,   167,   168,   169,   170,   171,   172,   173,
-     174,   175,   176,     0,   177,   178,   293,   179,   294,   295,
-     180,     0,   181,     0,     0,     0,     0,     0,     0,     0,
-     182,   183,     0,     0,     0,   184,   185,   186,   187,   188,
-     189,   190,   191,     0,   296,     0,     0,   192,     0,   193,
-       0,   194,   195,     0,     0,   196,   197,   198,     0,   199,
-     200,   201,     0,     0,   202,     0,   203,     0,     0,   204,
-       0,   297,     0,     0,   205,   206,   298,   299,   300,   301,
-       0,     0,   207,   208,     0,     0,     0,   209,     0,     0,
-       0,   210,     0,     0,     0,   211,     0,   212,     0,     0,
-     302,   213,   303,   214,   304,     0,     0,   216,   217,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   218,
-       0,   219,     0,   220,   221,   305,   306,     0,     0,     0,
-     307,     0,     0,     0,     0,     0,   224,   308,     0,   309,
-     310,   311,   312,   313,   314,   315,   316,   317,   318,     0,
-       0,     0,   225,   319,   320,   321,     0,   322,   323,   324,
-     325,   326,   327,   328,     0,   329,   330,     0,     0,   331,
-     227,   332,   228,  1402,   334,   335,   336,   337,   338,     0,
-     339,   230,   231,   340,   341,   342,   343,     0,   344,   345,
-     346,   347,   348,   235,   349,   350,   351,   352,   353,   354,
-     355,   356,   357,   358,   359,   360,   361,     0,   236,     0,
-     362,   363,   364,   238,     0,     0,   239,     0,   240,     0,
-     241,   242,   243,     0,     0,   365,     0,     0,     0,     0,
-     366,     0,     0,   367,     0,     0,   368,   369,     0,   370,
-     371,    85,    86,    87,    88,    89,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,    90,
-       0,     0,   275,    92,    93,     0,    94,    95,    96,   276,
-       0,     0,    97,     0,    98,     0,    99,   100,   101,   277,
-     102,     0,     0,   103,     0,   104,   278,   279,   105,     0,
-       0,   106,   107,   108,   109,   110,   111,     0,     0,   112,
-     113,   114,   280,   115,   281,   116,   282,     0,     0,   118,
-     119,     0,     0,     0,     0,   120,   121,   122,   123,   283,
-     124,   125,   126,     0,     0,   127,     0,   284,   128,   129,
-       0,   130,     0,     0,   131,     0,   285,     0,   132,     0,
-       0,   133,     0,     0,   134,   135,     0,   136,   137,     0,
-       0,   138,   139,     0,   140,   141,   142,   143,   286,     0,
-       0,     0,   144,     0,   145,     0,   146,   287,     0,     0,
-     147,   288,     0,   148,   149,     0,     0,   150,     0,     0,
-     151,     0,     0,   152,   153,     0,     0,     0,     0,   289,
-     154,     0,     0,     0,   155,   290,   156,   291,     0,     0,
-     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
-     292,   167,   168,   169,   170,   171,   172,   173,   174,   175,
-     176,     0,   177,   178,   293,   179,   294,   295,   180,     0,
-     181,     0,     0,     0,     0,     0,     0,     0,   182,   183,
-       0,     0,     0,   184,   185,   186,   187,   188,   189,   190,
-     191,     0,   296,     0,     0,   192,     0,   193,     0,   194,
-     195,     0,     0,   196,   197,   198,     0,   199,   200,   201,
-       0,     0,   202,     0,   203,     0,     0,   204,     0,   297,
-       0,     0,   205,   206,   298,   299,   300,   301,     0,     0,
-     207,   208,     0,     0,     0,   209,     0,     0,     0,   210,
-       0,     0,     0,   211,     0,   212,     0,     0,   302,   213,
-     303,   214,   304,     0,     0,   216,   217,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   218,     0,   219,
-       0,   220,   221,   305,   306,     0,     0,     0,   307,     0,
-       0,     0,     0,     0,   224,   308,     0,   309,   310,   311,
-     312,   313,   314,   315,   316,   317,   318,     0,     0,     0,
-     225,   319,   320,   321,     0,   322,   323,   324,   325,   326,
-     327,   328,     0,   329,   330,     0,     0,   331,   227,   332,
-     228,  1452,   334,   335,   336,   337,   338,     0,   339,   230,
-     231,   340,   341,   342,   343,     0,   344,   345,   346,   347,
-     348,   235,   349,   350,   351,   352,   353,   354,   355,   356,
-     357,   358,   359,   360,   361,     0,   236,     0,   362,   363,
-     364,   238,     0,     0,   239,     0,   240,     0,   241,   242,
-     243,     0,     0,   365,     0,     0,     0,     0,   366,     0,
-       0,   367,     0,     0,   368,   369,     0,   370,   371,    85,
-      86,    87,    88,    89,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,    90,     0,     0,
-     275,    92,    93,     0,    94,    95,    96,   276,     0,     0,
-      97,     0,    98,     0,    99,   100,   101,   277,   102,     0,
-       0,   103,     0,   104,   278,   279,   105,     0,     0,   106,
-     107,   108,   109,   110,   111,     0,     0,   112,   113,   114,
-     280,   115,   281,   116,   282,     0,     0,   118,   119,     0,
-       0,     0,     0,   120,   121,   122,   123,   283,   124,   125,
-     126,     0,     0,   127,     0,   284,   128,   129,     0,   130,
-       0,     0,   131,     0,   285,     0,   132,     0,     0,   133,
-       0,     0,   134,   135,     0,   136,   137,     0,     0,   138,
-     139,     0,   140,   141,   142,   143,   286,     0,     0,     0,
-     144,     0,   145,     0,   146,   287,     0,     0,   147,   288,
-       0,   148,   149,     0,     0,   150,     0,     0,   151,     0,
-       0,   152,   153,     0,     0,     0,     0,   289,   154,     0,
-       0,     0,   155,   290,   156,   291,     0,     0,   157,   158,
-     159,   160,   161,   162,   163,   164,   165,   166,   292,   167,
-     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
-     177,   178,   293,   179,   294,   295,   180,     0,   181,     0,
-       0,     0,     0,     0,     0,     0,   182,   183,     0,     0,
-       0,   184,   185,   186,   187,   188,   189,   190,   191,     0,
-     296,     0,     0,   192,     0,   193,     0,   194,   195,     0,
-       0,   196,   197,   198,     0,   199,   200,   201,     0,     0,
-     202,     0,   203,     0,     0,   204,     0,   297,     0,     0,
-     205,   206,   298,   299,   300,   301,     0,     0,   207,   208,
-       0,     0,     0,   209,     0,     0,     0,   210,     0,     0,
-       0,   211,     0,   212,     0,     0,   302,   213,   303,   214,
-     304,     0,     0,   216,   217,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   218,     0,   219,     0,   220,
-     221,   305,   306,     0,     0,     0,   307,     0,     0,     0,
-       0,     0,   224,   308,     0,   309,   310,   311,   312,   313,
-     314,   315,   316,   317,   318,     0,     0,     0,   225,   319,
-     320,   321,     0,   322,   323,   324,   325,   326,   327,   328,
-       0,   329,   330,     0,     0,   331,   227,   332,   228,  1454,
-     334,   335,   336,   337,   338,     0,   339,   230,   231,   340,
-     341,   342,   343,     0,   344,   345,   346,   347,   348,   235,
-     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
-     359,   360,   361,     0,   236,     0,   362,   363,   364,   238,
-       0,     0,   239,     0,   240,     0,   241,   242,   243,     0,
-       0,   365,     0,     0,     0,     0,   366,     0,     0,   367,
-       0,     0,   368,   369,     0,   370,   371,    85,    86,    87,
-      88,    89,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,    90,     0,     0,    91,    92,
-      93,     0,    94,    95,    96,     0,     0,     0,    97,     0,
-      98,     0,    99,   100,   101,     0,   102,     0,     0,   103,
-       0,   104,     0,     0,   105,     0,     0,   106,   107,   108,
-     109,   110,   111,  1527,     0,   112,   113,   114,     0,   115,
-       0,   116,   117,     0,     0,   118,   119,     0,     0,     0,
-       0,   120,   121,   122,   123,     0,   124,   125,   126,     0,
-       0,   127,     0,     0,   128,   129,     0,   130,     0,     0,
-     131,  1542,     0,     0,   132,     0,     0,   133,     0,     0,
-     134,   135,     0,   136,   137,     0,     0,   138,   139,     0,
-     140,   141,   142,   143,     0,     0,     0,     0,   144,  1543,
-     145,     0,   146,     0,     0,     0,   147,     0,     0,   148,
-     149,     0,  1544,   150,     0,     0,   151,     0,     0,   152,
-     153,     0,     0,  1545,     0,     0,   154,     0,     0,     0,
-     155,     0,   156,     0,     0,     0,   157,   158,   159,   160,
-     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
-     170,   171,   172,   173,   174,   175,   176,     0,   177,   178,
-       0,   179,     0,     0,   180,     0,   181,     0,     0,     0,
-       0,     0,     0,     0,   182,   183,     0,     0,     0,   184,
-     185,   186,   187,   188,   189,   190,   191,     0,     0,     0,
-       0,   192,     0,   193,     0,   194,   195,     0,     0,   196,
-     197,   198,     0,   199,   200,   201,     0,     0,   202,     0,
-     203,     0,     0,   204,     0,     0,     0,     0,   205,   206,
-       0,     0,     0,     0,     0,     0,   207,   208,     0,     0,
-       0,   209,     0,     0,     0,   210,     0,     0,     0,   211,
-       0,   212,     0,     0,     0,   213,     0,   214,   215,     0,
-       0,   216,   217,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   218,     0,   219,     0,   220,   221,   222,
-     223,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     224,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   225,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   226,   227,     0,   228,     0,     0,     0,
-       0,     0,     0,     0,   229,   230,   231,   232,     0,   233,
-       0,     0,     0,     0,     0,     0,   234,   235,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   236,     0,   237,     0,     0,   238,     0,     0,
-     239,     0,   240,     0,   241,   242,   243,    85,    86,    87,
-      88,    89,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,  1590,    90,     0,     0,    91,    92,
-      93,     0,    94,    95,    96,     0,     0,     0,    97,     0,
-      98,     0,    99,   100,   101,     0,   102,     0,     0,   103,
-       0,   104,     0,     0,   105,     0,     0,   106,   107,   108,
-     109,   110,   111,     0,     0,   112,   113,   114,     0,   115,
-       0,   116,   117,     0,     0,   118,   119,     0,     0,     0,
-       0,   120,   121,   122,   123,     0,   124,   125,   126,     0,
-       0,   127,     0,     0,   128,   129,     0,   130,     0,     0,
-     131,  1542,     0,     0,   132,     0,     0,   133,     0,     0,
-     134,   135,     0,   136,   137,     0,     0,   138,   139,     0,
-     140,   141,   142,   143,     0,     0,     0,     0,   144,  1543,
-     145,     0,   146,     0,     0,     0,   147,     0,     0,   148,
-     149,     0,  1544,   150,     0,     0,   151,     0,     0,   152,
-     153,     0,     0,  1545,     0,     0,   154,     0,     0,     0,
-     155,     0,   156,     0,     0,     0,   157,   158,   159,   160,
-     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
-     170,   171,   172,   173,   174,   175,   176,     0,   177,   178,
-       0,   179,     0,     0,   180,     0,   181,     0,     0,     0,
-       0,     0,     0,     0,   182,   183,     0,     0,     0,   184,
-     185,   186,   187,   188,   189,   190,   191,     0,     0,     0,
-       0,   192,     0,   193,     0,   194,   195,     0,     0,   196,
-     197,   198,     0,   199,   200,   201,     0,     0,   202,     0,
-     203,     0,     0,   204,     0,     0,     0,     0,   205,   206,
-       0,     0,     0,     0,     0,     0,   207,   208,     0,     0,
-       0,   209,     0,     0,     0,   210,     0,     0,     0,   211,
-       0,   212,     0,     0,     0,   213,     0,   214,   215,     0,
-       0,   216,   217,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   218,     0,   219,     0,   220,   221,   222,
-     223,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     224,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   225,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   226,   227,     0,   228,     0,     0,     0,
-       0,     0,     0,     0,   229,   230,   231,   232,     0,   233,
-       0,     0,     0,     0,     0,     0,   234,   235,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   236,     0,   237,     0,     0,   238,     0,     0,
-     239,     0,   240,     0,   241,   242,   243,    85,    86,    87,
-      88,    89,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,  1590,    90,     0,     0,    91,    92,
-      93,     0,    94,    95,    96,     0,     0,     0,    97,     0,
-      98,     0,    99,   100,   101,     0,   102,     0,     0,   103,
-       0,   104,     0,     0,   105,     0,     0,   106,   107,   108,
-     109,   110,   111,    23,     0,   112,   113,   114,     0,   115,
-       0,   116,   117,     0,     0,   118,   119,     0,     0,     0,
-       0,   120,   121,   122,   123,     0,   124,   125,   126,     0,
-       0,   127,     0,     0,   128,   129,     0,   130,     0,     0,
-     131,     0,     0,     0,   132,     0,     0,   133,     0,     0,
-     134,   135,     0,   136,   137,     0,     0,   138,   139,     0,
-     140,   141,   142,   143,     0,     0,     0,     0,   144,     0,
-     145,     0,   146,     0,     0,     0,   147,     0,     0,   148,
-     149,     0,     0,   150,     0,     0,   151,     0,     0,   152,
-     153,     0,     0,     0,     0,     0,   154,     0,     0,     0,
-     155,     0,   156,     0,     0,     0,   157,   158,   159,   160,
-     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
-     170,   171,   172,   173,   174,   175,   176,     0,   177,   178,
-       0,   179,     0,     0,   180,     0,   181,     0,     0,     0,
-       0,     0,     0,     0,   182,   183,     0,     0,     0,   184,
-     185,   186,   187,   188,   189,   190,   191,     0,     0,     0,
-       0,   192,     0,   193,     0,   194,   195,     0,     0,   196,
-     197,   198,     0,   199,   200,   201,     0,     0,   202,     0,
-     203,     0,     0,   204,     0,     0,     0,     0,   205,   206,
-       0,     0,     0,     0,     0,     0,   207,   208,     0,     0,
-       0,   209,     0,     0,     0,   210,     0,     0,     0,   211,
-       0,   212,     0,     0,     0,   213,     0,   214,   215,     0,
-       0,   216,   217,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   218,     0,   219,     0,   220,   221,   222,
-     223,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     224,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   225,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   226,   227,     0,   228,     0,     0,     0,
-       0,     0,     0,     0,   229,   230,   231,   232,     0,   233,
-       0,     0,     0,     0,     0,     0,   234,   235,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   236,     0,   237,     0,     0,   238,     0,     0,
-     239,     0,   240,     0,   241,   242,   243,    85,    86,    87,
-      88,    89,     0,     0,     0,     0,     0,    42,     0,     0,
-       0,     0,     0,     0,   244,    90,     0,     0,    91,    92,
-      93,     0,    94,    95,    96,     0,     0,     0,    97,     0,
-      98,     0,    99,   100,   101,     0,   102,     0,     0,   103,
-       0,   104,     0,     0,   105,     0,     0,   106,   107,   108,
-     109,   110,   111,  1527,     0,   112,   113,   114,     0,   115,
-       0,   116,   117,     0,     0,   118,   119,     0,     0,     0,
-       0,   120,   121,   122,   123,     0,   124,   125,   126,     0,
-       0,   127,     0,     0,   128,   129,     0,   130,     0,     0,
-     131,     0,     0,     0,   132,     0,     0,   133,     0,     0,
-     134,   135,     0,   136,   137,     0,     0,   138,   139,     0,
-     140,   141,   142,   143,     0,     0,     0,     0,   144,     0,
-     145,     0,   146,     0,     0,     0,   147,     0,     0,   148,
-     149,     0,     0,   150,     0,     0,   151,     0,     0,   152,
-     153,     0,     0,     0,     0,     0,   154,     0,     0,     0,
-     155,     0,   156,     0,     0,     0,   157,   158,   159,   160,
-     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
-     170,   171,   172,   173,   174,   175,   176,     0,   177,   178,
-       0,   179,     0,     0,   180,     0,   181,     0,     0,     0,
-       0,     0,     0,     0,   182,   183,     0,     0,     0,   184,
-     185,   186,   187,   188,   189,   190,   191,     0,     0,     0,
-       0,   192,     0,   193,     0,   194,   195,     0,     0,   196,
-     197,   198,     0,   199,   200,   201,     0,     0,   202,     0,
-     203,     0,     0,   204,     0,     0,     0,     0,   205,   206,
-       0,     0,     0,     0,     0,     0,   207,   208,     0,     0,
-       0,   209,     0,     0,     0,   210,     0,     0,     0,   211,
-       0,   212,     0,     0,     0,   213,     0,   214,   215,     0,
-       0,   216,   217,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   218,     0,   219,     0,   220,   221,   222,
-     223,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     224,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   225,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   226,   227,     0,   228,     0,     0,     0,
-       0,     0,     0,     0,   229,   230,   231,   232,     0,   233,
-       0,     0,     0,     0,     0,     0,   234,   235,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   236,     0,   237,     0,     0,   238,     0,     0,
-     239,     0,   240,     0,   241,   242,   243,    85,    86,    87,
-      88,    89,     0,     0,     0,     0,     0,     0,  1771,     0,
-       0,     0,     0,     0,   371,    90,     0,     0,    91,    92,
-      93,     0,    94,    95,    96,     0,     0,     0,    97,     0,
-      98,     0,    99,   100,   101,     0,   102,     0,     0,   103,
-       0,   104,     0,     0,   105,     0,     0,   106,   107,   108,
-     109,   110,   111,     0,     0,   112,   113,   114,     0,   115,
-       0,   116,   117,     0,     0,   118,   119,     0,     0,     0,
-       0,   120,   121,   122,   123,     0,   124,   125,   126,     0,
-       0,   127,     0,     0,   128,   129,     0,   130,     0,     0,
-     131,     0,     0,     0,   132,     0,     0,   133,     0,     0,
-     134,   135,     0,   136,   137,     0,     0,   138,   139,     0,
-     140,   141,   142,   143,     0,     0,     0,     0,   144,     0,
-     145,     0,   146,     0,     0,     0,   147,     0,     0,   148,
-     149,     0,     0,   150,     0,     0,   151,   950,     0,   152,
-     153,     0,     0,     0,     0,     0,   154,     0,     0,     0,
-     155,     0,   156,     0,     0,     0,   157,   158,   159,   160,
-     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
-     170,   171,   172,   173,   174,   175,   176,     0,   177,   178,
-       0,   179,     0,     0,   180,     0,   181,     0,     0,     0,
-       0,     0,     0,     0,   182,   183,     0,     0,     0,   184,
-     185,   186,   187,   188,   189,   190,   191,     0,     0,     0,
-       0,   192,     0,   193,     0,   194,   195,     0,     0,   196,
-     197,   198,     0,   199,   200,   201,     0,     0,   202,     0,
-     203,     0,     0,   204,     0,     0,     0,     0,   205,   206,
-       0,     0,     0,     0,     0,     0,   207,   208,     0,     0,
-       0,   209,     0,     0,     0,   210,     0,     0,     0,   211,
-       0,   212,     0,     0,     0,   213,     0,   214,   215,     0,
-       0,   216,   217,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   218,     0,   219,     0,   220,   221,   222,
-     223,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     224,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   225,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   226,   227,     0,   228,     0,     0,     0,
-       0,     0,     0,     0,   229,   230,   231,   232,     0,   233,
-       0,     0,     0,     0,     0,     0,   234,   235,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   236,     0,   237,     0,     0,   238,     0,     0,
-     239,     0,   240,     0,   241,   242,   243,    85,    86,    87,
-      88,    89,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   244,    90,     0,     0,    91,    92,
-      93,     0,    94,    95,    96,     0,     0,     0,    97,     0,
-      98,     0,    99,   100,   101,     0,   102,     0,     0,   103,
-       0,   104,     0,     0,   105,     0,     0,   106,   107,   108,
-     109,   110,   111,     0,     0,   112,   113,   114,     0,   115,
-       0,   116,   117,     0,     0,   118,   119,     0,     0,     0,
-       0,   120,   121,   122,   123,     0,   124,   125,   126,     0,
-       0,   127,     0,     0,   128,   129,     0,   130,     0,     0,
-     131,     0,     0,     0,   132,     0,     0,   133,     0,     0,
-     134,   135,     0,   136,   137,     0,     0,   138,   139,     0,
-     140,   141,   142,   143,     0,     0,     0,     0,   144,     0,
-     145,     0,   146,     0,     0,     0,   147,     0,     0,   148,
-     149,     0,     0,   150,     0,     0,   151,     0,     0,   152,
-     153,     0,     0,     0,     0,     0,   154,     0,     0,     0,
-     155,     0,   156,     0,     0,     0,   157,   158,   159,   160,
-     161,   162,   163,   164,   165,   166,     0,   167,   168,   169,
-     170,   171,   172,   173,   174,   175,   176,     0,   177,   178,
-       0,   179,     0,     0,   180,     0,   181,     0,     0,     0,
-       0,     0,     0,     0,   182,   183,     0,     0,     0,   184,
-     185,   186,   187,   188,   189,   190,   191,     0,     0,     0,
-       0,   192,     0,   193,     0,   194,   195,     0,     0,   196,
-     197,   198,     0,   199,   200,   201,     0,     0,   202,     0,
-     203,     0,     0,   204,     0,     0,     0,     0,   205,   206,
-       0,     0,     0,     0,     0,     0,   207,   208,     0,     0,
-       0,   209,     0,     0,     0,   210,     0,     0,     0,   211,
-       0,   212,     0,     0,     0,   213,     0,   214,   215,     0,
-       0,   216,   217,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   218,     0,   219,     0,   220,   221,   222,
-     223,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     224,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   225,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   226,   227,     0,   228,     0,     0,     0,
-       0,     0,     0,     0,   229,   230,   231,   232,     0,   233,
-       0,     0,     0,     0,     0,     0,   234,   235,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   236,     0,   237,     0,     0,   238,     0,     0,
-     239,     0,   240,     0,   241,   242,   243,     0,     0,     0,
-       0,  1231,    85,    86,    87,    88,    89,     0,     0,     0,
-       0,     0,     0,     0,   244,     0,     0,     0,     0,     0,
-      90,     0,     0,    91,    92,    93,     0,    94,    95,    96,
-       0,     0,     0,    97,     0,    98,     0,    99,   100,   101,
-       0,   102,     0,     0,   103,     0,   104,     0,     0,   105,
-       0,     0,   106,   107,   108,   109,   110,   111,     0,     0,
-     112,   113,   114,     0,   115,     0,   116,   117,     0,     0,
-     118,   119,     0,     0,     0,     0,   120,   121,   122,   123,
-       0,   124,   125,   126,     0,     0,   127,     0,     0,   128,
-     129,     0,   130,     0,     0,   131,     0,     0,     0,   132,
-       0,     0,   133,     0,     0,   134,   135,     0,   136,   137,
-       0,     0,   138,   139,     0,   140,   141,   142,   143,     0,
-       0,     0,     0,   144,     0,   145,     0,   146,     0,     0,
-       0,   147,     0,     0,   148,   149,     0,     0,   150,     0,
-       0,   151,     0,     0,   152,   153,     0,     0,     0,     0,
-       0,   154,     0,     0,     0,   155,     0,   156,     0,     0,
-       0,   157,   158,   159,   160,   161,   162,   163,   164,   165,
-     166,     0,   167,   168,   169,   170,   171,   172,   173,   174,
-     175,   176,     0,   177,   178,     0,   179,     0,     0,   180,
-       0,   181,     0,     0,     0,     0,     0,     0,     0,   182,
-     183,     0,     0,     0,   184,   185,   186,   187,   188,   189,
-     190,   191,     0,     0,     0,     0,   192,     0,   193,     0,
-     194,   195,     0,     0,   196,   197,   198,     0,   199,   200,
-     201,     0,     0,   202,     0,   203,     0,     0,   204,     0,
-       0,     0,     0,   205,   206,     0,     0,     0,     0,     0,
-       0,   207,   208,     0,     0,     0,   209,     0,     0,     0,
-     210,     0,     0,     0,   211,     0,   212,     0,     0,     0,
-     213,     0,   214,   215,     0,     0,   216,   217,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   218,     0,
-     219,     0,   220,   221,   222,   223,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   224,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   225,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   226,   227,
-       0,   228,     0,     0,     0,     0,     0,     0,     0,   229,
-     230,   231,   232,     0,   233,     0,     0,     0,     0,     0,
-       0,   234,   235,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   236,     0,   237,
-       0,     0,   238,     0,     0,   239,     0,   240,     0,   241,
-     242,   243,    85,    86,    87,    88,    89,     0,     0,     0,
-       0,     0,  1589,     0,     0,     0,     0,     0,     0,  1590,
-      90,     0,     0,    91,    92,    93,     0,    94,    95,    96,
-       0,     0,     0,    97,     0,    98,     0,    99,   100,   101,
-       0,   102,     0,     0,   103,     0,   104,     0,     0,   105,
-       0,     0,   106,   107,   108,   109,   110,   111,     0,     0,
-     112,   113,   114,     0,   115,     0,   116,   117,     0,     0,
-     118,   119,     0,     0,     0,     0,   120,   121,   122,   123,
-       0,   124,   125,   126,     0,     0,   127,     0,     0,   128,
-     129,     0,   130,     0,     0,   131,     0,     0,     0,   132,
-       0,     0,   133,     0,     0,   134,   135,     0,   136,   137,
-       0,     0,   138,   139,     0,   140,   141,   142,   143,     0,
-       0,     0,     0,   144,     0,   145,     0,   146,     0,     0,
-       0,   147,     0,     0,   148,   149,     0,     0,   150,     0,
-       0,   151,     0,     0,   152,   153,     0,     0,     0,     0,
-       0,   154,     0,     0,     0,   155,     0,   156,     0,     0,
-       0,   157,   158,   159,   160,   161,   162,   163,   164,   165,
-     166,     0,   167,   168,   169,   170,   171,   172,   173,   174,
-     175,   176,     0,   177,   178,     0,   179,     0,     0,   180,
-       0,   181,     0,     0,     0,     0,     0,     0,     0,   182,
-     183,     0,     0,     0,   184,   185,   186,   187,   188,   189,
-     190,   191,     0,     0,     0,     0,   192,     0,   193,     0,
-     194,   195,     0,     0,   196,   197,   198,     0,   199,   200,
-     201,     0,     0,   202,     0,   203,     0,     0,   204,     0,
-       0,     0,     0,   205,   206,     0,     0,     0,     0,     0,
-       0,   207,   208,     0,     0,     0,   209,     0,     0,     0,
-     210,     0,     0,     0,   211,     0,   212,     0,     0,     0,
-     213,     0,   214,   215,     0,     0,   216,   217,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   218,     0,
-     219,     0,   220,   221,   222,   223,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   224,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   225,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   226,   227,
-       0,   228,     0,     0,     0,     0,     0,     0,     0,   229,
-     230,   231,   232,     0,   233,     0,     0,     0,     0,     0,
-       0,   234,   235,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   236,     0,   237,
-       0,     0,   238,     0,     0,   239,     0,   240,     0,   241,
-     242,   243,    85,    86,    87,    88,    89,     0,     0,     0,
-       0,     0,     0,  2404,     0,     0,     0,     0,     0,   371,
-      90,     0,     0,    91,    92,    93,     0,    94,    95,    96,
-       0,     0,     0,    97,     0,    98,     0,    99,   100,   101,
-       0,   102,     0,     0,   103,     0,   104,     0,     0,   105,
-       0,     0,   106,   107,   108,   109,   110,   111,     0,     0,
-     112,   113,   114,     0,   115,     0,   116,   117,     0,     0,
-     118,   119,     0,     0,     0,     0,   120,   121,   122,   123,
-       0,   124,   125,   126,     0,     0,   127,     0,     0,   128,
-     129,     0,   130,     0,     0,   131,     0,     0,     0,   132,
-       0,     0,   133,     0,     0,   134,   135,     0,   136,   137,
-       0,     0,   138,   139,     0,   140,   141,   142,   143,     0,
-       0,     0,     0,   144,     0,   145,     0,   146,     0,     0,
-       0,   147,     0,     0,   148,   149,     0,     0,   150,     0,
-       0,   151,     0,     0,   152,   153,     0,     0,     0,     0,
-       0,   154,     0,     0,     0,   155,     0,   156,     0,     0,
-       0,   157,   158,   159,   160,   161,   162,   163,   164,   165,
-     166,     0,   167,   168,   169,   170,   171,   172,   173,   174,
-     175,   176,     0,   177,   178,     0,   179,     0,     0,   180,
-       0,   181,     0,     0,     0,     0,     0,     0,     0,   182,
-     183,     0,     0,     0,   184,   185,   186,   187,   188,   189,
-     190,   191,     0,     0,     0,     0,   192,     0,   193,     0,
-     194,   195,     0,     0,   196,   197,   198,     0,   199,   200,
-     201,     0,     0,   202,     0,   203,     0,     0,   204,     0,
-       0,     0,     0,   205,   206,     0,     0,     0,     0,     0,
-       0,   207,   208,     0,     0,     0,   209,     0,     0,     0,
-     210,     0,     0,     0,   211,     0,   212,     0,     0,     0,
-     213,     0,   214,   215,     0,     0,   216,   217,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   218,     0,
-     219,     0,   220,   221,   222,   223,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   224,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   225,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   226,   227,
-       0,   228,     0,     0,     0,     0,     0,     0,     0,   229,
-     230,   231,   232,     0,   233,     0,     0,     0,     0,     0,
-       0,   234,   235,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   236,     0,   237,
-       0,     0,   238,     0,     0,   239,     0,   240,     0,   241,
-     242,   243,    85,    86,    87,    88,    89,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   244,
-      90,     0,     0,    91,    92,    93,     0,    94,    95,    96,
-       0,     0,     0,    97,     0,    98,     0,    99,   100,   101,
-       0,   102,     0,     0,   103,     0,   104,     0,     0,   105,
-       0,     0,   106,   107,   108,   109,   110,   111,     0,     0,
-     112,   113,   114,     0,   115,     0,   116,   117,     0,     0,
-     118,   119,     0,     0,     0,     0,   120,   121,   122,   123,
-       0,   124,   125,   126,     0,     0,   127,     0,     0,   128,
-     129,     0,   130,     0,     0,   131,     0,     0,     0,   132,
-       0,     0,   133,     0,     0,   134,   135,     0,   136,   137,
-       0,     0,   138,   139,     0,   140,   141,   142,   143,     0,
-       0,     0,     0,   144,     0,   145,     0,   146,     0,     0,
-       0,   147,     0,     0,   148,   149,     0,     0,   150,     0,
-       0,   151,     0,     0,   152,   153,     0,     0,     0,     0,
-       0,   154,     0,     0,     0,   155,     0,   156,     0,     0,
-       0,   157,   158,   159,   160,   161,   162,   163,   164,   165,
-     166,     0,   167,   168,   169,   170,   171,   172,   173,   174,
-     175,   176,     0,   177,   178,     0,   179,     0,     0,   180,
-       0,   181,     0,     0,     0,     0,     0,     0,     0,   182,
-     183,     0,     0,     0,   184,   185,   186,   187,   188,   189,
-     190,   191,     0,     0,     0,     0,   192,     0,   193,     0,
-     194,   195,     0,     0,   196,   197,   198,     0,   199,   200,
-     201,     0,     0,   202,     0,   203,     0,     0,   204,     0,
-       0,     0,     0,   205,   206,     0,     0,     0,     0,     0,
-       0,   207,   208,     0,     0,     0,   209,     0,     0,     0,
-     210,     0,     0,     0,   211,     0,   212,     0,     0,     0,
-     213,     0,   214,   215,     0,     0,   216,   217,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   218,     0,
-     219,     0,   220,   221,   222,   223,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   224,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   225,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   226,   227,
-       0,   228,     0,     0,     0,     0,     0,     0,     0,   229,
-     230,   231,   232,     0,   233,     0,     0,     0,     0,     0,
-       0,   234,   235,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   236,     0,   237,
-       0,     0,   238,     0,     0,   239,     0,   240,     0,   241,
-     242,   243,    85,    86,    87,    88,    89,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   371,
-      90,     0,     0,    91,    92,    93,     0,    94,    95,    96,
-       0,     0,     0,    97,     0,    98,     0,    99,   100,   101,
-       0,   102,     0,     0,   103,     0,   104,     0,     0,   105,
-       0,     0,   106,   107,   108,   109,   110,   111,     0,     0,
-     112,   113,   114,     0,   115,     0,   116,   117,     0,     0,
-     118,   119,     0,     0,     0,     0,   120,   121,   122,   123,
-       0,   124,   125,   126,     0,     0,   127,     0,     0,   128,
-     129,     0,   130,     0,     0,   131,     0,     0,     0,   132,
-       0,     0,   133,     0,     0,   134,   135,     0,   136,   137,
-       0,     0,   138,   139,     0,   140,   141,   142,   143,     0,
-       0,     0,     0,   144,     0,   145,     0,   146,     0,     0,
-       0,   147,     0,     0,   148,   149,     0,     0,   150,     0,
-       0,   151,     0,     0,   152,   153,     0,     0,     0,     0,
-       0,   154,     0,     0,     0,   155,     0,   156,     0,     0,
-       0,   157,   158,   159,   160,   161,   162,   163,   164,   165,
-     166,     0,   167,   168,   169,   170,   171,   172,   173,   174,
-     175,   176,     0,   177,   178,     0,   179,     0,     0,   180,
-       0,   181,     0,     0,     0,     0,     0,     0,     0,   182,
-     183,     0,     0,     0,   184,   185,   186,   187,   188,   189,
-     190,   191,     0,     0,     0,     0,   192,     0,   193,     0,
-     194,   195,     0,     0,   196,   197,   198,     0,   199,   200,
-     201,     0,     0,   202,     0,   203,     0,     0,   204,     0,
-       0,     0,     0,   205,   206,     0,     0,     0,     0,     0,
-       0,   207,   208,     0,     0,     0,   209,     0,     0,     0,
-     210,     0,     0,     0,   211,     0,   212,     0,     0,     0,
-     213,     0,   214,   215,     0,     0,   216,   217,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   218,     0,
-     219,     0,   220,   221,   222,   223,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   224,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   225,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   226,   227,
-       0,   228,     0,     0,     0,     0,     0,     0,     0,   229,
-     230,   231,   232,     0,   233,     0,     0,     0,     0,     0,
-       0,   234,   235,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   236,     0,   237,
-       0,     0,   238,     0,     0,   239,     0,   240,     0,   241,
-     242,   243,    85,    86,    87,    88,    89,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1590,
-      90,     0,     0,    91,    92,    93,     0,    94,    95,    96,
-       0,     0,     0,    97,     0,    98,     0,    99,   100,   101,
-       0,   102,     0,     0,   103,     0,   104,     0,     0,   105,
-       0,     0,   106,   107,   108,   109,   110,   111,     0,     0,
-     112,   113,   114,     0,   115,     0,   116,   117,     0,     0,
-     118,   119,     0,     0,     0,     0,   120,   121,   122,   123,
-       0,   124,   125,   126,     0,     0,   127,     0,     0,   128,
-     129,     0,   130,     0,     0,   131,     0,     0,     0,   132,
-       0,     0,   133,     0,     0,   134,   135,     0,   136,   137,
-       0,     0,   138,   139,     0,   140,   141,   142,   143,     0,
-       0,     0,     0,   144,     0,   145,     0,   146,     0,     0,
-       0,   147,     0,     0,   148,   149,     0,     0,   150,     0,
-       0,   151,     0,     0,   152,   153,     0,     0,     0,     0,
-       0,   154,   558,     0,     0,   155,     0,   156,     0,     0,
-       0,   157,   158,   159,   160,   161,   162,   163,   164,   165,
-     166,     0,   167,   168,   169,   170,   171,   172,   173,   174,
-     175,   176,     0,   177,   178,     0,   179,     0,     0,   180,
-       0,   181,     0,     0,     0,     0,     0,     0,     0,   182,
-     183,     0,     0,     0,   184,   185,   186,   187,   188,   189,
-     190,   191,     0,     0,     0,     0,   192,     0,   193,     0,
-     194,   195,     0,     0,   196,   197,   198,     0,   199,   200,
-     201,     0,     0,   202,     0,   203,     0,     0,   204,     0,
-     559,     0,     0,   205,   206,     0,     0,     0,     0,     0,
-       0,   207,   208,     0,     0,     0,   209,     0,     0,     0,
-     210,     0,     0,     0,   211,     0,   212,     0,     0,     0,
-     213,     0,   214,   215,     0,     0,   216,   217,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   218,     0,
-     219,     0,   220,   221,   222,   223,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   224,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   225,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   226,   227,
-       0,   228,     0,     0,     0,     0,     0,     0,     0,   229,
-     230,   231,   232,     0,   233,     0,     0,     0,     0,     0,
-       0,   234,   235,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   236,     0,   237,
-       0,     0,   238,     0,     0,   239,     0,   240,     0,   241,
-     242,   243,    85,    86,    87,    88,    89,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   560,     0,
-      90,     0,     0,    91,    92,    93,     0,    94,    95,    96,
-       0,     0,     0,    97,     0,    98,     0,    99,   100,   101,
-       0,   102,     0,     0,   103,     0,   104,     0,     0,   105,
-       0,     0,   106,   107,   108,   109,   110,   111,     0,     0,
-     112,   113,   114,     0,   115,     0,   116,   117,     0,     0,
-     118,   119,     0,     0,     0,     0,   120,   121,   122,   123,
-       0,   124,   125,   126,     0,     0,   127,     0,     0,   128,
-     129,     0,   130,     0,     0,   131,     0,     0,     0,   132,
-       0,     0,   133,     0,     0,   134,   135,     0,   136,   137,
-       0,     0,   138,   139,     0,   140,   141,   142,   143,     0,
-       0,     0,     0,   144,     0,   145,     0,   146,     0,     0,
-       0,   147,     0,     0,   148,   149,     0,     0,   150,     0,
-       0,   151,     0,     0,   152,   153,     0,     0,     0,     0,
-       0,   154,   558,     0,     0,   155,     0,   156,     0,     0,
-       0,   157,   158,   159,   160,   161,   162,   163,   164,   165,
-     166,     0,   167,   168,   169,   170,   171,   172,   173,   174,
-     175,   176,     0,   177,   178,     0,   179,     0,     0,   180,
-       0,   181,     0,     0,     0,     0,     0,     0,     0,   182,
-     183,     0,     0,     0,   184,   185,   186,   187,   188,   189,
-     190,   191,     0,     0,     0,     0,   192,     0,   193,     0,
-     194,   195,     0,     0,   196,   197,   198,     0,   199,   200,
-     201,     0,     0,   202,     0,   203,     0,     0,   204,     0,
-     559,     0,     0,   205,   206,     0,     0,     0,     0,     0,
-       0,   207,   208,     0,     0,     0,   209,     0,     0,     0,
-     210,     0,     0,     0,   211,     0,   212,     0,     0,     0,
-     213,     0,   214,   215,     0,     0,   216,   217,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   218,     0,
-     219,     0,   220,   221,   222,   223,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   224,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   225,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   226,   227,
-       0,   228,     0,     0,     0,     0,     0,     0,     0,   229,
-     230,   231,   232,     0,   233,     0,     0,     0,     0,     0,
-       0,   234,   235,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   236,     0,   237,
-       0,     0,   238,     0,     0,   239,     0,   240,     0,   241,
-     242,   243,    85,    86,    87,    88,    89,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,  1524,     0,
-      90,     0,     0,    91,    92,    93,     0,    94,    95,    96,
-       0,     0,     0,    97,     0,    98,     0,    99,   100,   101,
-       0,   102,     0,     0,   103,     0,   104,     0,     0,   105,
-       0,     0,   106,   107,   108,   109,   110,   111,     0,     0,
-     112,   113,   114,     0,   115,     0,   116,   117,     0,     0,
-     118,   119,     0,     0,     0,     0,   120,   121,   122,   123,
-       0,   124,   125,   126,     0,     0,   127,     0,     0,   128,
-     129,     0,   130,     0,     0,   131,     0,     0,     0,   132,
-       0,     0,   133,     0,     0,   134,   135,     0,   136,   137,
-       0,     0,   138,   139,     0,   140,   141,   142,   143,     0,
-       0,     0,     0,   144,     0,   145,     0,   146,     0,     0,
-       0,   147,     0,     0,   148,   149,     0,     0,   150,     0,
-       0,   151,     0,     0,   152,   153,     0,     0,     0,     0,
-       0,   154,     0,     0,     0,   155,     0,   156,     0,     0,
-       0,   157,   158,   159,   160,   161,   162,   163,   164,   165,
-     166,     0,   167,   168,   169,   170,   171,   172,   173,   174,
-     175,   176,     0,   177,   178,     0,   179,     0,     0,   180,
-       0,   181,     0,     0,     0,     0,     0,     0,     0,   182,
-     183,     0,     0,     0,   184,   185,   186,   187,   188,   189,
-     190,   191,     0,     0,     0,     0,   192,     0,   193,     0,
-     194,   195,     0,     0,   196,   197,   198,     0,   199,   200,
-     201,     0,     0,   202,     0,   203,     0,     0,   204,     0,
-       0,     0,     0,  1241,   206,     0,     0,     0,     0,     0,
-       0,   207,   208,     0,     0,     0,   209,     0,     0,     0,
-     210,     0,     0,     0,   211,     0,   212,     0,     0,  1242,
-     213,     0,   214,   215,     0,     0,   216,   217,   564,   565,
-     566,   567,   568,   569,   570,   571,   572,   573,   218,     0,
-     219,     0,   220,   221,   222,   223,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   224,   564,   565,   566,   567,
-     568,   569,   570,   571,   572,   573,     0,     0,     0,     0,
-       0,   225,   564,   565,   566,   567,   568,   569,   570,   571,
-     572,   573,     0,     0,     0,     0,     0,     0,   226,   227,
-       0,   228,     0,     0,   574,     0,     0,     0,     0,   229,
-     230,   231,   232,     0,  1243,     0,     0,     0,     0,     0,
-       0,   234,   235,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   574,     0,     0,     0,     0,   236,     0,   237,
-       0,     0,   238,     0,     0,   239,     0,   240,   574,   241,
-     242,   243,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,  1244,     0,
-       0,     0,     0,     0,   575,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   576,   564,   565,   566,   567,   568,
-     569,   570,   571,   572,   573,     0,     0,     0,     0,     0,
-       0,     0,   575,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   576,     0,     0,     0,   577,     0,   575,     0,
-       0,     0,     0,     0,     0,   578,   579,     0,   576,   564,
-     565,   566,   567,   568,   569,   570,   571,   572,   573,     0,
-       0,     0,     0,     0,   577,     0,   580,     0,     0,     0,
-       0,   574,     0,   578,   579,     0,     0,     0,     0,     0,
-     577,     0,     0,     0,     0,     0,     0,     0,     0,   578,
-     579,     0,     0,     0,   580,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     580,     0,     0,     0,     0,   574,   581,     0,     0,     0,
-       0,     0,   564,   565,   566,   567,   568,   569,   570,   571,
-     572,   573,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   575,     0,     0,   581,     0,     0,     0,     0,     0,
-       0,   576,     0,     0,     0,     0,     0,     0,   582,     0,
-     581,     0,     0,     0,     0,   564,   565,   566,   567,   568,
-     569,   570,   571,   572,   573,     0,     0,     0,     0,     0,
-       0,     0,     0,   577,     0,   575,   582,     0,   574,     0,
-       0,     0,   578,   579,     0,   576,     0,     0,     0,     0,
-       0,     0,   582,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   580,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   577,     0,     0,
-       0,   574,     0,     0,     0,     0,   578,   579,     0,     0,
-       0,     0,     0,   583,   584,   585,   586,   587,   588,   589,
-       0,     0,   590,     0,  1022,  1023,     0,   580,   575,     0,
-       0,     0,     0,   581,     0,     0,     0,     0,   576,     0,
-       0,   583,   584,   585,   586,   587,   588,   589,     0,     0,
-     590,     0,  1034,  1035,     0,     0,     0,   583,   584,   585,
-     586,   587,   588,   589,     0,     0,   590,     0,  1046,  1047,
-     577,   575,     0,     0,     0,   582,     0,   581,     0,   578,
-     579,   576,   564,   565,   566,   567,   568,   569,   570,   571,
-     572,   573,     0,     0,     0,     0,     0,     0,     0,     0,
-     580,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   577,     0,     0,     0,     0,     0,   582,
-       0,     0,   578,   579,     0,   564,   565,   566,   567,   568,
-     569,   570,   571,   572,   573,     0,     0,     0,     0,     0,
-       0,     0,     0,   580,     0,     0,     0,     0,   574,     0,
-     581,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     583,   584,   585,   586,   587,   588,   589,     0,     0,   590,
-       0,  1048,  1049,     0,     0,     0,     0,     0,     0,     0,
-       0,   564,   565,   566,   567,   568,   569,   570,   571,   572,
-     573,   574,   582,   581,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   583,   584,   585,   586,   587,   588,
-     589,     0,     0,   590,     0,  1052,  1053,     0,   575,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   576,     0,
-       0,     0,     0,     0,     0,   582,     0,     0,     0,     0,
-    1107,     0,     0,     0,     0,     0,     0,   574,   564,   565,
-     566,   567,   568,   569,   570,   571,   572,   573,     0,     0,
-     577,   575,     0,     0,     0,     0,     0,     0,     0,   578,
-     579,   576,     0,     0,     0,     0,     0,   583,   584,   585,
-     586,   587,   588,   589,     0,     0,   590,     0,  1058,  1059,
-     580,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   577,     0,     0,     0,     0,     0,     0,
-       0,     0,   578,   579,   574,     0,     0,   575,     0,     0,
-     583,   584,   585,   586,   587,   588,   589,   576,     0,   590,
-       0,   837,  1063,   580,     0,     0,     0,     0,     0,     0,
-     581,     0,     0,     0,     0,     0,   564,   565,   566,   567,
-     568,   569,   570,   571,   572,   573,     0,     0,     0,   577,
-       0,     0,     0,     0,     0,     0,     0,     0,   578,   579,
-       0,   564,   565,   566,   567,   568,   569,   570,   571,   572,
-     573,     0,   582,   581,   575,     0,     0,     0,     0,   580,
-       0,     0,     0,     0,   576,   564,   565,   566,   567,   568,
-     569,   570,   571,   572,   573,     0,     0,     0,     0,     0,
-       0,     0,   574,     0,   564,   565,   566,   567,   568,   569,
-     570,   571,   572,   573,     0,   582,   577,     0,     0,     0,
-       0,     0,     0,     0,     0,   578,   579,   574,     0,   581,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   580,     0,     0,     0,
-       0,   574,     0,     0,     0,     0,     0,   583,   584,   585,
-     586,   587,   588,   589,     0,     0,   590,     0,  1104,  1105,
-     574,   582,   575,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   576,     0,     0,   564,   565,   566,   567,   568,
-     569,   570,   571,   572,   573,     0,   581,   575,     0,     0,
-     583,   584,   585,   586,   587,   588,   589,   576,     0,   590,
-       0,     0,  1108,     0,   577,     0,     0,     0,     0,     0,
-       0,   575,     0,   578,   579,     0,     0,     0,     0,     0,
-       0,   576,     0,     0,     0,     0,     0,     0,   582,   577,
-     575,     0,     0,     0,   580,     0,     0,     0,   578,   579,
-     576,   574,     0,     0,     0,     0,   583,   584,   585,   586,
-     587,   588,   589,   577,     0,   590,     0,  1124,  1125,   580,
-       0,     0,   578,   579,     0,     0,     0,     0,     0,     0,
-       0,     0,   577,     0,     0,     0,     0,     0,     0,     0,
-       0,   578,   579,   580,   581,     0,     0,     0,     0,   564,
-     565,   566,   567,   568,   569,   570,   571,   572,   573,     0,
-       0,     0,   580,     0,     0,     0,     0,     0,     0,   581,
-       0,   575,     0,   583,   584,   585,   586,   587,   588,   589,
-       0,   576,   590,     0,  1127,  1128,   582,     0,     0,     0,
-       0,     0,     0,   581,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   582,   581,   577,     0,   574,     0,     0,     0,     0,
-       0,     0,   578,   579,     0,   564,   565,   566,   567,   568,
-     569,   570,   571,   572,   573,   582,     0,     0,     0,     0,
-       0,     0,     0,   580,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   582,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   583,   584,   585,   586,   587,   588,   589,     0,     0,
-     590,     0,  1664,  1665,     0,   575,     0,     0,     0,     0,
-       0,   574,     0,   581,     0,   576,   583,   584,   585,   586,
-     587,   588,   589,     0,     0,   590,     0,  1667,  1668,   564,
-     565,   566,   567,   568,   569,   570,   571,   572,   573,     0,
-     583,   584,   585,   586,   587,   588,   589,   577,     0,   590,
-       0,  1683,  1684,     0,     0,   582,   578,   579,     0,   583,
-     584,   585,   586,   587,   588,   589,     0,     0,   590,     0,
-    2033,  2034,     0,     0,     0,     0,     0,   580,     0,     0,
-       0,   575,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   576,     0,     0,     0,   574,   564,   565,   566,   567,
-     568,   569,   570,   571,   572,   573,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   577,     0,     0,     0,   581,     0,     0,
-       0,     0,   578,   579,     0,     0,     0,     0,     0,     0,
-     583,   584,   585,   586,   587,   588,   589,     0,     0,   590,
-       0,  2269,  2270,   580,     0,     0,     0,     0,     0,     0,
-       0,     0,   574,     0,     0,   575,     0,     0,     0,   582,
-       0,     0,     0,     0,     0,   576,     0,   564,   565,   566,
-     567,   568,   569,   570,   571,   572,   573,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   581,     0,     0,     0,   577,     0,     0,
-       0,     0,     0,     0,     0,     0,   578,   579,     0,     0,
-     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
-       0,     0,   575,     0,     0,     0,     0,   580,     0,     0,
-       0,     0,   576,   574,     0,   582,     0,     0,     0,     0,
-       0,     0,     0,     0,   583,   584,   585,   586,   587,   588,
-     589,     0,     0,   590,     0,     0,  1012,     0,     0,     0,
-       0,     0,     0,     0,   577,     0,     0,     0,     0,     0,
-       0,     0,     0,   578,   579,     0,   574,   581,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   580,     0,     0,     0,     0,     0,
-       0,     0,     0,   575,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   576,     0,     0,     0,     0,     0,   582,
-     583,   584,   585,   586,   587,   588,   589,     0,     0,   590,
-       0,     0,  1017,   564,   565,   566,   567,   568,   569,   570,
-     571,   572,   573,     0,   581,   577,   575,     0,     0,     0,
-       0,     0,     0,     0,   578,   579,   576,   564,   565,   566,
-     567,   568,   569,   570,   571,   572,   573,     0,     0,     0,
-       0,     0,     0,     0,     0,   580,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   582,     0,   577,     0,
-       0,     0,     0,     0,     0,     0,     0,   578,   579,   574,
-       0,     0,     0,     0,   583,   584,   585,   586,   587,   588,
-     589,     0,     0,   590,     0,     0,  1019,     0,   580,     0,
-       0,     0,     0,   574,     0,   581,     0,     0,     0,     0,
-       0,   564,   565,   566,   567,   568,   569,   570,   571,   572,
-     573,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   564,   565,   566,   567,
-     568,   569,   570,   571,   572,   573,     0,   582,   581,   575,
-       0,   583,   584,   585,   586,   587,   588,   589,     0,   576,
-     590,     0,     0,  1020,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   575,     0,     0,     0,   574,     0,     0,
-       0,     0,     0,   576,     0,     0,     0,     0,     0,     0,
-     582,   577,     0,     0,     0,     0,     0,     0,     0,     0,
-     578,   579,   574,     0,   564,   565,   566,   567,   568,   569,
-     570,   571,   572,   573,     0,   577,     0,     0,     0,     0,
-       0,   580,     0,     0,   578,   579,     0,     0,     0,     0,
-       0,     0,   583,   584,   585,   586,   587,   588,   589,     0,
-       0,   590,     0,     0,  1021,   580,     0,   575,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   576,     0,   564,
-     565,   566,   567,   568,   569,   570,   571,   572,   573,     0,
-     574,   581,   575,     0,     0,   583,   584,   585,   586,   587,
-     588,   589,   576,     0,   590,     0,     0,  1028,     0,   577,
-       0,     0,     0,     0,     0,   581,     0,     0,   578,   579,
-       0,     0,   564,   565,   566,   567,   568,   569,   570,   571,
-     572,   573,     0,   582,   577,     0,     0,     0,     0,   580,
-       0,     0,     0,   578,   579,   574,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   582,     0,     0,
-     575,     0,     0,     0,   580,     0,     0,     0,     0,     0,
-     576,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   574,   581,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   577,     0,     0,     0,     0,     0,     0,     0,
-       0,   578,   579,     0,   581,   575,     0,     0,   583,   584,
-     585,   586,   587,   588,   589,   576,     0,   590,     0,     0,
-    1029,   582,   580,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   583,   584,   585,   586,   587,   588,   589,     0,
-       0,   590,     0,     0,  1041,     0,   582,   577,   575,     0,
-       0,     0,     0,     0,     0,     0,   578,   579,   576,     0,
-     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
-       0,     0,   581,     0,     0,     0,     0,   580,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     577,     0,     0,     0,     0,     0,     0,     0,     0,   578,
-     579,     0,     0,     0,     0,     0,   583,   584,   585,   586,
-     587,   588,   589,     0,   582,   590,     0,     0,  1043,     0,
-     580,     0,     0,     0,     0,     0,   574,   581,     0,     0,
-       0,   583,   584,   585,   586,   587,   588,   589,     0,     0,
-     590,     0,     0,  1044,   564,   565,   566,   567,   568,   569,
-     570,   571,   572,   573,     0,     0,     0,     0,   564,   565,
-     566,   567,   568,   569,   570,   571,   572,   573,     0,   582,
-     581,   564,   565,   566,   567,   568,   569,   570,   571,   572,
-     573,     0,     0,     0,   564,   565,   566,   567,   568,   569,
-     570,   571,   572,   573,     0,     0,   575,     0,     0,   583,
-     584,   585,   586,   587,   588,   589,   576,     0,   590,     0,
-     574,  1045,   582,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   574,     0,     0,   564,   565,   566,
-     567,   568,   569,   570,   571,   572,   573,   574,   577,     0,
-       0,     0,     0,     0,     0,     0,     0,   578,   579,     0,
-     574,     0,     0,     0,   583,   584,   585,   586,   587,   588,
-     589,     0,     0,   590,     0,     0,  1050,     0,   580,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     575,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     576,     0,     0,   574,   575,     0,     0,   583,   584,   585,
-     586,   587,   588,   589,   576,     0,   590,   575,     0,  1051,
-       0,     0,     0,     0,     0,     0,     0,   576,   581,     0,
-     575,     0,   577,     0,     0,     0,     0,     0,     0,     0,
-     576,   578,   579,     0,     0,     0,   577,     0,     0,     0,
-       0,     0,     0,     0,     0,   578,   579,     0,     0,   577,
-       0,     0,   580,     0,     0,     0,     0,     0,   578,   579,
-     582,     0,   577,   575,     0,     0,   580,     0,     0,     0,
-       0,   578,   579,   576,     0,     0,     0,     0,     0,   580,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   580,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   581,     0,     0,   577,     0,     0,     0,     0,
-       0,     0,     0,     0,   578,   579,   581,   564,   565,   566,
-     567,   568,   569,   570,   571,   572,   573,     0,     0,   581,
-       0,     0,     0,     0,     0,   580,     0,     0,     0,     0,
-       0,     0,   581,     0,   582,   583,   584,   585,   586,   587,
-     588,   589,     0,     0,   590,     0,     0,  1054,   582,     0,
-     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
-       0,   582,     0,   564,   565,   566,   567,   568,   569,   570,
-     571,   572,   573,   574,   582,   581,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   564,   565,
-     566,   567,   568,   569,   570,   571,   572,   573,     0,     0,
-       0,     0,     0,   564,   565,   566,   567,   568,   569,   570,
-     571,   572,   573,     0,     0,     0,   574,   582,     0,   583,
-     584,   585,   586,   587,   588,   589,     0,     0,   590,   574,
-       0,  1056,     0,   583,   584,   585,   586,   587,   588,   589,
-       0,     0,   590,   575,     0,  1057,   583,   584,   585,   586,
-     587,   588,   589,   576,   574,   590,     0,     0,  1062,   583,
-     584,   585,   586,   587,   588,   589,     0,     0,   590,   574,
-       0,  1066,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   577,   575,     0,     0,     0,
-       0,     0,     0,     0,   578,   579,   576,     0,     0,   575,
-       0,     0,   583,   584,   585,   586,   587,   588,   589,   576,
-       0,   590,     0,     0,  1067,   580,     0,     0,     0,     0,
-       0,     0,     0,     0,   575,     0,     0,     0,   577,     0,
-       0,     0,     0,     0,   576,     0,     0,   578,   579,   575,
-       0,   577,     0,     0,     0,     0,     0,     0,     0,   576,
-     578,   579,     0,     0,     0,     0,     0,     0,   580,     0,
-       0,     0,     0,     0,     0,   581,   577,     0,     0,     0,
-       0,   580,     0,     0,     0,   578,   579,     0,     0,     0,
-       0,   577,     0,     0,     0,     0,     0,     0,     0,     0,
-     578,   579,     0,     0,     0,     0,   580,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   582,   581,     0,
-       0,   580,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   581,     0,   564,   565,   566,   567,   568,   569,   570,
-     571,   572,   573,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   581,     0,     0,     0,
-     582,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   581,     0,   582,     0,     0,   564,   565,   566,   567,
-     568,   569,   570,   571,   572,   573,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   582,   574,
-       0,     0,   583,   584,   585,   586,   587,   588,   589,     0,
-       0,   590,     0,   582,  1068,   564,   565,   566,   567,   568,
-     569,   570,   571,   572,   573,     0,     0,     0,     0,     0,
-       0,   564,   565,   566,   567,   568,   569,   570,   571,   572,
-     573,     0,   574,     0,     0,   583,   584,   585,   586,   587,
-     588,   589,     0,     0,   590,     0,     0,  1069,   583,   584,
-     585,   586,   587,   588,   589,     0,     0,   590,     0,   575,
-    1102,     0,     0,     0,     0,     0,     0,     0,     0,   576,
-       0,   574,     0,   583,   584,   585,   586,   587,   588,   589,
-       0,     0,   590,     0,     0,  1103,     0,   574,   583,   584,
-     585,   586,   587,   588,   589,     0,     0,   590,     0,     0,
-    1109,   577,   575,     0,     0,     0,     0,     0,     0,     0,
-     578,   579,   576,     0,   564,   565,   566,   567,   568,   569,
-     570,   571,   572,   573,     0,     0,     0,     0,     0,     0,
-       0,   580,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   575,     0,     0,   577,     0,     0,     0,     0,     0,
-       0,   576,     0,   578,   579,     0,     0,   575,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   576,     0,     0,
-       0,     0,     0,     0,   580,     0,     0,     0,     0,     0,
-     574,   581,     0,   577,     0,     0,     0,     0,     0,     0,
-       0,     0,   578,   579,     0,     0,     0,     0,     0,   577,
-       0,     0,     0,     0,     0,     0,     0,     0,   578,   579,
-       0,     0,     0,   580,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   582,   581,     0,     0,     0,     0,   580,
-       0,     0,     0,     0,     0,     0,     0,     0,   564,   565,
-     566,   567,   568,   569,   570,   571,   572,   573,     0,     0,
-     575,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     576,     0,     0,   581,     0,     0,   582,   564,   565,   566,
-     567,   568,   569,   570,   571,   572,   573,     0,     0,   581,
-       0,   564,   565,   566,   567,   568,   569,   570,   571,   572,
-     573,     0,   577,     0,     0,     0,     0,     0,     0,     0,
-       0,   578,   579,     0,   574,   582,     0,     0,   583,   584,
-     585,   586,   587,   588,   589,     0,     0,   590,     0,     0,
-    1627,   582,   580,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   574,   564,   565,   566,   567,   568,   569,
-     570,   571,   572,   573,     0,     0,     0,   574,     0,     0,
-       0,   583,   584,   585,   586,   587,   588,   589,     0,     0,
-     590,     0,     0,  1639,     0,     0,     0,     0,     0,     0,
-       0,     0,   581,     0,   575,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   576,     0,     0,     0,     0,     0,
-     583,   584,   585,   586,   587,   588,   589,     0,     0,   590,
-     574,     0,  1655,   575,     0,     0,   583,   584,   585,   586,
-     587,   588,   589,   576,   582,   590,   577,   575,  1661,     0,
-       0,     0,     0,     0,     0,   578,   579,   576,     0,     0,
-       0,     0,   564,   565,   566,   567,   568,   569,   570,   571,
-     572,   573,     0,     0,     0,   577,   580,     0,     0,  1114,
-       0,     0,     0,     0,   578,   579,     0,     0,     0,   577,
-       0,     0,     0,     0,     0,     0,     0,     0,   578,   579,
-     575,     0,     0,     0,     0,   580,     0,     0,     0,     0,
-     576,     0,     0,     0,     0,     0,     0,     0,     0,   580,
-       0,     0,     0,     0,     0,     0,   581,     0,   574,   583,
-     584,   585,   586,   587,   588,   589,     0,     0,   590,     0,
-       0,  1678,   577,     0,     0,     0,     0,     0,     0,     0,
-       0,   578,   579,     0,     0,   581,     0,   564,   565,   566,
-     567,   568,   569,   570,   571,   572,   573,     0,   582,   581,
-       0,     0,   580,     0,     0,     0,     0,     0,     0,   564,
-     565,   566,   567,   568,   569,   570,   571,   572,   573,     0,
-       0,     0,     0,     0,     0,     0,     0,   582,   575,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   576,     0,
-       0,   582,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   581,   574,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,  1681,     0,     0,
-     577,     0,     0,     0,     0,   574,     0,     0,     0,   578,
-     579,     0,     0,   583,   584,   585,   586,   587,   588,   589,
-       0,     0,   590,     0,   582,  1685,     0,     0,     0,     0,
-     580,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   583,   584,   585,   586,   587,   588,   589,     0,
-       0,   590,     0,   575,  2027,     0,   583,   584,   585,   586,
-     587,   588,   589,   576,     0,   590,     0,  1682,     0,     0,
-       0,     0,     0,     0,     0,   575,     0,     0,     0,     0,
-     581,     0,     0,     0,     0,   576,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   577,     0,     0,     0,     0,
-       0,     0,     0,     0,   578,   579,     0,     0,     0,   583,
-     584,   585,   586,   587,   588,   589,     0,   577,   590,     0,
-    1115,     0,   582,     0,     0,   580,   578,   579,     0,     0,
-       0,     0,   564,   565,   566,   567,   568,   569,   570,   571,
-     572,   573,     0,     0,     0,     0,     0,   580,     0,     0,
-       0,     0,     0,     0,   564,   565,   566,   567,   568,   569,
-     570,   571,   572,   573,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   581,   564,   565,   566,   567,
-     568,   569,   570,   571,   572,   573,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   581,   574,     0,
-       0,     0,     0,     0,     0,     0,     0,   583,   584,   585,
-     586,   587,   588,   589,     0,     0,   590,   582,   837,     0,
-     574,     0,     0,     0,     0,     0,     0,     0,     0,   564,
-     565,   566,   567,   568,   569,   570,   571,   572,   573,   582,
-       0,     0,   574,     0,     0,     0,     0,     0,     0,     0,
-       0,   564,   565,   566,   567,   568,   569,   570,   571,   572,
-     573,     0,     0,     0,     0,     0,     0,     0,   575,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   576,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     575,     0,     0,     0,     0,   574,     0,     0,     0,     0,
-     576,     0,   583,   584,   585,   586,   587,   588,   589,     0,
-     577,   590,   575,  1027,     0,     0,     0,   574,     0,   578,
-     579,     0,   576,     0,   583,   584,   585,   586,   587,   588,
-     589,     0,   577,   590,     0,  1042,     0,     0,     0,     0,
-     580,   578,   579,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   577,     0,     0,     0,     0,     0,
-       0,     0,   580,   578,   579,   575,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   576,     0,     0,     0,     0,
-       0,     0,     0,     0,   580,     0,     0,   575,     0,     0,
-     581,     0,     0,     0,     0,     0,     0,   576,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   577,     0,     0,
-       0,     0,   581,     0,     0,     0,   578,   579,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   577,
-       0,     0,   582,     0,   581,     0,     0,   580,   578,   579,
-       0,     0,     0,     0,   564,   565,   566,   567,   568,   569,
-     570,   571,   572,   573,   582,     0,     0,     0,     0,   580,
-       0,     0,     0,     0,     0,     0,   564,   565,   566,   567,
-     568,   569,   570,   571,   572,   573,   582,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   581,   564,   565,
-     566,   567,   568,   569,   570,   571,   572,   573,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   581,
-     574,     0,     0,     0,     0,     0,     0,   583,   584,   585,
-     586,   587,   588,   589,     0,     0,   590,     0,  1061,   582,
-       0,     0,   574,     0,     0,     0,     0,     0,     0,   583,
-     584,   585,   586,   587,   588,   589,     0,     0,   590,     0,
-    1065,   582,     0,     0,   574,     0,     0,     0,     0,     0,
-       0,   583,   584,   585,   586,   587,   588,   589,     0,     0,
-     590,     0,  1070,     0,     0,     0,     0,     0,     0,     0,
-     575,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     576,   564,   565,   566,   567,   568,   569,   570,   571,   572,
-     573,     0,   575,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   576,     0,   583,   584,   585,   586,   587,   588,
-     589,     0,   577,   590,   575,  1071,     0,     0,     0,     0,
-       0,   578,   579,     0,   576,     0,   583,   584,   585,   586,
-     587,   588,   589,     0,   577,   590,     0,  1072,     0,     0,
-       0,     0,   580,   578,   579,     0,     0,   574,     0,     0,
-       0,     0,     0,     0,     0,     0,   577,     0,     0,     0,
-       0,     0,     0,     0,   580,   578,   579,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   580,     0,     0,     0,
-       0,     0,   581,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   581,     0,     0,   575,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   576,     0,     0,
-       0,     0,     0,     0,   582,     0,   581,   564,   565,   566,
-     567,   568,   569,   570,   571,   572,   573,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   582,     0,     0,   577,
-       0,     0,     0,     0,     0,     0,     0,     0,   578,   579,
-       0,     0,     0,     0,     0,     0,     0,     0,   582,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   580,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   574,   564,   565,   566,   567,   568,   569,
-     570,   571,   572,   573,     0,     0,     0,     0,     0,   583,
-     584,   585,   586,   587,   588,   589,     0,     0,   590,     0,
-    1073,     0,     0,     0,     0,     0,     0,     0,     0,   581,
-       0,   583,   584,   585,   586,   587,   588,   589,     0,     0,
-     590,     0,  1101,   564,   565,   566,   567,   568,   569,   570,
-     571,   572,   573,   583,   584,   585,   586,   587,   588,   589,
-     574,     0,   590,   575,  1106,     0,     0,     0,     0,     0,
-       0,   582,     0,   576,     0,     0,   564,   565,   566,   567,
-     568,   569,   570,   571,   572,   573,     0,     0,     0,   564,
-     565,   566,   567,   568,   569,   570,   571,   572,   573,     0,
-       0,     0,     0,     0,     0,   577,     0,     0,     0,   574,
-       0,     0,     0,     0,   578,   579,     0,     0,     0,     0,
-     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
-     575,     0,     0,     0,     0,   580,     0,     0,     0,     0,
-     576,     0,   574,     0,   564,   565,   566,   567,   568,   569,
-     570,   571,   572,   573,     0,   574,   583,   584,   585,   586,
-     587,   588,   589,     0,     0,   590,     0,  1123,     0,     0,
-       0,     0,   577,     0,     0,     0,     0,     0,     0,   575,
-       0,   578,   579,     0,     0,   581,   574,     0,     0,   576,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   580,     0,     0,     0,     0,     0,     0,     0,
-     574,     0,  1636,     0,     0,     0,     0,     0,     0,     0,
-       0,   577,   576,     0,     0,   575,     0,   582,     0,     0,
-     578,   579,     0,     0,     0,   576,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   580,   581,     0,   577,     0,   575,     0,     0,     0,
-       0,     0,     0,   578,   579,     0,   576,   577,     0,     0,
-       0,     0,     0,     0,     0,     0,   578,   579,     0,     0,
-     575,     0,     0,     0,   580,     0,     0,     0,     0,     0,
-     576,     0,     0,     0,   582,     0,     0,   580,   577,     0,
-       0,   581,     0,     0,     0,     0,     0,   578,   579,     0,
-       0,     0,   583,   584,   585,   586,   587,   588,   589,     0,
-       0,   590,   577,  1126,     0,     0,     0,     0,   580,     0,
-       0,   578,   579,     0,   581,     0,     0,     0,     0,     0,
-       0,     0,     0,   582,     0,     0,     0,   581,     0,     0,
-       0,     0,   580,     0,     0,     0,     0,     0,   564,   565,
-     566,   567,   568,   569,   570,   571,   572,   573,     0,     0,
-       0,     0,     0,     0,     0,     0,   582,     0,   581,   583,
-     584,   585,   586,   587,   588,   589,     0,     0,   590,   582,
-    1628,   564,   565,   566,   567,   568,   569,   570,   571,   572,
-     573,     0,   581,   564,   565,   566,   567,   568,   569,   570,
-     571,   572,   573,     0,     0,     0,     0,     0,     0,     0,
-     582,     0,     0,     0,   574,     0,     0,     0,   583,   584,
-     585,   586,   587,   588,   589,     0,     0,   590,     0,  1635,
-       0,     0,     0,     0,   582,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   574,     0,     0,
-       0,   583,   584,   585,   586,   587,   588,   589,     0,   574,
-     590,     0,  1637,     0,   583,   584,   585,   586,   587,   588,
-     589,     0,     0,   590,     0,  1638,     0,     0,     0,     0,
-       0,     0,     0,     0,   575,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   576,   583,   584,   585,   586,   587,
-     588,   589,     0,     0,   590,     0,  1641,   564,   565,   566,
-     567,   568,   569,   570,   571,   572,   573,   575,     0,   583,
-     584,   585,   586,   587,   588,   589,   577,   576,   590,   575,
-    1650,     0,     0,     0,     0,   578,   579,     0,     0,   576,
-       0,   564,   565,   566,   567,   568,   569,   570,   571,   572,
-     573,     0,     0,     0,     0,     0,   580,     0,     0,   577,
-       0,     0,     0,     0,     0,     0,     0,     0,   578,   579,
-       0,   577,     0,   574,     0,     0,     0,     0,     0,     0,
-     578,   579,     0,     0,     0,     0,     0,     0,     0,   580,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   580,     0,     0,     0,     0,   581,   574,     0,     0,
-     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   581,
-       0,     0,     0,   575,     0,     0,     0,     0,   582,     0,
-       0,   581,     0,   576,     0,   564,   565,   566,   567,   568,
-     569,   570,   571,   572,   573,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   574,   575,     0,     0,
-       0,   582,     0,     0,     0,   577,     0,   576,     0,     0,
-       0,     0,     0,   582,   578,   579,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   580,     0,     0,     0,   577,
-       0,   574,     0,     0,     0,     0,     0,     0,   578,   579,
-       0,     0,     0,   583,   584,   585,   586,   587,   588,   589,
-       0,     0,   590,     0,  1651,     0,   575,     0,     0,   580,
-       0,     0,     0,     0,     0,     0,   576,     0,     0,     0,
-       0,     0,     0,     0,     0,   581,   583,   584,   585,   586,
-     587,   588,   589,     0,     0,   590,     0,  1654,   583,   584,
-     585,   586,   587,   588,   589,     0,     0,   590,   577,  1656,
-       0,   575,     0,     0,     0,     0,     0,   578,   579,   581,
-       0,   576,     0,     0,     0,     0,     0,   582,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   580,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   577,     0,     0,     0,     0,     0,     0,
-       0,   582,   578,   579,     0,   564,   565,   566,   567,   568,
-     569,   570,   571,   572,   573,     0,     0,     0,     0,     0,
-       0,     0,     0,   580,     0,     0,     0,     0,   581,     0,
-       0,     0,   564,   565,   566,   567,   568,   569,   570,   571,
-     572,   573,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   583,   584,   585,   586,   587,   588,   589,     0,
-       0,   590,     0,  1659,     0,     0,     0,     0,     0,     0,
-     582,   574,     0,   581,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   583,   584,   585,   586,
-     587,   588,   589,     0,     0,   590,     0,  1663,   574,     0,
-       0,     0,     0,     0,     0,   564,   565,   566,   567,   568,
-     569,   570,   571,   572,   573,   582,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   564,
-     565,   566,   567,   568,   569,   570,   571,   572,   573,     0,
-       0,   575,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   576,     0,     0,     0,   583,   584,   585,   586,   587,
-     588,   589,     0,     0,   590,     0,  1670,     0,   575,     0,
-       0,   574,     0,     0,     0,     0,     0,     0,   576,     0,
-       0,     0,     0,   577,     0,     0,     0,     0,     0,     0,
-       0,     0,   578,   579,     0,   574,     0,     0,     0,     0,
-     583,   584,   585,   586,   587,   588,   589,     0,     0,   590,
-     577,  1679,     0,   580,     0,     0,     0,     0,     0,   578,
-     579,     0,   564,   565,   566,   567,   568,   569,   570,   571,
-     572,   573,     0,     0,     0,     0,     0,     0,     0,     0,
-     580,   575,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   576,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   581,     0,   575,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   576,     0,     0,     0,     0,
-       0,     0,     0,   577,     0,     0,     0,     0,   574,     0,
-     581,     0,   578,   579,     0,   564,   565,   566,   567,   568,
-     569,   570,   571,   572,   573,   582,     0,   577,     0,     0,
-       0,     0,     0,   580,     0,     0,   578,   579,     0,   564,
-     565,   566,   567,   568,   569,   570,   571,   572,   573,     0,
-       0,     0,   582,     0,     0,     0,     0,   580,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   575,     0,
-       0,   574,     0,   581,     0,     0,     0,     0,   576,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   574,     0,   581,     0,     0,
-     583,   584,   585,   586,   587,   588,   589,     0,     0,   590,
-     577,  1680,     0,     0,     0,   582,     0,     0,     0,   578,
-     579,     0,     0,     0,     0,     0,     0,   583,   584,   585,
-     586,   587,   588,   589,     0,     0,   590,     0,  1689,   582,
-     580,   575,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   576,   564,   565,   566,   567,   568,   569,   570,   571,
-     572,   573,     0,     0,     0,   575,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   576,     0,     0,     0,     0,
-       0,     0,     0,   577,     0,     0,     0,     0,     0,     0,
-     581,     0,   578,   579,     0,     0,     0,     0,     0,     0,
-     583,   584,   585,   586,   587,   588,   589,   577,     0,   590,
-       0,  1691,     0,   580,     0,     0,   578,   579,   574,     0,
-       0,     0,     0,     0,   583,   584,   585,   586,   587,   588,
-     589,     0,   582,   590,     0,  1692,     0,   580,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   581,     0,     0,   564,   565,   566,   567,
-     568,   569,   570,   571,   572,   573,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   581,   575,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   576,     0,
-       0,     0,     0,     0,     0,   582,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   583,   584,   585,
-     586,   587,   588,   589,     0,     0,   590,     0,  1693,   582,
-     577,     0,   574,     0,     0,     0,     0,     0,     0,   578,
-     579,   564,   565,   566,   567,   568,   569,   570,   571,   572,
-     573,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     580,     0,     0,     0,     0,     0,   564,   565,   566,   567,
-     568,   569,   570,   571,   572,   573,     0,     0,     0,     0,
-     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
-     583,   584,   585,   586,   587,   588,   589,     0,     0,   590,
-       0,  1887,   575,     0,     0,     0,     0,   574,     0,     0,
-     581,     0,   576,     0,   583,   584,   585,   586,   587,   588,
-     589,     0,     0,   590,     0,  1888,     0,     0,     0,     0,
-       0,     0,   574,     0,   564,   565,   566,   567,   568,   569,
-     570,   571,   572,   573,   577,     0,   574,     0,     0,     0,
-       0,     0,   582,   578,   579,     0,     0,     0,     0,   564,
-     565,   566,   567,   568,   569,   570,   571,   572,   573,     0,
-       0,     0,     0,     0,   580,     0,     0,   575,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   576,     0,     0,
-     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
-     574,     0,   575,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   576,     0,     0,     0,   575,     0,     0,   577,
-       0,     0,     0,     0,   581,   574,   576,     0,   578,   579,
-       0,     0,     0,     0,     0,     0,     0,   583,   584,   585,
-     586,   587,   588,   589,   577,     0,   590,     0,  1889,   580,
-       0,     0,     0,   578,   579,     0,   574,     0,   577,     0,
-       0,     0,     0,     0,     0,     0,   582,   578,   579,     0,
-     575,     0,     0,     0,   580,     0,     0,     0,     0,     0,
-     576,     0,     0,     0,     0,     0,     0,     0,   580,     0,
-       0,     0,     0,     0,     0,   575,     0,     0,     0,   581,
-       0,     0,     0,     0,     0,   576,     0,     0,     0,     0,
-       0,     0,   577,     0,     0,     0,     0,     0,     0,     0,
-       0,   578,   579,     0,   581,     0,   575,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   576,   577,   581,     0,
-       0,   582,   580,     0,     0,     0,   578,   579,     0,     0,
-       0,   583,   584,   585,   586,   587,   588,   589,     0,     0,
-     590,     0,  2029,     0,     0,     0,   582,   580,   577,     0,
-       0,     0,     0,     0,     0,     0,     0,   578,   579,     0,
-     582,   564,   565,   566,   567,   568,   569,   570,   571,   572,
-     573,     0,   581,     0,     0,     0,     0,     0,   580,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   581,     0,     0,
-       0,     0,     0,     0,     0,     0,   583,   584,   585,   586,
-     587,   588,   589,     0,   582,   590,     0,  2036,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   574,   581,     0,
-       0,   583,   584,   585,   586,   587,   588,   589,     0,   582,
-     590,     0,  2037,     0,     0,   583,   584,   585,   586,   587,
-     588,   589,     0,     0,   590,     0,  2038,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     582,   564,   565,   566,   567,   568,   569,   570,   571,   572,
-     573,     0,     0,     0,   564,   565,   566,   567,   568,   569,
-     570,   571,   572,   573,     0,     0,     0,   575,     0,   583,
-     584,   585,   586,   587,   588,   589,     0,   576,   590,     0,
-    2040,     0,     0,     0,     0,     0,     0,     0,     0,  1267,
-       0,     0,     0,     0,   583,   584,   585,   586,   587,   588,
-     589,     0,     0,   590,     0,  2041,     0,   574,     0,   577,
-       0,     0,     0,     0,     0,     0,     0,     0,   578,   579,
-     574,     0,     0,     0,     0,   583,   584,   585,   586,   587,
-     588,   589,     0,     0,   590,     0,  2042,  1269,  1270,   580,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-    1271,  1272,     0,     0,     0,     0,     0,     0,     0,     0,
-    1273,     0,     0,  1274,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   575,     0,     0,
-       0,     0,     0,     0,     0,     0,  1264,   576,  1265,   581,
-     575,     0,     0,  1266,     0,  1267,     0,     0,  1277,     0,
-     576,     0,     0,  1268,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   577,
-       0,     0,     0,     0,     0,     0,     0,     0,   578,   579,
-       0,   582,   577,  1278,     0,     0,     0,     0,     0,     0,
-    1279,   578,   579,  1269,  1270,     0,     0,     0,     0,   580,
-       0,     0,     0,     0,     0,     0,  1271,  1272,     0,     0,
-       0,  1281,   580,     0,     0,     0,  1273,     0,     0,  1274,
-    1282,  1283,  1284,  1275,     0,     0,  1276,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,  1286,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   581,
-       0,     0,     0,     0,  1277,  1287,     0,     0,     0,     0,
-       0,     0,   581,     0,  1288,     0,   583,   584,   585,   586,
-     587,   588,   589,     0,     0,   590,     0,  2043,     0,     0,
-    1289,     0,     0,     0,     0,     0,     0,     0,     0,  1278,
-       0,   582,     0,     0,     0,     0,  1279,     0,     0,     0,
-       0,     0,     0,     0,   582,     0,     0,     0,     0,     0,
-       0,     0,     0,  1280,     0,     0,     0,  1281,     0,     0,
-       0,     0,     0,     0,     0,     0,  1282,  1283,  1284,     0,
-       0,     0,     0,     0,  1285,     0,     0,     0,     0,     0,
-       0,     0,  1286,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,  1290,     0,     0,     0,     0,     0,     0,     0,
-       0,  1287,     0,     0,     0,  1292,     0,     0,     0,     0,
-    1288,     0,     0,     0,     0,     0,   583,   584,   585,   586,
-     587,   588,   589,     0,     0,   590,  1289,  2268,     0,   583,
-     584,   585,   586,   587,   588,   589,     0,     0,   590,     0,
-    2372,    85,    86,    87,    88,    89,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,    90,
-       0,     0,    91,    92,    93,     0,    94,    95,    96,     0,
-       0,     0,    97,     0,    98,     0,    99,   100,   101,     0,
-     102,     0,     0,   103,     0,   104,     0,     0,   105,     0,
-       0,   106,   107,   108,   109,   110,   111,     0,  1290,   112,
-     113,   114,     0,   115,     0,   116,   117,     0,  1291,   118,
-     119,  1292,     0,     0,     0,   120,   121,   122,   123,     0,
-     124,   125,   126,     0,     0,   127,     0,     0,   128,   129,
-       0,   130,     0,     0,   131,     0,     0,     0,   132,     0,
-       0,   133,     0,     0,   134,   135,     0,   136,   137,     0,
-       0,   138,   139,     0,   140,   141,   142,   143,     0,     0,
-       0,     0,   144,     0,   145,     0,   146,     0,     0,     0,
-     147,     0,     0,   148,   149,     0,     0,   150,     0,     0,
-     151,     0,     0,   152,   153,     0,     0,     0,     0,     0,
-     154,     0,     0,     0,   155,     0,   156,     0,     0,     0,
-     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
-       0,   167,   168,   169,   170,   171,   172,   173,   174,   175,
-     176,     0,   177,   178,     0,   179,     0,     0,   180,     0,
-     181,     0,     0,     0,     0,     0,     0,     0,   182,   183,
-       0,     0,     0,   184,   185,   186,   187,   188,   189,   190,
-     191,     0,     0,     0,     0,   192,     0,   193,     0,   194,
-     195,     0,     0,   196,   197,   198,     0,   199,   200,   201,
-       0,     0,   202,     0,   203,     0,     0,   204,     0,     0,
-       0,     0,   205,   206,     0,     0,     0,     0,     0,     0,
-     207,   208,     0,     0,     0,   209,     0,     0,     0,   210,
-       0,     0,     0,   211,     0,   212,     0,     0,     0,   213,
-       0,   214,   215,     0,     0,   216,   217,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   218,     0,   219,
-       0,   220,   221,   222,   223,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   224,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     225,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   226,   227,     0,
-     228,     0,     0,     0,     0,     0,     0,     0,   229,   230,
-     231,   232,     0,   233,     0,     0,     0,     0,     0,     0,
-     234,   235,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   236,     0,   237,     0,
-       0,   238,     0,     0,   239,     0,   240,     0,   241,   242,
-     243,     0,     0,     0,     0,  1319,    85,    86,    87,    88,
-      89,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,    90,     0,     0,    91,    92,    93,
-       0,    94,    95,    96,     0,     0,     0,    97,     0,    98,
-       0,    99,   100,   101,     0,   102,     0,     0,   103,     0,
-     104,     0,     0,   105,     0,     0,   106,   107,   108,   109,
-     110,   111,     0,     0,   112,   113,   114,     0,   115,     0,
-     116,   117,     0,     0,   118,   119,     0,     0,     0,     0,
-     120,   121,   122,   123,     0,   124,   125,   126,     0,     0,
-     127,     0,     0,   128,   129,     0,   130,     0,     0,   131,
-       0,     0,     0,   132,     0,     0,   133,     0,     0,   134,
-     135,     0,   136,   137,     0,     0,   138,   139,     0,   140,
-     141,   142,   143,     0,     0,     0,     0,   144,     0,   145,
-       0,   146,     0,     0,     0,   147,     0,     0,   148,   149,
-       0,     0,   150,     0,     0,   151,     0,     0,   152,   153,
-       0,     0,     0,     0,     0,   154,     0,     0,     0,   155,
-       0,   156,     0,     0,     0,   157,   158,   159,   160,   161,
-     162,   163,   164,   165,   166,     0,   167,   168,   169,   170,
-     171,   172,   173,   174,   175,   176,     0,   177,   178,     0,
-     179,     0,     0,   180,     0,   181,     0,     0,     0,     0,
-       0,     0,     0,   182,   183,     0,     0,     0,   184,   185,
-     186,   187,   188,   189,   190,   191,     0,     0,     0,     0,
-     192,     0,   193,     0,   194,   195,     0,     0,   196,   197,
-     198,     0,   199,   200,   201,     0,     0,   202,     0,   203,
-       0,     0,   204,     0,     0,     0,     0,   205,   206,     0,
-       0,     0,     0,     0,     0,   207,   208,     0,     0,     0,
-     209,     0,     0,     0,   210,     0,     0,     0,   211,     0,
-     212,     0,     0,     0,   213,     0,   214,   215,     0,     0,
-     216,   217,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   218,     0,   219,     0,   220,   221,   222,   223,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   225,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   226,   227,     0,   228,     0,     0,     0,     0,
-       0,     0,     0,   229,   230,   231,   232,     0,   233,     0,
-       0,     0,     0,     0,     0,   234,   235,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   236,     0,   237,     0,     0,   238,     0,     0,   239,
-       0,   240,     0,   241,   242,   243,     0,     0,     0,     0,
-    1721,    85,    86,    87,    88,    89,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,    90,
-       0,     0,    91,    92,    93,     0,    94,    95,    96,     0,
-       0,     0,    97,     0,    98,     0,    99,   100,   101,     0,
-     102,     0,     0,   103,     0,   104,     0,     0,   105,     0,
-       0,   106,   107,   108,   109,   110,   111,     0,     0,   112,
-     113,   114,     0,   115,     0,   116,   117,     0,     0,   118,
-     119,     0,     0,     0,     0,   120,   121,   122,   123,     0,
-     124,   125,   126,     0,     0,   127,     0,     0,   128,   129,
-       0,   130,     0,     0,   131,     0,     0,     0,   132,     0,
-       0,   133,     0,     0,   134,   135,     0,   136,   137,     0,
-       0,   138,   139,     0,   140,   141,   142,   143,     0,     0,
-       0,     0,   144,     0,   145,     0,   146,     0,     0,     0,
-     147,     0,     0,   148,   149,     0,     0,   150,     0,     0,
-     151,     0,     0,   152,   153,     0,     0,     0,     0,     0,
-     154,     0,     0,     0,   155,     0,   156,     0,     0,     0,
-     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
-       0,   167,   168,   169,   170,   171,   172,   173,   174,   175,
-     176,     0,   177,   178,     0,   179,     0,     0,   180,     0,
-     181,     0,     0,     0,     0,     0,     0,     0,   182,   183,
-       0,     0,     0,   184,   185,   186,   187,   188,   189,   190,
-     191,     0,     0,     0,     0,   192,     0,   193,     0,   194,
-     195,     0,     0,   196,   197,   198,     0,   199,   200,   201,
-       0,     0,   202,     0,   203,     0,     0,   204,     0,     0,
-       0,     0,   205,   206,     0,     0,     0,     0,     0,     0,
-     207,   208,     0,     0,     0,   209,     0,     0,     0,   210,
-       0,     0,     0,   211,     0,   212,     0,     0,     0,   213,
-       0,   214,   215,     0,     0,   216,   217,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   218,     0,   219,
-       0,   220,   221,   222,   223,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   224,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     225,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   226,   227,     0,
-     228,     0,     0,     0,     0,     0,     0,     0,   229,   230,
-     231,   232,     0,   233,     0,     0,     0,     0,     0,     0,
-     234,   235,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   236,     0,   237,     0,
-       0,   238,     0,     0,   239,     0,   240,     0,   241,   242,
-     243,     0,     0,     0,     0,  1747,    85,    86,    87,    88,
-      89,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,    90,     0,     0,    91,    92,    93,
-       0,    94,    95,    96,     0,     0,     0,    97,     0,    98,
-       0,    99,   100,   101,     0,   102,     0,     0,   103,     0,
-     104,     0,     0,   105,     0,     0,   106,   107,   108,   109,
-     110,   111,     0,     0,   112,   113,   114,     0,   115,     0,
-     116,   117,     0,     0,   118,   119,     0,     0,     0,     0,
-     120,   121,   122,   123,     0,   124,   125,   126,     0,     0,
-     127,     0,     0,   128,   129,     0,   130,     0,     0,   131,
-       0,     0,     0,   132,     0,     0,   133,     0,     0,   134,
-     135,     0,   136,   137,     0,     0,   138,   139,     0,   140,
-     141,   142,   143,     0,     0,     0,     0,   144,     0,   145,
-       0,   146,     0,     0,     0,   147,     0,     0,   148,   149,
-       0,     0,   150,     0,     0,   151,     0,     0,   152,   153,
-       0,     0,     0,     0,     0,   154,     0,     0,     0,   155,
-       0,   156,     0,     0,     0,   157,   158,   159,   160,   161,
-     162,   163,   164,   165,   166,     0,   167,   168,   169,   170,
-     171,   172,   173,   174,   175,   176,     0,   177,   178,     0,
-     179,     0,     0,   180,     0,   181,     0,     0,     0,     0,
-       0,     0,     0,   182,   183,     0,     0,     0,   184,   185,
-     186,   187,   188,   189,   190,   191,     0,     0,     0,     0,
-     192,     0,   193,     0,   194,   195,     0,     0,   196,   197,
-     198,     0,   199,   200,   201,     0,     0,   202,     0,   203,
-       0,     0,   204,     0,     0,     0,     0,   205,   206,     0,
-       0,     0,     0,     0,     0,   207,   208,     0,     0,     0,
-     209,     0,     0,     0,   210,     0,     0,     0,   211,     0,
-     212,     0,     0,     0,   213,     0,   214,   215,     0,     0,
-     216,   217,   564,   565,   566,   567,   568,   569,   570,   571,
-     572,   573,   218,     0,   219,     0,   220,   221,   222,   223,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   224,
-     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
-       0,     0,     0,     0,     0,   225,   564,   565,   566,   567,
-     568,   569,   570,   571,   572,   573,     0,     0,     0,     0,
-       0,     0,   226,   227,     0,   228,     0,     0,   574,     0,
-       0,     0,     0,   229,   230,   231,   232,     0,   233,     0,
-       0,     0,     0,     0,     0,   234,   235,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   574,  1018,     0,     0,
-       0,   236,     0,   237,     0,     0,   238,     0,     0,   239,
-       0,   240,   574,   241,   242,   243,     0,     0,     0,     0,
-    2056,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   575,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   576,   564,
-     565,   566,   567,   568,   569,   570,   571,   572,   573,     0,
-       0,     0,     0,     0,     0,     0,   575,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   576,     0,     0,     0,
-     577,     0,   575,     0,     0,     0,     0,     0,     0,   578,
-     579,     0,   576,   564,   565,   566,   567,   568,   569,   570,
-     571,   572,   573,     0,     0,     0,     0,     0,   577,     0,
-     580,     0,     0,     0,     0,   574,     0,   578,   579,     0,
-       0,     0,     0,     0,   577,     0,     0,     0,     0,     0,
-       0,     0,     0,   578,   579,     0,     0,     0,   580,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   580,     0,     0,     0,     0,   574,
-     581,     0,     0,     0,     0,     0,     0,     0,  1074,  1075,
-    1076,  1077,  1078,  1079,  1080,  1081,  1082,  1083,     0,     0,
-       0,     0,     0,     0,     0,   575,     0,     0,   581,     0,
-       0,     0,     0,     0,     0,   576,     0,     0,     0,     0,
-       0,     0,   582,     0,   581,     0,     0,     0,     0,     0,
-       0,     0,     0,   771,   772,   773,   774,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   577,     0,   575,
-     582,   775,   776,   777,  1084,     0,   578,   579,     0,   576,
-       0,     0,     0,   778,   779,     0,   582,   780,     0,     0,
-       0,     0,     0,     0,     0,     0,   781,   580,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   577,     0,   782,   783,     0,     0,     0,     0,     0,
-     578,   579,     0,     0,     0,     0,     0,   583,   584,   585,
-     586,   587,   588,   589,     0,     0,   590,     0,     0,     0,
-       0,   580,     0,     0,  1085,     0,     0,   581,     0,     0,
-       0,     0,     0,     0,  1086,   583,   584,   585,   586,   587,
-     588,   589,  1644,     0,   590,     0,     0,     0,     0,     0,
-       0,   583,   584,   585,   586,   587,   588,   589,     0,     0,
-     590,     0,     0,     0,     0,     0,  1087,     0,     0,   582,
-       0,   581,     0,     0,     0,  1088,  1089,  1145,  1146,  1147,
-    1148,  1149,  1150,  1151,  1152,  1153,  1154,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,  1090,     0,     0,     0,
-       0,     0,  1145,  1146,  1147,  1148,  1149,  1150,  1151,  1152,
-    1153,  1154,     0,   582,  1145,  1146,  1147,  1148,  1149,  1150,
-    1151,  1152,  1153,  1154,     0,  1145,  1146,  1147,  1148,  1149,
-    1150,  1151,  1152,  1153,  1154,     0,     0,     0,     0,     0,
-       0,     0,     0,  1155,     0,  2030,  1091,     0,     0,     0,
-       0,     0,     0,     0,   583,   584,   585,   586,   587,   588,
-     589,     0,     0,   590,     0,     0,     0,     0,  1426,     0,
-    1145,  1146,  1147,  1148,  1149,  1150,  1151,  1152,  1153,  1154,
-    1675,     0,     0,     0,     0,     0,     0,     0,  1092,     0,
-       0,  1703,     0,     0,     0,     0,     0,     0,   583,   584,
-     585,   586,   587,   588,   589,     0,     0,   590,     0,     0,
-       0,     0,     0,  1156,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,  1157,     0,  1145,  1146,  1147,  1148,  1149,
-    1150,  1151,  1152,  1153,  1154,     0,  1879,     0,  1156,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,  1157,     0,
-    1156,     0,     0,     0,     0,  1158,     0,     0,     0,     0,
-    1157,  1156,     0,     0,  1159,  1160,     0,     0,     0,     0,
-       0,  1157,     0,  1093,  1094,  1095,  1096,  1097,  1098,  1099,
-    1158,     0,  1100,     0,     0,  1161,     0,     0,     0,  1159,
-    1160,  1894,  1158,     0,     0,     0,     0,     0,     0,     0,
-       0,  1159,  1160,  1158,     0,     0,  1156,     0,     0,     0,
-    1161,     0,  1159,  1160,     0,     0,  1157,     0,     0,     0,
-       0,     0,  1161,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,  1161,     0,  1162,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,  1158,     0,
-       0,     0,     0,     0,     0,     0,     0,  1159,  1160,     0,
-    1162,  1156,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,  1157,  1162,     0,     0,     0,     0,  1163,  1161,     0,
-       0,     0,     0,  1162,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,  1163,  1158,     0,     0,     0,     0,     0,     0,
-       0,     0,  1159,  1160,  1163,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,  1163,     0,     0,  1162,     0,
-       0,     0,     0,  1161,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,  1164,  1165,  1166,  1167,  1168,  1169,  1170,     0,
-    1163,  1171,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,  1162,     0,     0,     0,  1164,  1165,  1166,
-    1167,  1168,  1169,  1170,     0,     0,  1171,     0,     0,  1164,
-    1165,  1166,  1167,  1168,  1169,  1170,     0,     0,  1171,     0,
-    1164,  1165,  1166,  1167,  1168,  1169,  1170,     0,     0,  1171,
-       0,     0,     0,     0,     0,  1163,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,  1164,  1165,  1166,  1167,  1168,
-    1169,  1170,     0,     0,  1171,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,    85,
-      86,    87,    88,    89,     0,     0,     0,     0,     0,     0,
-    1164,  1165,  1166,  1167,  1168,  1169,  1170,    90,     0,  1171,
-      91,    92,    93,     0,    94,    95,    96,     0,     0,     0,
-      97,     0,    98,     0,    99,   100,   101,     0,   102,     0,
-       0,   103,     0,   104,     0,     0,   105,     0,     0,   106,
-     107,   108,   109,   110,   111,     0,     0,   112,   113,   114,
-       0,   115,     0,   116,   117,     0,     0,   118,   119,     0,
-       0,     0,     0,   120,   121,   122,   123,     0,   124,   125,
-     126,     0,     0,   127,     0,     0,   128,   129,     0,   130,
-       0,     0,   131,     0,     0,     0,   132,     0,     0,   133,
-       0,     0,   134,   135,     0,   136,   137,     0,     0,   138,
-     139,     0,   140,   141,   142,   143,     0,     0,     0,     0,
-     144,     0,   145,     0,   146,     0,     0,     0,   147,   955,
-       0,   148,   149,     0,     0,   150,     0,     0,   151,     0,
-       0,   152,   153,     0,     0,     0,     0,     0,   154,     0,
-       0,     0,   155,     0,   156,     0,     0,     0,   157,   158,
-     159,   160,   161,   162,   163,   164,   165,   166,     0,   167,
-     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
-     177,   178,     0,   179,     0,     0,   180,     0,   181,     0,
-       0,     0,     0,     0,     0,     0,   182,   183,     0,     0,
-       0,   184,   185,   186,   187,   188,   189,   190,   191,     0,
-       0,     0,     0,   192,     0,   193,     0,   194,   195,     0,
-       0,   196,   197,   198,     0,   199,   200,   201,     0,     0,
-     202,     0,   203,     0,     0,   204,     0,   956,     0,     0,
-     205,   206,     0,     0,     0,     0,     0,     0,   207,   208,
-       0,     0,     0,   209,     0,     0,     0,   210,     0,     0,
-       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
-     215,     0,     0,   216,   217,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   218,     0,   219,     0,   220,
-     221,   222,   223,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   224,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   225,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   226,   227,     0,   228,     0,
-       0,     0,     0,     0,     0,     0,   229,   230,   231,   232,
-       0,   233,     0,     0,     0,     0,     0,     0,   234,   235,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   236,     0,   237,     0,     0,   238,
-       0,     0,   239,     0,   240,     0,   241,   242,   243,    85,
-      86,    87,    88,    89,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,    90,     0,     0,
-      91,    92,    93,     0,    94,    95,    96,     0,     0,     0,
-      97,     0,    98,     0,    99,   100,   101,     0,   102,     0,
-       0,   103,     0,   104,     0,     0,   105,     0,     0,   106,
-     107,   108,   109,   110,   111,     0,     0,   112,   113,   114,
-       0,   115,     0,   116,   117,     0,     0,   118,   119,     0,
-       0,     0,     0,   120,   121,   122,   123,     0,   124,   125,
-     126,     0,     0,   127,     0,     0,   128,   129,     0,   130,
-       0,     0,   131,     0,     0,     0,   132,     0,     0,   133,
-       0,     0,   134,   135,     0,   136,   137,     0,     0,   138,
-     139,     0,   140,   141,   142,   143,     0,     0,     0,     0,
-     144,     0,   145,     0,   146,     0,     0,     0,   147,     0,
-       0,   148,   149,     0,     0,   150,     0,     0,   151,     0,
-       0,   152,   153,     0,     0,     0,     0,     0,   154,   558,
-       0,     0,   155,     0,   156,     0,     0,     0,   157,   158,
-     159,   160,   161,   162,   163,   164,   165,   166,     0,   167,
-     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
-     177,   178,     0,   179,     0,     0,   180,     0,   181,     0,
-       0,     0,     0,     0,     0,     0,   182,   183,     0,     0,
-       0,   184,   185,   186,   187,   188,   189,   190,   191,     0,
-       0,     0,     0,   192,     0,   193,     0,   194,   195,     0,
-       0,   196,   197,   198,     0,   199,   200,   201,     0,     0,
-     202,     0,   203,     0,     0,   204,     0,   559,     0,     0,
-     205,   206,     0,     0,     0,     0,     0,     0,   207,   208,
-       0,     0,     0,   209,     0,     0,     0,   210,     0,     0,
-       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
-     215,     0,     0,   216,   217,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   218,     0,   219,     0,   220,
-     221,   222,   223,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   224,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   225,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   226,   227,     0,   228,     0,
-       0,     0,     0,     0,     0,     0,   229,   230,   231,   232,
-       0,   233,     0,     0,     0,     0,     0,     0,   234,   235,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   236,     0,   237,     0,     0,   238,
-       0,     0,   239,     0,   240,     0,   241,   242,   243,    85,
-      86,    87,    88,    89,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,    90,     0,     0,
-      91,    92,    93,     0,    94,    95,    96,     0,     0,     0,
-      97,     0,    98,     0,    99,   100,   101,     0,   102,     0,
-       0,   103,     0,   104,     0,     0,   105,     0,     0,   106,
-     107,   108,   109,   110,   111,     0,     0,   112,   113,   114,
-       0,   115,     0,   116,   117,     0,     0,   118,   119,     0,
-       0,  1717,     0,   120,   121,   122,   123,     0,   124,   125,
-     126,     0,     0,   127,     0,     0,   128,   129,     0,   130,
-       0,     0,   131,     0,     0,     0,   132,     0,     0,   133,
-       0,     0,   134,   135,     0,   136,   137,     0,     0,   138,
-     139,     0,   140,   141,   142,   143,     0,     0,     0,     0,
-     144,     0,   145,     0,   146,     0,     0,     0,   147,     0,
-       0,   148,   149,     0,     0,   150,     0,     0,   151,     0,
-       0,   152,   153,     0,     0,     0,     0,     0,   154,     0,
-       0,     0,   155,     0,   156,     0,     0,     0,   157,   158,
-     159,   160,   161,   162,   163,   164,   165,   166,     0,   167,
-     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
-     177,   178,     0,   179,     0,     0,   180,     0,   181,     0,
-       0,     0,     0,     0,     0,     0,   182,   183,     0,     0,
-       0,   184,   185,   186,   187,   188,   189,   190,   191,     0,
-       0,     0,     0,   192,     0,   193,     0,   194,   195,     0,
-       0,   196,   197,   198,     0,   199,   200,   201,     0,     0,
-     202,     0,   203,     0,     0,   204,     0,  1718,     0,     0,
-     205,   206,     0,     0,     0,     0,     0,     0,   207,   208,
-       0,     0,     0,   209,     0,     0,     0,   210,     0,     0,
-       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
-     215,     0,     0,   216,   217,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   218,     0,   219,     0,   220,
-     221,   222,   223,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   224,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   225,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   226,   227,     0,   228,     0,
-       0,     0,     0,     0,     0,     0,   229,   230,   231,   232,
-       0,   233,     0,     0,     0,     0,     0,     0,   234,   235,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   236,     0,   237,     0,     0,   238,
-       0,     0,   239,     0,   240,     0,   241,   242,   243,    85,
-      86,    87,    88,    89,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,    90,     0,     0,
-      91,    92,    93,     0,    94,    95,    96,     0,     0,     0,
-      97,     0,    98,     0,    99,   100,   101,     0,   102,     0,
-       0,   103,     0,   104,     0,     0,   105,     0,     0,   106,
-     107,   108,   109,   110,   111,     0,     0,   112,   113,   114,
-       0,   115,     0,   116,   117,     0,     0,   118,   119,     0,
-       0,     0,     0,   120,   121,   122,   123,     0,   124,   125,
-     126,     0,     0,   127,     0,     0,   128,   129,     0,   130,
-       0,     0,   131,     0,     0,     0,   132,     0,     0,   133,
-       0,     0,   134,   135,     0,   136,   137,     0,     0,   138,
-     139,     0,   140,   141,   142,   143,     0,     0,     0,   709,
-     144,     0,   145,     0,   146,     0,     0,     0,   147,     0,
-       0,   148,   149,     0,     0,   150,     0,     0,   151,     0,
-       0,   152,   153,     0,     0,     0,     0,     0,   154,     0,
-       0,     0,   155,     0,   156,     0,     0,     0,   157,   158,
-     159,   160,   161,   162,   163,   164,   165,   166,     0,   167,
-     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
-     177,   178,     0,   179,     0,     0,   180,     0,   181,     0,
-       0,     0,     0,     0,     0,     0,   182,   183,     0,     0,
-       0,   184,   185,   186,   187,   188,   189,   190,   191,     0,
-       0,     0,     0,   192,     0,   193,     0,   194,   195,     0,
-       0,   196,   197,   198,     0,   199,   200,   201,     0,     0,
-     202,     0,   203,     0,     0,   204,     0,     0,     0,     0,
-     205,   206,     0,     0,     0,     0,     0,     0,   207,   208,
-       0,     0,     0,   209,     0,     0,     0,   210,     0,     0,
-       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
-     215,     0,     0,   216,   217,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   218,     0,   219,     0,   220,
-     221,   222,   223,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   224,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   225,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   226,   227,     0,   228,     0,
-       0,     0,     0,     0,     0,     0,   229,   230,   231,   232,
-       0,   233,     0,     0,     0,     0,     0,     0,   234,   235,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   236,     0,   237,     0,     0,   238,
-       0,     0,   239,     0,   240,     0,   241,   242,   243,    85,
-      86,    87,    88,    89,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,    90,     0,     0,
-      91,    92,    93,     0,    94,    95,    96,     0,     0,     0,
-      97,     0,    98,     0,    99,   100,   101,     0,   102,     0,
-       0,   103,     0,   104,     0,     0,   105,     0,     0,   106,
-     107,   108,   109,   110,   111,     0,     0,   112,   113,   114,
-       0,   115,     0,   116,   117,     0,     0,   118,   119,     0,
-       0,     0,     0,   120,   121,   122,   123,     0,   124,   125,
-     126,     0,     0,   127,     0,     0,   128,   129,     0,   130,
-       0,     0,   131,     0,     0,     0,   132,     0,     0,   133,
-       0,     0,   134,   135,     0,   136,   137,     0,     0,   138,
-     139,     0,   140,   141,   142,   143,     0,     0,     0,     0,
-     144,     0,   145,     0,   146,     0,     0,     0,   147,     0,
-       0,   148,   149,     0,     0,   150,     0,     0,   151,     0,
-       0,   152,   153,     0,     0,     0,     0,     0,   154,     0,
-       0,     0,   155,     0,   156,     0,     0,     0,   157,   158,
-     159,   160,   161,   162,   163,   164,   165,   166,     0,   167,
-     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
-     177,   178,     0,   179,     0,     0,   180,     0,   181,     0,
-       0,     0,     0,     0,     0,     0,   182,   183,     0,     0,
-       0,   184,   185,   186,   187,   188,   189,   190,   191,     0,
-       0,     0,     0,   192,     0,   193,     0,   194,   195,     0,
-       0,   196,   197,   198,     0,   199,   200,   201,     0,     0,
-     202,     0,   203,     0,     0,   204,     0,  1905,     0,     0,
-     205,   206,     0,     0,     0,     0,     0,     0,   207,   208,
-       0,     0,     0,   209,     0,     0,     0,   210,     0,     0,
-       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
-     215,     0,     0,   216,   217,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   218,     0,   219,     0,   220,
-     221,   222,   223,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   224,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   225,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   226,   227,     0,   228,     0,
-       0,     0,     0,     0,     0,     0,   229,   230,   231,   232,
-       0,   233,     0,     0,     0,     0,     0,     0,   234,   235,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   236,     0,   237,     0,     0,   238,
-       0,     0,   239,     0,   240,     0,   241,   242,   243,    85,
-      86,    87,    88,    89,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,    90,     0,     0,
-      91,    92,    93,     0,    94,    95,    96,     0,     0,     0,
-      97,     0,    98,     0,    99,   100,   101,     0,   102,     0,
-       0,   103,     0,   104,     0,     0,   105,     0,     0,   106,
-     107,   108,   109,   110,   111,     0,     0,   112,   113,   114,
-       0,   115,     0,   116,   117,     0,     0,   118,   119,     0,
-       0,     0,     0,   120,   121,   122,   123,     0,   124,   125,
-     126,     0,     0,   127,     0,     0,   128,   129,     0,   130,
-       0,     0,   131,     0,     0,     0,   132,     0,     0,   133,
-       0,     0,   134,   135,     0,   136,   137,     0,     0,   138,
-     139,     0,   140,   141,   142,   143,     0,     0,     0,     0,
-     144,     0,   145,     0,   146,     0,     0,     0,   147,     0,
-       0,   148,   149,     0,     0,   150,     0,     0,   151,     0,
-       0,   152,   153,     0,     0,     0,     0,     0,   154,     0,
-       0,     0,   155,     0,   156,     0,     0,     0,   157,   158,
-     159,   160,   161,   162,   163,   164,   165,   166,     0,   167,
-     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
-     177,   178,     0,   179,     0,     0,   180,     0,   181,     0,
-       0,     0,     0,     0,     0,     0,   182,   183,     0,  2355,
-       0,   184,   185,   186,   187,   188,   189,   190,   191,     0,
-       0,     0,     0,   192,     0,   193,     0,   194,   195,     0,
-       0,   196,   197,   198,     0,   199,   200,   201,     0,     0,
-     202,     0,   203,     0,     0,   204,     0,     0,     0,     0,
-     205,   206,     0,     0,     0,     0,     0,     0,   207,   208,
-       0,     0,     0,   209,     0,     0,     0,   210,     0,     0,
-       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
-     215,     0,     0,   216,   217,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   218,     0,   219,     0,   220,
-     221,   222,   223,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   224,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   225,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   226,   227,     0,   228,     0,
-       0,     0,     0,     0,     0,     0,   229,   230,   231,   232,
-       0,   233,     0,     0,     0,     0,     0,     0,   234,   235,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   236,     0,   237,     0,     0,   238,
-       0,     0,   239,     0,   240,     0,   241,   242,   243,    85,
-      86,    87,    88,    89,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,    90,     0,     0,
-      91,    92,    93,     0,    94,    95,    96,     0,     0,     0,
-      97,     0,    98,     0,    99,   100,   101,     0,   102,     0,
-       0,   103,     0,   104,     0,     0,   105,     0,     0,   106,
-     107,   108,   109,   110,   111,     0,     0,   112,   113,   114,
-       0,   115,     0,   116,   117,     0,     0,   118,   119,     0,
-       0,     0,     0,   120,   121,   122,   123,     0,   124,   125,
-     126,     0,     0,   127,     0,     0,   128,   129,     0,   130,
-       0,     0,   131,     0,     0,     0,   132,     0,     0,   133,
-       0,     0,   134,   135,     0,   136,   137,     0,     0,   138,
-     139,     0,   140,   141,   142,   143,     0,     0,     0,     0,
-     144,     0,   145,     0,   146,     0,     0,     0,   147,     0,
-       0,   148,   149,     0,     0,   150,     0,     0,   151,     0,
-       0,   152,   153,     0,     0,     0,     0,     0,   154,     0,
-       0,     0,   155,     0,   156,     0,     0,     0,   157,   158,
-     159,   160,   161,   162,   163,   164,   165,   166,     0,   167,
-     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
-     177,   178,     0,   179,     0,     0,   180,     0,   181,     0,
-       0,     0,     0,     0,     0,     0,   182,   183,     0,     0,
-       0,   184,   185,   186,   187,   188,   189,   190,   191,     0,
-       0,     0,     0,   192,     0,   193,     0,   194,   195,     0,
-       0,   196,   197,   198,     0,   199,   200,   201,     0,     0,
-     202,     0,   203,     0,     0,   204,     0,     0,     0,     0,
-     205,   206,     0,     0,     0,     0,     0,     0,   207,   208,
-       0,     0,     0,   209,     0,     0,     0,   210,     0,     0,
-       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
-     215,     0,     0,   216,   217,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   218,     0,   219,     0,   220,
-     221,   222,   223,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   224,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   225,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   226,   227,     0,   228,     0,
-       0,     0,     0,     0,     0,     0,   229,   230,   231,   232,
-       0,   233,     0,     0,     0,     0,     0,     0,   234,   235,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   236,     0,   237,     0,     0,   238,
-       0,     0,   239,     0,   240,     0,   241,   242,   243,    85,
-      86,    87,   962,    89,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,    90,     0,     0,
-      91,    92,    93,     0,    94,    95,    96,     0,     0,     0,
-      97,     0,    98,     0,    99,   100,   101,     0,   102,     0,
-       0,   103,     0,   104,     0,     0,   105,     0,     0,   106,
-     107,   108,   109,   110,   111,     0,     0,   112,   113,   114,
-       0,   115,     0,   116,   117,     0,     0,   118,   119,     0,
-       0,     0,     0,   120,   121,   122,   123,     0,   124,   125,
-     126,     0,     0,   127,     0,     0,   128,   129,     0,   130,
-       0,     0,   131,     0,     0,     0,   132,     0,     0,   133,
-       0,     0,   134,   135,     0,   136,   137,     0,     0,   138,
-     139,     0,   140,   141,   963,   143,     0,     0,     0,     0,
-     144,     0,   145,     0,   146,     0,     0,     0,   147,     0,
-       0,   148,   149,     0,     0,   150,     0,     0,   151,     0,
-       0,   152,   153,     0,     0,     0,     0,     0,   154,     0,
-       0,     0,   155,     0,   156,     0,     0,     0,   157,   158,
-     159,   160,   161,   162,   163,   164,   165,   166,     0,   167,
-     168,   169,   170,   171,   172,   173,   174,   175,   176,     0,
-     177,   178,     0,   179,     0,     0,   180,     0,   181,     0,
-       0,     0,     0,     0,     0,     0,   182,   183,     0,     0,
-       0,   184,   185,   186,   187,   188,   189,   190,   191,  1976,
-    1977,  1978,     0,   192,     0,   193,     0,   194,   195,     0,
-       0,   196,   197,   198,     0,   199,   200,   201,     0,     0,
-     202,     0,   203,     0,     0,   204,     0,     0,     0,     0,
-     205,   206,     0,     0,     0,     0,     0,     0,   207,   208,
-       0,     0,     0,   209,     0,     0,     0,   210,     0,     0,
-       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
-     215,     0,     0,   216,   217,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   218,     0,   219,  1979,   220,
-     221,   222,   223,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   224,     0,     0,     0,     0,     0,     0,     0,
-    1980,     0,     0,  1981,     0,     0,     0,     0,   225,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   226,   227,     0,   228,     0,
-       0,     0,     0,     0,     0,     0,   229,   230,   231,   232,
-       0,   233,     0,     0,     0,     0,  1982,     0,   234,   235,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   236,     0,   237,     0,     0,   238,
-       0,     0,   239,     0,   240,     0,   241,   242,   243,     0,
-       0,     0,     0,     0,     0,     0,  1983,  1984,  1985,     0,
-       0,  1986,  1987,  1988,  1989,  1990,     0,  1991,  1992,     0,
-    1993,  1994,  1995,  1996,  1997,  1998,     0,     0,  1999,   660,
-    2000,     0,  2001,  2002,  2003,  2004,  2005,  2006,     0,   661,
-    2007,  2008,   662,     0,   663,     0,   664,     0,   665,     0,
-       0,     0,     0,   666,     0,     0,     0,     0,     0,     0,
-       0,   667,     0,     0,     0,     0,   668,   669,     0,     0,
-       0,     0,     0,     0,   670,     0,     0,   671,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,  2009,     0,
-       0,     0,     0,     0,   673,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   674,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   675,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   676,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   677,     0,   678,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   679,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   680
+     251,   500,   501,   502,   379,   919,   745,  1027,   764,   749,
+     750,   986,   752,   753,  1588,  1525,   934,  1635,   910,   249,
+     912,   396,  1777,  1786,   938,  1811,  1336,   944,   945,   811,
+     574,  1208,  1244,  1516,  1661, -1271,  1920,   773,   774,   417,
+    1829,  1839,   823,  1246,  1848,   769,   771,  1466,  1839,  1249,
+    2012,  1849,  1850,  1996,  1175,   776,  1854,  1855,  1543,  1575,
+    1653,  1654,  1541,  1656,  1668,   -67,   423,  1605,  1568,  1924,
+      24,  1575,  1575,   670,  1521,  1360,  1672,   946,  1569,  1543,
+     953,   954, -1221,  1276,  1894,   422,  2226,   877, -1316,  1889,
+    2281,  2210,  1571,   887,  1797,  2174,  1574,  1227,  1215,  1624,
+    1856,  2238,  2288,   589, -1220,  2008,   996,   971,  1913,  1543,
+    1863,  1864,  1227,  2266,  2175,  2020,  2014,  2210,  1902,   402,
+    1911,  1890,  2163,  2146,  -993,  1215,  1875,  1373,  1989,   387,
+     605,   850,   426,  1228,  1876,  1431,  1960,  1813,   947,   983,
+     927,  1029,   468,   850,  1877,  1032,  2291,   710,  1213,  1983,
+    1360,  1841,  2325,  2293,   958,  2339,  2135,   606,  2289,   740,
+    2268,  2287,  1670,   513,  -714,  1984,   584,   585,   997,   741,
+     710,   851,  1625,  1544,   469,  2168,  2479,   704,  1568,  1545,
+     400,  1842,   401,   851,  2186,  2405,  1866,  1224,  1569,   541,
+    2479,   959,  1262,  2294,  1544,   603,   607,  1432,  2314,  1789,
+    1545,   852,   470,  2169,   744,   850,  1913,  2195,  2269,  2270,
+    2271,  1361,  2406,   852,  2196,  1546,   928,  2187,   807,  1261,
+     711,  1903,  1225,  1981,  1544,  2292,   853,  1764,   662,   589,
+    1545,  1576,  1868,  1869,  1242,  1768,  1546,   672,   853,   253,
+    1891,  2342,  1216,   711,   603,   851,   424,   259,   843,   984,
+     663,   948,  1814,   576,   577,   578,   579,   580,   581,   582,
+     583,   584,   585,  1843,   998,  1577,  1546,  1548,   388,  1216,
+     448,   999,   449,  1229,  1217,   852,  1970,  1577,  -850,  2295,
+     483,  1547,  1000,  2211,  2156,  2147,  1361,  2159,  1548,  1985,
+     493,  1433,  2374,  1982,  1040,  1878,  1438,  2340,  1044,  2023,
+     853,  1217,  1048,  1839,  1722, -1271,   403,  -714,   506,  2211,
+    1892,  2427,  1247,  2021,   854,  1990,  1844,  2212,  1548,  1374,
+    1252,   602,  1375,  1376,  1857,   586,   854,  1859,  2176,  1861,
+     532,  2407,  2398,  1914,  1974,  1975,  1867,  1871,  1872,  1873,
+    1377,  1626,  2136,   589,   428,  1378,  2137,  1300,   917,   427,
+    1379, -1221,  1840,  1961,  1794,  1749,  1535,  1798,  1799,  -714,
+    1091,   952,   565,   566,   567,   568,  1251,  1490,  1001,  1522,
+   -1221,  2459,   979, -1220,   569,   573,   575,  2138,  1173,  1549,
+     887,  1921,  1230,  1001,  1817,  2373,   423,  1672,   854,  2137,
+    1001,   876, -1220,  2275,  1550,  1001,   587,  1230,  1001,  1790,
+    1549,   584,   585,  1570,   423,   609,   588,   979,  1578,  1153,
+    2444,   390,  -714,  2429,  1791,  1550,  2213,   584,   585,    43,
+    2007,  2222,   929,  1169,  -850,   395,   715,   423,   423,  1354,
+    1549,  1914,   871,   721,   872,   440,   723,   724,   589,  1551,
+     729,   404,   599,   600,   601,  1550,   716,   602,  2261,   734,
+     576,   577,   578,   579,   580,   581,   582,   583,   584,   585,
+    1551,   939,  2174,  2162,   405,   748,  2199,  1839,   592,  1829,
+    2216,   754,  1841,  1919,   756,   757,   758,   759,   760,   615,
+    2240,  2175,  1992,   940,  1592,   766,   767,   768,  1993,  2350,
+    1551,  1966,  2254,   772,   616,   415,  1593,  2351,  1994,   777,
+    1543,  2430,   779,  2139,  2140,   781,   782,   783,   784,   785,
+     786,   787,   788,   789,  1165,   804,   805,   806,  1543,   808,
+     809,   810,   930,   813,   814,   815,   816,   817,   818,   819,
+     820,  1424,   821,  1425,   825,   826,   827,   828,   829,   830,
+     831,   835,  2223,   589,  2397,  -850,  2139,  2140,  2013,   845,
+     419,   847,   848,   849,   597,   598,   599,   600,   601,   857,
+     429,   602,   594,  2262,  1543,   441,   864,   865,   866,   867,
+     868,   869,   870,  1386,   873,   874,   875,   420,   589,  2228,
+     882,   883,   884,   885,  1366,   888,   889,   891,   893,   894,
+     895,   896,   897,   587,   589,  1973,  1905,  1935,  1382,  1383,
+    2200,   425,   898,   588,  1978,  2018,  1725,   433,   423,   858,
+     423,  1505,   423,   973,   878,  1544,  1430,  1533,   916,  1395,
+    1534,  1545,   887,  1997,   879,  1950,  2376,   903,  1401,   431,
+    2085,   622,  1256,  1544,  1406,   589,  1257,   272,   434,  1545,
+     859,  1411,  1781,   617,   974,   979,  1415,   595,   596,   597,
+     598,   599,   600,   601,  2201,  1646,   602,  1546,  1753,   666,
+     667,   436,   669,  1506,  1482,   592,   623,  1336,  1337,  1812,
+     255,   256,   423,   423,  1483,  1546,  2115,  2116,  2202,  1544,
+    2301,  1800,   260,   262,  2327,  1545,   880,  1481,  2124,   450,
+    2302,  -850,   624,   887,  2303,  1647,  1671,   438,   423,   423,
+    1501,  1502,  1475,   423,  1476,   906,   987,   988,   996,  1548,
+     989,  1543,   992,   439,   860,   452,  1507,   970,   975,  1465,
+     423,  1546,   472,  1022,   473,  1648,  2377,  1548,   474,  2255,
+     423,  2355,   475,   423,   476,   261,  1484,   423,   423,  1017,
+     273,   477,  1021,   907,  2130,  2130,  2130,   478,  -253,  1028,
+    1649,  1517,  1518,   274,   597,   598,   599,   600,   601,   594,
+    1062,   602,  2378,  1661,  2203,   479,  2204,  2379,   480,  1662,
+     997,  2241,  2242,  1548,  2308,  2309,   481,  2393,  2312,  1663,
+     881,  2205,  1664,  1537,  1538,  2126,  2127,   595,   596,   597,
+     598,   599,   600,   601,   625,  2322,   602,  1266,  2324,  1267,
+     482,   453,  1268,   908,   596,   597,   598,   599,   600,   601,
+    2151,   484,   602,  1841,  2041,  2154,   454,  2042,   275,  1801,
+    1802,  1549,  1141,  1141,  1141,  2236,  1544,  2010,  2011,   485,
+    1485,   486,  1545,   487,  2206,   488,  1550,   489,  1650,  1549,
+    2033,  2034,   494,  -146,   595,   596,   597,   598,   599,   600,
+     601,   262,  1166,   602,  1550,  2243,  1880,  -145,   495,   573,
+    1589,  1167,  1590,   455,  -127,   496,   998,   263,  1546,   497,
+    1174,  2078,  2034,   999,  2161,   731,  2257,  2171,  1001,   304,
+    1203,  1551,  1204,   498,  1000,  1549,   499,  -145,  1600,  1601,
+    1591,  1606,   456,  2437,  2438,  2224,  2225,   457,  1785,  1551,
+    1550,   503,  2244,  1592,  2046,  2283,  2225,   504,  1881,  2382,
+    2225,  1589,   505,  1236,  1633,  1593,   458,  2387,  2388,  1882,
+    1548,  1238,   508,  1883,   423,  -146,   509,  2251,  2252,   264,
+    1723,   573,   887,  2277,  2253,  1573,  2183,  2069,  1603,   510,
+    1248,   603,  2464,  1241,   423,  1551,   626,   627,   628,   629,
+     630,   631,   512,  2344,  1592,  1884,  1885,   604,  1886,  2421,
+    2422,   514,   459,  1250,  1271,   460,  1593,  2426,  2225,  -145,
+    1271,  2432,  2433,  2435,  2433,  1283,   423,   515,  -146,   461,
+    2454,  2455,  1751,  1270,   887,  2368,  2369,  2370,   516,  1270,
+    2466,  2422,   462,  2467,  2422,   463,   256,   464,   613,   423,
+    2484,  2011,   517,  1289,  1290,  1291,  1292,   518,  1293,  1294,
+    1295,  1296,   838,   839,   840,   841,   842,   423,  1143,  1144,
+    1604,   729,  -145,  1358,  2132,  2133,  1365,  1748,  2451,  2452,
+     519,  1369,  1549,   520,   521,   522,  1351,  1371,   523,   524,
+     525,   526,   620,   527,  1384,   528,  1385,  1550,   529,  1387,
+    1388,   530,   533,   534,   535,   536,  1390,   537,   538,   539,
+    1393,   540,   542,  1793,   543,   544,   672,   545,  1399,   546,
+    1400,   547,   548,   549,  1403,  1404,  1405,   550,   551,   552,
+    1408,   553,   554,  1410,   555,  1412,   556,  1413,  1414,   557,
+    1416,   558,  1551,   559,  1833,  1417,  1418,  1419,  1420,  1421,
+    1422,  1423,   560,  1426,  1427,  1428,  1429,   561,   562,  1434,
+    1435,  1436,  1437,   563,  1439,  1440,  1442,  1444,  1445,  1446,
+    1447,  1448,  1297,  1449,  1450,   257,  1451,   709,  1452,  1453,
+    1454,   564,   720,   732,   731,  1458,   733,   389,   736,   391,
+     737,   393,   738,   741,   762,   765,  1460,   775,   778,  1461,
+    1462,   407,  1968,   409,   410,   780,  -607,   846,   412,   413,
+     862,   876,   899,   900,   863,   902,  1468,  1469,  1470,  1471,
+    1472,  1473,  1474,   911,  1477,  1478,  1479,   914,   915,   917,
+    1486,  1487,  1488,  1489,  1779,  1491,  1492,  1494,  1496,  1497,
+    1498,  1499,  1500,   920,   925,  1928,  1929,   926,   931,   933,
+     935,   936,  -714,  1503,  2490,   937,   293,   423,   710,   943,
+     949,   950,   955,   957,   961,   963,   964,   966,   919,   295,
+     967,   972,   982,  -994,  1938,  1939,   903,  1016,  1019,  1023,
+    1025,  1030,  1035,  -714,  1005,  1006,  1007,  1008,  1009,  1010,
+    1011,  1038,  1012,  1013,  1039,  1042,   298,  1043,  -714,   423,
+    1045,  1056,  1953,  1954,  1046,  1542,  1055,  1061,   423,  1057,
+    1064,  1067,  1555,  1068,  1071,  1086,  1095,  1147,  1536,  1160,
+    1148,  1149,   423,   423,  1168,   301,   302,  1553,  1150,  1151,
+     573,   711,  1152,  1162,  1170,  1172,  1163,   589,  1206,  1164,
+    1587,   970,  1562,  1205,  2030,  1207,  1209,  1949,  1210,  1211,
+    1212,   303,  1214,  1239,   790,   791,   792,   793,  1221,  1245,
+    1254,  1263,  1264,  1274,  1300,  1278,  1275,  1339,  1340,  1341,
+    1342,  1343,   794,   795,   796,  1344,  1345,  -714,  1305,   304,
+    1346,  1347,  1642,  1348,   797,   798,  -714,  -714,   799,  1350,
+    2004,  1356,  1363,  -714,  1001,  1367,  1396,   800,  -714,  1391,
+    -714,  1389,  1669,  1397,  -714,  1407,  1398,  1402,  1409,  1455,
+    1456,  1457,  1459,  2284,   801,   802,  1463,  1464,  1480,  1504,
+    1510,  1511,  1512,  1228,  1527,  1514,  1227,  1528,  1529,  1691,
+    1531,  1693,  1307,  1308,  2285,  2286,  1698,  1699,  1554,   314,
+    -714,  1532,  1558,  1559,  1560,  1309,  1310,  1563,  -714,  1564,
+    1566,  1229,  1567,  1589,  -714,  1311,  1602,  1607,  1312,  1608,
+    1611,  1612,  1613,  1614,  1615,  1616,  1617,  1618,  1620,  1619,
+    1621,  1622,  1724,  1623,  1628,  1629,  1630,  1631,  1632,  1634,
+    2279,  1727,  1636,  1728,  1643,  -714,  1644,  1645,  1652,  1655,
+    1667,  1671,  -714,  1315,  1675,  1737,  1738,  1739,  1677,  1680,
+    1681,  1679,  1682,  1683,  1684,  1685,  1696,  1746,  1711,  1697,
+    1694,  1700,  -714,  1703,  1704,  1762,  1708,  -714,  -714,  1709,
+    1713,  -714,  1717,  1720,  1752,  1747,  1741,  1758,  1759,  1316,
+    1761,  1769,  1745,  1755,  1750,  1756,  1317,  1760,  1765,  1766,
+    -714,  1780,  2123,  1782,  1770,  1783,  1784,  1787,  1788,  1257,
+    1795,  1803,  1825,  1837,  1810,  1318,  1851,  1319,  1852,  1853,
+    1860,  1862,  1888,  1895,  1917,  1909,  1320,  1321,  1322,  1357,
+    1931,  1947,  1918,  1956,  1774,  1776,  1957,  1833,  1922,   573,
+    1948,  1967,  1324,  1969,  1972,  1962,  1979,  1980,  1965,  1976,
+    1988,  1990,  1998,  -714,  2016,  2006,  2009,  2017,  2077,  2019,
+    2079,  2086,  1325,  2025,  -714,  2026,  2081,   988,   573,  2089,
+    2092,  1326,   573,  1283,  1821,  2109,  -714,  2093,   573,  -714,
+    2110,  2096,  2105,  2108,  2111,  2113,  1238,  2117,  1327,  2119,
+    2120,  2106,  2121,  2122,  2134,  2148,  2144,  2150,  1642,  2153,
+    1575,  2164,  2167,  2165,  2180,  1642,  2181,  2188,  1642,  1642,
+    2193,  2235,  2247,  1642,  1642,  2190,  2197,  2198,  1858,  2215,
+    2217,  2249,  2250,  -714,  -714,  2227,  2263,  2264,  2230,  2259,
+    2265,  2274,  2280,  2282,  2316,   423,  2297,  2298,  2299,  2233,
+    2300,  1642,  2307,  2212,  2310,  1642,  1901,  2311,  2315,  2317,
+    2319,  2320,  2321,  2323,  1874,  2330,  2334,  2335,  2410,  2411,
+    1328,  2413,  2234,  2345,  2346,  2337,  1642,  2347,  2348,  2354,
+    2359,  2361,  2364,  1330,  2367,  2383,  1923,  2384,  2402,  2004,
+    2388,  2365,  2403,  2391,  2408,  2392,  2394,  2412,  2395,  2396,
+    1925,  2399,  2414,  2415,  2417,  1926,  1927,  2418,  2419,  2420,
+    2428,  2434,  2442,  2443,  2449,  1905,  1930,  2460,  2474,  2458,
+    2462,  2469,  1932,  2475,  2483,  2470,  1933,  2488,  2492,  1934,
+    2473,  1658,   919,  -762,  2493,  2446,  1937,  2447,  2448,  1940,
+    1657,  2326,  1941,   437,   722,  1942,  1943,  2221,  1912,  2486,
+    2173,  1639,     1,  1594,     2,  2487,  2457,  1906,  1845,  2166,
+    2172,  2184,  2185,  2218,  1952,  2389,  2290,  2318,  2456,  2431,
+    2296,  2381,     3,     4,  2329,     5,  2390,     6,  1896,  1338,
+       7,  2024,     8,  1253,  1561,     9,    10,    11,  1971,  1964,
+      12,   421,  1513,    13,  1763,    14,    15,   707,    16,    17,
+    2001,   924,  2372,  2152,    18,  1520,    19,    20,  1381,    21,
+      22,  2357,    23,    24,    25,    26,  2489,    27,  1286,    28,
+    1555,  1821,    29,    30,   746,    31,   735,  2000,  1673,  1524,
+    1034,  2477,  2278,  2157,  1283,    32,   761,  1020,  1355,   730,
+     706,  1223,  1031,  1955,  2401,  2349,  2441,  2416,    33,  2160,
+    1237,  2015,  1565,  1809,  1816,  1999,  2149,   702,  1273,  1808,
+      34,    35,  1509,  2366,  2143,  1987,  1277,  2371,  2478,     0,
+    1642,     0,     0,     0,     0,  2027,     0,     0,     0,     0,
+       0,     0,     0,    36,     0,     0,     0,     0,   576,   577,
+     578,   579,   580,   581,   582,   583,   584,   585,     0,     0,
+       0,     0,     0,     0,     0,     0,   423,  2031,     0,     0,
+    2313,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+    2035,     0,     0,   423,     0,     0,     0,  2076,     0,     0,
+       0,     0,     0,     0,     0,     0,  2084,     0,     0,     0,
+       0,     0,  2036,     0,     0,     0,  2100,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     586,  2107,     0,     0,   576,   577,   578,   579,   580,   581,
+     582,   583,   584,   585,     0,    37,     0,     0,     0,    38,
+       0,    39,     0,  1503,     0,    40,     0,     0,  2125,     0,
+       0,  2128,     0,     0,   500,   501,   502,     0,     0,     0,
+       0,     0,     0,  1302,     0,  1303,  1833,     0,   573,     0,
+    1304,     0,  1305,     0,     0,   635,     0,    41,     0,     0,
+    1306,   636,     0,     0,     0,     0,     0,     0,     0,  1238,
+       0,   587,     0,     0,  1642,     0,   586,  2084,     0,   637,
+    1642,   588,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,  1642,     0,   638,     0,   576,   577,   578,   579,
+     580,   581,   582,   583,   584,   585,  1307,  1308,     0,     0,
+       0,     0,     0,   589,     0,     0,     0,     0,     0,  1309,
+    1310,     0,   590,   591,     0,     0,     0,     0,     0,  1311,
+       0,     0,  1312,     0,   639,     0,  1313,     0,  2229,  1314,
+       0,  2231,     0,   592,     0,  2232,     0,   587,     0,     0,
+       0,     0,  2037,  2038,  2039,     0,     0,   588,    42,   640,
+    2027,   641,     0,   642,     0,     0,     0,  1315,   586,     0,
+       0,     0,     0,   643,   644,   645,     0,     0,   646,     0,
+       0,     0,     0,     0,   647,     0,     0,     0,     0,   589,
+       0,     0,   648,     0,   649,   593,     0,     0,   590,   591,
+       0,  1821,    43,  1316,     0,     0,     0,     0,     0,     0,
+    1317,     0,     0,     0,     0,     0,     0,  2027,     0,   592,
+     650,     0,     0,     0,     0,     0,     0,  1318,   651,     0,
+       0,  1319,  2040,     0,  2084,     0,     0,   594,     0,   587,
+    1320,  1321,  1322,     0,     0,     0,     0,     0,  1323,   588,
+       0,     0,     0,     0,  2041,     0,  1324,  2042,     0,     0,
+       0,     0,     0,     0,     0,     0,   652,     0,     0,     0,
+     653,   593,     0,   654,   655,   656,  1325,     0,     0,     0,
+       0,   589,     0,  2084,     0,  1326,     0,     0,     0,  2343,
+     590,   591,     0,   423,   657,     0,     0,     0,     0, -1176,
+    2043,     0,  1327,  2356,     0,  2358,     0,  2360,     0,     0,
+       0,   592,  2336,   594,     0,     0,     0,  2363,     0,     0,
+       0,     0,   595,   596,   597,   598,   599,   600,   601,     0,
+       0,   602,     0,     0,     0,     0,     0,  1161,     0,     0,
+    2084,     0,  2044,  2045,  2046,     0,     0,  2047,  2048,  2049,
+    2050,  2051,     0,  2052,  2053,     0,  2054,  2055,  2056,  2057,
+    2058,  2059,     0,   593,  2060,     0,  2061,     0,  2062,  2063,
+    2064,  2065,  2066,  2067,  1328,     0,  2068,  2069,     0,     0,
+       0,     0,     0,  2400,  1329,     0,     0,  1330,     0,     0,
+    2027,     0,     0,     0,     0,     0,     0,     0,   595,   596,
+     597,   598,   599,   600,   601,   594,     0,   602,     0,     0,
+       0,     0,     0,  2465,     0,     0,     0,     0,     0,     0,
+       0,     0,  2425,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,  2436,     0,     0,  2070,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,  2445,     0,  2450,     0,
+       0,     0,     0,     0,     0,     0,     0,  2363,  2363,     0,
+    2453,     0,     0,    86,    87,    88,    89,    90,     0,     0,
+     595,   596,   597,   598,   599,   600,   601,     0,     0,   602,
+       0,    91,  1041,     0,   279,    93,    94,     0,    95,    96,
+      97,   280,     0,  2468,    98,     0,    99,     0,   100,   101,
+     102,   281,     0,   282,   104,     0,     0,   105,  1238,  2485,
+     106,   283,   284,   107,     0,   285,     0,   109,   110,   111,
+     112,   113,   114,     0,     0,   115,   116,   117,   286,   118,
+     287,   119,   288,     0,     0,     0,   289,   122,   123,     0,
+       0,     0,     0,   124,   125,   126,   127,   290,   128,   129,
+     130,   832,     0,   131,     0,   291,   132,   133,     0,   134,
+       0,     0,   135,     0,   292,     0,   136,     0,     0,   137,
+       0,     0,   138,   139,     0,   140,   141,     0,     0,   142,
+     143,     0,   144,   145,   146,   147,   293,     0,     0,     0,
+     148,     0,   149,     0,   150,   294,     0,     0,   151,   295,
+       0,   152,   153,     0,     0,   154,     0,     0,     0,   155,
+       0,     0,   156,   157,     0,     0,     0,   833,   296,   158,
+       0,     0,     0,   159,   297,   160,   298,     0,     0,   161,
+     162,   163,   164,   165,   166,   167,   168,   169,   170,   299,
+     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
+       0,   181,   182,   300,   183,   301,   302,   184,     0,   185,
+       0,     0,     0,     0,     0,     0,     0,   186,   187,     0,
+       0,     0,   188,   189,   190,   191,   192,   193,   194,   195,
+       0,   303,     0,     0,   196,     0,   197,     0,   198,   199,
+       0,     0,   200,   201,   202,     0,   203,   204,   205,     0,
+       0,   206,     0,   207,     0,     0,     0,   208,     0,   304,
+       0,   834,   209,   210,   305,   306,   307,   308,     0,     0,
+     211,   212,     0,     0,     0,     0,   213,     0,     0,     0,
+     214,     0,     0,     0,   215,     0,   216,     0,     0,   309,
+     217,   310,   218,   311,     0,     0,   220,   221,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   222,     0,
+     223,     0,   224,   225,   312,   313,     0,     0,     0,   314,
+       0,     0,     0,     0,     0,   228,   315,     0,   316,   317,
+     318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
+       0,   229,   326,   327,   328,     0,   329,   330,   331,   332,
+     333,   334,   335,     0,   336,   337,     0,     0,   338,   231,
+     339,   232,   340,   341,   342,   343,   344,   345,     0,   346,
+     234,   235,   347,   348,   349,   350,     0,   351,   352,   353,
+     354,   355,   239,   356,   357,   358,   359,   360,   361,   362,
+     363,   364,   365,   366,   367,   368,     0,   240,     0,   369,
+     370,   371,   242,     0,     0,   243,     0,   244,     0,   245,
+     246,   247,     0,     0,   372,    86,    87,    88,    89,    90,
+     373,     0,   374,     0,     0,   375,   376,     0,   377,   378,
+       0,     0,     0,    91,     0,     0,   279,    93,    94,     0,
+      95,    96,    97,   280,     0,     0,    98,     0,    99,     0,
+     100,   101,   102,   281,     0,   282,   104,     0,     0,   105,
+       0,     0,   106,   283,   284,   107,     0,   285,     0,   109,
+     110,   111,   112,   113,   114,     0,     0,   115,   116,   117,
+     286,   118,   287,   119,   288,     0,     0,     0,   289,   122,
+     123,  1818,     0,     0,     0,   124,   125,   126,   127,   290,
+     128,   129,   130,     0,     0,   131,     0,   291,   132,   133,
+       0,   134,     0,     0,   135,     0,   292,     0,   136,  1819,
+       0,   137,     0,     0,   138,   139,     0,   140,   141,     0,
+       0,   142,   143,     0,   144,   145,   146,   147,   293,     0,
+       0,     0,   148,     0,   149,     0,   150,   294,     0,     0,
+     151,   295,     0,   152,   153,     0,     0,   154,     0,     0,
+       0,   155,     0,     0,   156,   157,     0,     0,     0,     0,
+     296,   158,     0,     0,     0,   159,   297,   160,   298,     0,
+       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
+     170,   299,   171,   172,   173,   174,   175,   176,   177,   178,
+     179,   180,     0,   181,   182,   300,   183,   301,   302,   184,
+    1820,   185,     0,     0,     0,     0,     0,     0,     0,   186,
+     187,     0,     0,     0,   188,   189,   190,   191,   192,   193,
+     194,   195,     0,   303,     0,     0,   196,     0,   197,     0,
+     198,   199,     0,     0,   200,   201,   202,     0,   203,   204,
+     205,     0,     0,   206,     0,   207,     0,     0,     0,   208,
+       0,   304,     0,     0,   209,   210,   305,   306,   307,   308,
+       0,     0,   211,   212,     0,     0,     0,     0,   213,     0,
+       0,     0,   214,     0,     0,     0,   215,     0,   216,     0,
+       0,   309,   217,   310,   218,   311,     0,     0,   220,   221,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     222,     0,   223,     0,   224,   225,   312,   313,     0,     0,
+       0,   314,     0,     0,     0,     0,     0,   228,   315,     0,
+     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
+       0,     0,     0,   229,   326,   327,   328,     0,   329,   330,
+     331,   332,   333,   334,   335,     0,   336,   337,     0,     0,
+     338,   231,   339,   232,   340,   341,   342,   343,   344,   345,
+       0,   346,   234,   235,   347,   348,   349,   350,     0,   351,
+     352,   353,   354,   355,   239,   356,   357,   358,   359,   360,
+     361,   362,   363,   364,   365,   366,   367,   368,     0,   240,
+       0,   369,   370,   371,   242,     0,     0,   243,     0,   244,
+       0,   245,   246,   247,     0,     0,   372,    86,    87,    88,
+      89,    90,   373,     0,   374,     0,     0,   375,   376,     0,
+     377,   378,     0,     0,     0,    91,     0,     0,   279,    93,
+      94,     0,    95,    96,    97,   280,     0,     0,    98,     0,
+      99,     0,   100,   101,   102,   281,     0,   282,   104,     0,
+       0,   105,     0,     0,   106,   283,   284,   107,     0,   285,
+       0,   109,   110,   111,   112,   113,   114,     0,     0,   115,
+     116,   117,   286,   118,   287,   119,   288,     0,     0,     0,
+     289,   122,   123,     0,     0,     0,     0,   124,   125,   126,
+     127,   290,   128,   129,   130,     0,     0,   131,     0,   291,
+     132,   133,     0,   134,     0,     0,   135,     0,   292,     0,
+     136,   444,     0,   137,     0,     0,   138,   139,     0,   140,
+     141,     0,     0,   142,   143,     0,   144,   145,   146,   147,
+     293,     0,     0,     0,   148,     0,   149,     0,   150,   294,
+       0,     0,   151,   295,     0,   152,   153,     0,     0,   154,
+       0,     0,     0,   155,     0,     0,   156,   157,     0,     0,
+       0,     0,   296,   158,     0,     0,     0,   159,   297,   160,
+     298,     0,     0,   161,   162,   163,   164,   165,   166,   167,
+     168,   169,   170,   299,   171,   172,   173,   174,   175,   176,
+     177,   178,   179,   180,     0,   181,   182,   300,   183,   301,
+     302,   184,     0,   185,     0,     0,     0,     0,     0,     0,
+       0,   186,   187,     0,     0,     0,   188,   189,   190,   191,
+     192,   193,   194,   195,     0,   303,     0,     0,   196,     0,
+     197,     0,   198,   199,     0,     0,   200,   201,   202,     0,
+     203,   204,   205,     0,     0,   206,     0,   207,     0,     0,
+       0,   208,     0,   304,     0,     0,   209,   210,   305,   306,
+     307,   308,     0,     0,   211,   212,     0,     0,     0,     0,
+     213,     0,     0,     0,   214,     0,     0,     0,   215,     0,
+     216,     0,     0,   309,   217,   310,   218,   311,     0,     0,
+     220,   221,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   222,     0,   223,     0,   224,   225,   312,   313,
+       0,     0,     0,   314,     0,     0,     0,     0,     0,   228,
+     315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
+     324,   325,     0,     0,     0,   229,   326,   327,   328,     0,
+     329,   330,   331,   332,   333,   334,   335,     0,   336,   337,
+       0,     0,   338,   231,   339,   232,   340,   341,   342,   343,
+     344,   345,     0,   346,   234,   235,   347,   348,   349,   350,
+       0,   351,   352,   353,   354,   355,   239,   356,   357,   358,
+     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
+       0,   240,     0,   369,   370,   371,   242,     0,     0,   243,
+       0,   244,     0,   245,   246,   247,     0,     0,   372,    86,
+      87,    88,    89,    90,   373,     0,   374,     0,     0,   375,
+     376,     0,   377,   378,     0,     0,     0,    91,     0,     0,
+     279,    93,    94,     0,    95,    96,    97,   280,     0,     0,
+      98,     0,    99,     0,   100,   101,   102,   281,     0,   282,
+     104,     0,     0,   105,     0,     0,   106,   283,   284,   107,
+       0,   285,     0,   109,   110,   111,   112,   113,   114,     0,
+       0,   115,   116,   117,   286,   118,   287,   119,   288,     0,
+       0,     0,   289,   122,   123,     0,     0,     0,     0,   124,
+     125,   126,   127,   290,   128,   129,   130,     0,     0,   131,
+       0,   291,   132,   133,     0,   134,     0,     0,   135,     0,
+     292,     0,   136,     0,     0,   137,     0,     0,   138,   139,
+       0,   140,   141,     0,     0,   142,   143,     0,   144,   145,
+     146,   147,   293,     0,     0,     0,   148,     0,   149,     0,
+     150,   294,     0,     0,   151,   295,     0,   152,   153,     0,
+       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
+       0,     0,     0,     0,   296,   158,     0,     0,     0,   159,
+     297,   160,   298,     0,     0,   161,   162,   163,   164,   165,
+     166,   167,   168,   169,   170,   299,   171,   172,   173,   174,
+     175,   176,   177,   178,   179,   180,     0,   181,   182,   300,
+     183,   301,   302,   184,     0,   185,     0,     0,     0,     0,
+       0,     0,     0,   186,   187,     0,     0,     0,   188,   189,
+     190,   191,   192,   193,   194,   195,     0,   303,     0,     0,
+     196,     0,   197,     0,   198,   199,     0,     0,   200,   201,
+     202,     0,   203,   204,   205,     0,     0,   206,     0,   207,
+       0,     0,     0,   208,     0,   304,     0,     0,   209,   210,
+     305,   306,   307,   308,     0,     0,   211,   212,     0,     0,
+       0,     0,   213,     0,     0,     0,   214,     0,     0,     0,
+     215,     0,   216,     0,     0,   309,   217,   310,   218,   311,
+       0,     0,   220,   221,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   222,     0,   223,     0,   224,   225,
+     312,   313,     0,     0,     0,   314,     0,     0,     0,     0,
+       0,   228,   315,     0,   316,   317,   318,   319,   320,   321,
+     322,   323,   324,   325,     0,     0,     0,   229,   326,   327,
+     328,     0,   329,   330,   331,   332,   333,   334,   335,     0,
+     336,   337,     0,     0,   338,   231,   339,   232,   340,   341,
+     342,   343,   344,   345,     0,   346,   234,   235,   347,   348,
+     349,   350,     0,   351,   352,   353,   354,   355,   239,   356,
+     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
+     367,   368,     0,   240,     0,   369,   370,   371,   242,     0,
+       0,   243,     0,   244,     0,   245,   246,   247,     0,     0,
+     372,    86,    87,    88,    89,    90,   373,     0,   374,   778,
+       0,   375,   376,     0,   377,   378,     0,     0,     0,    91,
+       0,     0,   279,    93,    94,     0,    95,    96,    97,   280,
+       0,     0,    98,     0,    99,     0,   100,   101,   102,   281,
+       0,   282,   104,     0,     0,   105,     0,     0,   106,   283,
+     284,   107,     0,   285,     0,   109,   110,   111,   112,   113,
+     114,     0,     0,   115,   116,   117,   286,   118,   287,   119,
+     288,     0,     0,     0,   289,   122,   123,     0,     0,     0,
+       0,   124,   125,   126,   127,   290,   128,   129,   130,     0,
+       0,   131,     0,   291,   132,   133,     0,   134,     0,     0,
+     135,     0,   292,     0,   136,     0,     0,   137,     0,     0,
+     138,   139,     0,   140,   141,     0,     0,   142,   143,     0,
+     144,   145,   146,   147,   293,     0,     0,     0,   148,     0,
+     149,     0,   150,   294,     0,     0,   151,   295,     0,   152,
+     153,     0,     0,   154,     0,     0,     0,   155,     0,     0,
+     156,   157,     0,     0,     0,     0,   296,   158,     0,     0,
+       0,   159,   297,   160,   298,     0,     0,   161,   162,   163,
+     164,   165,   166,   167,   168,   169,   170,   299,   171,   172,
+     173,   174,   175,   176,   177,   178,   179,   180,     0,   181,
+     182,   300,   183,   301,   302,   184,     0,   185,     0,     0,
+       0,     0,     0,     0,     0,   186,   187,     0,     0,     0,
+     188,   189,   190,   191,   192,   193,   194,   195,     0,   303,
+       0,     0,   196,     0,   197,     0,   198,   199,     0,     0,
+     200,   201,   202,     0,   203,   204,   205,     0,     0,   206,
+       0,   207,     0,     0,     0,   208,     0,   304,     0,     0,
+     209,   210,   305,   306,   307,   308,     0,     0,   211,   212,
+       0,     0,     0,     0,   213,     0,     0,     0,   214,     0,
+       0,     0,   215,     0,   216,     0,     0,   309,   217,   310,
+     218,   311,     0,     0,   220,   221,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   222,     0,   223,     0,
+     224,   225,   312,   313,     0,     0,     0,   314,     0,     0,
+       0,     0,     0,   228,   315,     0,   316,   317,   318,   319,
+     320,   321,   322,   323,   324,   325,     0,     0,     0,   229,
+     326,   327,   328,     0,   329,   330,   331,   332,   333,   334,
+     335,     0,   336,   337,     0,     0,   338,   231,   339,   232,
+     340,   341,   342,   343,   344,   345,     0,   346,   234,   235,
+     347,   348,   349,   350,     0,   351,   352,   353,   354,   355,
+     239,   356,   357,   358,   359,   360,   361,   362,   363,   364,
+     365,   366,   367,   368,     0,   240,     0,   369,   370,   371,
+     242,     0,     0,   243,     0,   244,     0,   245,   246,   247,
+       0,     0,   372,    86,    87,    88,    89,    90,   373,     0,
+     374,   812,     0,   375,   376,     0,   377,   378,     0,     0,
+       0,    91,     0,     0,   279,    93,    94,     0,    95,    96,
+      97,   280,     0,     0,    98,     0,    99,     0,   100,   101,
+     102,   281,     0,   282,   104,     0,     0,   105,     0,     0,
+     106,   283,   284,   107,     0,   285,     0,   109,   110,   111,
+     112,   113,   114,     0,     0,   115,   116,   117,   286,   118,
+     287,   119,   288,     0,     0,     0,   289,   122,   123,     0,
+       0,     0,     0,   124,   125,   126,   127,   290,   128,   129,
+     130,     0,     0,   131,     0,   291,   132,   133,     0,   134,
+       0,     0,   135,     0,   292,     0,   136,     0,     0,   137,
+       0,     0,   138,   139,     0,   140,   141,     0,     0,   142,
+     143,     0,   144,   145,   146,   147,   293,     0,     0,     0,
+     148,     0,   149,     0,   150,   294,     0,     0,   151,   295,
+       0,   152,   153,     0,     0,   154,     0,     0,     0,   155,
+       0,     0,   156,   157,     0,     0,     0,     0,   296,   158,
+       0,     0,     0,   159,   297,   160,   298,     0,     0,   161,
+     162,   163,   164,   165,   166,   167,   168,   169,   170,   299,
+     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
+       0,   181,   182,   300,   183,   301,   302,   184,     0,   185,
+       0,     0,     0,     0,     0,     0,     0,   186,   187,     0,
+       0,     0,   188,   189,   190,   191,   192,   193,   194,   195,
+       0,   303,     0,     0,   196,     0,   197,     0,   198,   199,
+       0,     0,   200,   201,   202,     0,   203,   204,   205,     0,
+       0,   206,     0,   207,     0,     0,     0,   208,     0,   304,
+       0,     0,   209,   210,   305,   306,   307,   308,     0,     0,
+     211,   212,     0,     0,     0,     0,   213,     0,     0,     0,
+     214,     0,     0,     0,   215,     0,   216,     0,     0,   309,
+     217,   310,   218,   311,     0,     0,   220,   221,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   222,     0,
+     223,     0,   224,   225,   312,   313,     0,     0,     0,   314,
+       0,     0,     0,     0,     0,   228,   315,     0,   316,   317,
+     318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
+       0,   229,   326,   327,   328,     0,   329,   330,   331,   332,
+     333,   334,   335,     0,   336,   337,     0,     0,   338,   231,
+     339,   232,   340,   341,   342,   343,   344,   345,     0,   346,
+     234,   235,   347,   348,   349,   350,     0,   351,   352,   353,
+     354,   355,   239,   356,   357,   358,   359,   360,   361,   362,
+     363,   364,   365,   366,   367,   368,     0,   240,     0,   369,
+     370,   371,   242,     0,     0,   243,     0,   244,     0,   245,
+     246,   247,     0,     0,   372,    86,    87,    88,    89,    90,
+     373,     0,   374,   824,     0,   375,   376,     0,   377,   378,
+       0,     0,     0,    91,     0,     0,   279,    93,    94,     0,
+      95,    96,    97,   280,     0,     0,    98,     0,    99,     0,
+     100,   101,   102,   281,     0,   282,   104,     0,     0,   105,
+       0,     0,   106,   283,   284,   107,     0,   285,     0,   109,
+     110,   111,   112,   113,   114,     0,     0,   115,   116,   117,
+     286,   118,   287,   119,   288,     0,     0,     0,   289,   122,
+     123,     0,     0,     0,     0,   124,   125,   126,   127,   290,
+     128,   129,   130,     0,     0,   131,     0,   291,   132,   133,
+       0,   134,     0,     0,   135,     0,   292,     0,   136,     0,
+       0,   137,     0,     0,   138,   139,     0,   140,   141,     0,
+       0,   142,   143,     0,   144,   145,   146,   147,   293,     0,
+       0,     0,   148,     0,   149,     0,   150,   294,     0,     0,
+     151,   295,     0,   152,   153,     0,     0,   154,     0,     0,
+       0,   155,     0,     0,   156,   157,     0,     0,     0,     0,
+     296,   158,     0,     0,     0,   159,   297,   160,   298,     0,
+       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
+     170,   299,   171,   172,   173,   174,   175,   176,   177,   178,
+     179,   180,     0,   181,   182,   300,   183,   301,   302,   184,
+       0,   185,     0,     0,     0,     0,     0,     0,     0,   186,
+     187,     0,     0,     0,   188,   189,   190,   191,   192,   193,
+     194,   195,     0,   303,     0,     0,   196,     0,   197,     0,
+     198,   199,     0,     0,   200,   201,   202,     0,   203,   204,
+     205,     0,     0,   206,     0,   207,     0,     0,     0,   208,
+       0,   304,     0,     0,   209,   210,   305,   306,   307,   308,
+       0,     0,   211,   212,     0,     0,     0,     0,   213,     0,
+       0,     0,   214,     0,     0,     0,   215,     0,   216,     0,
+       0,   309,   217,   310,   218,   311,     0,     0,   220,   221,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     222,     0,   223,     0,   224,   225,   312,   313,     0,     0,
+       0,   314,     0,     0,     0,     0,     0,   228,   315,     0,
+     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
+       0,     0,     0,   229,   326,   327,   328,     0,   329,   330,
+     331,   332,   333,   334,   335,     0,   336,   337,     0,     0,
+     338,   231,   339,   232,   340,   341,   342,   343,   344,   345,
+       0,   346,   234,   235,   347,   348,   349,   350,     0,   351,
+     352,   353,   354,   355,   239,   356,   357,   358,   359,   360,
+     361,   362,   363,   364,   365,   366,   367,   368,     0,   240,
+       0,   369,   370,   371,   242,     0,     0,   243,     0,   244,
+       0,   245,   246,   247,     0,     0,   372,    86,    87,    88,
+      89,    90,   373,     0,   374,   844,     0,   375,   376,     0,
+     377,   378,     0,     0,     0,    91,     0,     0,   279,    93,
+      94,     0,    95,    96,    97,   280,     0,     0,    98,     0,
+      99,     0,   100,   101,   102,   281,     0,   282,   104,     0,
+       0,   105,     0,     0,   106,   283,   284,   107,     0,   285,
+       0,   109,   110,   111,   112,   113,   114,     0,     0,   115,
+     116,   117,   286,   118,   287,   119,   288,     0,     0,     0,
+     289,   122,   123,     0,     0,     0,     0,   124,   125,   126,
+     127,   290,   128,   129,   130,     0,     0,   131,     0,   291,
+     132,   133,     0,   134,     0,     0,   135,     0,   292,     0,
+     136,     0,     0,   137,     0,     0,   138,   139,     0,   140,
+     141,     0,     0,   142,   143,     0,   144,   145,   146,   147,
+     293,     0,     0,     0,   148,     0,   149,     0,   150,   294,
+       0,     0,   151,   295,     0,   152,   153,     0,     0,   154,
+       0,     0,     0,   155,     0,     0,   156,   157,     0,     0,
+       0,     0,   296,   158,     0,     0,     0,   159,   297,   160,
+     298,     0,     0,   161,   162,   163,   164,   165,   166,   167,
+     168,   169,   170,   299,   171,   172,   173,   174,   175,   176,
+     177,   178,   179,   180,     0,   181,   182,   300,   183,   301,
+     302,   184,     0,   185,     0,     0,     0,     0,     0,     0,
+       0,   186,   187,     0,     0,     0,   188,   189,   190,   191,
+     192,   193,   194,   195,     0,   303,     0,     0,   196,     0,
+     197,     0,   198,   199,     0,     0,   200,   201,   202,     0,
+     203,   204,   205,     0,     0,   206,     0,   207,     0,     0,
+       0,   208,     0,   304,     0,     0,   209,   210,   305,   306,
+     307,   308,     0,     0,   211,   212,     0,     0,     0,     0,
+     213,     0,     0,     0,   214,     0,     0,     0,   215,     0,
+     216,     0,     0,   309,   217,   310,   218,   311,     0,     0,
+     220,   221,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   222,     0,   223,     0,   224,   225,   312,   313,
+       0,     0,     0,   314,     0,     0,     0,     0,     0,   228,
+     315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
+     324,   325,     0,     0,     0,   229,   326,   327,   328,     0,
+     329,   330,   331,   332,   333,   334,   335,     0,   336,   337,
+       0,     0,   338,   231,   339,   232,   340,   341,   342,   343,
+     344,   345,     0,   346,   234,   235,   347,   348,   349,   350,
+       0,   351,   352,   353,   354,   355,   239,   356,   357,   358,
+     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
+       0,   240,     0,   369,   370,   371,   242,     0,     0,   243,
+       0,   244,     0,   245,   246,   247,     0,     0,   372,    86,
+      87,    88,    89,    90,   373,     0,   374,     0,     0,   375,
+     376,     0,   377,   378,     0,     0,     0,    91,     0,     0,
+     279,    93,    94,     0,    95,    96,    97,   280,     0,     0,
+      98,     0,    99,     0,   100,   101,   102,   281,     0,   282,
+     104,     0,     0,   105,     0,     0,   106,   283,   284,   107,
+       0,   285,     0,   109,   110,   111,   112,   113,   114,     0,
+       0,   115,   116,   117,   286,   118,   287,   119,   288,     0,
+       0,     0,   289,   122,   123,     0,     0,     0,     0,   124,
+     125,   126,   127,   290,   128,   129,   130,     0,     0,   131,
+       0,   291,   132,   133,     0,   134,     0,     0,   135,     0,
+     292,     0,   136,     0,     0,   137,     0,     0,   138,   139,
+       0,   140,   141,     0,     0,   142,   143,     0,   144,   145,
+     146,   147,   293,     0,     0,     0,   148,     0,   149,     0,
+     150,   294,     0,     0,   151,   295,     0,   152,   153,     0,
+       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
+       0,     0,     0,     0,   296,   158,     0,     0,     0,   159,
+     297,   160,   298,     0,     0,   161,   162,   163,   164,   165,
+     166,   167,   168,   169,   170,   299,   171,   172,   173,   174,
+     175,   176,   177,   178,   179,   180,     0,   181,   182,   300,
+     183,   301,   302,   184,     0,   185,     0,     0,     0,     0,
+       0,     0,     0,   186,   187,     0,     0,     0,   188,   189,
+     190,   191,   192,   193,   194,   195,     0,   303,     0,     0,
+     196,     0,   197,     0,   198,   199,     0,     0,   200,   201,
+     202,     0,   203,   204,   205,     0,     0,   206,     0,   207,
+       0,     0,     0,   208,     0,   304,     0,     0,   209,   210,
+     305,   306,   307,   308,     0,     0,   211,   212,     0,     0,
+       0,     0,   213,     0,     0,     0,   214,     0,     0,     0,
+     215,     0,   216,     0,     0,   309,   217,   310,   218,   311,
+       0,     0,   220,   221,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   222,     0,   223,     0,   224,   225,
+     312,   313,     0,     0,     0,   314,     0,     0,     0,     0,
+       0,   228,   315,     0,   316,   317,   318,   319,   320,   321,
+     322,   323,   324,   325,     0,     0,     0,   229,   326,   327,
+     328,     0,   329,   330,   331,   332,   333,   334,   335,     0,
+     336,   337,     0,     0,   338,   231,   339,   232,   340,   341,
+     342,   343,   344,   345,     0,   346,   234,   235,   347,   348,
+     349,   350,     0,   351,   352,   353,   354,   355,   239,   356,
+     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
+     367,   368,     0,   240,     0,   369,   370,   371,   242,     0,
+       0,   243,     0,   244,     0,   245,   246,   247,     0,     0,
+     372,    86,    87,    88,    89,    90,   373,     0,   531,     0,
+       0,   375,   376,     0,   377,   378,     0,     0,     0,    91,
+       0,     0,   279,    93,    94,     0,    95,    96,    97,   280,
+       0,     0,    98,     0,    99,     0,   100,   101,   102,   281,
+       0,   282,   104,     0,     0,   105,     0,     0,   106,   283,
+     284,   107,     0,   285,     0,   109,   110,   111,   112,   113,
+     114,     0,     0,   115,   116,   117,   286,   118,   287,   119,
+     288,     0,     0,     0,   289,   122,   123,     0,     0,     0,
+       0,   124,   125,   126,   127,   290,   128,   129,   130,     0,
+       0,   131,     0,   291,   132,   133,     0,   134,     0,     0,
+     135,     0,   292,     0,   136,     0,     0,   137,     0,     0,
+     138,   139,     0,   140,   141,     0,     0,   142,   143,     0,
+     144,   145,   146,   147,   293,     0,     0,     0,   148,     0,
+     149,     0,   150,   294,     0,     0,   151,   295,     0,   152,
+     153,     0,     0,   154,     0,     0,     0,   155,     0,     0,
+     156,   157,     0,     0,     0,     0,   296,   158,     0,     0,
+       0,   159,   297,   160,   298,     0,     0,   161,   162,   163,
+     164,   165,   166,   167,   168,   169,   170,   299,   171,   172,
+     173,   174,   175,   176,   177,   178,   179,   180,     0,   181,
+     182,   300,   183,   301,   302,   184,     0,   185,     0,     0,
+       0,     0,     0,     0,     0,   186,   187,     0,     0,     0,
+     188,   189,   190,   191,   192,   193,   194,   195,     0,   303,
+       0,     0,   196,     0,   197,     0,   198,   199,     0,     0,
+     200,   201,   202,     0,   203,   204,   205,     0,     0,   206,
+       0,   207,     0,     0,     0,   208,     0,   304,     0,     0,
+     209,   210,   305,   306,   307,   308,     0,     0,   211,   212,
+       0,     0,     0,     0,   213,     0,     0,     0,   214,     0,
+       0,     0,   215,     0,   216,     0,     0,   309,   217,   310,
+     218,   311,     0,     0,   220,   221,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   222,     0,   223,     0,
+     224,   225,   312,   313,     0,     0,     0,   314,     0,     0,
+       0,     0,     0,   228,   315,     0,   316,   317,   318,   319,
+     320,   321,   322,   323,   324,   325,     0,     0,     0,   229,
+     326,   327,   328,     0,   329,   330,   331,   332,   333,   334,
+     335,     0,   336,   337,     0,     0,   338,   231,   339,   232,
+     890,   341,   342,   343,   344,   345,     0,   346,   234,   235,
+     347,   348,   349,   350,     0,   351,   352,   353,   354,   355,
+     239,   356,   357,   358,   359,   360,   361,   362,   363,   364,
+     365,   366,   367,   368,     0,   240,     0,   369,   370,   371,
+     242,     0,     0,   243,     0,   244,     0,   245,   246,   247,
+       0,     0,   372,    86,    87,    88,    89,    90,   373,     0,
+     374,     0,     0,   375,   376,     0,   377,   378,     0,     0,
+       0,    91,     0,     0,   279,    93,    94,     0,    95,    96,
+      97,   280,     0,     0,    98,     0,    99,     0,   100,   101,
+     102,   281,     0,   282,   104,     0,     0,   105,     0,     0,
+     106,   283,   284,   107,     0,   285,     0,   109,   110,   111,
+     112,   113,   114,     0,     0,   115,   116,   117,   286,   118,
+     287,   119,   288,     0,     0,     0,   289,   122,   123,     0,
+       0,     0,     0,   124,   125,   126,   127,   290,   128,   129,
+     130,     0,     0,   131,     0,   291,   132,   133,     0,   134,
+       0,     0,   135,     0,   292,     0,   136,     0,     0,   137,
+       0,     0,   138,   139,     0,   140,   141,     0,     0,   142,
+     143,     0,   144,   145,   146,   147,   293,     0,     0,     0,
+     148,     0,   149,     0,   150,   294,     0,     0,   151,   295,
+       0,   152,   153,     0,     0,   154,     0,     0,     0,   155,
+       0,     0,   156,   157,     0,     0,     0,     0,   296,   158,
+       0,     0,     0,   159,   297,   160,   298,     0,     0,   161,
+     162,   163,   164,   165,   166,   167,   168,   169,   170,   299,
+     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
+       0,   181,   182,   300,   183,   301,   302,   184,     0,   185,
+       0,     0,     0,     0,     0,     0,     0,   186,   187,     0,
+       0,     0,   188,   189,   190,   191,   192,   193,   194,   195,
+       0,   303,     0,     0,   196,     0,   197,     0,   198,   199,
+       0,     0,   200,   201,   202,     0,   203,   204,   205,     0,
+       0,   206,     0,   207,     0,     0,     0,   208,     0,   304,
+       0,     0,   209,   210,   305,   306,   307,   308,     0,     0,
+     211,   212,     0,     0,     0,     0,   213,     0,     0,     0,
+     214,     0,     0,     0,   215,     0,   216,     0,     0,   309,
+     217,   310,   218,   311,     0,     0,   220,   221,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   222,     0,
+     223,     0,   224,   225,   312,   313,     0,     0,     0,   314,
+       0,     0,     0,     0,     0,   228,   315,     0,   316,   317,
+     318,   319,   320,   321,   322,   323,   324,   325,     0,     0,
+       0,   229,   326,   327,   328,     0,   329,   330,   331,   332,
+     333,   334,   335,     0,   336,   337,     0,     0,   338,   231,
+     339,   232,   892,   341,   342,   343,   344,   345,     0,   346,
+     234,   235,   347,   348,   349,   350,     0,   351,   352,   353,
+     354,   355,   239,   356,   357,   358,   359,   360,   361,   362,
+     363,   364,   365,   366,   367,   368,     0,   240,     0,   369,
+     370,   371,   242,     0,     0,   243,     0,   244,     0,   245,
+     246,   247,     0,     0,   372,    86,    87,    88,    89,    90,
+     373,     0,   374,     0,     0,   375,   376,     0,   377,   378,
+       0,     0,     0,    91,     0,     0,   279,    93,    94,     0,
+      95,    96,    97,   280,     0,     0,    98,     0,    99,     0,
+     100,   101,   102,   281,     0,   282,   104,     0,     0,   105,
+       0,     0,   106,   283,   284,   107,     0,   285,     0,   109,
+     110,   111,   112,   113,   114,     0,     0,   115,   116,   117,
+     286,   118,   287,   119,   288,     0,     0,     0,   289,   122,
+     123,     0,     0,     0,     0,   124,   125,   126,   127,   290,
+     128,   129,   130,     0,     0,   131,     0,   291,   132,   133,
+       0,   134,     0,     0,   135,     0,   292,     0,   136,     0,
+       0,   137,     0,     0,   138,   139,     0,   140,   141,     0,
+       0,   142,   143,     0,   144,   145,   146,   147,   293,     0,
+       0,     0,   148,     0,   149,     0,   150,   294,     0,     0,
+     151,   295,     0,   152,   153,     0,     0,   154,     0,     0,
+       0,   155,     0,     0,   156,   157,     0,     0,     0,     0,
+     296,   158,     0,     0,     0,   159,   297,   160,   298,     0,
+       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
+     170,   299,   171,   172,   173,   174,   175,   176,   177,   178,
+     179,   180,     0,   181,   182,   300,   183,   301,   302,   184,
+       0,   185,     0,     0,     0,     0,     0,     0,     0,   186,
+     187,     0,     0,     0,   188,   189,   190,   191,   192,   193,
+     194,   195,     0,   303,     0,     0,   196,     0,   197,     0,
+     198,   199,     0,     0,   200,   201,   202,     0,   203,   204,
+     205,     0,     0,   206,     0,   207,     0,     0,     0,   208,
+       0,   304,     0,     0,   209,   210,   305,   306,   307,   308,
+       0,     0,   211,   212,     0,     0,     0,     0,   213,     0,
+       0,     0,   214,     0,     0,     0,   215,     0,   216,     0,
+       0,   309,   217,   310,   218,   311,     0,     0,   220,   221,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     222,     0,   223,     0,   224,   225,   312,   313,     0,     0,
+       0,   314,     0,     0,     0,     0,     0,   228,   315,     0,
+     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
+       0,     0,     0,   229,   326,   327,   328,     0,   329,   330,
+     331,   332,   333,   334,   335,     0,   336,   337,     0,     0,
+     338,   231,   339,   232,  1441,   341,   342,   343,   344,   345,
+       0,   346,   234,   235,   347,   348,   349,   350,     0,   351,
+     352,   353,   354,   355,   239,   356,   357,   358,   359,   360,
+     361,   362,   363,   364,   365,   366,   367,   368,     0,   240,
+       0,   369,   370,   371,   242,     0,     0,   243,     0,   244,
+       0,   245,   246,   247,     0,     0,   372,    86,    87,    88,
+      89,    90,   373,     0,   374,     0,     0,   375,   376,     0,
+     377,   378,     0,     0,     0,    91,     0,     0,   279,    93,
+      94,     0,    95,    96,    97,   280,     0,     0,    98,     0,
+      99,     0,   100,   101,   102,   281,     0,   282,   104,     0,
+       0,   105,     0,     0,   106,   283,   284,   107,     0,   285,
+       0,   109,   110,   111,   112,   113,   114,     0,     0,   115,
+     116,   117,   286,   118,   287,   119,   288,     0,     0,     0,
+     289,   122,   123,     0,     0,     0,     0,   124,   125,   126,
+     127,   290,   128,   129,   130,     0,     0,   131,     0,   291,
+     132,   133,     0,   134,     0,     0,   135,     0,   292,     0,
+     136,     0,     0,   137,     0,     0,   138,   139,     0,   140,
+     141,     0,     0,   142,   143,     0,   144,   145,   146,   147,
+     293,     0,     0,     0,   148,     0,   149,     0,   150,   294,
+       0,     0,   151,   295,     0,   152,   153,     0,     0,   154,
+       0,     0,     0,   155,     0,     0,   156,   157,     0,     0,
+       0,     0,   296,   158,     0,     0,     0,   159,   297,   160,
+     298,     0,     0,   161,   162,   163,   164,   165,   166,   167,
+     168,   169,   170,   299,   171,   172,   173,   174,   175,   176,
+     177,   178,   179,   180,     0,   181,   182,   300,   183,   301,
+     302,   184,     0,   185,     0,     0,     0,     0,     0,     0,
+       0,   186,   187,     0,     0,     0,   188,   189,   190,   191,
+     192,   193,   194,   195,     0,   303,     0,     0,   196,     0,
+     197,     0,   198,   199,     0,     0,   200,   201,   202,     0,
+     203,   204,   205,     0,     0,   206,     0,   207,     0,     0,
+       0,   208,     0,   304,     0,     0,   209,   210,   305,   306,
+     307,   308,     0,     0,   211,   212,     0,     0,     0,     0,
+     213,     0,     0,     0,   214,     0,     0,     0,   215,     0,
+     216,     0,     0,   309,   217,   310,   218,   311,     0,     0,
+     220,   221,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   222,     0,   223,     0,   224,   225,   312,   313,
+       0,     0,     0,   314,     0,     0,     0,     0,     0,   228,
+     315,     0,   316,   317,   318,   319,   320,   321,   322,   323,
+     324,   325,     0,     0,     0,   229,   326,   327,   328,     0,
+     329,   330,   331,   332,   333,   334,   335,     0,   336,   337,
+       0,     0,   338,   231,   339,   232,  1443,   341,   342,   343,
+     344,   345,     0,   346,   234,   235,   347,   348,   349,   350,
+       0,   351,   352,   353,   354,   355,   239,   356,   357,   358,
+     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
+       0,   240,     0,   369,   370,   371,   242,     0,     0,   243,
+       0,   244,     0,   245,   246,   247,     0,     0,   372,    86,
+      87,    88,    89,    90,   373,     0,   374,     0,     0,   375,
+     376,     0,   377,   378,     0,     0,     0,    91,     0,     0,
+     279,    93,    94,     0,    95,    96,    97,   280,     0,     0,
+      98,     0,    99,     0,   100,   101,   102,   281,     0,   282,
+     104,     0,     0,   105,     0,     0,   106,   283,   284,   107,
+       0,   285,     0,   109,   110,   111,   112,   113,   114,     0,
+       0,   115,   116,   117,   286,   118,   287,   119,   288,     0,
+       0,     0,   289,   122,   123,     0,     0,     0,     0,   124,
+     125,   126,   127,   290,   128,   129,   130,     0,     0,   131,
+       0,   291,   132,   133,     0,   134,     0,     0,   135,     0,
+     292,     0,   136,     0,     0,   137,     0,     0,   138,   139,
+       0,   140,   141,     0,     0,   142,   143,     0,   144,   145,
+     146,   147,   293,     0,     0,     0,   148,     0,   149,     0,
+     150,   294,     0,     0,   151,   295,     0,   152,   153,     0,
+       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
+       0,     0,     0,     0,   296,   158,     0,     0,     0,   159,
+     297,   160,   298,     0,     0,   161,   162,   163,   164,   165,
+     166,   167,   168,   169,   170,   299,   171,   172,   173,   174,
+     175,   176,   177,   178,   179,   180,     0,   181,   182,   300,
+     183,   301,   302,   184,     0,   185,     0,     0,     0,     0,
+       0,     0,     0,   186,   187,     0,     0,     0,   188,   189,
+     190,   191,   192,   193,   194,   195,     0,   303,     0,     0,
+     196,     0,   197,     0,   198,   199,     0,     0,   200,   201,
+     202,     0,   203,   204,   205,     0,     0,   206,     0,   207,
+       0,     0,     0,   208,     0,   304,     0,     0,   209,   210,
+     305,   306,   307,   308,     0,     0,   211,   212,     0,     0,
+       0,     0,   213,     0,     0,     0,   214,     0,     0,     0,
+     215,     0,   216,     0,     0,   309,   217,   310,   218,   311,
+       0,     0,   220,   221,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   222,     0,   223,     0,   224,   225,
+     312,   313,     0,     0,     0,   314,     0,     0,     0,     0,
+       0,   228,   315,     0,   316,   317,   318,   319,   320,   321,
+     322,   323,   324,   325,     0,     0,     0,   229,   326,   327,
+     328,     0,   329,   330,   331,   332,   333,   334,   335,     0,
+     336,   337,     0,     0,   338,   231,   339,   232,  1493,   341,
+     342,   343,   344,   345,     0,   346,   234,   235,   347,   348,
+     349,   350,     0,   351,   352,   353,   354,   355,   239,   356,
+     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
+     367,   368,     0,   240,     0,   369,   370,   371,   242,     0,
+       0,   243,     0,   244,     0,   245,   246,   247,     0,     0,
+     372,    86,    87,    88,    89,    90,   373,     0,   374,     0,
+       0,   375,   376,     0,   377,   378,     0,     0,     0,    91,
+       0,     0,   279,    93,    94,     0,    95,    96,    97,   280,
+       0,     0,    98,     0,    99,     0,   100,   101,   102,   281,
+       0,   282,   104,     0,     0,   105,     0,     0,   106,   283,
+     284,   107,     0,   285,     0,   109,   110,   111,   112,   113,
+     114,     0,     0,   115,   116,   117,   286,   118,   287,   119,
+     288,     0,     0,     0,   289,   122,   123,     0,     0,     0,
+       0,   124,   125,   126,   127,   290,   128,   129,   130,     0,
+       0,   131,     0,   291,   132,   133,     0,   134,     0,     0,
+     135,     0,   292,     0,   136,     0,     0,   137,     0,     0,
+     138,   139,     0,   140,   141,     0,     0,   142,   143,     0,
+     144,   145,   146,   147,   293,     0,     0,     0,   148,     0,
+     149,     0,   150,   294,     0,     0,   151,   295,     0,   152,
+     153,     0,     0,   154,     0,     0,     0,   155,     0,     0,
+     156,   157,     0,     0,     0,     0,   296,   158,     0,     0,
+       0,   159,   297,   160,   298,     0,     0,   161,   162,   163,
+     164,   165,   166,   167,   168,   169,   170,   299,   171,   172,
+     173,   174,   175,   176,   177,   178,   179,   180,     0,   181,
+     182,   300,   183,   301,   302,   184,     0,   185,     0,     0,
+       0,     0,     0,     0,     0,   186,   187,     0,     0,     0,
+     188,   189,   190,   191,   192,   193,   194,   195,     0,   303,
+       0,     0,   196,     0,   197,     0,   198,   199,     0,     0,
+     200,   201,   202,     0,   203,   204,   205,     0,     0,   206,
+       0,   207,     0,     0,     0,   208,     0,   304,     0,     0,
+     209,   210,   305,   306,   307,   308,     0,     0,   211,   212,
+       0,     0,     0,     0,   213,     0,     0,     0,   214,     0,
+       0,     0,   215,     0,   216,     0,     0,   309,   217,   310,
+     218,   311,     0,     0,   220,   221,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   222,     0,   223,     0,
+     224,   225,   312,   313,     0,     0,     0,   314,     0,     0,
+       0,     0,     0,   228,   315,     0,   316,   317,   318,   319,
+     320,   321,   322,   323,   324,   325,     0,     0,     0,   229,
+     326,   327,   328,     0,   329,   330,   331,   332,   333,   334,
+     335,     0,   336,   337,     0,     0,   338,   231,   339,   232,
+    1495,   341,   342,   343,   344,   345,     0,   346,   234,   235,
+     347,   348,   349,   350,     0,   351,   352,   353,   354,   355,
+     239,   356,   357,   358,   359,   360,   361,   362,   363,   364,
+     365,   366,   367,   368,     0,   240,     0,   369,   370,   371,
+     242,     0,     0,   243,     0,   244,     0,   245,   246,   247,
+       0,     0,   372,    86,    87,    88,    89,    90,   373,     0,
+     374,     0,     0,   375,   376,     0,   377,   378,     0,     0,
+       0,    91,     0,     0,    92,    93,    94,     0,    95,    96,
+      97,     0,     0,     0,    98,     0,    99,     0,   100,   101,
+     102,   103,     0,     0,   104,     0,     0,   105,     0,     0,
+     106,     0,     0,   107,     0,   108,     0,   109,   110,   111,
+     112,   113,   114,  1575,     0,   115,   116,   117,     0,   118,
+       0,   119,   120,     0,     0,     0,   121,   122,   123,     0,
+       0,     0,     0,   124,   125,   126,   127,     0,   128,   129,
+     130,     0,     0,   131,     0,     0,   132,   133,     0,   134,
+       0,     0,   135,  1590,     0,     0,   136,     0,     0,   137,
+       0,     0,   138,   139,     0,   140,   141,     0,     0,   142,
+     143,     0,   144,   145,   146,   147,     0,     0,     0,     0,
+     148,  1591,   149,     0,   150,     0,     0,     0,   151,     0,
+       0,   152,   153,     0,  1592,   154,     0,     0,     0,   155,
+       0,     0,   156,   157,     0,     0,  1593,     0,     0,   158,
+       0,     0,     0,   159,     0,   160,     0,     0,     0,   161,
+     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
+     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
+       0,   181,   182,     0,   183,     0,     0,   184,     0,   185,
+       0,     0,     0,     0,     0,     0,     0,   186,   187,     0,
+       0,     0,   188,   189,   190,   191,   192,   193,   194,   195,
+       0,     0,     0,     0,   196,     0,   197,     0,   198,   199,
+       0,     0,   200,   201,   202,     0,   203,   204,   205,     0,
+       0,   206,     0,   207,     0,     0,     0,   208,     0,     0,
+       0,     0,   209,   210,     0,     0,     0,     0,     0,     0,
+     211,   212,     0,     0,     0,     0,   213,     0,     0,     0,
+     214,     0,     0,     0,   215,     0,   216,     0,     0,     0,
+     217,     0,   218,   219,     0,     0,   220,   221,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   222,     0,
+     223,     0,   224,   225,   226,   227,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   228,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   229,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   230,   231,
+       0,   232,     0,     0,     0,     0,     0,     0,     0,   233,
+     234,   235,   236,     0,   237,     0,     0,     0,     0,     0,
+       0,   238,   239,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   240,     0,   241,
+       0,     0,   242,     0,     0,   243,     0,   244,     0,   245,
+     246,   247,    86,    87,    88,    89,    90,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1638,
+      91,     0,     0,    92,    93,    94,     0,    95,    96,    97,
+       0,     0,     0,    98,     0,    99,     0,   100,   101,   102,
+     103,     0,     0,   104,     0,     0,   105,     0,     0,   106,
+       0,     0,   107,     0,   108,     0,   109,   110,   111,   112,
+     113,   114,     0,     0,   115,   116,   117,     0,   118,     0,
+     119,   120,     0,     0,     0,   121,   122,   123,     0,     0,
+       0,     0,   124,   125,   126,   127,     0,   128,   129,   130,
+       0,     0,   131,     0,     0,   132,   133,     0,   134,     0,
+       0,   135,  1590,     0,     0,   136,     0,     0,   137,     0,
+       0,   138,   139,     0,   140,   141,     0,     0,   142,   143,
+       0,   144,   145,   146,   147,     0,     0,     0,     0,   148,
+    1591,   149,     0,   150,     0,     0,     0,   151,     0,     0,
+     152,   153,     0,  1592,   154,     0,     0,     0,   155,     0,
+       0,   156,   157,     0,     0,  1593,     0,     0,   158,     0,
+       0,     0,   159,     0,   160,     0,     0,     0,   161,   162,
+     163,   164,   165,   166,   167,   168,   169,   170,     0,   171,
+     172,   173,   174,   175,   176,   177,   178,   179,   180,     0,
+     181,   182,     0,   183,     0,     0,   184,     0,   185,     0,
+       0,     0,     0,     0,     0,     0,   186,   187,     0,     0,
+       0,   188,   189,   190,   191,   192,   193,   194,   195,     0,
+       0,     0,     0,   196,     0,   197,     0,   198,   199,     0,
+       0,   200,   201,   202,     0,   203,   204,   205,     0,     0,
+     206,     0,   207,     0,     0,     0,   208,     0,     0,     0,
+       0,   209,   210,     0,     0,     0,     0,     0,     0,   211,
+     212,     0,     0,     0,     0,   213,     0,     0,     0,   214,
+       0,     0,     0,   215,     0,   216,     0,     0,     0,   217,
+       0,   218,   219,     0,     0,   220,   221,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   222,     0,   223,
+       0,   224,   225,   226,   227,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   228,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     229,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   230,   231,     0,
+     232,     0,     0,     0,     0,     0,     0,     0,   233,   234,
+     235,   236,     0,   237,     0,     0,     0,     0,     0,     0,
+     238,   239,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   240,     0,   241,     0,
+       0,   242,     0,     0,   243,     0,   244,     0,   245,   246,
+     247,    86,    87,    88,    89,    90,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,  1638,    91,
+       0,     0,    92,    93,    94,     0,    95,    96,    97,     0,
+       0,     0,    98,     0,    99,     0,   100,   101,   102,   103,
+       0,     0,   104,     0,     0,   105,     0,     0,   106,     0,
+       0,   107,     0,   108,     0,   109,   110,   111,   112,   113,
+     114,    24,     0,   115,   116,   117,     0,   118,     0,   119,
+     120,     0,     0,     0,   121,   122,   123,     0,     0,     0,
+       0,   124,   125,   126,   127,     0,   128,   129,   130,     0,
+       0,   131,     0,     0,   132,   133,     0,   134,     0,     0,
+     135,     0,     0,     0,   136,     0,     0,   137,     0,     0,
+     138,   139,     0,   140,   141,     0,     0,   142,   143,     0,
+     144,   145,   146,   147,     0,     0,     0,     0,   148,     0,
+     149,     0,   150,     0,     0,     0,   151,     0,     0,   152,
+     153,     0,     0,   154,     0,     0,     0,   155,     0,     0,
+     156,   157,     0,     0,     0,     0,     0,   158,     0,     0,
+       0,   159,     0,   160,     0,     0,     0,   161,   162,   163,
+     164,   165,   166,   167,   168,   169,   170,     0,   171,   172,
+     173,   174,   175,   176,   177,   178,   179,   180,     0,   181,
+     182,     0,   183,     0,     0,   184,     0,   185,     0,     0,
+       0,     0,     0,     0,     0,   186,   187,     0,     0,     0,
+     188,   189,   190,   191,   192,   193,   194,   195,     0,     0,
+       0,     0,   196,     0,   197,     0,   198,   199,     0,     0,
+     200,   201,   202,     0,   203,   204,   205,     0,     0,   206,
+       0,   207,     0,     0,     0,   208,     0,     0,     0,     0,
+     209,   210,     0,     0,     0,     0,     0,     0,   211,   212,
+       0,     0,     0,     0,   213,     0,     0,     0,   214,     0,
+       0,     0,   215,     0,   216,     0,     0,     0,   217,     0,
+     218,   219,     0,     0,   220,   221,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   222,     0,   223,     0,
+     224,   225,   226,   227,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   228,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   229,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   230,   231,     0,   232,
+       0,     0,     0,     0,     0,     0,     0,   233,   234,   235,
+     236,     0,   237,     0,     0,     0,     0,     0,     0,   238,
+     239,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   240,     0,   241,     0,     0,
+     242,     0,     0,   243,     0,   244,     0,   245,   246,   247,
+      86,    87,    88,    89,    90,     0,     0,     0,     0,     0,
+      43,     0,     0,     0,     0,     0,     0,   248,    91,     0,
+       0,    92,    93,    94,     0,    95,    96,    97,     0,     0,
+       0,    98,     0,    99,     0,   100,   101,   102,   103,     0,
+       0,   104,     0,     0,   105,     0,     0,   106,     0,     0,
+     107,     0,   108,     0,   109,   110,   111,   112,   113,   114,
+    1575,     0,   115,   116,   117,     0,   118,     0,   119,   120,
+       0,     0,     0,   121,   122,   123,     0,     0,     0,     0,
+     124,   125,   126,   127,     0,   128,   129,   130,     0,     0,
+     131,     0,     0,   132,   133,     0,   134,     0,     0,   135,
+       0,     0,     0,   136,     0,     0,   137,     0,     0,   138,
+     139,     0,   140,   141,     0,     0,   142,   143,     0,   144,
+     145,   146,   147,     0,     0,     0,     0,   148,     0,   149,
+       0,   150,     0,     0,     0,   151,     0,     0,   152,   153,
+       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
+     157,     0,     0,     0,     0,     0,   158,     0,     0,     0,
+     159,     0,   160,     0,     0,     0,   161,   162,   163,   164,
+     165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
+     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
+       0,   183,     0,     0,   184,     0,   185,     0,     0,     0,
+       0,     0,     0,     0,   186,   187,     0,     0,     0,   188,
+     189,   190,   191,   192,   193,   194,   195,     0,     0,     0,
+       0,   196,     0,   197,     0,   198,   199,     0,     0,   200,
+     201,   202,     0,   203,   204,   205,     0,     0,   206,     0,
+     207,     0,     0,     0,   208,     0,     0,     0,     0,   209,
+     210,     0,     0,     0,     0,     0,     0,   211,   212,     0,
+       0,     0,     0,   213,     0,     0,     0,   214,     0,     0,
+       0,   215,     0,   216,     0,     0,     0,   217,     0,   218,
+     219,     0,     0,   220,   221,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   222,     0,   223,     0,   224,
+     225,   226,   227,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   228,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   229,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   230,   231,     0,   232,     0,
+       0,     0,     0,     0,     0,     0,   233,   234,   235,   236,
+       0,   237,     0,     0,     0,     0,     0,     0,   238,   239,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   240,     0,   241,     0,     0,   242,
+       0,     0,   243,     0,   244,     0,   245,   246,   247,    86,
+      87,    88,    89,    90,     0,     0,     0,     0,     0,     0,
+    1828,     0,     0,     0,     0,     0,   378,    91,     0,     0,
+      92,    93,    94,     0,    95,    96,    97,     0,     0,     0,
+      98,     0,    99,     0,   100,   101,   102,   103,     0,     0,
+     104,     0,     0,   105,     0,     0,   106,     0,     0,   107,
+       0,   108,     0,   109,   110,   111,   112,   113,   114,     0,
+       0,   115,   116,   117,     0,   118,     0,   119,   120,     0,
+       0,     0,   121,   122,   123,     0,     0,     0,     0,   124,
+     125,   126,   127,     0,   128,   129,   130,     0,     0,   131,
+       0,     0,   132,   133,     0,   134,     0,     0,   135,     0,
+       0,     0,   136,     0,     0,   137,     0,     0,   138,   139,
+       0,   140,   141,     0,     0,   142,   143,     0,   144,   145,
+     146,   147,     0,     0,     0,     0,   148,     0,   149,     0,
+     150,     0,     0,     0,   151,     0,     0,   152,   153,     0,
+       0,   154,     0,     0,     0,   155,   978,     0,   156,   157,
+       0,     0,     0,     0,     0,   158,     0,     0,     0,   159,
+       0,   160,     0,     0,     0,   161,   162,   163,   164,   165,
+     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
+     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
+     183,     0,     0,   184,     0,   185,     0,     0,     0,     0,
+       0,     0,     0,   186,   187,     0,     0,     0,   188,   189,
+     190,   191,   192,   193,   194,   195,     0,     0,     0,     0,
+     196,     0,   197,     0,   198,   199,     0,     0,   200,   201,
+     202,     0,   203,   204,   205,     0,     0,   206,     0,   207,
+       0,     0,     0,   208,     0,     0,     0,     0,   209,   210,
+       0,     0,     0,     0,     0,     0,   211,   212,     0,     0,
+       0,     0,   213,     0,     0,     0,   214,     0,     0,     0,
+     215,     0,   216,     0,     0,     0,   217,     0,   218,   219,
+       0,     0,   220,   221,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   222,     0,   223,     0,   224,   225,
+     226,   227,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   228,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   229,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   230,   231,     0,   232,     0,     0,
+       0,     0,     0,     0,     0,   233,   234,   235,   236,     0,
+     237,     0,     0,     0,     0,     0,     0,   238,   239,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   240,     0,   241,     0,     0,   242,     0,
+       0,   243,     0,   244,     0,   245,   246,   247,    86,    87,
+      88,    89,    90,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   248,    91,     0,     0,    92,
+      93,    94,     0,    95,    96,    97,     0,     0,     0,    98,
+       0,    99,     0,   100,   101,   102,   103,     0,     0,   104,
+       0,     0,   105,     0,     0,   106,     0,     0,   107,     0,
+     108,     0,   109,   110,   111,   112,   113,   114,     0,     0,
+     115,   116,   117,     0,   118,     0,   119,   120,     0,     0,
+       0,   121,   122,   123,     0,     0,     0,     0,   124,   125,
+     126,   127,     0,   128,   129,   130,     0,     0,   131,     0,
+       0,   132,   133,     0,   134,     0,     0,   135,     0,     0,
+       0,   136,     0,     0,   137,     0,     0,   138,   139,     0,
+     140,   141,     0,     0,   142,   143,     0,   144,   145,   146,
+     147,     0,     0,     0,     0,   148,     0,   149,     0,   150,
+       0,     0,     0,   151,     0,     0,   152,   153,     0,     0,
+     154,     0,     0,     0,   155,     0,     0,   156,   157,     0,
+       0,     0,     0,     0,   158,     0,     0,     0,   159,     0,
+     160,     0,     0,     0,   161,   162,   163,   164,   165,   166,
+     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
+     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
+       0,     0,   184,     0,   185,     0,     0,     0,     0,     0,
+       0,     0,   186,   187,     0,     0,     0,   188,   189,   190,
+     191,   192,   193,   194,   195,     0,     0,     0,     0,   196,
+       0,   197,     0,   198,   199,     0,     0,   200,   201,   202,
+       0,   203,   204,   205,     0,     0,   206,     0,   207,     0,
+       0,     0,   208,     0,     0,     0,     0,   209,   210,     0,
+       0,     0,     0,     0,     0,   211,   212,     0,     0,     0,
+       0,   213,     0,     0,     0,   214,     0,     0,     0,   215,
+       0,   216,     0,     0,     0,   217,     0,   218,   219,     0,
+       0,   220,   221,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   222,     0,   223,     0,   224,   225,   226,
+     227,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     228,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   229,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   230,   231,     0,   232,     0,     0,     0,
+       0,     0,     0,     0,   233,   234,   235,   236,     0,   237,
+       0,     0,     0,     0,     0,     0,   238,   239,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   240,     0,   241,     0,     0,   242,     0,     0,
+     243,     0,   244,     0,   245,   246,   247,     0,     0,     0,
+       0,  1269,    86,    87,    88,    89,    90,     0,     0,     0,
+       0,     0,     0,     0,   248,     0,     0,     0,     0,     0,
+      91,     0,     0,    92,    93,    94,     0,    95,    96,    97,
+       0,     0,     0,    98,     0,    99,     0,   100,   101,   102,
+     103,     0,     0,   104,     0,     0,   105,     0,     0,   106,
+       0,     0,   107,     0,   108,     0,   109,   110,   111,   112,
+     113,   114,     0,     0,   115,   116,   117,     0,   118,     0,
+     119,   120,     0,     0,     0,   121,   122,   123,     0,     0,
+       0,     0,   124,   125,   126,   127,     0,   128,   129,   130,
+       0,     0,   131,     0,     0,   132,   133,     0,   134,     0,
+       0,   135,     0,     0,     0,   136,     0,     0,   137,     0,
+       0,   138,   139,     0,   140,   141,     0,     0,   142,   143,
+       0,   144,   145,   146,   147,     0,     0,     0,     0,   148,
+       0,   149,     0,   150,     0,     0,     0,   151,     0,     0,
+     152,   153,     0,     0,   154,     0,     0,     0,   155,     0,
+       0,   156,   157,     0,     0,     0,     0,     0,   158,     0,
+       0,     0,   159,     0,   160,     0,     0,     0,   161,   162,
+     163,   164,   165,   166,   167,   168,   169,   170,     0,   171,
+     172,   173,   174,   175,   176,   177,   178,   179,   180,     0,
+     181,   182,     0,   183,     0,     0,   184,     0,   185,     0,
+       0,     0,     0,     0,     0,     0,   186,   187,     0,     0,
+       0,   188,   189,   190,   191,   192,   193,   194,   195,     0,
+       0,     0,     0,   196,     0,   197,     0,   198,   199,     0,
+       0,   200,   201,   202,     0,   203,   204,   205,     0,     0,
+     206,     0,   207,     0,     0,     0,   208,     0,     0,     0,
+       0,   209,   210,     0,     0,     0,     0,     0,     0,   211,
+     212,     0,     0,     0,     0,   213,     0,     0,     0,   214,
+       0,     0,     0,   215,     0,   216,     0,     0,     0,   217,
+       0,   218,   219,     0,     0,   220,   221,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   222,     0,   223,
+       0,   224,   225,   226,   227,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   228,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     229,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   230,   231,     0,
+     232,     0,     0,     0,     0,     0,     0,     0,   233,   234,
+     235,   236,     0,   237,     0,     0,     0,     0,     0,     0,
+     238,   239,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   240,     0,   241,     0,
+       0,   242,     0,     0,   243,     0,   244,     0,   245,   246,
+     247,    86,    87,    88,    89,    90,     0,     0,     0,     0,
+       0,  1637,     0,     0,     0,     0,     0,     0,  1638,    91,
+       0,     0,    92,    93,    94,     0,    95,    96,    97,     0,
+       0,     0,    98,     0,    99,     0,   100,   101,   102,   103,
+       0,     0,   104,     0,     0,   105,     0,     0,   106,     0,
+       0,   107,     0,   108,     0,   109,   110,   111,   112,   113,
+     114,     0,     0,   115,   116,   117,     0,   118,     0,   119,
+     120,     0,     0,     0,   121,   122,   123,     0,     0,     0,
+       0,   124,   125,   126,   127,     0,   128,   129,   130,     0,
+       0,   131,     0,     0,   132,   133,     0,   134,     0,     0,
+     135,     0,     0,     0,   136,     0,     0,   137,     0,     0,
+     138,   139,     0,   140,   141,     0,     0,   142,   143,     0,
+     144,   145,   146,   147,     0,     0,     0,     0,   148,     0,
+     149,     0,   150,     0,     0,     0,   151,     0,     0,   152,
+     153,     0,     0,   154,     0,     0,     0,   155,     0,     0,
+     156,   157,     0,     0,     0,     0,     0,   158,     0,     0,
+       0,   159,     0,   160,     0,     0,     0,   161,   162,   163,
+     164,   165,   166,   167,   168,   169,   170,     0,   171,   172,
+     173,   174,   175,   176,   177,   178,   179,   180,     0,   181,
+     182,     0,   183,     0,     0,   184,     0,   185,     0,     0,
+       0,     0,     0,     0,     0,   186,   187,     0,     0,     0,
+     188,   189,   190,   191,   192,   193,   194,   195,     0,     0,
+       0,     0,   196,     0,   197,     0,   198,   199,     0,     0,
+     200,   201,   202,     0,   203,   204,   205,     0,     0,   206,
+       0,   207,     0,     0,     0,   208,     0,     0,     0,     0,
+     209,   210,     0,     0,     0,     0,     0,     0,   211,   212,
+       0,     0,     0,     0,   213,     0,     0,     0,   214,     0,
+       0,     0,   215,     0,   216,     0,     0,     0,   217,     0,
+     218,   219,     0,     0,   220,   221,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   222,     0,   223,     0,
+     224,   225,   226,   227,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   228,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   229,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   230,   231,     0,   232,
+       0,     0,     0,     0,     0,     0,     0,   233,   234,   235,
+     236,     0,   237,     0,     0,     0,     0,     0,     0,   238,
+     239,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   240,     0,   241,     0,     0,
+     242,     0,     0,   243,     0,   244,     0,   245,   246,   247,
+      86,    87,    88,    89,    90,     0,     0,     0,     0,     0,
+       0,  2476,     0,     0,     0,     0,     0,   378,    91,     0,
+       0,    92,    93,    94,     0,    95,    96,    97,     0,     0,
+       0,    98,     0,    99,     0,   100,   101,   102,   103,     0,
+       0,   104,     0,     0,   105,     0,     0,   106,     0,     0,
+     107,     0,   108,     0,   109,   110,   111,   112,   113,   114,
+       0,     0,   115,   116,   117,     0,   118,     0,   119,   120,
+       0,     0,     0,   121,   122,   123,     0,     0,     0,     0,
+     124,   125,   126,   127,     0,   128,   129,   130,     0,     0,
+     131,     0,     0,   132,   133,     0,   134,     0,     0,   135,
+       0,     0,     0,   136,     0,     0,   137,     0,     0,   138,
+     139,     0,   140,   141,     0,     0,   142,   143,     0,   144,
+     145,   146,   147,     0,     0,     0,     0,   148,     0,   149,
+       0,   150,     0,     0,     0,   151,     0,     0,   152,   153,
+       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
+     157,     0,     0,     0,     0,     0,   158,     0,     0,     0,
+     159,     0,   160,     0,     0,     0,   161,   162,   163,   164,
+     165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
+     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
+       0,   183,     0,     0,   184,     0,   185,     0,     0,     0,
+       0,     0,     0,     0,   186,   187,     0,     0,     0,   188,
+     189,   190,   191,   192,   193,   194,   195,     0,     0,     0,
+       0,   196,     0,   197,     0,   198,   199,     0,     0,   200,
+     201,   202,     0,   203,   204,   205,     0,     0,   206,     0,
+     207,     0,     0,     0,   208,     0,     0,     0,     0,   209,
+     210,     0,     0,     0,     0,     0,     0,   211,   212,     0,
+       0,     0,     0,   213,     0,     0,     0,   214,     0,     0,
+       0,   215,     0,   216,     0,     0,     0,   217,     0,   218,
+     219,     0,     0,   220,   221,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   222,     0,   223,     0,   224,
+     225,   226,   227,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   228,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   229,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   230,   231,     0,   232,     0,
+       0,     0,     0,     0,     0,     0,   233,   234,   235,   236,
+       0,   237,     0,     0,     0,     0,     0,     0,   238,   239,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   240,     0,   241,     0,     0,   242,
+       0,     0,   243,     0,   244,     0,   245,   246,   247,    86,
+      87,    88,    89,    90,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   248,    91,     0,     0,
+      92,    93,    94,     0,    95,    96,    97,     0,     0,     0,
+      98,     0,    99,     0,   100,   101,   102,   103,     0,     0,
+     104,     0,     0,   105,     0,     0,   106,     0,     0,   107,
+       0,   108,     0,   109,   110,   111,   112,   113,   114,     0,
+       0,   115,   116,   117,     0,   118,     0,   119,   120,     0,
+       0,     0,   121,   122,   123,     0,     0,     0,     0,   124,
+     125,   126,   127,     0,   128,   129,   130,     0,     0,   131,
+       0,     0,   132,   133,     0,   134,     0,     0,   135,     0,
+       0,     0,   136,     0,     0,   137,     0,     0,   138,   139,
+       0,   140,   141,     0,     0,   142,   143,     0,   144,   145,
+     146,   147,     0,     0,     0,     0,   148,     0,   149,     0,
+     150,     0,     0,     0,   151,     0,     0,   152,   153,     0,
+       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
+       0,     0,     0,     0,     0,   158,     0,     0,     0,   159,
+       0,   160,     0,     0,     0,   161,   162,   163,   164,   165,
+     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
+     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
+     183,     0,     0,   184,     0,   185,     0,     0,     0,     0,
+       0,     0,     0,   186,   187,     0,     0,     0,   188,   189,
+     190,   191,   192,   193,   194,   195,     0,     0,     0,     0,
+     196,     0,   197,     0,   198,   199,     0,     0,   200,   201,
+     202,     0,   203,   204,   205,     0,     0,   206,     0,   207,
+       0,     0,     0,   208,     0,     0,     0,     0,   209,   210,
+       0,     0,     0,     0,     0,     0,   211,   212,     0,     0,
+       0,     0,   213,     0,     0,     0,   214,     0,     0,     0,
+     215,     0,   216,     0,     0,     0,   217,     0,   218,   219,
+       0,     0,   220,   221,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   222,     0,   223,     0,   224,   225,
+     226,   227,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   228,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   229,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   230,   231,     0,   232,     0,     0,
+       0,     0,     0,     0,     0,   233,   234,   235,   236,     0,
+     237,     0,     0,     0,     0,     0,     0,   238,   239,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   240,     0,   241,     0,     0,   242,     0,
+       0,   243,     0,   244,     0,   245,   246,   247,    86,    87,
+      88,    89,    90,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   378,    91,     0,     0,    92,
+      93,    94,     0,    95,    96,    97,     0,     0,     0,    98,
+       0,    99,     0,   100,   101,   102,   103,     0,     0,   104,
+       0,     0,   105,     0,     0,   106,     0,     0,   107,     0,
+     108,     0,   109,   110,   111,   112,   113,   114,     0,     0,
+     115,   116,   117,     0,   118,     0,   119,   120,     0,     0,
+       0,   121,   122,   123,     0,     0,     0,     0,   124,   125,
+     126,   127,     0,   128,   129,   130,     0,     0,   131,     0,
+       0,   132,   133,     0,   134,     0,     0,   135,     0,     0,
+       0,   136,     0,     0,   137,     0,     0,   138,   139,     0,
+     140,   141,     0,     0,   142,   143,     0,   144,   145,   146,
+     147,     0,     0,     0,     0,   148,     0,   149,     0,   150,
+       0,     0,     0,   151,     0,     0,   152,   153,     0,     0,
+     154,     0,     0,     0,   155,     0,     0,   156,   157,     0,
+       0,     0,     0,     0,   158,     0,     0,     0,   159,     0,
+     160,     0,     0,     0,   161,   162,   163,   164,   165,   166,
+     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
+     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
+       0,     0,   184,     0,   185,     0,     0,     0,     0,     0,
+       0,     0,   186,   187,     0,     0,     0,   188,   189,   190,
+     191,   192,   193,   194,   195,     0,     0,     0,     0,   196,
+       0,   197,     0,   198,   199,     0,     0,   200,   201,   202,
+       0,   203,   204,   205,     0,     0,   206,     0,   207,     0,
+       0,     0,   208,     0,     0,     0,     0,   209,   210,     0,
+       0,     0,     0,     0,     0,   211,   212,     0,     0,     0,
+       0,   213,     0,     0,     0,   214,     0,     0,     0,   215,
+       0,   216,     0,     0,     0,   217,     0,   218,   219,     0,
+       0,   220,   221,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   222,     0,   223,     0,   224,   225,   226,
+     227,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     228,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   229,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   230,   231,     0,   232,     0,     0,     0,
+       0,     0,     0,     0,   233,   234,   235,   236,     0,   237,
+       0,     0,     0,     0,     0,     0,   238,   239,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   240,     0,   241,     0,     0,   242,     0,     0,
+     243,     0,   244,     0,   245,   246,   247,    86,    87,    88,
+      89,    90,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,  1638,    91,     0,     0,    92,    93,
+      94,     0,    95,    96,    97,     0,     0,     0,    98,     0,
+      99,     0,   100,   101,   102,   103,     0,     0,   104,     0,
+       0,   105,     0,     0,   106,     0,     0,   107,     0,   108,
+       0,   109,   110,   111,   112,   113,   114,     0,     0,   115,
+     116,   117,     0,   118,     0,   119,   120,     0,     0,     0,
+     121,   122,   123,     0,     0,     0,     0,   124,   125,   126,
+     127,     0,   128,   129,   130,     0,     0,   131,     0,     0,
+     132,   133,     0,   134,     0,     0,   135,     0,     0,     0,
+     136,     0,     0,   137,     0,     0,   138,   139,     0,   140,
+     141,     0,     0,   142,   143,     0,   144,   145,   146,   147,
+       0,     0,     0,     0,   148,     0,   149,     0,   150,     0,
+       0,     0,   151,     0,     0,   152,   153,     0,     0,   154,
+       0,     0,     0,   155,     0,     0,   156,   157,     0,     0,
+       0,     0,     0,   158,   570,     0,     0,   159,     0,   160,
+       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
+     168,   169,   170,     0,   171,   172,   173,   174,   175,   176,
+     177,   178,   179,   180,     0,   181,   182,     0,   183,     0,
+       0,   184,     0,   185,     0,     0,     0,     0,     0,     0,
+       0,   186,   187,     0,     0,     0,   188,   189,   190,   191,
+     192,   193,   194,   195,     0,     0,     0,     0,   196,     0,
+     197,     0,   198,   199,     0,     0,   200,   201,   202,     0,
+     203,   204,   205,     0,     0,   206,     0,   207,     0,     0,
+       0,   208,     0,   571,     0,     0,   209,   210,     0,     0,
+       0,     0,     0,     0,   211,   212,     0,     0,     0,     0,
+     213,     0,     0,     0,   214,     0,     0,     0,   215,     0,
+     216,     0,     0,     0,   217,     0,   218,   219,     0,     0,
+     220,   221,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   222,     0,   223,     0,   224,   225,   226,   227,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   228,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   229,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   230,   231,     0,   232,     0,     0,     0,     0,
+       0,     0,     0,   233,   234,   235,   236,     0,   237,     0,
+       0,     0,     0,     0,     0,   238,   239,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   240,     0,   241,     0,     0,   242,     0,     0,   243,
+       0,   244,     0,   245,   246,   247,    86,    87,    88,    89,
+      90,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   572,     0,    91,     0,     0,    92,    93,    94,
+       0,    95,    96,    97,     0,     0,     0,    98,     0,    99,
+       0,   100,   101,   102,   103,     0,     0,   104,     0,     0,
+     105,     0,     0,   106,     0,     0,   107,     0,   108,     0,
+     109,   110,   111,   112,   113,   114,     0,     0,   115,   116,
+     117,     0,   118,     0,   119,   120,     0,     0,     0,   121,
+     122,   123,     0,     0,     0,     0,   124,   125,   126,   127,
+       0,   128,   129,   130,     0,     0,   131,     0,     0,   132,
+     133,     0,   134,     0,     0,   135,     0,     0,     0,   136,
+       0,     0,   137,     0,     0,   138,   139,     0,   140,   141,
+       0,     0,   142,   143,     0,   144,   145,   146,   147,     0,
+       0,     0,     0,   148,     0,   149,     0,   150,     0,     0,
+       0,   151,     0,     0,   152,   153,     0,     0,   154,     0,
+       0,     0,   155,     0,     0,   156,   157,     0,     0,     0,
+       0,     0,   158,   570,     0,     0,   159,     0,   160,     0,
+       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
+     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
+     178,   179,   180,     0,   181,   182,     0,   183,     0,     0,
+     184,     0,   185,     0,     0,     0,     0,     0,     0,     0,
+     186,   187,     0,     0,     0,   188,   189,   190,   191,   192,
+     193,   194,   195,     0,     0,     0,     0,   196,     0,   197,
+       0,   198,   199,     0,     0,   200,   201,   202,     0,   203,
+     204,   205,     0,     0,   206,     0,   207,     0,     0,     0,
+     208,     0,   571,     0,     0,   209,   210,     0,     0,     0,
+       0,     0,     0,   211,   212,     0,     0,     0,     0,   213,
+       0,     0,     0,   214,     0,     0,     0,   215,     0,   216,
+       0,     0,     0,   217,     0,   218,   219,     0,     0,   220,
+     221,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   222,     0,   223,     0,   224,   225,   226,   227,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   228,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   229,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   230,   231,     0,   232,     0,     0,     0,     0,     0,
+       0,     0,   233,   234,   235,   236,     0,   237,     0,     0,
+       0,     0,     0,     0,   238,   239,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     240,     0,   241,     0,     0,   242,     0,     0,   243,     0,
+     244,     0,   245,   246,   247,    86,    87,    88,    89,    90,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,  1572,     0,    91,     0,     0,    92,    93,    94,     0,
+      95,    96,    97,     0,     0,     0,    98,     0,    99,     0,
+     100,   101,   102,   103,     0,     0,   104,     0,     0,   105,
+       0,     0,   106,     0,     0,   107,     0,   108,     0,   109,
+     110,   111,   112,   113,   114,     0,     0,   115,   116,   117,
+       0,   118,     0,   119,   120,     0,     0,     0,   121,   122,
+     123,     0,     0,     0,     0,   124,   125,   126,   127,     0,
+     128,   129,   130,     0,     0,   131,     0,     0,   132,   133,
+       0,   134,     0,     0,   135,     0,     0,     0,   136,     0,
+       0,   137,     0,     0,   138,   139,     0,   140,   141,     0,
+       0,   142,   143,     0,   144,   145,   146,   147,     0,     0,
+       0,     0,   148,     0,   149,     0,   150,     0,     0,     0,
+     151,     0,     0,   152,   153,     0,     0,   154,     0,     0,
+       0,   155,     0,     0,   156,   157,     0,     0,     0,     0,
+       0,   158,     0,     0,     0,   159,     0,   160,     0,     0,
+       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
+     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
+     179,   180,     0,   181,   182,     0,   183,     0,     0,   184,
+       0,   185,     0,     0,     0,     0,     0,     0,     0,   186,
+     187,     0,     0,     0,   188,   189,   190,   191,   192,   193,
+     194,   195,     0,     0,     0,     0,   196,     0,   197,     0,
+     198,   199,     0,     0,   200,   201,   202,     0,   203,   204,
+     205,     0,     0,   206,     0,   207,     0,     0,     0,   208,
+       0,     0,     0,     0,  1279,   210,     0,     0,     0,     0,
+       0,     0,   211,   212,     0,     0,     0,     0,   213,     0,
+       0,     0,   214,     0,     0,     0,   215,     0,   216,     0,
+       0,  1280,   217,     0,   218,   219,     0,     0,   220,   221,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     222,     0,   223,     0,   224,   225,   226,   227,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   228,   576,   577,
+     578,   579,   580,   581,   582,   583,   584,   585,     0,     0,
+       0,     0,     0,   229,   576,   577,   578,   579,   580,   581,
+     582,   583,   584,   585,     0,     0,     0,     0,     0,     0,
+     230,   231,     0,   232,     0,     0,     0,     0,     0,     0,
+       0,   233,   234,   235,   236,     0,  1281,     0,     0,     0,
+       0,     0,     0,   238,   239,     0,     0,   576,   577,   578,
+     579,   580,   581,   582,   583,   584,   585,     0,     0,   240,
+     586,   241,     0,     0,   242,     0,     0,   243,     0,   244,
+       0,   245,   246,   247,     0,     0,   586,     0,     0,     0,
+     576,   577,   578,   579,   580,   581,   582,   583,   584,   585,
+    1282,     0,     0,     0,     0,     0,   576,   577,   578,   579,
+     580,   581,   582,   583,   584,   585,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   586,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   587,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   588,     0,     0,     0,     0,     0,   587,     0,     0,
+       0,     0,   586,     0,     0,     0,     0,   588,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   586,     0,
+       0,     0,     0,   589,     0,     0,     0,     0,     0,     0,
+       0,     0,   590,   591,     0,     0,     0,     0,     0,   589,
+     587,     0,     0,     0,     0,     0,     0,     0,   590,   591,
+     588,     0,     0,   592,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   592,
+       0,     0,     0,   587,     0,     0,     0,     0,     0,     0,
+       0,     0,   589,   588,     0,     0,     0,     0,     0,   587,
+       0,   590,   591,     0,     0,     0,     0,     0,     0,   588,
+       0,     0,     0,     0,     0,   593,     0,     0,     0,     0,
+       0,     0,   592,     0,     0,   589,     0,     0,     0,     0,
+       0,   593,     0,     0,   590,   591,     0,     0,     0,     0,
+       0,   589,     0,     0,     0,     0,     0,     0,     0,     0,
+     590,   591,     0,     0,     0,   592,     0,   594,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   592,     0,   594,   593,     0,     0,     0,   576,   577,
+     578,   579,   580,   581,   582,   583,   584,   585,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   593,     0,     0,
+       0,     0,     0,     0,     0,     0,   594,     0,     0,     0,
+       0,     0,     0,   593,   576,   577,   578,   579,   580,   581,
+     582,   583,   584,   585,     0,     0,     0,     0,     0,     0,
+       0,     0,   595,   596,   597,   598,   599,   600,   601,   594,
+     586,   602,     0,  1053,  1054,     0,     0,     0,   595,   596,
+     597,   598,   599,   600,   601,   594,     0,   602,     0,  1065,
+    1066,     0,     0,     0,     0,     0,     0,   576,   577,   578,
+     579,   580,   581,   582,   583,   584,   585,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   586,     0,     0,     0,
+       0,   595,   596,   597,   598,   599,   600,   601,     0,     0,
+     602,     0,  1077,  1078,     0,     0,     0,     0,     0,     0,
+       0,   587,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   588,     0,     0,   595,   596,   597,   598,   599,   600,
+     601,     0,     0,   602,     0,  1079,  1080,     0,     0,   586,
+     595,   596,   597,   598,   599,   600,   601,     0,     0,   602,
+       0,  1083,  1084,   589,     0,     0,     0,   587,     0,     0,
+       0,     0,   590,   591,     0,     0,     0,   588,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   592,   576,   577,   578,   579,   580,   581,
+     582,   583,   584,   585,     0,     0,     0,     0,     0,   589,
+       0,     0,     0,     0,     0,     0,     0,     0,   590,   591,
+     587,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     588,     0,     0,     0,     0,     0,     0,     0,     0,   592,
+       0,     0,     0,     0,     0,   593,     0,   576,   577,   578,
+     579,   580,   581,   582,   583,   584,   585,     0,     0,     0,
+       0,     0,   589,     0,     0,     0,   586,     0,     0,     0,
+       0,   590,   591,   576,   577,   578,   579,   580,   581,   582,
+     583,   584,   585,     0,     0,     0,     0,   594,     0,     0,
+       0,   593,   592,     0,     0,     0,   576,   577,   578,   579,
+     580,   581,   582,   583,   584,   585,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,  1138,     0,     0,     0,   586,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   594,     0,     0,     0,   587,     0,     0,
+       0,     0,     0,     0,   593,   586,     0,   588,     0,     0,
+       0,     0,     0,   576,   577,   578,   579,   580,   581,   582,
+     583,   584,   585,     0,     0,     0,     0,     0,   586,     0,
+       0,     0,   595,   596,   597,   598,   599,   600,   601,   589,
+       0,   602,     0,  1089,  1090,     0,   594,     0,   590,   591,
+     587,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     588,     0,     0,     0,     0,     0,     0,     0,     0,   592,
+       0,     0,     0,     0,     0,     0,   587,     0,   595,   596,
+     597,   598,   599,   600,   601,   586,   588,   602,     0,   856,
+    1094,     0,   589,     0,     0,     0,     0,     0,     0,   587,
+       0,   590,   591,     0,     0,     0,     0,     0,     0,   588,
+       0,     0,     0,     0,     0,     0,     0,     0,   589,     0,
+       0,   593,   592,     0,     0,     0,     0,   590,   591,     0,
+       0,   595,   596,   597,   598,   599,   600,   601,     0,     0,
+     602,   589,  1135,  1136,     0,     0,     0,     0,   592,     0,
+     590,   591,     0,     0,     0,     0,   587,     0,     0,     0,
+       0,     0,     0,   594,     0,     0,   588,     0,     0,     0,
+       0,   592,     0,     0,   593,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   589,     0,
+     593,     0,     0,     0,     0,     0,     0,   590,   591,     0,
+       0,     0,     0,     0,     0,     0,   594,     0,     0,     0,
+       0,     0,     0,   593,     0,     0,     0,     0,   592,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   594,     0,     0,     0,     0,     0,   595,   596,
+     597,   598,   599,   600,   601,     0,     0,   602,     0,     0,
+    1139,     0,     0,     0,     0,   594,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     593,     0,     0,     0,     0,   576,   577,   578,   579,   580,
+     581,   582,   583,   584,   585,     0,     0,     0,     0,     0,
+       0,   595,   596,   597,   598,   599,   600,   601,     0,     0,
+     602,     0,  1155,  1156,     0,     0,     0,     0,     0,     0,
+       0,     0,   594,     0,     0,     0,     0,   595,   596,   597,
+     598,   599,   600,   601,     0,     0,   602,     0,  1158,  1159,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     595,   596,   597,   598,   599,   600,   601,   586,     0,   602,
+       0,  1715,  1716,   576,   577,   578,   579,   580,   581,   582,
+     583,   584,   585,     0,     0,     0,     0,   576,   577,   578,
+     579,   580,   581,   582,   583,   584,   585,     0,     0,     0,
+     576,   577,   578,   579,   580,   581,   582,   583,   584,   585,
+       0,     0,     0,     0,     0,     0,     0,   595,   596,   597,
+     598,   599,   600,   601,     0,     0,   602,     0,  1718,  1719,
+       0,     0,     0,     0,   676,     0,     0,     0,   587,     0,
+       0,     0,     0,     0,   677,   586,     0,   678,   588,   679,
+       0,   680,     0,     0,     0,   681,     0,     0,     0,   586,
+     682,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     683,     0,   586,     0,     0,   684,   685,     0,     0,     0,
+     589,     0,     0,   686,     0,     0,     0,   687,     0,   590,
+     591,   688,   576,   577,   578,   579,   580,   581,   582,   583,
+     584,   585,     0,     0,     0,     0,     0,     0,     0,     0,
+     592,     0,     0,     0,     0,     0,   587,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   588,     0,     0,     0,
+     587,     0,     0,     0,     0,   689,     0,     0,     0,     0,
+     588,     0,     0,   587,     0,   690,     0,     0,     0,     0,
+       0,     0,     0,   588,     0,     0,   691,     0,   589,     0,
+       0,     0,   593,     0,   586,     0,     0,   590,   591,     0,
+       0,     0,   589,     0,     0,     0,     0,     0,     0,     0,
+       0,   590,   591,     0,     0,   589,     0,     0,   592,     0,
+       0,     0,     0,     0,   590,   591,     0,     0,     0,     0,
+       0,     0,   592,     0,   594,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   592,     0,     0,     0,     0,
+       0,     0,     0,     0,   692,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   693,   587,   694,     0,     0,     0,
+     593,     0,     0,     0,     0,   588,     0,     0,     0,     0,
+     695,     0,     0,     0,   593,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   593,     0,     0,
+       0,     0,     0,     0,     0,     0,   696,   589,     0,     0,
+       0,     0,   594,     0,     0,     0,   590,   591,     0,   595,
+     596,   597,   598,   599,   600,   601,   594,     0,   602,     0,
+    1734,  1735,     0,     0,     0,     0,     0,   592,     0,   594,
+       0,     0,     0,     0,     0,     0,   576,   577,   578,   579,
+     580,   581,   582,   583,   584,   585,     0,     0,     0,     0,
+     576,   577,   578,   579,   580,   581,   582,   583,   584,   585,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   593,
+       0,     0,     0,     0,     0,     0,     0,   595,   596,   597,
+     598,   599,   600,   601,     0,     0,   602,     0,  2094,  2095,
+       0,   595,   596,   597,   598,   599,   600,   601,   586,     0,
+     602,     0,  2332,  2333,   595,   596,   597,   598,   599,   600,
+     601,   594,   586,   602,     0,     0,  1047,     0,   576,   577,
+     578,   579,   580,   581,   582,   583,   584,   585,     0,     0,
+       0,     0,   576,   577,   578,   579,   580,   581,   582,   583,
+     584,   585,     0,     0,     0,   576,   577,   578,   579,   580,
+     581,   582,   583,   584,   585,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   587,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   588,
+       0,     0,     0,   587,     0,     0,     0,     0,     0,     0,
+     586,     0,     0,   588,     0,     0,   595,   596,   597,   598,
+     599,   600,   601,     0,   586,   602,     0,     0,  1050,     0,
+       0,   589,     0,     0,     0,     0,     0,   586,     0,     0,
+     590,   591,     0,     0,     0,   589,     0,     0,     0,     0,
+       0,     0,     0,     0,   590,   591,     0,     0,     0,     0,
+       0,   592,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   592,     0,     0,     0,     0,
+       0,   587,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   588,     0,     0,     0,   587,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   588,     0,     0,   587,     0,
+       0,     0,     0,   593,     0,     0,     0,     0,   588,     0,
+       0,     0,     0,   589,     0,     0,     0,   593,     0,     0,
+       0,     0,   590,   591,     0,     0,     0,   589,     0,     0,
+       0,     0,     0,     0,     0,     0,   590,   591,     0,     0,
+     589,     0,     0,   592,     0,   594,     0,     0,     0,   590,
+     591,     0,     0,     0,     0,     0,     0,   592,     0,   594,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     592,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   593,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   593,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   593,     0,     0,     0,     0,     0,     0,     0,
+     595,   596,   597,   598,   599,   600,   601,   594,     0,   602,
+       0,     0,  1051,     0,   595,   596,   597,   598,   599,   600,
+     601,   594,     0,   602,     0,     0,  1052,     0,     0,     0,
+       0,     0,     0,     0,   594,     0,     0,     0,     0,     0,
+       0,   576,   577,   578,   579,   580,   581,   582,   583,   584,
+     585,     0,     0,     0,   576,   577,   578,   579,   580,   581,
+     582,   583,   584,   585,     0,     0,     0,   576,   577,   578,
+     579,   580,   581,   582,   583,   584,   585,     0,     0,     0,
+     576,   577,   578,   579,   580,   581,   582,   583,   584,   585,
+       0,     0,   595,   596,   597,   598,   599,   600,   601,     0,
+       0,   602,     0,     0,  1059,     0,   595,   596,   597,   598,
+     599,   600,   601,   586,     0,   602,     0,     0,  1060,   595,
+     596,   597,   598,   599,   600,   601,   586,     0,   602,     0,
+       0,  1072,     0,     0,     0,     0,  1305,     0,     0,   586,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   586,     0,     0,     0,     0,     0,     0,   576,
+     577,   578,   579,   580,   581,   582,   583,   584,   585,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   587,     0,     0,     0,     0,     0,
+    1307,  1308,     0,     0,   588,     0,     0,   587,     0,     0,
+       0,     0,     0,  1309,  1310,     0,     0,   588,     0,     0,
+     587,     0,     0,  1311,     0,     0,  1312,   676,     0,     0,
+     588,     0,     0,   587,     0,     0,   589,   677,     0,     0,
+     678,   586,   679,   588,   680,   590,   591,     0,   681,   589,
+       0,     0,     0,   682,     0,     0,     0,     0,   590,   591,
+       0,  1315,   589,   683,     0,     0,   592,     0,   684,   685,
+       0,   590,   591,     0,     0,   589,   686,     0,     0,   592,
+     687,     0,     0,     0,   590,   591,     0,     0,     0,     0,
+       0,     0,   592,     0,     0,     0,     0,  1316,     0,     0,
+       0,     0,     0,     0,  1317,   592,     0,     0,     0,     0,
+       0,     0,   587,     0,     0,     0,     0,     0,   593,     0,
+       0,     0,   588,     0,     0,  1319,     0,     0,   689,     0,
+       0,   593,     0,     0,  1320,  1321,  1322,     0,   690,     0,
+       0,     0,     0,     0,   593,     0,     0,     0,     0,   691,
+    1324,     0,     0,     0,   589,     0,     0,   593,     0,     0,
+     594,     0,     0,   590,   591,     0,     0,     0,     0,     0,
+    1325,     0,     0,   594,     0,     0,     0,     0,     0,  1326,
+       0,     0,     0,     0,   592,     0,   594,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,  1327,     0,     0,   594,
+       0,     0,     0,     0,     0,     0,     0,   576,   577,   578,
+     579,   580,   581,   582,   583,   584,   585,   692,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   693,     0,   694,
+       0,     0,     0,     0,     0,     0,   593,     0,     0,     0,
+       0,     0,     0,   695,     0,   595,   596,   597,   598,   599,
+     600,   601,     0,     0,   602,     0,     0,  1074,   595,   596,
+     597,   598,   599,   600,   601,     0,     0,   602,  1328,   696,
+    1075,   595,   596,   597,   598,   599,   600,   601,   594,   586,
+     602,  1330,     0,  1076,   595,   596,   597,   598,   599,   600,
+     601,     0,     0,   602,     0,     0,  1081,     0,     0,   576,
+     577,   578,   579,   580,   581,   582,   583,   584,   585,     0,
+       0,     0,   576,   577,   578,   579,   580,   581,   582,   583,
+     584,   585,     0,     0,     0,   576,   577,   578,   579,   580,
+     581,   582,   583,   584,   585,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     587,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     588,     0,     0,   595,   596,   597,   598,   599,   600,   601,
+       0,   586,   602,     0,     0,  1082,     0,     0,     0,     0,
+       0,     0,     0,     0,   586,     0,     0,     0,     0,     0,
+       0,     0,   589,     0,     0,     0,     0,   586,     0,     0,
+       0,   590,   591,     0,   576,   577,   578,   579,   580,   581,
+     582,   583,   584,   585,     0,     0,     0,     0,     0,     0,
+       0,     0,   592,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   587,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   588,     0,     0,   587,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   588,     0,     0,   587,     0,
+       0,     0,     0,     0,   593,     0,   586,     0,   588,     0,
+       0,     0,     0,     0,   589,     0,     0,     0,     0,     0,
+       0,     0,     0,   590,   591,     0,     0,   589,     0,     0,
+       0,     0,     0,     0,     0,     0,   590,   591,     0,     0,
+     589,     0,     0,     0,   592,     0,   594,     0,     0,   590,
+     591,     0,     0,     0,     0,     0,     0,   592,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     592,     0,     0,     0,     0,     0,     0,   587,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   588,     0,     0,
+       0,     0,     0,     0,     0,     0,   593,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   593,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   589,
+       0,     0,   593,     0,     0,     0,     0,     0,   590,   591,
+       0,   595,   596,   597,   598,   599,   600,   601,   594,     0,
+     602,     0,     0,  1085,     0,     0,     0,     0,     0,   592,
+       0,   594,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   594,     0,     0,     0,     0,     0,
+       0,     0,   576,   577,   578,   579,   580,   581,   582,   583,
+     584,   585,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   593,     0,   576,   577,   578,   579,   580,   581,   582,
+     583,   584,   585,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   595,   596,   597,   598,   599,   600,   601,
+       0,     0,   602,     0,     0,  1087,   595,   596,   597,   598,
+     599,   600,   601,   594,   586,   602,     0,     0,  1088,   595,
+     596,   597,   598,   599,   600,   601,     0,     0,   602,     0,
+       0,  1093,     0,     0,   576,   577,   578,   579,   580,   581,
+     582,   583,   584,   585,     0,   586,     0,   576,   577,   578,
+     579,   580,   581,   582,   583,   584,   585,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   587,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   588,     0,     0,   595,   596,
+     597,   598,   599,   600,   601,     0,   586,   602,     0,     0,
+    1097,     0,     0,     0,     0,     0,   587,     0,     0,   586,
+       0,     0,     0,     0,     0,     0,   588,   589,     0,     0,
+       0,     0,     0,     0,     0,     0,   590,   591,     0,     0,
+     576,   577,   578,   579,   580,   581,   582,   583,   584,   585,
+       0,     0,     0,     0,     0,     0,     0,   592,   589,     0,
+       0,     0,     0,     0,     0,     0,     0,   590,   591,     0,
+       0,     0,     0,     0,     0,     0,     0,   587,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   588,   592,     0,
+     587,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     588,     0,     0,     0,     0,     0,     0,     0,     0,   593,
+       0,     0,   586,     0,     0,     0,     0,     0,     0,   589,
+       0,     0,     0,     0,     0,     0,     0,     0,   590,   591,
+       0,     0,   589,     0,     0,     0,     0,     0,     0,     0,
+     593,   590,   591,     0,     0,     0,     0,     0,     0,   592,
+       0,   594,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   592,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   594,   587,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   588,     0,     0,     0,     0,     0,     0,
+       0,   593,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   593,   576,   577,   578,   579,   580,
+     581,   582,   583,   584,   585,   589,     0,     0,     0,     0,
+       0,     0,     0,     0,   590,   591,   595,   596,   597,   598,
+     599,   600,   601,   594,     0,   602,     0,     0,  1098,     0,
+       0,     0,     0,     0,     0,   592,   594,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   595,   596,   597,
+     598,   599,   600,   601,     0,     0,   602,     0,     0,  1099,
+       0,     0,     0,     0,     0,     0,     0,   586,     0,   576,
+     577,   578,   579,   580,   581,   582,   583,   584,   585,     0,
+       0,     0,     0,     0,     0,     0,     0,   593,   576,   577,
+     578,   579,   580,   581,   582,   583,   584,   585,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   595,   596,
+     597,   598,   599,   600,   601,     0,     0,   602,     0,     0,
+    1100,   595,   596,   597,   598,   599,   600,   601,     0,   594,
+     602,     0,     0,  1133,     0,     0,     0,     0,   587,     0,
+       0,   586,     0,     0,     0,     0,     0,     0,   588,   576,
+     577,   578,   579,   580,   581,   582,   583,   584,   585,     0,
+     586,     0,   576,   577,   578,   579,   580,   581,   582,   583,
+     584,   585,     0,     0,     0,     0,     0,     0,     0,     0,
+     589,     0,     0,     0,     0,     0,     0,     0,     0,   590,
+     591,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     592,     0,   587,     0,   595,   596,   597,   598,   599,   600,
+     601,   586,   588,   602,     0,     0,  1134,     0,     0,     0,
+       0,   587,     0,     0,   586,     0,     0,     0,     0,     0,
+       0,   588,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   589,     0,     0,     0,     0,     0,
+       0,     0,   593,   590,   591,     0,     0,     0,     0,     0,
+       0,     0,     0,   589,     0,     0,     0,     0,     0,     0,
+       0,     0,   590,   591,   592,     0,     0,     0,     0,     0,
+       0,     0,   587,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   588,   592,   594,   587,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   588,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   589,     0,   593,     0,     0,     0,
+       0,     0,     0,   590,   591,     0,     0,   589,     0,     0,
+       0,     0,     0,     0,     0,   593,   590,   591,     0,     0,
+       0,     0,     0,     0,   592,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   592,   594,   576,
+     577,   578,   579,   580,   581,   582,   583,   584,   585,   595,
+     596,   597,   598,   599,   600,   601,     0,   594,   602,     0,
+       0,  1140,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   593,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   593,
+       0,     0,   576,   577,   578,   579,   580,   581,   582,   583,
+     584,   585,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   586,     0,     0,     0,     0,     0,     0,   594,     0,
+       0,     0,     0,   595,   596,   597,   598,   599,   600,   601,
+       0,   594,   602,     0,     0,  1676,     0,     0,     0,     0,
+       0,     0,   595,   596,   597,   598,   599,   600,   601,     0,
+       0,   602,     0,     0,  1690,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   586,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   587,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   588,   576,   577,   578,   579,   580,   581,   582,
+     583,   584,   585,   595,   596,   597,   598,   599,   600,   601,
+       0,     0,   602,     0,     0,  1706,   595,   596,   597,   598,
+     599,   600,   601,     0,   589,   602,     0,     0,  1712,     0,
+       0,     0,     0,   590,   591,   587,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   588,     0,     0,     0,     0,
+       0,     0,     0,     0,   592,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   586,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   589,     0,     0,
+       0,     0,     0,     0,     0,     0,   590,   591,   576,   577,
+     578,   579,   580,   581,   582,   583,   584,   585,     0,     0,
+       0,     0,     0,     0,     0,     0,   593,   592,     0,     0,
+       0,   576,   577,   578,   579,   580,   581,   582,   583,   584,
+     585,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   587,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   588,     0,   594,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   593,
+     586,     0,     0,     0,     0,     0,     0,     0,   576,   577,
+     578,   579,   580,   581,   582,   583,   584,   585,   589,     0,
+       0,     0,     0,   586,     0,     0,     0,   590,   591,     0,
+     576,   577,   578,   579,   580,   581,   582,   583,   584,   585,
+       0,   594,     0,     0,     0,     0,     0,     0,   592,  1145,
+       0,     0,     0,   576,   577,   578,   579,   580,   581,   582,
+     583,   584,   585,     0,     0,     0,     0,     0,     0,     0,
+       0,   587,     0,   595,   596,   597,   598,   599,   600,   601,
+     586,   588,   602,     0,     0,  1729,     0,     0,     0,     0,
+       0,     0,     0,     0,   587,     0,     0,     0,     0,     0,
+     593,     0,   586,     0,   588,     0,     0,     0,     0,     0,
+       0,     0,     0,   589,     0,     0,     0,     0,     0,     0,
+       0,     0,   590,   591,     0,   586,   595,   596,   597,   598,
+     599,   600,   601,     0,     0,   602,   589,     0,  1736,     0,
+       0,     0,   594,   592,     0,   590,   591,     0,     0,     0,
+       0,   587,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   588,     0,     0,     0,     0,   592,     0,     0,     0,
+       0,     0,     0,   587,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   588,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   589,     0,   593,   587,     0,     0,     0,
+       0,     0,   590,   591,     0,     0,   588,     0,     0,     0,
+       0,     0,     0,     0,     0,   589,     0,     0,   593,     0,
+       0,     0,     0,   592,   590,   591,     0,   595,   596,   597,
+     598,   599,   600,   601,     0,     0,   602,   594,   589,  2088,
+       0,     0,     0,     0,     0,   592,     0,   590,   591,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     594,     0,     0,     0,     0,     0,     0,     0,   592,     0,
+       0,     0,     0,     0,     0,   593,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,  1732,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   593,     0,     0,
+       0,   576,   577,   578,   579,   580,   581,   582,   583,   584,
+     585,     0,     0,     0,     0,     0,     0,   594,     0,     0,
+     593,     0,   595,   596,   597,   598,   599,   600,   601,     0,
+       0,   602,     0,  1146,     0,     0,     0,     0,     0,   594,
+       0,     0,     0,     0,     0,   595,   596,   597,   598,   599,
+     600,   601,     0,     0,   602,     0,  1733,     0,     0,     0,
+       0,     0,   594,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   586,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   576,   577,   578,   579,   580,
+     581,   582,   583,   584,   585,     0,     0,     0,     0,     0,
+       0,     0,   595,   596,   597,   598,   599,   600,   601,     0,
+       0,   602,     0,   856,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   595,   596,   597,   598,   599,   600,
+     601,     0,     0,   602,     0,  1058,     0,     0,     0,     0,
+       0,     0,     0,     0,   587,     0,     0,   595,   596,   597,
+     598,   599,   600,   601,   588,     0,   602,   586,  1073,   576,
+     577,   578,   579,   580,   581,   582,   583,   584,   585,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   589,     0,     0,     0,
+       0,     0,     0,     0,     0,   590,   591,   576,   577,   578,
+     579,   580,   581,   582,   583,   584,   585,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   592,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   587,     0,
+       0,   586,     0,     0,     0,     0,     0,     0,   588,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   593,   586,
+     589,     0,     0,     0,     0,     0,     0,     0,     0,   590,
+     591,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     592,     0,   587,     0,     0,     0,     0,     0,     0,     0,
+     594,     0,   588,   576,   577,   578,   579,   580,   581,   582,
+     583,   584,   585,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     587,     0,     0,     0,   589,     0,     0,     0,     0,     0,
+     588,     0,   593,   590,   591,     0,   576,   577,   578,   579,
+     580,   581,   582,   583,   584,   585,     0,     0,     0,     0,
+       0,     0,     0,     0,   592,     0,     0,     0,     0,     0,
+       0,     0,   589,     0,     0,   586,     0,     0,     0,     0,
+       0,   590,   591,     0,   594,   595,   596,   597,   598,   599,
+     600,   601,     0,     0,   602,     0,  1092,     0,     0,     0,
+       0,     0,   592,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   593,     0,   586,     0,
+     576,   577,   578,   579,   580,   581,   582,   583,   584,   585,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   587,     0,     0,     0,
+       0,     0,     0,     0,   593,     0,   588,     0,   594,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   595,
+     596,   597,   598,   599,   600,   601,     0,     0,   602,     0,
+    1096,     0,     0,     0,     0,     0,     0,     0,   589,   587,
+       0,     0,   586,     0,     0,     0,   594,   590,   591,   588,
+     576,   577,   578,   579,   580,   581,   582,   583,   584,   585,
+       0,     0,     0,     0,     0,     0,     0,     0,   592,   576,
+     577,   578,   579,   580,   581,   582,   583,   584,   585,     0,
+       0,   589,     0,     0,     0,     0,     0,     0,     0,     0,
+     590,   591,     0,   595,   596,   597,   598,   599,   600,   601,
+       0,     0,   602,     0,  1101,     0,     0,     0,     0,     0,
+       0,   592,     0,   587,     0,     0,     0,     0,     0,     0,
+     593,     0,   586,   588,     0,     0,     0,     0,     0,     0,
+       0,   595,   596,   597,   598,   599,   600,   601,     0,     0,
+     602,   586,  1102,     0,     0,   576,   577,   578,   579,   580,
+     581,   582,   583,   584,   585,   589,     0,     0,     0,     0,
+       0,     0,   594,   593,   590,   591,     0,   576,   577,   578,
+     579,   580,   581,   582,   583,   584,   585,     0,     0,     0,
+       0,     0,     0,     0,     0,   592,     0,     0,     0,     0,
+       0,     0,     0,   587,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   588,     0,   594,     0,     0,     0,     0,
+       0,     0,   587,     0,     0,     0,     0,   586,     0,     0,
+       0,     0,   588,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   589,     0,   593,     0,   586,
+       0,     0,     0,     0,   590,   591,     0,   595,   596,   597,
+     598,   599,   600,   601,   589,     0,   602,     0,  1103,     0,
+       0,     0,     0,   590,   591,   592,   576,   577,   578,   579,
+     580,   581,   582,   583,   584,   585,     0,     0,     0,   594,
+       0,     0,     0,     0,   592,     0,     0,     0,   587,     0,
+     595,   596,   597,   598,   599,   600,   601,     0,   588,   602,
+       0,  1104,     0,     0,     0,     0,     0,     0,     0,     0,
+     587,     0,     0,     0,     0,     0,     0,   593,     0,     0,
+     588,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     589,     0,     0,     0,     0,     0,   593,     0,   586,   590,
+     591,   576,   577,   578,   579,   580,   581,   582,   583,   584,
+     585,     0,   589,     0,     0,     0,     0,     0,     0,   594,
+     592,   590,   591,     0,   595,   596,   597,   598,   599,   600,
+     601,     0,     0,   602,     0,  1132,     0,     0,   594,     0,
+       0,     0,   592,     0,   576,   577,   578,   579,   580,   581,
+     582,   583,   584,   585,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   587,
+       0,     0,   593,   586,     0,     0,     0,     0,     0,   588,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   593,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   595,   596,   597,   598,   599,   600,
+     601,   589,     0,   602,   594,  1137,   586,     0,     0,     0,
+     590,   591,     0,   595,   596,   597,   598,   599,   600,   601,
+       0,     0,   602,     0,  1154,     0,   594,     0,     0,     0,
+       0,   592,     0,     0,  1687,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   588,     0,   576,   577,   578,   579,
+     580,   581,   582,   583,   584,   585,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   589,   587,     0,     0,
+       0,     0,     0,   593,     0,   590,   591,   588,     0,   595,
+     596,   597,   598,   599,   600,   601,     0,     0,   602,     0,
+    1157,     0,     0,     0,     0,     0,   592,     0,     0,     0,
+       0,   595,   596,   597,   598,   599,   600,   601,   586,   589,
+     602,     0,  1678,     0,     0,   594,     0,     0,   590,   591,
+     576,   577,   578,   579,   580,   581,   582,   583,   584,   585,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   592,
+       0,     0,     0,     0,     0,     0,     0,     0,   593,     0,
+       0,     0,     0,   576,   577,   578,   579,   580,   581,   582,
+     583,   584,   585,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   587,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   588,
+     594,   593,   586,     0,     0,     0,     0,     0,     0,     0,
+     595,   596,   597,   598,   599,   600,   601,     0,     0,   602,
+       0,  1686,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   589,     0,     0,     0,   586,     0,     0,     0,     0,
+     590,   591,     0,   594,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   592,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   587,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   588,     0,   595,   596,   597,   598,   599,
+     600,   601,     0,     0,   602,     0,  1688,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   587,     0,     0,     0,
+       0,     0,     0,   593,     0,   589,   588,     0,     0,     0,
+       0,     0,     0,     0,   590,   591,     0,     0,   595,   596,
+     597,   598,   599,   600,   601,     0,     0,   602,     0,  1689,
+       0,     0,     0,     0,     0,   592,     0,     0,   589,     0,
+       0,     0,     0,     0,     0,   594,     0,   590,   591,   576,
+     577,   578,   579,   580,   581,   582,   583,   584,   585,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   592,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   593,   576,   577,
+     578,   579,   580,   581,   582,   583,   584,   585,     0,     0,
+       0,     0,   576,   577,   578,   579,   580,   581,   582,   583,
+     584,   585,     0,     0,     0,     0,     0,     0,     0,     0,
+     593,   586,     0,     0,     0,     0,     0,     0,     0,   594,
+     595,   596,   597,   598,   599,   600,   601,     0,     0,   602,
+       0,  1692,     0,     0,     0,     0,     0,     0,     0,   576,
+     577,   578,   579,   580,   581,   582,   583,   584,   585,     0,
+     586,     0,   594,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   586,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   587,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   588,     0,   576,   577,   578,   579,   580,   581,
+     582,   583,   584,   585,   595,   596,   597,   598,   599,   600,
+     601,   586,     0,   602,     0,  1701,     0,     0,     0,     0,
+       0,   587,     0,     0,   589,     0,     0,     0,     0,     0,
+       0,   588,     0,   590,   591,   587,     0,   595,   596,   597,
+     598,   599,   600,   601,     0,   588,   602,     0,  1702,     0,
+       0,     0,     0,     0,   592,     0,     0,     0,     0,     0,
+       0,     0,     0,   589,     0,     0,   586,     0,     0,     0,
+       0,     0,   590,   591,     0,     0,     0,   589,     0,     0,
+       0,     0,   587,     0,     0,     0,   590,   591,     0,     0,
+       0,     0,   588,   592,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   593,   592,     0,     0,
+       0,   576,   577,   578,   579,   580,   581,   582,   583,   584,
+     585,     0,     0,     0,   589,     0,     0,     0,     0,     0,
+       0,     0,     0,   590,   591,     0,     0,   587,     0,     0,
+       0,     0,     0,     0,     0,   593,     0,   588,   594,     0,
+       0,     0,     0,     0,   592,     0,     0,     0,     0,   593,
+       0,     0,     0,     0,     0,     0,     0,     0,   576,   577,
+     578,   579,   580,   581,   582,   583,   584,   585,     0,   589,
+       0,     0,     0,   586,     0,     0,     0,   594,   590,   591,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   594,     0,     0,     0,     0,   593,     0,     0,   592,
+       0,     0,     0,   576,   577,   578,   579,   580,   581,   582,
+     583,   584,   585,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   595,   596,   597,   598,   599,   600,   601,
+     586,     0,   602,     0,  1705,     0,     0,     0,   594,     0,
+       0,     0,     0,     0,   587,     0,     0,     0,     0,     0,
+       0,   593,     0,     0,   588,     0,     0,     0,     0,     0,
+       0,     0,   595,   596,   597,   598,   599,   600,   601,     0,
+       0,   602,     0,  1707,     0,   586,   595,   596,   597,   598,
+     599,   600,   601,     0,     0,   602,   589,  1710,     0,     0,
+       0,     0,     0,   594,     0,   590,   591,     0,     0,     0,
+       0,   587,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   588,     0,     0,     0,     0,   592,     0,     0,     0,
+       0,     0,     0,   595,   596,   597,   598,   599,   600,   601,
+       0,     0,   602,     0,  1714,     0,     0,     0,     0,     0,
+       0,     0,     0,   589,     0,     0,   587,     0,     0,     0,
+       0,     0,   590,   591,     0,     0,   588,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   593,     0,
+       0,     0,     0,   592,     0,     0,     0,     0,   595,   596,
+     597,   598,   599,   600,   601,     0,     0,   602,   589,  1721,
+       0,     0,     0,     0,     0,     0,     0,   590,   591,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     594,     0,     0,     0,     0,     0,     0,     0,   592,     0,
+       0,     0,     0,     0,     0,   593,     0,     0,     0,     0,
+     576,   577,   578,   579,   580,   581,   582,   583,   584,   585,
+       0,     0,   576,   577,   578,   579,   580,   581,   582,   583,
+     584,   585,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   594,     0,     0,
+     593,     0,     0,   576,   577,   578,   579,   580,   581,   582,
+     583,   584,   585,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   595,   596,   597,   598,   599,
+     600,   601,   586,     0,   602,     0,  1730,     0,     0,     0,
+       0,     0,   594,     0,   586,     0,     0,     0,     0,     0,
+       0,     0,   576,   577,   578,   579,   580,   581,   582,   583,
+     584,   585,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   586,     0,     0,     0,     0,
+       0,     0,   595,   596,   597,   598,   599,   600,   601,     0,
+       0,   602,     0,  1731,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   587,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   588,     0,   587,     0,     0,     0,     0,
+       0,     0,     0,     0,   586,   588,     0,   595,   596,   597,
+     598,   599,   600,   601,     0,     0,   602,     0,  1740,     0,
+       0,     0,     0,     0,     0,   589,   587,     0,     0,     0,
+       0,     0,     0,     0,   590,   591,   588,   589,     0,     0,
+       0,     0,     0,     0,     0,     0,   590,   591,     0,     0,
+       0,     0,     0,     0,     0,   592,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   592,   589,     0,
+       0,     0,     0,     0,     0,   587,     0,   590,   591,     0,
+       0,     0,     0,     0,     0,   588,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   592,     0,
+       0,     0,     0,     0,     0,     0,     0,   593,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   589,     0,   593,
+       0,     0,     0,     0,     0,     0,   590,   591,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   592,     0,   594,
+     593,   576,   577,   578,   579,   580,   581,   582,   583,   584,
+     585,   594,     0,     0,     0,     0,     0,     0,     0,     0,
+     576,   577,   578,   579,   580,   581,   582,   583,   584,   585,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   594,     0,     0,     0,     0,     0,     0,   593,
+       0,   576,   577,   578,   579,   580,   581,   582,   583,   584,
+     585,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   586,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   595,   596,   597,   598,   599,   600,
+     601,   594,   586,   602,     0,  1742,   595,   596,   597,   598,
+     599,   600,   601,     0,     0,   602,     0,  1743,     0,     0,
+       0,     0,   576,   577,   578,   579,   580,   581,   582,   583,
+     584,   585,     0,   586,     0,     0,     0,   595,   596,   597,
+     598,   599,   600,   601,     0,     0,   602,     0,  1744,     0,
+       0,     0,     0,     0,   587,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   588,     0,     0,     0,     0,     0,
+       0,     0,     0,   587,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   588,     0,     0,   595,   596,   597,   598,
+     599,   600,   601,     0,   586,   602,   589,  1944,     0,     0,
+       0,     0,     0,     0,   587,   590,   591,     0,     0,     0,
+       0,     0,     0,     0,   588,   589,     0,     0,     0,     0,
+       0,     0,     0,     0,   590,   591,   592,     0,   576,   577,
+     578,   579,   580,   581,   582,   583,   584,   585,     0,     0,
+       0,     0,     0,     0,     0,   592,   589,     0,     0,     0,
+       0,     0,     0,     0,     0,   590,   591,     0,     0,     0,
+       0,     0,     0,     0,     0,   587,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   588,   592,     0,   593,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   593,     0,     0,
+     586,     0,     0,     0,     0,     0,     0,   589,     0,     0,
+       0,     0,     0,     0,     0,     0,   590,   591,     0,     0,
+     594,     0,     0,     0,     0,     0,     0,     0,   593,     0,
+       0,     0,     0,     0,     0,     0,     0,   592,     0,   594,
+       0,     0,     0,     0,     0,   576,   577,   578,   579,   580,
+     581,   582,   583,   584,   585,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     594,   587,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   588,     0,     0,     0,     0,     0,     0,     0,   593,
+     576,   577,   578,   579,   580,   581,   582,   583,   584,   585,
+       0,     0,     0,     0,     0,   595,   596,   597,   598,   599,
+     600,   601,     0,   589,   602,     0,  1945,   586,     0,     0,
+       0,     0,   590,   591,   595,   596,   597,   598,   599,   600,
+     601,   594,     0,   602,     0,  1946,     0,     0,     0,     0,
+       0,     0,     0,   592,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   595,   596,   597,   598,   599,
+     600,   601,   586,     0,   602,     0,  2090,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   587,     0,
+       0,     0,     0,     0,     0,   593,     0,     0,   588,   576,
+     577,   578,   579,   580,   581,   582,   583,   584,   585,     0,
+       0,     0,     0,     0,     0,     0,   595,   596,   597,   598,
+     599,   600,   601,     0,     0,   602,     0,  2097,     0,     0,
+     589,     0,     0,   587,     0,     0,     0,   594,     0,   590,
+     591,     0,     0,   588,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     592,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   586,     0,     0,     0,   589,     0,     0,     0,     0,
+       0,     0,     0,     0,   590,   591,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   592,     0,     0,     0,     0,
+       0,     0,   593,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   595,   596,   597,   598,   599,   600,   601,     0,
+       0,   602,     0,  2098,     0,     0,     0,     0,     0,     0,
+       0,     0,   587,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   588,     0,   594,     0,     0,   593,   576,   577,
+     578,   579,   580,   581,   582,   583,   584,   585,     0,     0,
+       0,     0,     0,     0,   576,   577,   578,   579,   580,   581,
+     582,   583,   584,   585,   589,     0,     0,     0,     0,     0,
+       0,     0,     0,   590,   591,     0,     0,     0,     0,   594,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   592,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     586,     0,     0,     0,     0,     0,     0,     0,     0,   595,
+     596,   597,   598,   599,   600,   601,   586,     0,   602,     0,
+    2099,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   593,   576,   577,   578,
+     579,   580,   581,   582,   583,   584,   585,     0,     0,     0,
+       0,     0,     0,     0,   595,   596,   597,   598,   599,   600,
+     601,     0,     0,   602,     0,  2101,     0,     0,     0,     0,
+       0,   587,     0,     0,     0,     0,     0,     0,   594,     0,
+       0,   588,     0,     0,     0,     0,     0,   587,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   588,   576,   577,
+     578,   579,   580,   581,   582,   583,   584,   585,     0,   586,
+       0,     0,     0,   589,     0,     0,     0,     0,     0,     0,
+       0,     0,   590,   591,     0,     0,     0,     0,     0,   589,
+       0,     0,     0,     0,     0,     0,     0,     0,   590,   591,
+       0,     0,     0,   592,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   592,
+       0,     0,     0,   595,   596,   597,   598,   599,   600,   601,
+     586,     0,   602,     0,  2102,     0,     0,     0,     0,     0,
+     587,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     588,     0,     0,     0,     0,   593,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   593,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   589,     0,     0,     0,     0,     0,     0,     0,
+       0,   590,   591,     0,     0,     0,     0,   594,     0,     0,
+       0,   587,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   588,   592,   594,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   589,     0,     0,     0,     0,     0,     0,
+       0,     0,   590,   591,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   593,     0,     0,     0,     0,     0,
+       0,     0,     0,   592,     0,     0,     0,     0,     0,     0,
+       0,     0,   595,   596,   597,   598,   599,   600,   601,     0,
+       0,   602,     0,  2103,     0,     0,     0,     0,   595,   596,
+     597,   598,   599,   600,   601,     0,   594,   602,     0,  2104,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   593,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   594,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   595,   596,   597,   598,   599,   600,   601,     0,     0,
+     602,     0,  2331,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,    86,    87,    88,    89,    90,     0,
+       0,     0,   595,   596,   597,   598,   599,   600,   601,     0,
+       0,   602,    91,  2440,     0,    92,    93,    94,     0,    95,
+      96,    97,     0,     0,     0,    98,     0,    99,     0,   100,
+     101,   102,   103,     0,     0,   104,     0,     0,   105,     0,
+       0,   106,     0,     0,   107,     0,   108,     0,   109,   110,
+     111,   112,   113,   114,     0,     0,   115,   116,   117,     0,
+     118,     0,   119,   120,     0,     0,     0,   121,   122,   123,
+       0,     0,     0,     0,   124,   125,   126,   127,     0,   128,
+     129,   130,     0,     0,   131,     0,     0,   132,   133,     0,
+     134,     0,     0,   135,     0,     0,     0,   136,     0,     0,
+     137,     0,     0,   138,   139,     0,   140,   141,     0,     0,
+     142,   143,     0,   144,   145,   146,   147,     0,     0,     0,
+       0,   148,     0,   149,     0,   150,     0,     0,     0,   151,
+       0,     0,   152,   153,     0,     0,   154,     0,     0,     0,
+     155,     0,     0,   156,   157,     0,     0,     0,     0,     0,
+     158,     0,     0,     0,   159,     0,   160,     0,     0,     0,
+     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
+       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
+     180,     0,   181,   182,     0,   183,     0,     0,   184,     0,
+     185,     0,     0,     0,     0,     0,     0,     0,   186,   187,
+       0,     0,     0,   188,   189,   190,   191,   192,   193,   194,
+     195,     0,     0,     0,     0,   196,     0,   197,     0,   198,
+     199,     0,     0,   200,   201,   202,     0,   203,   204,   205,
+       0,     0,   206,     0,   207,     0,     0,     0,   208,     0,
+       0,     0,     0,   209,   210,     0,     0,     0,     0,     0,
+       0,   211,   212,     0,     0,     0,     0,   213,     0,     0,
+       0,   214,     0,     0,     0,   215,     0,   216,     0,     0,
+       0,   217,     0,   218,   219,     0,     0,   220,   221,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   222,
+       0,   223,     0,   224,   225,   226,   227,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   228,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   229,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   230,
+     231,     0,   232,     0,     0,     0,     0,     0,     0,     0,
+     233,   234,   235,   236,     0,   237,     0,     0,     0,     0,
+       0,     0,   238,   239,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   240,     0,
+     241,     0,     0,   242,     0,     0,   243,     0,   244,     0,
+     245,   246,   247,     0,     0,     0,     0,  1357,    86,    87,
+      88,    89,    90,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,    91,     0,     0,    92,
+      93,    94,     0,    95,    96,    97,     0,     0,     0,    98,
+       0,    99,     0,   100,   101,   102,   103,     0,     0,   104,
+       0,     0,   105,     0,     0,   106,     0,     0,   107,     0,
+     108,     0,   109,   110,   111,   112,   113,   114,     0,     0,
+     115,   116,   117,     0,   118,     0,   119,   120,     0,     0,
+       0,   121,   122,   123,     0,     0,     0,     0,   124,   125,
+     126,   127,     0,   128,   129,   130,     0,     0,   131,     0,
+       0,   132,   133,     0,   134,     0,     0,   135,     0,     0,
+       0,   136,     0,     0,   137,     0,     0,   138,   139,     0,
+     140,   141,     0,     0,   142,   143,     0,   144,   145,   146,
+     147,     0,     0,     0,     0,   148,     0,   149,     0,   150,
+       0,     0,     0,   151,     0,     0,   152,   153,     0,     0,
+     154,     0,     0,     0,   155,     0,     0,   156,   157,     0,
+       0,     0,     0,     0,   158,     0,     0,     0,   159,     0,
+     160,     0,     0,     0,   161,   162,   163,   164,   165,   166,
+     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
+     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
+       0,     0,   184,     0,   185,     0,     0,     0,     0,     0,
+       0,     0,   186,   187,     0,     0,     0,   188,   189,   190,
+     191,   192,   193,   194,   195,     0,     0,     0,     0,   196,
+       0,   197,     0,   198,   199,     0,     0,   200,   201,   202,
+       0,   203,   204,   205,     0,     0,   206,     0,   207,     0,
+       0,     0,   208,     0,     0,     0,     0,   209,   210,     0,
+       0,     0,     0,     0,     0,   211,   212,     0,     0,     0,
+       0,   213,     0,     0,     0,   214,     0,     0,     0,   215,
+       0,   216,     0,     0,     0,   217,     0,   218,   219,     0,
+       0,   220,   221,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   222,     0,   223,     0,   224,   225,   226,
+     227,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     228,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   229,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   230,   231,     0,   232,     0,     0,     0,
+       0,     0,     0,     0,   233,   234,   235,   236,     0,   237,
+       0,     0,     0,     0,     0,     0,   238,   239,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   240,     0,   241,     0,     0,   242,     0,     0,
+     243,     0,   244,     0,   245,   246,   247,     0,     0,     0,
+       0,  1775,    86,    87,    88,    89,    90,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+      91,     0,     0,    92,    93,    94,     0,    95,    96,    97,
+       0,     0,     0,    98,     0,    99,     0,   100,   101,   102,
+     103,     0,     0,   104,     0,     0,   105,     0,     0,   106,
+       0,     0,   107,     0,   108,     0,   109,   110,   111,   112,
+     113,   114,     0,     0,   115,   116,   117,     0,   118,     0,
+     119,   120,     0,     0,     0,   121,   122,   123,     0,     0,
+       0,     0,   124,   125,   126,   127,     0,   128,   129,   130,
+       0,     0,   131,     0,     0,   132,   133,     0,   134,     0,
+       0,   135,     0,     0,     0,   136,     0,     0,   137,     0,
+       0,   138,   139,     0,   140,   141,     0,     0,   142,   143,
+       0,   144,   145,   146,   147,     0,     0,     0,     0,   148,
+       0,   149,     0,   150,     0,     0,     0,   151,     0,     0,
+     152,   153,     0,     0,   154,     0,     0,     0,   155,     0,
+       0,   156,   157,     0,     0,     0,     0,     0,   158,     0,
+       0,     0,   159,     0,   160,     0,     0,     0,   161,   162,
+     163,   164,   165,   166,   167,   168,   169,   170,     0,   171,
+     172,   173,   174,   175,   176,   177,   178,   179,   180,     0,
+     181,   182,     0,   183,     0,     0,   184,     0,   185,     0,
+       0,     0,     0,     0,     0,     0,   186,   187,     0,     0,
+       0,   188,   189,   190,   191,   192,   193,   194,   195,     0,
+       0,     0,     0,   196,     0,   197,     0,   198,   199,     0,
+       0,   200,   201,   202,     0,   203,   204,   205,     0,     0,
+     206,     0,   207,     0,     0,     0,   208,     0,     0,     0,
+       0,   209,   210,     0,     0,     0,     0,     0,     0,   211,
+     212,     0,     0,     0,     0,   213,     0,     0,     0,   214,
+       0,     0,     0,   215,     0,   216,     0,     0,     0,   217,
+       0,   218,   219,     0,     0,   220,   221,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   222,     0,   223,
+       0,   224,   225,   226,   227,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   228,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     229,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   230,   231,     0,
+     232,     0,     0,     0,     0,     0,     0,     0,   233,   234,
+     235,   236,     0,   237,     0,     0,     0,     0,     0,     0,
+     238,   239,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   240,     0,   241,     0,
+       0,   242,     0,     0,   243,     0,   244,     0,   245,   246,
+     247,     0,     0,     0,     0,  1804,    86,    87,    88,    89,
+      90,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,    91,     0,     0,    92,    93,    94,
+       0,    95,    96,    97,     0,     0,     0,    98,     0,    99,
+       0,   100,   101,   102,   103,     0,     0,   104,     0,     0,
+     105,     0,     0,   106,     0,     0,   107,     0,   108,     0,
+     109,   110,   111,   112,   113,   114,     0,     0,   115,   116,
+     117,     0,   118,     0,   119,   120,     0,     0,     0,   121,
+     122,   123,     0,     0,     0,     0,   124,   125,   126,   127,
+       0,   128,   129,   130,     0,     0,   131,     0,     0,   132,
+     133,     0,   134,     0,     0,   135,     0,     0,     0,   136,
+       0,     0,   137,     0,     0,   138,   139,     0,   140,   141,
+       0,     0,   142,   143,     0,   144,   145,   146,   147,     0,
+       0,     0,     0,   148,     0,   149,     0,   150,     0,     0,
+       0,   151,     0,     0,   152,   153,     0,     0,   154,     0,
+       0,     0,   155,     0,     0,   156,   157,     0,     0,     0,
+       0,     0,   158,     0,     0,     0,   159,     0,   160,     0,
+       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
+     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
+     178,   179,   180,     0,   181,   182,     0,   183,     0,     0,
+     184,     0,   185,     0,     0,     0,     0,     0,     0,     0,
+     186,   187,     0,     0,     0,   188,   189,   190,   191,   192,
+     193,   194,   195,     0,     0,     0,     0,   196,     0,   197,
+       0,   198,   199,     0,     0,   200,   201,   202,     0,   203,
+     204,   205,     0,     0,   206,     0,   207,     0,     0,     0,
+     208,     0,     0,     0,     0,   209,   210,     0,     0,     0,
+       0,     0,     0,   211,   212,     0,     0,     0,     0,   213,
+       0,     0,     0,   214,     0,     0,     0,   215,     0,   216,
+       0,     0,     0,   217,     0,   218,   219,     0,     0,   220,
+     221,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   222,     0,   223,     0,   224,   225,   226,   227,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   228,   576,
+     577,   578,   579,   580,   581,   582,   583,   584,   585,     0,
+       0,     0,     0,     0,   229,   576,   577,   578,   579,   580,
+     581,   582,   583,   584,   585,     0,     0,     0,     0,     0,
+       0,   230,   231,     0,   232,     0,     0,     0,     0,     0,
+       0,     0,   233,   234,   235,   236,     0,   237,     0,     0,
+       0,     0,     0,     0,   238,   239,     0,     0,   576,   577,
+     578,   579,   580,   581,   582,   583,   584,   585,     0,     0,
+     240,   586,   241,     0,     0,   242,     0,     0,   243,     0,
+     244,     0,   245,   246,   247,     0,     0,   586,  1049,  2118,
+       0,   576,   577,   578,   579,   580,   581,   582,   583,   584,
+     585,     0,     0,     0,     0,     0,     0,     0,   576,   577,
+     578,   579,   580,   581,   582,   583,   584,   585,     0,  1105,
+    1106,  1107,  1108,  1109,  1110,  1111,  1112,  1113,  1114,     0,
+     586,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   587,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   588,     0,     0,     0,     0,     0,   587,     0,
+       0,     0,     0,   586,     0,     0,     0,     0,   588,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     586,     0,     0,     0,   589,     0,     0,     0,     0,     0,
+       0,  1115,     0,   590,   591,     0,     0,     0,     0,     0,
+     589,   587,     0,     0,     0,     0,     0,     0,     0,   590,
+     591,   588,     0,     0,   592,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     592,     0,     0,     0,   587,     0,     0,     0,     0,     0,
+       0,     0,     0,   589,   588,     0,     0,     0,     0,     0,
+       0,   587,   590,   591,     0,     0,     0,     0,     0,     0,
+       0,   588,  1116,     0,     0,     0,   593,     0,     0,     0,
+       0,     0,  1117,   592,     0,     0,   589,     0,     0,     0,
+       0,     0,   593,     0,     0,   590,   591,     0,     0,     0,
+       0,     0,     0,   589,     0,     0,     0,     0,     0,     0,
+       0,     0,   590,   591,  1118,     0,   592,     0,   594,     0,
+       0,     0,     0,  1119,  1120,     0,     0,     0,     0,   790,
+     791,   792,   793,   592,   594,   593,     0,     0,     0,     0,
+       0,     0,     0,     0,  1121,     0,     0,   794,   795,   796,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   797,
+     798,     0,     0,   799,     0,     0,     0,     0,   593,     0,
+       0,     0,   800,     0,     0,     0,     0,   594,     0,     0,
+       0,     0,     0,     0,     0,   593,     0,     0,     0,   801,
+     802,     0,     0,     0,     0,     0,  1122,     0,     0,     0,
+       0,     0,     0,   595,   596,   597,   598,   599,   600,   601,
+     594,     0,   602,     0,     0,     0,     0,     0,     0,   595,
+     596,   597,   598,   599,   600,   601,     0,   594,   602,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,  1123,  1176,
+    1177,  1178,  1179,  1180,  1181,  1182,  1183,  1184,  1185,     0,
+       0,     0,     0,  1695,     0,     0,     0,     0,     0,     0,
+       0,     0,   595,   596,   597,   598,   599,   600,   601,     0,
+       0,   602,  1176,  1177,  1178,  1179,  1180,  1181,  1182,  1183,
+    1184,  1185,     0,     0,     0,     0,  2091,     0,     0,     0,
+       0,     0,     0,     0,     0,   595,   596,   597,   598,   599,
+     600,   601,     0,     0,   602,     0,     0,     0,     0,     0,
+       0,  1186,   595,   596,   597,   598,   599,   600,   601,     0,
+       0,   602,     0,  1124,  1125,  1126,  1127,  1128,  1129,  1130,
+       0,     0,  1131,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,  1467,     0,  1176,  1177,  1178,  1179,
+    1180,  1181,  1182,  1183,  1184,  1185,     0,     0,     0,     0,
+       0,     0,     0,     0,  1176,  1177,  1178,  1179,  1180,  1181,
+    1182,  1183,  1184,  1185,     0,     0,     0,     0,     0,     0,
+       0,     0,  1187,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,  1188,  1176,  1177,  1178,  1179,  1180,  1181,  1182,
+    1183,  1184,  1185,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,  1187,     0,     0,  1726,     0,
+       0,     0,     0,     0,  1189,  1188,     0,     0,     0,     0,
+       0,     0,     0,  1190,  1191,     0,  1754,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,  1192,     0,     0,  1189,     0,     0,
+       0,     0,     0,     0,     0,  1936,  1190,  1191,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,  1192,     0,  1187,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1188,
+       0,     0,     0,     0,     0,     0,  1193,  1187,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,  1188,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,  1189,     0,     0,     0,     0,  1187,     0,     0,  1193,
+    1190,  1191,     0,     0,     0,     0,  1188,     0,  1194,  1189,
+       0,     0,     0,     0,     0,     0,     0,     0,  1190,  1191,
+       0,  1192,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,  1189,  1192,
+       0,  1194,     0,     0,     0,     0,     0,  1190,  1191,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,  1192,     0,
+       0,     0,     0,  1193,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,  1193,     0,  1195,  1196,  1197,  1198,  1199,  1200,  1201,
+       0,     0,  1202,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,  1194,     0,     0,     0,     0,
+    1193,     0,     0,     0,     0,     0,  1195,  1196,  1197,  1198,
+    1199,  1200,  1201,  1194,     0,  1202,  1176,  1177,  1178,  1179,
+    1180,  1181,  1182,  1183,  1184,  1185,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,  1194,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+    1195,  1196,  1197,  1198,  1199,  1200,  1201,     0,  1951,  1202,
+       0,     0,     0,     0,     0,     0,     0,     0,  1195,  1196,
+    1197,  1198,  1199,  1200,  1201,     0,     0,  1202,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,  1195,  1196,  1197,
+    1198,  1199,  1200,  1201,     0,     0,  1202,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1187,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1188,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,  1189,     0,     0,     0,     0,     0,     0,     0,     0,
+    1190,  1191,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,  1192,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,  1193,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,  1194,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,    86,
+      87,    88,    89,    90,     0,     0,     0,     0,     0,     0,
+    1195,  1196,  1197,  1198,  1199,  1200,  1201,    91,     0,  1202,
+      92,    93,    94,     0,    95,    96,    97,     0,     0,     0,
+      98,     0,    99,     0,   100,   101,   102,   103,     0,     0,
+     104,     0,     0,   105,     0,     0,   106,     0,     0,   107,
+       0,   108,     0,   109,   110,   111,   112,   113,   114,     0,
+       0,   115,   116,   117,     0,   118,     0,   119,   120,     0,
+       0,     0,   121,   122,   123,     0,     0,     0,     0,   124,
+     125,   126,   127,     0,   128,   129,   130,     0,     0,   131,
+       0,     0,   132,   133,     0,   134,     0,     0,   135,     0,
+       0,     0,   136,     0,     0,   137,     0,     0,   138,   139,
+       0,   140,   141,     0,     0,   142,   143,     0,   144,   145,
+     146,   147,     0,     0,     0,     0,   148,     0,   149,     0,
+     150,     0,     0,     0,   151,   983,     0,   152,   153,     0,
+       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
+       0,     0,     0,     0,     0,   158,     0,     0,     0,   159,
+       0,   160,     0,     0,     0,   161,   162,   163,   164,   165,
+     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
+     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
+     183,     0,     0,   184,     0,   185,     0,     0,     0,     0,
+       0,     0,     0,   186,   187,     0,     0,     0,   188,   189,
+     190,   191,   192,   193,   194,   195,     0,     0,     0,     0,
+     196,     0,   197,     0,   198,   199,     0,     0,   200,   201,
+     202,     0,   203,   204,   205,     0,     0,   206,     0,   207,
+       0,     0,     0,   208,     0,   984,     0,     0,   209,   210,
+       0,     0,     0,     0,     0,     0,   211,   212,     0,     0,
+       0,     0,   213,     0,     0,     0,   214,     0,     0,     0,
+     215,     0,   216,     0,     0,     0,   217,     0,   218,   219,
+       0,     0,   220,   221,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   222,     0,   223,     0,   224,   225,
+     226,   227,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   228,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   229,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   230,   231,     0,   232,     0,     0,
+       0,     0,     0,     0,     0,   233,   234,   235,   236,     0,
+     237,     0,     0,     0,     0,     0,     0,   238,   239,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   240,     0,   241,     0,     0,   242,     0,
+       0,   243,     0,   244,     0,   245,   246,   247,    86,    87,
+      88,    89,    90,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,    91,     0,     0,    92,
+      93,    94,     0,    95,    96,    97,     0,     0,     0,    98,
+       0,    99,     0,   100,   101,   102,   103,     0,     0,   104,
+       0,     0,   105,     0,     0,   106,     0,     0,   107,     0,
+     108,     0,   109,   110,   111,   112,   113,   114,     0,     0,
+     115,   116,   117,     0,   118,     0,   119,   120,     0,     0,
+       0,   121,   122,   123,     0,     0,     0,     0,   124,   125,
+     126,   127,     0,   128,   129,   130,     0,     0,   131,     0,
+       0,   132,   133,     0,   134,     0,     0,   135,     0,     0,
+       0,   136,     0,     0,   137,     0,     0,   138,   139,     0,
+     140,   141,     0,     0,   142,   143,     0,   144,   145,   146,
+     147,     0,     0,     0,     0,   148,     0,   149,     0,   150,
+       0,     0,     0,   151,     0,     0,   152,   153,     0,     0,
+     154,     0,     0,     0,   155,     0,     0,   156,   157,     0,
+       0,     0,     0,     0,   158,   570,     0,     0,   159,     0,
+     160,     0,     0,     0,   161,   162,   163,   164,   165,   166,
+     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
+     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
+       0,     0,   184,     0,   185,     0,     0,     0,     0,     0,
+       0,     0,   186,   187,     0,     0,     0,   188,   189,   190,
+     191,   192,   193,   194,   195,     0,     0,     0,     0,   196,
+       0,   197,     0,   198,   199,     0,     0,   200,   201,   202,
+       0,   203,   204,   205,     0,     0,   206,     0,   207,     0,
+       0,     0,   208,     0,   571,     0,     0,   209,   210,     0,
+       0,     0,     0,     0,     0,   211,   212,     0,     0,     0,
+       0,   213,     0,     0,     0,   214,     0,     0,     0,   215,
+       0,   216,     0,     0,     0,   217,     0,   218,   219,     0,
+       0,   220,   221,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   222,     0,   223,     0,   224,   225,   226,
+     227,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     228,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   229,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   230,   231,     0,   232,     0,     0,     0,
+       0,     0,     0,     0,   233,   234,   235,   236,     0,   237,
+       0,     0,     0,     0,     0,     0,   238,   239,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   240,     0,   241,     0,     0,   242,     0,     0,
+     243,     0,   244,     0,   245,   246,   247,    86,    87,    88,
+      89,    90,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,    91,     0,     0,    92,    93,
+      94,     0,    95,    96,    97,     0,     0,     0,    98,     0,
+      99,     0,   100,   101,   102,   103,     0,     0,   104,     0,
+       0,   105,     0,     0,   106,     0,     0,   107,     0,   108,
+       0,   109,   110,   111,   112,   113,   114,     0,     0,   115,
+     116,   117,     0,   118,     0,   119,   120,     0,     0,     0,
+     121,   122,   123,     0,     0,  1771,     0,   124,   125,   126,
+     127,     0,   128,   129,   130,     0,     0,   131,     0,     0,
+     132,   133,     0,   134,     0,     0,   135,     0,     0,     0,
+     136,     0,     0,   137,     0,     0,   138,   139,     0,   140,
+     141,     0,     0,   142,   143,     0,   144,   145,   146,   147,
+       0,     0,     0,     0,   148,     0,   149,     0,   150,     0,
+       0,     0,   151,     0,     0,   152,   153,     0,     0,   154,
+       0,     0,     0,   155,     0,     0,   156,   157,     0,     0,
+       0,     0,     0,   158,     0,     0,     0,   159,     0,   160,
+       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
+     168,   169,   170,     0,   171,   172,   173,   174,   175,   176,
+     177,   178,   179,   180,     0,   181,   182,     0,   183,     0,
+       0,   184,     0,   185,     0,     0,     0,     0,     0,     0,
+       0,   186,   187,     0,     0,     0,   188,   189,   190,   191,
+     192,   193,   194,   195,     0,     0,     0,     0,   196,     0,
+     197,     0,   198,   199,     0,     0,   200,   201,   202,     0,
+     203,   204,   205,     0,     0,   206,     0,   207,     0,     0,
+       0,   208,     0,  1772,     0,     0,   209,   210,     0,     0,
+       0,     0,     0,     0,   211,   212,     0,     0,     0,     0,
+     213,     0,     0,     0,   214,     0,     0,     0,   215,     0,
+     216,     0,     0,     0,   217,     0,   218,   219,     0,     0,
+     220,   221,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   222,     0,   223,     0,   224,   225,   226,   227,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   228,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   229,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   230,   231,     0,   232,     0,     0,     0,     0,
+       0,     0,     0,   233,   234,   235,   236,     0,   237,     0,
+       0,     0,     0,     0,     0,   238,   239,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   240,     0,   241,     0,     0,   242,     0,     0,   243,
+       0,   244,     0,   245,   246,   247,    86,    87,    88,    89,
+      90,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,    91,     0,     0,    92,    93,    94,
+       0,    95,    96,    97,     0,     0,     0,    98,     0,    99,
+       0,   100,   101,   102,   103,     0,     0,   104,     0,     0,
+     105,     0,     0,   106,     0,     0,   107,     0,   108,     0,
+     109,   110,   111,   112,   113,   114,     0,     0,   115,   116,
+     117,     0,   118,     0,   119,   120,     0,     0,     0,   121,
+     122,   123,     0,     0,     0,     0,   124,   125,   126,   127,
+       0,   128,   129,   130,     0,     0,   131,     0,     0,   132,
+     133,     0,   134,     0,     0,   135,     0,     0,     0,   136,
+       0,     0,   137,     0,     0,   138,   139,     0,   140,   141,
+       0,     0,   142,   143,     0,   144,   145,   146,   147,     0,
+       0,     0,   725,   148,     0,   149,     0,   150,     0,     0,
+       0,   151,     0,     0,   152,   153,     0,     0,   154,     0,
+       0,     0,   155,     0,     0,   156,   157,     0,     0,     0,
+       0,     0,   158,     0,     0,     0,   159,     0,   160,     0,
+       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
+     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
+     178,   179,   180,     0,   181,   182,     0,   183,     0,     0,
+     184,     0,   185,     0,     0,     0,     0,     0,     0,     0,
+     186,   187,     0,     0,     0,   188,   189,   190,   191,   192,
+     193,   194,   195,     0,     0,     0,     0,   196,     0,   197,
+       0,   198,   199,     0,     0,   200,   201,   202,     0,   203,
+     204,   205,     0,     0,   206,     0,   207,     0,     0,     0,
+     208,     0,     0,     0,     0,   209,   210,     0,     0,     0,
+       0,     0,     0,   211,   212,     0,     0,     0,     0,   213,
+       0,     0,     0,   214,     0,     0,     0,   215,     0,   216,
+       0,     0,     0,   217,     0,   218,   219,     0,     0,   220,
+     221,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   222,     0,   223,     0,   224,   225,   226,   227,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   228,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   229,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   230,   231,     0,   232,     0,     0,     0,     0,     0,
+       0,     0,   233,   234,   235,   236,     0,   237,     0,     0,
+       0,     0,     0,     0,   238,   239,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     240,     0,   241,     0,     0,   242,     0,     0,   243,     0,
+     244,     0,   245,   246,   247,    86,    87,    88,    89,    90,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,    91,     0,     0,    92,    93,    94,     0,
+      95,    96,    97,     0,     0,     0,    98,     0,    99,     0,
+     100,   101,   102,   103,     0,     0,   104,     0,     0,   105,
+       0,     0,   106,     0,     0,   107,     0,   108,     0,   109,
+     110,   111,   112,   113,   114,     0,     0,   115,   116,   117,
+       0,   118,     0,   119,   120,     0,     0,     0,   121,   122,
+     123,     0,     0,     0,     0,   124,   125,   126,   127,     0,
+     128,   129,   130,     0,     0,   131,     0,     0,   132,   133,
+       0,   134,     0,     0,   135,     0,     0,     0,   136,     0,
+       0,   137,     0,     0,   138,   139,     0,   140,   141,     0,
+       0,   142,   143,     0,   144,   145,   146,   147,     0,     0,
+       0,     0,   148,     0,   149,     0,   150,     0,     0,     0,
+     151,     0,     0,   152,   153,     0,     0,   154,     0,     0,
+       0,   155,     0,     0,   156,   157,     0,     0,     0,     0,
+       0,   158,     0,     0,     0,   159,     0,   160,     0,     0,
+       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
+     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
+     179,   180,     0,   181,   182,     0,   183,     0,     0,   184,
+       0,   185,     0,     0,     0,     0,     0,     0,     0,   186,
+     187,     0,     0,     0,   188,   189,   190,   191,   192,   193,
+     194,   195,     0,     0,     0,     0,   196,     0,   197,     0,
+     198,   199,     0,     0,   200,   201,   202,     0,   203,   204,
+     205,     0,     0,   206,     0,   207,     0,     0,     0,   208,
+       0,  1963,     0,     0,   209,   210,     0,     0,     0,     0,
+       0,     0,   211,   212,     0,     0,     0,     0,   213,     0,
+       0,     0,   214,     0,     0,     0,   215,     0,   216,     0,
+       0,     0,   217,     0,   218,   219,     0,     0,   220,   221,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     222,     0,   223,     0,   224,   225,   226,   227,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   228,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   229,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     230,   231,     0,   232,     0,     0,     0,     0,     0,     0,
+       0,   233,   234,   235,   236,     0,   237,     0,     0,     0,
+       0,     0,     0,   238,   239,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   240,
+       0,   241,     0,     0,   242,     0,     0,   243,     0,   244,
+       0,   245,   246,   247,    86,    87,    88,    89,    90,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,    91,     0,     0,    92,    93,    94,     0,    95,
+      96,    97,     0,     0,     0,    98,     0,    99,     0,   100,
+     101,   102,   103,     0,     0,   104,     0,     0,   105,     0,
+       0,   106,     0,     0,   107,     0,   108,     0,   109,   110,
+     111,   112,   113,   114,     0,     0,   115,   116,   117,     0,
+     118,     0,   119,   120,     0,     0,     0,   121,   122,   123,
+       0,     0,     0,     0,   124,   125,   126,   127,     0,   128,
+     129,   130,     0,     0,   131,     0,     0,   132,   133,     0,
+     134,     0,     0,   135,     0,     0,     0,   136,     0,     0,
+     137,     0,     0,   138,   139,     0,   140,   141,     0,     0,
+     142,   143,     0,   144,   145,   146,   147,     0,     0,     0,
+       0,   148,     0,   149,     0,   150,     0,     0,     0,   151,
+       0,     0,   152,   153,     0,     0,   154,     0,     0,     0,
+     155,     0,     0,   156,   157,     0,     0,     0,     0,     0,
+     158,     0,     0,     0,   159,     0,   160,     0,     0,     0,
+     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
+       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
+     180,     0,   181,   182,     0,   183,     0,     0,   184,     0,
+     185,     0,     0,     0,     0,     0,     0,     0,   186,   187,
+       0,  2423,     0,   188,   189,   190,   191,   192,   193,   194,
+     195,     0,     0,     0,     0,   196,     0,   197,     0,   198,
+     199,     0,     0,   200,   201,   202,     0,   203,   204,   205,
+       0,     0,   206,     0,   207,     0,     0,     0,   208,     0,
+       0,     0,     0,   209,   210,     0,     0,     0,     0,     0,
+       0,   211,   212,     0,     0,     0,     0,   213,     0,     0,
+       0,   214,     0,     0,     0,   215,     0,   216,     0,     0,
+       0,   217,     0,   218,   219,     0,     0,   220,   221,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   222,
+       0,   223,     0,   224,   225,   226,   227,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   228,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   229,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   230,
+     231,     0,   232,     0,     0,     0,     0,     0,     0,     0,
+     233,   234,   235,   236,     0,   237,     0,     0,     0,     0,
+       0,     0,   238,   239,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   240,     0,
+     241,     0,     0,   242,     0,     0,   243,     0,   244,     0,
+     245,   246,   247,    86,    87,    88,    89,    90,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,    91,     0,     0,    92,    93,    94,     0,    95,    96,
+      97,     0,     0,     0,    98,     0,    99,     0,   100,   101,
+     102,   103,     0,     0,   104,     0,     0,   105,     0,     0,
+     106,     0,     0,   107,     0,   108,     0,   109,   110,   111,
+     112,   113,   114,     0,     0,   115,   116,   117,     0,   118,
+       0,   119,   120,     0,     0,     0,   121,   122,   123,     0,
+       0,     0,     0,   124,   125,   126,   127,     0,   128,   129,
+     130,     0,     0,   131,     0,     0,   132,   133,     0,   134,
+       0,     0,   135,     0,     0,     0,   136,     0,     0,   137,
+       0,     0,   138,   139,     0,   140,   141,     0,     0,   142,
+     143,     0,   144,   145,   146,   147,     0,     0,     0,     0,
+     148,     0,   149,     0,   150,     0,     0,     0,   151,     0,
+       0,   152,   153,     0,     0,   154,     0,     0,     0,   155,
+       0,     0,   156,   157,     0,     0,     0,     0,     0,   158,
+       0,     0,     0,   159,     0,   160,     0,     0,     0,   161,
+     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
+     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
+       0,   181,   182,     0,   183,     0,     0,   184,     0,   185,
+       0,     0,     0,     0,     0,     0,     0,   186,   187,     0,
+       0,     0,   188,   189,   190,   191,   192,   193,   194,   195,
+       0,     0,     0,     0,   196,     0,   197,     0,   198,   199,
+       0,     0,   200,   201,   202,     0,   203,   204,   205,     0,
+       0,   206,     0,   207,     0,     0,     0,   208,     0,     0,
+       0,     0,   209,   210,     0,     0,     0,     0,     0,     0,
+     211,   212,     0,     0,     0,     0,   213,     0,     0,     0,
+     214,     0,     0,     0,   215,     0,   216,     0,     0,     0,
+     217,     0,   218,   219,     0,     0,   220,   221,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   222,     0,
+     223,     0,   224,   225,   226,   227,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   228,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   229,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   230,   231,
+       0,   232,     0,     0,     0,     0,     0,     0,     0,   233,
+     234,   235,   236,     0,   237,     0,     0,     0,     0,     0,
+       0,   238,   239,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   240,     0,   241,
+       0,     0,   242,     0,     0,   243,     0,   244,     0,   245,
+     246,   247,    86,    87,    88,   990,    90,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+      91,     0,     0,    92,    93,    94,     0,    95,    96,    97,
+       0,     0,     0,    98,     0,    99,     0,   100,   101,   102,
+     103,     0,     0,   104,     0,     0,   105,     0,     0,   106,
+       0,     0,   107,     0,   108,     0,   109,   110,   111,   112,
+     113,   114,     0,     0,   115,   116,   117,     0,   118,     0,
+     119,   120,     0,     0,     0,   121,   122,   123,     0,     0,
+       0,     0,   124,   125,   126,   127,     0,   128,   129,   130,
+       0,     0,   131,     0,     0,   132,   133,     0,   134,     0,
+       0,   135,     0,     0,     0,   136,     0,     0,   137,     0,
+       0,   138,   139,     0,   140,   141,     0,     0,   142,   143,
+       0,   144,   145,   991,   147,     0,     0,     0,     0,   148,
+       0,   149,     0,   150,     0,     0,     0,   151,     0,     0,
+     152,   153,     0,     0,   154,     0,     0,     0,   155,     0,
+       0,   156,   157,     0,     0,     0,     0,     0,   158,     0,
+       0,     0,   159,     0,   160,     0,     0,     0,   161,   162,
+     163,   164,   165,   166,   167,   168,   169,   170,     0,   171,
+     172,   173,   174,   175,   176,   177,   178,   179,   180,     0,
+     181,   182,     0,   183,     0,     0,   184,     0,   185,     0,
+       0,     0,     0,     0,     0,     0,   186,   187,     0,     0,
+       0,   188,   189,   190,   191,   192,   193,   194,   195,     0,
+       0,     0,     0,   196,     0,   197,     0,   198,   199,     0,
+       0,   200,   201,   202,     0,   203,   204,   205,     0,     0,
+     206,     0,   207,     0,     0,     0,   208,     0,     0,     0,
+       0,   209,   210,     0,     0,     0,     0,     0,     0,   211,
+     212,     0,     0,     0,     0,   213,     0,     0,     0,   214,
+       0,     0,     0,   215,     0,   216,     0,     0,     0,   217,
+       0,   218,   219,     0,     0,   220,   221,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   222,     0,   223,
+       0,   224,   225,   226,   227,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   228,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     229,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   230,   231,     0,
+     232,     0,     0,     0,     0,     0,     0,     0,   233,   234,
+     235,   236,     0,   237,     0,     0,     0,     0,     0,     0,
+     238,   239,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   240,     0,   241,     0,
+       0,   242,     0,     0,   243,     0,   244,     0,   245,   246,
+     247
 };
 
 static const short yycheck[] =
 {
-       2,   715,     2,  1198,    14,   304,   305,   306,   692,  1485,
-     608,   464,   370,   466,   467,   468,   469,   599,  1263,   601,
-      22,   480,  1306,  1307,  1191,  1309,  1519,  1294,   884,   967,
-    1494,   909,  1530,     3,  1320,   639,   912,  1315,    40,   492,
-     493,  1620,   918,  1777,  1311,    60,   520,   531,  1549,  1243,
-    1754,  1218,   862,  1247,    60,  2022,  1142,    60,   117,    60,
-     398,    82,     3,    85,  1268,    34,    68,     3,    68,   486,
-     487,     9,    34,    47,   642,    34,   658,   659,   124,   496,
-     124,    19,   124,  1559,  2096,     9,   138,     3,     3,  1542,
-    1583,   193,   576,  1569,  1570,    74,  1549,    89,   582,  1552,
-    1553,   173,   144,   685,  1557,  1558,   191,   148,   102,  2104,
-      62,   462,  1610,   187,   187,   221,   121,   243,  2048,   178,
-     192,    82,    93,   101,   117,    38,   102,   121,   162,   117,
-     109,    95,  1585,     4,   110,   242,    89,   719,   122,  1958,
-     136,   723,   102,   159,   120,   162,  2158,    97,   242,   887,
-     139,  1318,    76,   242,   138,   160,   135,    22,   125,    75,
-       9,   134,  1502,  2103,    34,     3,   160,    74,   138,   315,
-    1780,     9,    74,   142,   124,  2105,   103,   234,    29,   148,
-     142,    36,     9,   142,   241,   190,   148,   173,   926,   148,
-      77,  1475,    19,  1771,  1472,   341,   190,   214,     6,   242,
-    2140,   271,   109,    35,   209,   210,   192,   109,  2175,    51,
-     215,    62,   162,   272,   229,   184,    71,   516,   105,   235,
-     279,   215,   184,   907,  2401,   184,    58,    76,    94,   189,
-     192,   290,   224,    43,   304,   162,   203,  2414,    76,   235,
-     282,   139,   244,   207,    48,   216,   261,   546,   265,   356,
-     271,   240,   150,    63,   119,   261,   290,   236,    62,  2226,
-     229,   239,   356,   138,   253,   258,   268,   236,   270,   242,
-     258,   224,   142,   283,   236,   259,  1560,   236,   148,  1563,
-     406,  1565,  1092,   293,   305,   260,    17,    18,  1572,  1573,
-    1574,  1575,   268,   245,  1795,  2114,   301,   290,   260,  2266,
-     406,   311,   290,  1389,   263,   346,   657,   301,   360,   411,
-     271,   119,   916,   162,   184,  2310,   229,   406,   922,   243,
-     361,   406,   263,   333,   398,   399,   400,   263,   317,   403,
-     403,  1525,   404,  1500,  1944,  1621,  1503,  1504,  1214,  1543,
-     255,   282,  1795,   214,  1622,  2275,   282,   406,   264,    17,
-      18,   689,   920,  1163,  1440,   365,   366,   367,   368,  2371,
-     406,   335,   406,   406,   406,   214,   236,   369,   370,   371,
-      48,  1949,  2339,   103,    17,    18,   860,   346,   862,   381,
-     188,   381,   404,   404,   346,  2089,   724,   346,   254,   404,
-     360,   233,   361,  1733,  1734,   237,   398,   335,   404,   361,
-    2219,   404,   361,   404,   208,   135,   264,   386,   387,   388,
-     389,   390,   391,   406,   406,   243,   265,   145,   155,   421,
-     422,   423,   422,    62,   266,   124,   428,   155,   239,   431,
-     432,   406,   162,   435,   194,   214,   411,   406,  1991,   127,
-     857,   220,   444,    60,   406,  1998,   145,   406,  1946,   238,
-     239,   230,  1619,    89,  1955,   465,   187,   404,   145,     0,
-     470,   408,   472,   473,   474,   475,   476,     3,   155,   157,
-     237,  2050,   281,   483,   484,   485,   346,   193,   292,  1724,
-     217,   491,   291,  2062,   842,   294,    34,   497,   302,   217,
-     500,   361,   306,   503,   504,   505,   506,   507,   508,   509,
-     510,   511,  1955,   513,   514,   515,  2009,   517,   518,   519,
-    2013,   521,   522,   523,   524,   525,   526,   527,   528,   187,
-     530,  2019,   532,   533,   534,   535,   536,   537,   538,   539,
-     217,  2265,   239,  1778,   260,   405,   406,   547,   379,   549,
-     550,   551,  1736,   231,   187,   243,   121,   557,   406,  2025,
-     392,   393,   188,   239,   564,   565,   566,   567,   568,   569,
-     570,  1755,   572,   573,   574,  1732,   342,  1026,   578,   579,
-     580,   581,   309,   583,   584,   585,   586,   587,   588,   589,
-     590,   309,  1392,  1787,  1862,   160,  1672,    34,   224,    34,
-     592,    82,  1009,   229,   142,    73,   598,   599,   598,   601,
-     148,    93,  1086,  1020,  1021,   607,  1210,   187,  1092,  1213,
-     240,   127,   950,   253,  1700,   190,  1492,   117,  1902,  1903,
-     405,   406,   309,    93,  1041,   392,   393,   139,    30,  1265,
-    1266,   123,  1268,  1050,  1444,   973,   184,   342,  1916,  1056,
-     215,   157,   121,    64,  1522,    66,  1063,   239,   126,  1505,
-    1588,  1068,   187,   123,   189,  1291,   658,   659,   404,   112,
-     113,   139,  2160,   394,   395,   396,   397,   398,   399,   400,
-     200,   201,   403,  1157,   393,   394,    78,   396,   178,  1163,
-     406,   160,   684,   685,   684,   411,   404,   689,   236,   183,
-     692,   693,   186,   404,   696,   142,   698,   142,  1172,  1173,
-     102,   148,   404,   148,   706,   242,   706,   709,   932,   709,
-     934,   190,   204,   937,   716,   231,   716,   719,  1922,  1923,
-    1924,   723,   724,  2187,  1141,   404,   301,   395,   396,   397,
-     398,   399,   400,   404,   204,   403,   215,   184,    96,   184,
-     404,   751,   195,   404,  1938,   192,   128,   192,   404,  1943,
-    2017,  1918,  1919,   396,   397,   398,   399,   400,   404,   187,
-     403,   189,   240,  2256,   256,   123,   541,   542,   543,   544,
-     545,   187,   272,   189,   242,   253,   404,   271,   256,   279,
-     271,   139,    81,   274,   275,   187,   256,   189,   241,   236,
-     290,   236,   150,   175,   176,   177,   405,   406,   346,   405,
-     406,   292,   204,   813,   814,   815,   297,   405,   406,   303,
-     304,   302,   411,   361,   405,   406,   396,   397,   398,   399,
-     400,   404,   301,   403,     6,     7,     8,     9,   404,    11,
-      12,    13,    14,   843,   133,   405,   406,   405,   406,   317,
-     842,   404,   844,   404,   143,   404,   204,   404,   147,   405,
-     406,   861,   121,   404,   256,   405,   406,   404,   406,   405,
-     406,   871,   404,   873,   404,   134,   404,  2061,     9,    10,
-      11,    12,    13,    14,    15,    16,    17,    18,   405,   406,
-     179,   180,   404,   182,   405,   406,  1244,   405,   406,   899,
-     404,   160,  2059,  2060,   404,  2090,   404,   899,   404,   346,
-     902,   346,   902,  2379,   405,   406,  1390,   909,  1392,   320,
-     321,   322,   323,    48,   361,   917,   361,   919,   404,   919,
-     189,   190,  2206,  2207,  2208,   405,   406,   338,   339,   340,
-     405,   406,  2177,   404,    75,   404,   938,   119,   938,   350,
-     351,   404,   944,   354,   944,   404,   215,   949,   950,   405,
-     406,    59,   363,   405,   406,  2329,  2330,   162,  1442,   406,
-    1444,   406,   814,   815,  2133,  2134,  1923,  1924,  2137,   380,
-     381,   973,   404,   242,   404,     9,    10,    11,    12,    13,
-      14,    15,    16,    17,    18,  2154,  2351,  2352,  2157,   991,
-     404,   991,   404,   995,   404,   997,   404,   404,  1008,   404,
-     404,   404,  1012,   404,   145,   404,   275,  1017,   404,   404,
-     404,   404,   404,  1023,   155,  1025,   404,   404,  1028,  1029,
-     404,   404,  1439,   404,   404,  1035,   404,   296,   297,  1039,
-     404,   404,   301,   404,   404,   404,   404,  1047,   404,  1049,
-    1499,    75,   404,  1053,  1054,  1055,   187,   404,   404,  1059,
-     404,   404,  1062,   404,  1064,   404,  1066,  1067,   404,  1069,
-     404,   404,   404,   404,  1074,  1075,  1076,  1077,  1078,  1079,
-    1080,  1530,  1082,  1083,  1084,  1085,   217,   411,  1088,  1089,
-    1090,  1091,   187,  1093,  1094,  1095,  1096,  1097,  1098,  1099,
-    1100,   406,  1102,  1103,   192,  1105,   116,  1107,  1108,  1109,
-      88,   264,   406,    74,  1114,   307,   378,   405,   405,   405,
-      48,   145,   405,   405,    19,  1125,   411,   404,  1128,  1129,
-      48,   155,   157,  1727,    62,   124,   159,    88,   406,  1487,
-     255,  2415,   398,    39,   155,  1145,  1146,  1147,  1148,  1149,
-    1150,  1151,   239,  1153,  1154,  1155,   335,   235,    48,  1159,
-    1160,  1161,  1162,   187,  1164,  1165,  1166,  1167,  1168,  1169,
-    1170,  1171,   196,   197,   238,   235,   262,   406,   309,   107,
-     238,   240,  1174,  1647,  1648,   100,  1178,   205,  1178,  1777,
-     194,    93,   192,   217,    96,   406,    98,   163,   164,   165,
-     166,   167,   168,   169,   192,   171,   172,   405,   136,   193,
-     116,   192,  1676,  1677,   411,   406,   214,   405,   405,   405,
-     398,   123,   405,  1215,   126,  1215,   406,  1219,   405,   405,
-    1222,   159,  1222,   404,  1226,   405,   405,   139,   405,   405,
-    1704,  1705,   405,   267,  1236,  1237,  1236,  1237,   150,   405,
-     124,   397,  1244,   405,   405,   405,   405,   405,   405,  1831,
-     189,   406,  1262,   394,   395,   396,   397,   398,   399,   400,
-     411,   411,   403,   411,   115,   404,   187,   205,   411,   141,
-     208,    48,   406,   243,   145,   309,   335,   404,   238,   243,
-     406,   263,  1699,   406,   222,     9,     9,     9,     9,     9,
-       9,     9,   204,     9,  1296,     9,   406,   235,   251,   124,
-     238,   239,    47,   406,   405,   327,     3,   406,  1767,   242,
-     242,   190,     9,   344,  1316,   344,     9,    10,    11,    12,
-      13,    14,    15,    16,    17,    18,   190,   124,   124,   124,
-     190,   242,   405,   404,   242,   242,   144,    34,  1348,   124,
-    1350,   242,   124,   410,   256,  1355,  1356,   411,   242,    62,
-      47,   411,   243,   411,   242,   124,   146,    96,   282,   229,
-     394,   395,   396,   397,   398,   399,   400,     9,     9,   403,
-       9,     9,   114,     9,   149,   409,   149,   114,  2092,    76,
-       9,  1391,    75,     9,    87,     4,     9,     9,     9,     9,
-    1400,     9,  1402,     9,     9,   229,     9,    16,    17,     9,
-      19,   406,   242,   242,  1414,  1415,  1416,   242,   260,   242,
-      29,   242,    31,    32,   411,   281,  1426,    36,    37,   281,
-     405,   405,   405,   378,   405,   122,   384,   405,   405,   189,
-     405,   405,   405,  1443,   131,   132,   405,   189,   406,   405,
-     405,   138,  1452,   406,  1454,   142,   405,   144,   404,   265,
-     157,   148,   145,   242,   242,   145,  1915,    71,   264,   408,
-     148,   148,   155,   199,   398,   198,   242,   153,   404,   404,
-     150,   150,     9,     9,   404,   242,   398,   404,   252,   405,
-    1482,  1483,   411,   131,   190,  1487,   190,   184,   405,   364,
-     165,  1950,   411,   346,   187,   192,   406,   148,   148,   341,
-      76,   198,   406,   196,   197,   404,   150,   150,   406,  1511,
-    1512,   242,   405,   242,  1516,  1517,  1526,   404,   282,   405,
-    1522,   406,   352,   405,   217,   242,   406,   405,  1530,   405,
-      87,   132,   229,   144,    95,   352,     9,   199,    87,   236,
-    1542,   148,   148,   214,   242,   406,    60,  1549,   102,   264,
-    1552,  1553,   102,   304,   404,  1557,  1558,   406,   255,   404,
-    1562,   404,   259,   260,   289,   239,   263,   404,   404,   156,
-     242,   148,   404,   242,   267,   404,   404,  1579,   405,  1579,
-     404,   242,  2035,  1585,   242,   282,   405,  1589,  1590,   189,
-     405,   404,   190,   190,   305,   404,  2280,  2281,   190,  2283,
-     404,   190,   190,   150,   150,   229,   190,   190,  1610,   190,
-     190,   405,   405,    87,   112,    87,   309,  1627,    87,    75,
-     260,   404,   194,   260,   405,   242,   405,  2044,   406,  1639,
-     358,   166,  2091,   405,  1644,  1645,    87,   405,   335,   405,
-     405,    87,   405,   405,    87,  1655,   404,   192,   404,   346,
-      72,  1661,   190,     9,   216,  1665,   405,   138,  1668,   190,
-    2344,   358,  2346,  2347,   361,  1675,   404,  2265,  1678,   404,
-      75,  1681,   156,   405,  1684,  1685,   170,     9,    27,   405,
-    2159,  2365,   429,  1310,    33,   263,  2017,  1610,  1973,  1296,
-    1264,  1592,  1961,  1703,   406,  1971,  1979,  1547,  1979,    48,
-    2014,   394,   395,   396,   397,   398,   399,   400,   405,   406,
-     403,  2242,  2110,    62,  2146,  1717,   409,  2358,  2317,  2116,
-    2231,  2163,  2244,  1798,  1588,  1186,   976,  1236,   923,    68,
+       2,   311,   312,   313,    14,   621,   473,   731,   492,   476,
+     477,   708,   479,   480,  1301,  1234,   645,  1332,   612,     2,
+     614,    23,  1529,  1542,   653,  1567,   995,   656,   657,   532,
+     377,   903,   933,  1227,  1349,     3,  1668,   504,   505,    41,
+    1578,  1590,   543,   937,  1597,   498,   499,  1173,  1597,   943,
+    1834,  1600,  1601,  1811,   881,   508,  1605,  1606,    34,    64,
+    1344,  1345,  1256,  1347,  1353,     3,    68,  1306,     9,    91,
+      64,    64,    64,   406,    49,    95,  1358,   658,    19,    34,
+     674,   675,     3,   130,  1633,    68,  2083,   588,     3,  1631,
+    2158,    88,  1281,   594,  1550,   180,  1285,   130,   123,     9,
+    1607,  2110,  2166,   194,     3,  1828,   123,   701,   144,    34,
+    1617,  1618,   130,    81,   199,    38,  1837,    88,    22,    66,
+    1658,     6,  2019,   100,   200,   123,   108,    88,   228,   107,
+     103,   127,     4,   151,   116,   162,   198,   250,   101,   140,
+     166,   735,   109,   127,   126,   739,   131,     9,   910,   128,
+      95,    99,  2220,    36,    29,   273,    54,   130,  2167,   471,
+     134,  2165,  1356,   322,     3,   144,    17,    18,   185,    80,
+       9,   167,    82,   149,   141,    83,  2473,   109,     9,   155,
+      68,   129,    70,   167,   280,    35,   108,    80,    19,   348,
+    2487,    66,   954,    76,   149,   250,   169,   224,  2202,   155,
+     155,   197,   169,   111,   115,   127,   144,  2052,   182,   183,
+     184,   231,    62,   197,  2059,   191,   242,   313,   528,   251,
+      82,   125,   115,   199,   149,   210,   222,  1516,    45,   194,
+     155,   236,   216,   217,   931,  1519,   191,   169,   222,   144,
+     125,  2238,   267,    82,   250,   167,   248,    51,   558,   250,
+      67,   214,   365,     9,    10,    11,    12,    13,    14,    15,
+      16,    17,    18,   211,   281,   270,   191,   243,   246,   267,
+     272,   288,   274,   291,   299,   197,  1783,   270,   269,  2176,
+     290,   236,   299,   280,  2005,   262,   231,  2010,   243,   268,
+     300,   318,  2289,   269,   747,   277,  1123,   415,   751,  1852,
+     222,   299,   755,  1852,  1430,   273,   253,   169,   318,   280,
+     195,  2375,   941,   236,   310,   415,   264,   314,   243,   280,
+     949,   412,   283,   284,  1608,    81,   310,  1611,   413,  1613,
+     340,  2340,  2329,   369,  1790,  1791,  1620,  1621,  1622,  1623,
+     301,   251,   240,   194,   420,   306,   244,   272,   263,   221,
+     311,   272,  1591,   415,  1548,  1481,  1250,  1551,  1552,   221,
+     415,   673,   372,   373,   374,   375,   947,  1194,   415,   344,
+     291,  2439,   705,   272,   376,   377,   378,   275,   879,   355,
+     881,  1670,   415,   415,  1573,  2282,   388,  1669,   310,   244,
+     415,   413,   291,  2151,   370,   415,   152,   415,   415,   355,
+     355,    17,    18,   344,   406,   388,   162,   740,   413,   415,
+    2407,    51,   274,   108,   370,   370,   413,    17,    18,   413,
+     413,   413,   142,   876,   415,   251,   428,   429,   430,   420,
+     355,   369,   194,   435,   196,   169,   438,   439,   194,   415,
+     442,    66,   407,   408,   409,   370,   429,   412,   250,   451,
        9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
-    1766,   411,  1471,  1745,  1754,  2214,   620,  1940,  1194,  1019,
-    1760,   100,  2191,  2414,  1196,   464,   445,  1759,   950,  1326,
-    2399,  2091,   724,  1945,   410,   709,   995,   477,   436,   891,
-     722,  1706,  2273,  2182,  1784,  2336,   125,  2287,   127,  1950,
-     129,   899,  1240,  1524,  1517,  1936,   939,  1759,  1178,  2204,
-     139,   140,   944,  1795,   143,  1516,  1929,   406,  1808,  1745,
-     149,  2209,    -1,    -1,    -1,    -1,    -1,    -1,   157,    -1,
-     159,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1831,
-    1832,    -1,    -1,    -1,    -1,    -1,   185,    -1,    -1,  2138,
-      -1,    -1,    -1,  1845,   193,    -1,  1848,    -1,  1848,    -1,
-    1852,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1861,
-      -1,    -1,    -1,    -1,    -1,    -1,   145,    -1,    -1,  1879,
-      -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,
-      -1,    -1,   231,    -1,  1894,    -1,   235,    -1,    -1,   238,
-     239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,  1907,    -1,  1917,   187,    -1,
-    1920,    -1,    -1,   262,    -1,    -1,     3,    -1,     5,    -1,
-      -1,    -1,  2221,  2222,  2223,    -1,    -1,  1929,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    23,    24,   217,    26,
-    2399,    28,    -1,    -1,    31,    -1,    33,    -1,  1950,    36,
-      37,    38,    -1,  1955,    41,    42,  1958,    44,    45,  1961,
-      47,    -1,    -1,    -1,    -1,    52,    53,    54,    -1,    56,
-      57,  1973,    59,    60,    61,    62,    -1,    64,    -1,    66,
-      -1,    -1,    69,    70,    71,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2027,   105,   106,
-    2030,    -1,    -1,    -1,  2034,    -1,    -1,    -1,    -1,    -1,
-     309,    -1,    -1,    -1,    -1,    23,    -1,    -1,  2048,    -1,
-      -1,   128,    -1,    -1,    -1,    33,    -1,    -1,    36,    -1,
-      38,    -1,    40,    -1,    42,    -1,    -1,    -1,    -1,    47,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
-      -1,    -1,    60,    61,    -1,    -1,    -1,    -1,    -1,  2089,
-      68,    -1,    -1,    71,    -1,    -1,    74,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,  2105,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,  2114,    -1,    -1,   394,   395,   396,   397,   398,
-     399,   400,    -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,
-     118,    -1,   219,    -1,    -1,    -1,   223,    30,   225,    -1,
-     128,    -1,   229,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,  2163,    -1,    -1,    -1,    -1,  2176,    -1,    -1,    -1,
-      -1,  2173,   259,  2173,    -1,    -1,    -1,    -1,    -1,    -1,
-    2190,    -1,  2192,    -1,  2194,    78,    79,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,  2196,    -1,    -1,    -1,    91,    92,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
-      -1,   104,    -1,    -1,    -1,    -1,    -1,  2219,   206,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,    -1,
-     218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   232,    -1,   139,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    2270,    -1,    -1,    -1,    -1,  2275,    -1,    -1,    -1,   257,
-      -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   174,    -1,    -1,    -1,    -1,    -1,    -1,   181,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2299,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   202,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   211,   212,
-     213,    -1,    -1,    -1,    -1,    -1,  2328,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   227,    -1,    -1,    -1,  2340,    -1,
-    2350,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2351,
-    2352,    -1,  2354,   246,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   255,    -1,    -1,    -1,    -1,     4,     5,     6,
-       7,     8,    -1,    -1,    -1,    -1,    -1,    -1,   271,    -1,
-      -1,    -1,    -1,  2385,    -1,    22,    -1,    -1,    25,    26,
-      27,    -1,    29,    30,    31,    32,  2406,  2399,    35,    -1,
-      37,    -1,    39,    40,    41,    42,    43,    -1,    -1,    46,
-      -1,    48,    49,    50,    51,    -1,    -1,    54,    55,    56,
-      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
-      67,    68,    69,    -1,    -1,    72,    73,    -1,    -1,    -1,
-      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
-     343,    88,    -1,    90,    91,    92,    -1,    94,    -1,    -1,
-      97,    -1,    99,   356,   101,    -1,    -1,   104,    -1,    -1,
-     107,   108,    -1,   110,   111,    -1,    -1,   114,   115,    -1,
-     117,   118,   119,   120,   121,    -1,    -1,    -1,   125,    -1,
-     127,    -1,   129,   130,    -1,    -1,   133,   134,    -1,   136,
-     137,    -1,    -1,   140,    -1,    -1,   143,    -1,    -1,   146,
-     147,   404,    -1,    -1,   151,   152,   153,    -1,    -1,    -1,
-     157,   158,   159,   160,    -1,    -1,   163,   164,   165,   166,
-     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
-     177,   178,   179,   180,   181,   182,   183,    -1,   185,   186,
-     187,   188,   189,   190,   191,    -1,   193,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,   206,
-     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
-      -1,   218,    -1,   220,    -1,   222,   223,    -1,    -1,   226,
-     227,   228,    -1,   230,   231,   232,    -1,    -1,   235,    -1,
-     237,    -1,    -1,   240,    -1,   242,    -1,   244,   245,   246,
-     247,   248,   249,   250,    -1,    -1,   253,   254,    -1,    -1,
-      -1,   258,    -1,    -1,    -1,   262,    -1,    -1,    -1,   266,
-      -1,   268,    -1,    -1,   271,   272,   273,   274,   275,    -1,
-      -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   290,    -1,   292,    -1,   294,   295,   296,
-     297,    -1,    -1,    -1,   301,    -1,    -1,    -1,    -1,    -1,
-     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
-     317,   318,   319,    -1,    -1,    -1,   323,   324,   325,   326,
-      -1,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
-     337,    -1,    -1,   340,   341,   342,   343,   344,   345,   346,
-     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
-     357,    -1,   359,   360,   361,   362,   363,   364,   365,   366,
-     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
-     377,    -1,   379,    -1,   381,   382,   383,   384,    -1,    -1,
-     387,    -1,   389,    -1,   391,   392,   393,    -1,    -1,   396,
-      -1,    -1,    -1,    -1,   401,    -1,    -1,   404,    -1,    -1,
-     407,   408,    -1,   410,   411,     4,     5,     6,     7,     8,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     415,   130,   180,  2016,   246,   475,  2070,  2016,   224,  2007,
+    2074,   481,    99,  1667,   484,   485,   486,   487,   488,    51,
+    2112,   199,   221,   152,   145,   495,   496,   497,   227,   241,
+     415,  1778,  2124,   503,    66,   201,   157,   249,   237,   509,
+      34,   196,   512,   401,   402,   515,   516,   517,   518,   519,
+     520,   521,   522,   523,   861,   525,   526,   527,    34,   529,
+     530,   531,   242,   533,   534,   535,   536,   537,   538,   539,
+     540,   194,   542,   196,   544,   545,   546,   547,   548,   549,
+     550,   551,  2080,   194,  2328,   269,   401,   402,  1835,   559,
+      64,   561,   562,   563,   405,   406,   407,   408,   409,   569,
+     246,   412,   318,   365,    34,   299,   576,   577,   578,   579,
+     580,   581,   582,  1057,   584,   585,   586,     3,   194,  2086,
+     590,   591,   592,   593,  1037,   595,   596,   597,   598,   599,
+     600,   601,   602,   152,   194,  1789,   223,  1723,  1051,  1052,
+      30,   200,   604,   162,  1793,  1844,  1433,   251,   610,   133,
+     612,   169,   614,   133,   152,   149,  1117,  1246,   620,  1072,
+    1249,   155,  1123,  1812,   162,  1751,    95,   610,  1081,   388,
+    1919,    80,   413,   149,  1087,   194,   417,   145,   351,   155,
+     164,  1094,  1536,   215,   164,   978,  1099,   403,   404,   405,
+     406,   407,   408,   409,    84,   127,   412,   191,  1485,   401,
+     402,   246,   404,   221,   152,   224,   115,  1636,  1001,  1570,
+     245,   246,   674,   675,   162,   191,  1960,  1961,   108,   149,
+     301,  1553,    79,   248,  2222,   155,   224,  1188,  1977,   351,
+     311,   415,   141,  1194,   315,   167,   420,   261,   700,   701,
+    1203,  1204,   194,   705,   196,   134,   708,   709,   123,   243,
+     712,    34,   714,   145,   238,   246,   274,   700,   238,  1172,
+     722,   191,   413,   725,   413,   197,   195,   243,   413,   199,
+     732,  2250,   413,   735,   413,   132,   224,   739,   740,   722,
+     248,   413,   725,   172,  1983,  1984,  1985,   413,   145,   732,
+     222,   207,   208,   261,   405,   406,   407,   408,   409,   318,
+     770,   412,   231,  2078,   194,   413,   196,   236,   413,   290,
+     185,   118,   119,   243,  2195,  2196,   413,  2319,  2199,   300,
+     318,   211,   303,   172,   173,  1979,  1980,   403,   404,   405,
+     406,   407,   408,   409,   243,  2216,   412,   960,  2219,   962,
+     413,    51,   965,   232,   404,   405,   406,   407,   408,   409,
+    1999,   413,   412,    99,   190,  2004,    66,   193,   326,   414,
+     415,   355,   832,   833,   834,  2109,   149,   414,   415,   413,
+     318,   413,   155,   413,   264,   413,   370,   413,   310,   355,
+     414,   415,   413,   129,   403,   404,   405,   406,   407,   408,
+     409,   248,   862,   412,   370,   202,    87,    99,   413,   861,
+     102,   863,   104,   113,   261,   413,   281,   264,   191,   413,
+     880,   414,   415,   288,   414,   415,   199,   414,   415,   250,
+     890,   415,   892,   413,   299,   355,   413,   129,  1303,  1304,
+     132,  1306,   142,  2394,  2395,   414,   415,   147,   414,   415,
+     370,   413,   249,   145,   280,   414,   415,   413,   139,   414,
+     415,   102,   413,   923,  1329,   157,   166,   414,   415,   150,
+     243,   923,   413,   154,   926,   211,   413,  2121,  2122,   326,
+    1431,   933,  1433,  2152,  2123,  1282,   312,   313,   129,   413,
+     942,   250,  2449,   926,   946,   415,   395,   396,   397,   398,
+     399,   400,   413,  2240,   145,   186,   187,   420,   189,   414,
+     415,   413,   212,   946,   966,   215,   157,   414,   415,   211,
+     972,   414,   415,   414,   415,   977,   978,   413,   264,   229,
+     414,   415,  1483,   966,  1485,  2269,  2270,  2271,   413,   972,
+     414,   415,   242,   414,   415,   245,   246,   247,    51,  1001,
+     414,   415,   413,     6,     7,     8,     9,   413,    11,    12,
+      13,    14,   553,   554,   555,   556,   557,  1019,   833,   834,
+     211,  1023,   264,  1025,  1984,  1985,  1036,  1480,  2419,  2420,
+     413,  1041,   355,   413,   413,   413,  1019,  1047,   413,   413,
+     413,   413,    63,   413,  1054,   413,  1056,   370,   413,  1059,
+    1060,   413,   413,   413,   413,   413,  1066,   413,   413,   413,
+    1070,   413,   413,  1547,   413,   413,   169,   413,  1078,   413,
+    1080,   413,   413,   413,  1084,  1085,  1086,   413,   413,   413,
+    1090,   413,   413,  1093,   413,  1095,   413,  1097,  1098,   413,
+    1100,   413,   415,   413,  1578,  1105,  1106,  1107,  1108,  1109,
+    1110,  1111,   413,  1113,  1114,  1115,  1116,   413,   413,  1119,
+    1120,  1121,  1122,   413,  1124,  1125,  1126,  1127,  1128,  1129,
+    1130,  1131,   125,  1133,  1134,     4,  1136,   420,  1138,  1139,
+    1140,   413,   194,   199,   415,  1145,   122,    16,    94,    18,
+     273,    20,   415,    80,   316,   414,  1156,   387,   414,  1159,
+    1160,    30,  1781,    32,    33,   414,   414,   414,    37,    38,
+      19,   413,    51,   164,   420,   130,  1176,  1177,  1178,  1179,
+    1180,  1181,  1182,   166,  1184,  1185,  1186,    94,   415,   263,
+    1190,  1191,  1192,  1193,  1531,  1195,  1196,  1197,  1198,  1199,
+    1200,  1201,  1202,   407,    39,  1698,  1699,   246,   162,   344,
+     242,    51,     3,  1205,  2488,   245,   127,  1209,     9,   242,
+     271,   415,   248,   245,   106,   212,   201,   199,  1834,   140,
+     415,   199,   414,   200,  1727,  1728,  1209,   122,   199,   415,
+     420,   221,   414,    34,   170,   171,   172,   173,   174,   175,
+     176,   414,   178,   179,   407,   414,   167,   414,    49,  1251,
+     414,   413,  1755,  1756,   414,  1257,   414,   414,  1260,   415,
+     414,   414,  1264,   414,   414,   130,   406,   414,  1251,   415,
+     414,   414,  1274,  1275,   196,   196,   197,  1260,   414,   414,
+    1282,    82,   414,   420,   121,   413,   420,   194,   148,   420,
+    1300,  1274,  1275,   420,  1888,    51,   415,  1750,   238,     9,
+     238,   222,   251,   152,   329,   330,   331,   332,   195,   344,
+      75,   245,   413,   415,   272,   415,   251,     9,     9,     9,
+       9,     9,   347,   348,   349,     9,     9,   128,    30,   250,
+       9,     9,  1334,   415,   359,   360,   137,   138,   363,   259,
+    1824,   130,    49,   144,   415,   414,   353,   372,   149,   336,
+     151,   415,  1354,   353,   155,   197,   250,   250,   197,   130,
+     130,   130,   197,   284,   389,   390,   414,   250,   413,   250,
+     250,   273,   250,   151,   420,    57,   130,   250,   130,  1389,
+     419,  1391,    84,    85,   305,   306,  1396,  1397,   250,   310,
+     191,    66,   420,   420,   251,    97,    98,   250,   199,   130,
+     153,   291,   236,   102,   205,   107,     9,     9,   110,     9,
+       9,   120,     9,   156,   156,   120,     9,     9,     9,    93,
+       9,     9,  1432,     9,     9,     9,     9,   236,     9,     9,
+    2154,  1441,   415,  1443,   250,   236,   250,   250,   250,   250,
+     269,   420,   243,   145,   414,  1455,  1456,  1457,   414,   290,
+     290,   414,   414,   414,   414,   414,   387,  1467,   415,   414,
+     393,   414,   263,   414,   414,    27,   414,   268,   269,   414,
+     414,   272,   414,   196,  1484,   196,   415,   274,   164,   181,
+      46,   152,   414,  1493,   413,  1495,   188,   415,   250,   250,
+     291,   273,  1976,     9,    76,     9,   415,   155,   155,   417,
+     206,   407,   413,   413,   160,   205,   250,   209,   157,   157,
+       9,     9,   413,   250,   260,   420,   218,   219,   220,   407,
+     197,   197,   413,   177,  1526,  1527,   137,  2011,   414,  1531,
+     414,   172,   234,   250,   355,   373,   155,   155,   420,   415,
+     350,   415,   413,   344,   157,   415,   414,   157,   414,   413,
+      82,   291,   254,   250,   355,   250,   250,  1559,  1560,   361,
+     414,   263,  1564,  1565,  1574,     9,   367,   414,  1570,   370,
+      93,   415,   415,   151,   138,   101,  1578,   361,   280,     9,
+     206,   414,   155,   155,    93,   221,   273,   250,  1590,   415,
+      64,   108,   415,   108,   413,  1597,   413,   313,  1600,  1601,
+     298,   246,   163,  1605,  1606,   413,   413,   413,  1610,   413,
+     413,   250,   155,   414,   415,   413,   250,   250,   414,   413,
+     250,   414,   414,   413,   157,  1627,   197,   197,   413,  2096,
+     197,  1633,   413,   314,   197,  1637,  1638,   197,   196,   157,
+     236,   197,   197,   197,  1627,   197,   414,   414,  2345,  2346,
+     352,  2348,  2105,    93,    93,   415,  1658,   118,    93,    81,
+     269,   269,   413,   365,   201,   414,  1676,   414,   145,  2153,
+     415,   250,   273,   414,   367,   414,   414,    93,   414,   414,
+    1690,   414,    93,    93,   173,  1695,  1696,   199,   413,   413,
+      78,   197,     9,    27,     9,   223,  1706,   144,    81,   414,
+     250,   197,  1712,   163,   177,   413,  1716,     9,     0,  1719,
+     413,   413,  2328,   414,     0,  2412,  1726,  2414,  2415,  1729,
+    1348,  2221,  1732,   267,   436,  1735,  1736,  2078,  1658,   414,
+    2034,  1334,     3,  1302,     5,   415,  2433,  1640,  1595,  2022,
+    2032,  2040,  2040,  2075,  1754,  2305,  2172,  2208,  2426,  2382,
+    2178,  2294,    23,    24,  2225,    26,  2307,    28,  1636,  1004,
+      31,  1855,    33,   950,  1274,    36,    37,    38,  1784,  1771,
+      41,    68,  1220,    44,  1515,    46,    47,   419,    49,    50,
+    1823,   633,  2277,  2001,    55,  1230,    57,    58,  1050,    60,
+      61,  2254,    63,    64,    65,    66,  2487,    68,   978,    70,
+    1802,  1811,    73,    74,   473,    76,   452,  1817,  1364,  1232,
+     740,  2470,  2153,  2006,  1816,    86,   489,   725,  1023,   443,
+     418,   915,   738,  1757,  2336,  2245,  2401,  2352,    99,  2011,
+     923,  1841,  1278,  1565,  1572,  1816,  1997,   414,   967,  1564,
+     111,   112,  1209,  2267,  1990,  1802,   972,  2272,  2472,    -1,
+    1852,    -1,    -1,    -1,    -1,  1865,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   134,    -1,    -1,    -1,    -1,     9,    10,
+      11,    12,    13,    14,    15,    16,    17,    18,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,  1888,  1889,    -1,    -1,
+    2200,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    1902,    -1,    -1,  1905,    -1,    -1,    -1,  1909,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,  1918,    -1,    -1,    -1,
+      -1,    -1,  1905,    -1,    -1,    -1,  1936,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      81,  1951,    -1,    -1,     9,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    -1,   226,    -1,    -1,    -1,   230,
+      -1,   232,    -1,  1965,    -1,   236,    -1,    -1,  1978,    -1,
+      -1,  1981,    -1,    -1,  2284,  2285,  2286,    -1,    -1,    -1,
+      -1,    -1,    -1,    21,    -1,    23,  2470,    -1,  1990,    -1,
+      28,    -1,    30,    -1,    -1,    27,    -1,   268,    -1,    -1,
+      38,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2011,
+      -1,   152,    -1,    -1,  2016,    -1,    81,  2019,    -1,    51,
+    2022,   162,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,  2034,    -1,    66,    -1,     9,    10,    11,    12,
+      13,    14,    15,    16,    17,    18,    84,    85,    -1,    -1,
+      -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    97,
+      98,    -1,   203,   204,    -1,    -1,    -1,    -1,    -1,   107,
+      -1,    -1,   110,    -1,   106,    -1,   114,    -1,  2088,   117,
+      -1,  2091,    -1,   224,    -1,  2095,    -1,   152,    -1,    -1,
+      -1,    -1,    88,    89,    90,    -1,    -1,   162,   369,   131,
+    2110,   133,    -1,   135,    -1,    -1,    -1,   145,    81,    -1,
+      -1,    -1,    -1,   145,   146,   147,    -1,    -1,   150,    -1,
+      -1,    -1,    -1,    -1,   156,    -1,    -1,    -1,    -1,   194,
+      -1,    -1,   164,    -1,   166,   276,    -1,    -1,   203,   204,
+      -1,  2151,   413,   181,    -1,    -1,    -1,    -1,    -1,    -1,
+     188,    -1,    -1,    -1,    -1,    -1,    -1,  2167,    -1,   224,
+     192,    -1,    -1,    -1,    -1,    -1,    -1,   205,   200,    -1,
+      -1,   209,   168,    -1,  2176,    -1,    -1,   318,    -1,   152,
+     218,   219,   220,    -1,    -1,    -1,    -1,    -1,   226,   162,
+      -1,    -1,    -1,    -1,   190,    -1,   234,   193,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,
+     242,   276,    -1,   245,   246,   247,   254,    -1,    -1,    -1,
+      -1,   194,    -1,  2225,    -1,   263,    -1,    -1,    -1,  2239,
+     203,   204,    -1,  2235,   266,    -1,    -1,    -1,    -1,   271,
+     236,    -1,   280,  2253,    -1,  2255,    -1,  2257,    -1,    -1,
+      -1,   224,  2235,   318,    -1,    -1,    -1,  2259,    -1,    -1,
+      -1,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
+      -1,   412,    -1,    -1,    -1,    -1,    -1,   418,    -1,    -1,
+    2282,    -1,   278,   279,   280,    -1,    -1,   283,   284,   285,
+     286,   287,    -1,   289,   290,    -1,   292,   293,   294,   295,
+     296,   297,    -1,   276,   300,    -1,   302,    -1,   304,   305,
+     306,   307,   308,   309,   352,    -1,   312,   313,    -1,    -1,
+      -1,    -1,    -1,  2333,   362,    -1,    -1,   365,    -1,    -1,
+    2340,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,   404,
+     405,   406,   407,   408,   409,   318,    -1,   412,    -1,    -1,
+      -1,    -1,    -1,   418,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,  2364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,  2393,    -1,    -1,   390,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,  2408,    -1,  2418,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2419,  2420,    -1,
+    2422,    -1,    -1,     4,     5,     6,     7,     8,    -1,    -1,
+     403,   404,   405,   406,   407,   408,   409,    -1,    -1,   412,
+      -1,    22,   415,    -1,    25,    26,    27,    -1,    29,    30,
+      31,    32,    -1,  2455,    35,    -1,    37,    -1,    39,    40,
+      41,    42,    -1,    44,    45,    -1,    -1,    48,  2470,  2479,
+      51,    52,    53,    54,    -1,    56,    -1,    58,    59,    60,
+      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
+      71,    72,    73,    -1,    -1,    -1,    77,    78,    79,    -1,
+      -1,    -1,    -1,    84,    85,    86,    87,    88,    89,    90,
+      91,    92,    -1,    94,    -1,    96,    97,    98,    -1,   100,
+      -1,    -1,   103,    -1,   105,    -1,   107,    -1,    -1,   110,
+      -1,    -1,   113,   114,    -1,   116,   117,    -1,    -1,   120,
+     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,    -1,
+     131,    -1,   133,    -1,   135,   136,    -1,    -1,   139,   140,
+      -1,   142,   143,    -1,    -1,   146,    -1,    -1,    -1,   150,
+      -1,    -1,   153,   154,    -1,    -1,    -1,   158,   159,   160,
+      -1,    -1,    -1,   164,   165,   166,   167,    -1,    -1,   170,
+     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
+     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
+      -1,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   208,   209,    -1,
+      -1,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
+      -1,   222,    -1,    -1,   225,    -1,   227,    -1,   229,   230,
+      -1,    -1,   233,   234,   235,    -1,   237,   238,   239,    -1,
+      -1,   242,    -1,   244,    -1,    -1,    -1,   248,    -1,   250,
+      -1,   252,   253,   254,   255,   256,   257,   258,    -1,    -1,
+     261,   262,    -1,    -1,    -1,    -1,   267,    -1,    -1,    -1,
+     271,    -1,    -1,    -1,   275,    -1,   277,    -1,    -1,   280,
+     281,   282,   283,   284,    -1,    -1,   287,   288,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
+     301,    -1,   303,   304,   305,   306,    -1,    -1,    -1,   310,
+      -1,    -1,    -1,    -1,    -1,   316,   317,    -1,   319,   320,
+     321,   322,   323,   324,   325,   326,   327,   328,    -1,    -1,
+      -1,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
+     341,   342,   343,    -1,   345,   346,    -1,    -1,   349,   350,
+     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
+     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
+     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
+     381,   382,   383,   384,   385,   386,    -1,   388,    -1,   390,
+     391,   392,   393,    -1,    -1,   396,    -1,   398,    -1,   400,
+     401,   402,    -1,    -1,   405,     4,     5,     6,     7,     8,
+     411,    -1,   413,    -1,    -1,   416,   417,    -1,   419,   420,
       -1,    -1,    -1,    22,    -1,    -1,    25,    26,    27,    -1,
       29,    30,    31,    32,    -1,    -1,    35,    -1,    37,    -1,
-      39,    40,    41,    42,    43,    -1,    -1,    46,    -1,    48,
-      49,    50,    51,    -1,    -1,    54,    55,    56,    57,    58,
-      59,    -1,    -1,    62,    63,    64,    65,    66,    67,    68,
-      69,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    78,
-      79,    80,    81,    82,    83,    84,    85,    -1,    -1,    88,
-      -1,    90,    91,    92,    -1,    94,    -1,    -1,    97,    -1,
-      99,    -1,   101,   102,    -1,   104,    -1,    -1,   107,   108,
-      -1,   110,   111,    -1,    -1,   114,   115,    -1,   117,   118,
-     119,   120,   121,    -1,    -1,    -1,   125,    -1,   127,    -1,
-     129,   130,    -1,    -1,   133,   134,    -1,   136,   137,    -1,
-      -1,   140,    -1,    -1,   143,    -1,    -1,   146,   147,    -1,
-      -1,    -1,    -1,   152,   153,    -1,    -1,    -1,   157,   158,
-     159,   160,    -1,    -1,   163,   164,   165,   166,   167,   168,
-     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
-     179,   180,   181,   182,   183,    -1,   185,   186,   187,   188,
-     189,   190,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   201,   202,    -1,    -1,    -1,   206,   207,   208,
-     209,   210,   211,   212,   213,    -1,   215,    -1,    -1,   218,
-      -1,   220,    -1,   222,   223,    -1,    -1,   226,   227,   228,
-      -1,   230,   231,   232,    -1,    -1,   235,    -1,   237,    -1,
-      -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,   248,
-     249,   250,    -1,    -1,   253,   254,    -1,    -1,    -1,   258,
-      -1,    -1,    -1,   262,    -1,    -1,    -1,   266,    -1,   268,
-      -1,    -1,   271,   272,   273,   274,   275,    -1,    -1,   278,
-     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   290,    -1,   292,    -1,   294,   295,   296,   297,    -1,
-      -1,    -1,   301,    -1,    -1,    -1,    -1,    -1,   307,   308,
-      -1,   310,   311,   312,   313,   314,   315,   316,   317,   318,
-     319,    -1,    -1,    -1,   323,   324,   325,   326,    -1,   328,
-     329,   330,   331,   332,   333,   334,    -1,   336,   337,    -1,
-      -1,   340,   341,   342,   343,   344,   345,   346,   347,   348,
-     349,    -1,   351,   352,   353,   354,   355,   356,   357,    -1,
-     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
-     369,   370,   371,   372,   373,   374,   375,   376,   377,    -1,
-     379,    -1,   381,   382,   383,   384,    -1,    -1,   387,    -1,
-     389,    -1,   391,   392,   393,    -1,    -1,   396,    -1,    -1,
-      -1,    -1,   401,    -1,    -1,   404,    -1,    -1,   407,   408,
-      -1,   410,   411,     4,     5,     6,     7,     8,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    22,    -1,    -1,    25,    26,    27,    -1,    29,    30,
-      31,    32,    -1,    -1,    35,    -1,    37,    -1,    39,    40,
-      41,    42,    43,    -1,    -1,    46,    -1,    48,    49,    50,
-      51,    -1,    -1,    54,    55,    56,    57,    58,    59,    -1,
-      -1,    62,    63,    64,    65,    66,    67,    68,    69,    -1,
-      -1,    72,    73,    -1,    -1,    -1,    -1,    78,    79,    80,
-      81,    82,    83,    84,    85,    -1,    -1,    88,    -1,    90,
-      91,    92,    -1,    94,    -1,    -1,    97,    -1,    99,    -1,
-     101,   102,    -1,   104,    -1,    -1,   107,   108,    -1,   110,
-     111,    -1,    -1,   114,   115,    -1,   117,   118,   119,   120,
-     121,    -1,    -1,    -1,   125,    -1,   127,    -1,   129,   130,
-      -1,    -1,   133,   134,    -1,   136,   137,    -1,    -1,   140,
-      -1,    -1,   143,    -1,    -1,   146,   147,    -1,    -1,    -1,
-      -1,   152,   153,    -1,    -1,    -1,   157,   158,   159,   160,
-      -1,    -1,   163,   164,   165,   166,   167,   168,   169,   170,
-     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
-     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
-     191,    -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     201,   202,    -1,    -1,    -1,   206,   207,   208,   209,   210,
-     211,   212,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
-      -1,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
-     231,   232,    -1,    -1,   235,    -1,   237,    -1,    -1,   240,
-      -1,   242,    -1,    -1,   245,   246,   247,   248,   249,   250,
-      -1,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,
-      -1,   262,    -1,    -1,    -1,   266,    -1,   268,    -1,    -1,
-     271,   272,   273,   274,   275,    -1,    -1,   278,   279,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,
-      -1,   292,    -1,   294,   295,   296,   297,    -1,    -1,    -1,
-     301,    -1,    -1,    -1,    -1,    -1,   307,   308,    -1,   310,
-     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
-      -1,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
-     331,   332,   333,   334,    -1,   336,   337,    -1,    -1,   340,
-     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
-     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
-     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
-     371,   372,   373,   374,   375,   376,   377,    -1,   379,    -1,
-     381,   382,   383,   384,    -1,    -1,   387,    -1,   389,    -1,
-     391,   392,   393,    -1,    -1,   396,    -1,    -1,    -1,    -1,
-     401,    -1,    -1,   404,    -1,    -1,   407,   408,    -1,   410,
-     411,     4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
+      39,    40,    41,    42,    -1,    44,    45,    -1,    -1,    48,
+      -1,    -1,    51,    52,    53,    54,    -1,    56,    -1,    58,
+      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
+      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
+      79,    80,    -1,    -1,    -1,    84,    85,    86,    87,    88,
+      89,    90,    91,    -1,    -1,    94,    -1,    96,    97,    98,
+      -1,   100,    -1,    -1,   103,    -1,   105,    -1,   107,   108,
+      -1,   110,    -1,    -1,   113,   114,    -1,   116,   117,    -1,
+      -1,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
+      -1,    -1,   131,    -1,   133,    -1,   135,   136,    -1,    -1,
+     139,   140,    -1,   142,   143,    -1,    -1,   146,    -1,    -1,
+      -1,   150,    -1,    -1,   153,   154,    -1,    -1,    -1,    -1,
+     159,   160,    -1,    -1,    -1,   164,   165,   166,   167,    -1,
+      -1,   170,   171,   172,   173,   174,   175,   176,   177,   178,
+     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
+     189,   190,    -1,   192,   193,   194,   195,   196,   197,   198,
+     199,   200,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   208,
+     209,    -1,    -1,    -1,   213,   214,   215,   216,   217,   218,
+     219,   220,    -1,   222,    -1,    -1,   225,    -1,   227,    -1,
+     229,   230,    -1,    -1,   233,   234,   235,    -1,   237,   238,
+     239,    -1,    -1,   242,    -1,   244,    -1,    -1,    -1,   248,
+      -1,   250,    -1,    -1,   253,   254,   255,   256,   257,   258,
+      -1,    -1,   261,   262,    -1,    -1,    -1,    -1,   267,    -1,
+      -1,    -1,   271,    -1,    -1,    -1,   275,    -1,   277,    -1,
+      -1,   280,   281,   282,   283,   284,    -1,    -1,   287,   288,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     299,    -1,   301,    -1,   303,   304,   305,   306,    -1,    -1,
+      -1,   310,    -1,    -1,    -1,    -1,    -1,   316,   317,    -1,
+     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
+      -1,    -1,    -1,   332,   333,   334,   335,    -1,   337,   338,
+     339,   340,   341,   342,   343,    -1,   345,   346,    -1,    -1,
+     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
+      -1,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
+     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
+     379,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
+      -1,   390,   391,   392,   393,    -1,    -1,   396,    -1,   398,
+      -1,   400,   401,   402,    -1,    -1,   405,     4,     5,     6,
+       7,     8,   411,    -1,   413,    -1,    -1,   416,   417,    -1,
+     419,   420,    -1,    -1,    -1,    22,    -1,    -1,    25,    26,
+      27,    -1,    29,    30,    31,    32,    -1,    -1,    35,    -1,
+      37,    -1,    39,    40,    41,    42,    -1,    44,    45,    -1,
+      -1,    48,    -1,    -1,    51,    52,    53,    54,    -1,    56,
+      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
+      67,    68,    69,    70,    71,    72,    73,    -1,    -1,    -1,
+      77,    78,    79,    -1,    -1,    -1,    -1,    84,    85,    86,
+      87,    88,    89,    90,    91,    -1,    -1,    94,    -1,    96,
+      97,    98,    -1,   100,    -1,    -1,   103,    -1,   105,    -1,
+     107,   108,    -1,   110,    -1,    -1,   113,   114,    -1,   116,
+     117,    -1,    -1,   120,   121,    -1,   123,   124,   125,   126,
+     127,    -1,    -1,    -1,   131,    -1,   133,    -1,   135,   136,
+      -1,    -1,   139,   140,    -1,   142,   143,    -1,    -1,   146,
+      -1,    -1,    -1,   150,    -1,    -1,   153,   154,    -1,    -1,
+      -1,    -1,   159,   160,    -1,    -1,    -1,   164,   165,   166,
+     167,    -1,    -1,   170,   171,   172,   173,   174,   175,   176,
+     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
+     187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
+     197,   198,    -1,   200,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   208,   209,    -1,    -1,    -1,   213,   214,   215,   216,
+     217,   218,   219,   220,    -1,   222,    -1,    -1,   225,    -1,
+     227,    -1,   229,   230,    -1,    -1,   233,   234,   235,    -1,
+     237,   238,   239,    -1,    -1,   242,    -1,   244,    -1,    -1,
+      -1,   248,    -1,   250,    -1,    -1,   253,   254,   255,   256,
+     257,   258,    -1,    -1,   261,   262,    -1,    -1,    -1,    -1,
+     267,    -1,    -1,    -1,   271,    -1,    -1,    -1,   275,    -1,
+     277,    -1,    -1,   280,   281,   282,   283,   284,    -1,    -1,
+     287,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   299,    -1,   301,    -1,   303,   304,   305,   306,
+      -1,    -1,    -1,   310,    -1,    -1,    -1,    -1,    -1,   316,
+     317,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
+     327,   328,    -1,    -1,    -1,   332,   333,   334,   335,    -1,
+     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
+      -1,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
+     357,   358,    -1,   360,   361,   362,   363,   364,   365,   366,
+      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
+     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
+      -1,   388,    -1,   390,   391,   392,   393,    -1,    -1,   396,
+      -1,   398,    -1,   400,   401,   402,    -1,    -1,   405,     4,
+       5,     6,     7,     8,   411,    -1,   413,    -1,    -1,   416,
+     417,    -1,   419,   420,    -1,    -1,    -1,    22,    -1,    -1,
+      25,    26,    27,    -1,    29,    30,    31,    32,    -1,    -1,
+      35,    -1,    37,    -1,    39,    40,    41,    42,    -1,    44,
+      45,    -1,    -1,    48,    -1,    -1,    51,    52,    53,    54,
+      -1,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
+      -1,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
+      -1,    -1,    77,    78,    79,    -1,    -1,    -1,    -1,    84,
+      85,    86,    87,    88,    89,    90,    91,    -1,    -1,    94,
+      -1,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
+     105,    -1,   107,    -1,    -1,   110,    -1,    -1,   113,   114,
+      -1,   116,   117,    -1,    -1,   120,   121,    -1,   123,   124,
+     125,   126,   127,    -1,    -1,    -1,   131,    -1,   133,    -1,
+     135,   136,    -1,    -1,   139,   140,    -1,   142,   143,    -1,
+      -1,   146,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,
+      -1,    -1,    -1,    -1,   159,   160,    -1,    -1,    -1,   164,
+     165,   166,   167,    -1,    -1,   170,   171,   172,   173,   174,
+     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
+     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
+     195,   196,   197,   198,    -1,   200,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   208,   209,    -1,    -1,    -1,   213,   214,
+     215,   216,   217,   218,   219,   220,    -1,   222,    -1,    -1,
+     225,    -1,   227,    -1,   229,   230,    -1,    -1,   233,   234,
+     235,    -1,   237,   238,   239,    -1,    -1,   242,    -1,   244,
+      -1,    -1,    -1,   248,    -1,   250,    -1,    -1,   253,   254,
+     255,   256,   257,   258,    -1,    -1,   261,   262,    -1,    -1,
+      -1,    -1,   267,    -1,    -1,    -1,   271,    -1,    -1,    -1,
+     275,    -1,   277,    -1,    -1,   280,   281,   282,   283,   284,
+      -1,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   299,    -1,   301,    -1,   303,   304,
+     305,   306,    -1,    -1,    -1,   310,    -1,    -1,    -1,    -1,
+      -1,   316,   317,    -1,   319,   320,   321,   322,   323,   324,
+     325,   326,   327,   328,    -1,    -1,    -1,   332,   333,   334,
+     335,    -1,   337,   338,   339,   340,   341,   342,   343,    -1,
+     345,   346,    -1,    -1,   349,   350,   351,   352,   353,   354,
+     355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
+     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
+     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
+     385,   386,    -1,   388,    -1,   390,   391,   392,   393,    -1,
+      -1,   396,    -1,   398,    -1,   400,   401,   402,    -1,    -1,
+     405,     4,     5,     6,     7,     8,   411,    -1,   413,   414,
+      -1,   416,   417,    -1,   419,   420,    -1,    -1,    -1,    22,
       -1,    -1,    25,    26,    27,    -1,    29,    30,    31,    32,
       -1,    -1,    35,    -1,    37,    -1,    39,    40,    41,    42,
-      43,    -1,    -1,    46,    -1,    48,    49,    50,    51,    -1,
-      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
-      63,    64,    65,    66,    67,    68,    69,    -1,    -1,    72,
-      73,    -1,    -1,    -1,    -1,    78,    79,    80,    81,    82,
-      83,    84,    85,    -1,    -1,    88,    -1,    90,    91,    92,
-      -1,    94,    -1,    -1,    97,    -1,    99,    -1,   101,    -1,
-      -1,   104,    -1,    -1,   107,   108,    -1,   110,   111,    -1,
-      -1,   114,   115,    -1,   117,   118,   119,   120,   121,    -1,
-      -1,    -1,   125,    -1,   127,    -1,   129,   130,    -1,    -1,
-     133,   134,    -1,   136,   137,    -1,    -1,   140,    -1,    -1,
-     143,    -1,    -1,   146,   147,    -1,    -1,    -1,    -1,   152,
-     153,    -1,    -1,    -1,   157,   158,   159,   160,    -1,    -1,
-     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
+      -1,    44,    45,    -1,    -1,    48,    -1,    -1,    51,    52,
+      53,    54,    -1,    56,    -1,    58,    59,    60,    61,    62,
+      63,    -1,    -1,    66,    67,    68,    69,    70,    71,    72,
+      73,    -1,    -1,    -1,    77,    78,    79,    -1,    -1,    -1,
+      -1,    84,    85,    86,    87,    88,    89,    90,    91,    -1,
+      -1,    94,    -1,    96,    97,    98,    -1,   100,    -1,    -1,
+     103,    -1,   105,    -1,   107,    -1,    -1,   110,    -1,    -1,
+     113,   114,    -1,   116,   117,    -1,    -1,   120,   121,    -1,
+     123,   124,   125,   126,   127,    -1,    -1,    -1,   131,    -1,
+     133,    -1,   135,   136,    -1,    -1,   139,   140,    -1,   142,
+     143,    -1,    -1,   146,    -1,    -1,    -1,   150,    -1,    -1,
+     153,   154,    -1,    -1,    -1,    -1,   159,   160,    -1,    -1,
+      -1,   164,   165,   166,   167,    -1,    -1,   170,   171,   172,
      173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
-     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
-     193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,   202,
-      -1,    -1,    -1,   206,   207,   208,   209,   210,   211,   212,
-     213,    -1,   215,    -1,    -1,   218,    -1,   220,    -1,   222,
-     223,    -1,    -1,   226,   227,   228,    -1,   230,   231,   232,
-      -1,    -1,   235,    -1,   237,    -1,    -1,   240,    -1,   242,
-      -1,    -1,   245,   246,   247,   248,   249,   250,    -1,    -1,
-     253,   254,    -1,    -1,    -1,   258,    -1,    -1,    -1,   262,
-      -1,    -1,    -1,   266,    -1,   268,    -1,    -1,   271,   272,
-     273,   274,   275,    -1,    -1,   278,   279,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,    -1,   292,
-      -1,   294,   295,   296,   297,    -1,    -1,    -1,   301,    -1,
-      -1,    -1,    -1,    -1,   307,   308,    -1,   310,   311,   312,
-     313,   314,   315,   316,   317,   318,   319,    -1,    -1,    -1,
-     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
-     333,   334,    -1,   336,   337,    -1,    -1,   340,   341,   342,
-     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
-     353,   354,   355,   356,   357,    -1,   359,   360,   361,   362,
-     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
-     373,   374,   375,   376,   377,    -1,   379,    -1,   381,   382,
-     383,   384,    -1,    -1,   387,    -1,   389,    -1,   391,   392,
-     393,    -1,    -1,   396,    -1,    -1,    -1,    -1,   401,    -1,
-      -1,   404,   405,    -1,   407,   408,    -1,   410,   411,     4,
-       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,
-      25,    26,    27,    -1,    29,    30,    31,    32,    -1,    -1,
-      35,    -1,    37,    -1,    39,    40,    41,    42,    43,    -1,
-      -1,    46,    -1,    48,    49,    50,    51,    -1,    -1,    54,
-      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
-      65,    66,    67,    68,    69,    -1,    -1,    72,    73,    -1,
-      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
-      85,    -1,    -1,    88,    -1,    90,    91,    92,    -1,    94,
-      -1,    -1,    97,    -1,    99,    -1,   101,    -1,    -1,   104,
-      -1,    -1,   107,   108,    -1,   110,   111,    -1,    -1,   114,
-     115,    -1,   117,   118,   119,   120,   121,    -1,    -1,    -1,
-     125,    -1,   127,    -1,   129,   130,    -1,    -1,   133,   134,
-      -1,   136,   137,    -1,    -1,   140,    -1,    -1,   143,    -1,
-      -1,   146,   147,    -1,    -1,    -1,    -1,   152,   153,    -1,
-      -1,    -1,   157,   158,   159,   160,    -1,    -1,   163,   164,
-     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
-     175,   176,   177,   178,   179,   180,   181,   182,   183,    -1,
-     185,   186,   187,   188,   189,   190,   191,    -1,   193,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   201,   202,    -1,    -1,
-      -1,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
-     215,    -1,    -1,   218,    -1,   220,    -1,   222,   223,    -1,
-      -1,   226,   227,   228,    -1,   230,   231,   232,    -1,    -1,
-     235,    -1,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
-     245,   246,   247,   248,   249,   250,    -1,    -1,   253,   254,
-      -1,    -1,    -1,   258,    -1,    -1,    -1,   262,    -1,    -1,
-      -1,   266,    -1,   268,    -1,    -1,   271,   272,   273,   274,
-     275,    -1,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   290,    -1,   292,    -1,   294,
-     295,   296,   297,    -1,    -1,    -1,   301,    -1,    -1,    -1,
-      -1,    -1,   307,   308,    -1,   310,   311,   312,   313,   314,
-     315,   316,   317,   318,   319,    -1,    -1,    -1,   323,   324,
-     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
-      -1,   336,   337,    -1,    -1,   340,   341,   342,   343,   344,
-     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
-     355,   356,   357,    -1,   359,   360,   361,   362,   363,   364,
-     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
-     375,   376,   377,    -1,   379,    -1,   381,   382,   383,   384,
-      -1,    -1,   387,    -1,   389,    -1,   391,   392,   393,    -1,
-      -1,   396,    -1,    -1,    -1,    -1,   401,    -1,    -1,   404,
-     405,    -1,   407,   408,    -1,   410,   411,     4,     5,     6,
-       7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,    25,    26,
-      27,    -1,    29,    30,    31,    32,    -1,    -1,    35,    -1,
-      37,    -1,    39,    40,    41,    42,    43,    -1,    -1,    46,
-      -1,    48,    49,    50,    51,    -1,    -1,    54,    55,    56,
-      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
-      67,    68,    69,    -1,    -1,    72,    73,    -1,    -1,    -1,
-      -1,    78,    79,    80,    81,    82,    83,    84,    85,    -1,
-      -1,    88,    -1,    90,    91,    92,    -1,    94,    -1,    -1,
-      97,    -1,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,
-     107,   108,    -1,   110,   111,    -1,    -1,   114,   115,    -1,
-     117,   118,   119,   120,   121,    -1,    -1,    -1,   125,    -1,
-     127,    -1,   129,   130,    -1,    -1,   133,   134,    -1,   136,
-     137,    -1,    -1,   140,    -1,    -1,   143,    -1,    -1,   146,
-     147,    -1,    -1,    -1,    -1,   152,   153,    -1,    -1,    -1,
-     157,   158,   159,   160,    -1,    -1,   163,   164,   165,   166,
-     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
-     177,   178,   179,   180,   181,   182,   183,    -1,   185,   186,
-     187,   188,   189,   190,   191,    -1,   193,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,   206,
-     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
-      -1,   218,    -1,   220,    -1,   222,   223,    -1,    -1,   226,
-     227,   228,    -1,   230,   231,   232,    -1,    -1,   235,    -1,
-     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,
-     247,   248,   249,   250,    -1,    -1,   253,   254,    -1,    -1,
-      -1,   258,    -1,    -1,    -1,   262,    -1,    -1,    -1,   266,
-      -1,   268,    -1,    -1,   271,   272,   273,   274,   275,    -1,
-      -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   290,    -1,   292,    -1,   294,   295,   296,
-     297,    -1,    -1,    -1,   301,    -1,    -1,    -1,    -1,    -1,
-     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
-     317,   318,   319,    -1,    -1,    -1,   323,   324,   325,   326,
-      -1,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
-     337,    -1,    -1,   340,   341,   342,   343,   344,   345,   346,
-     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
-     357,    -1,   359,   360,   361,   362,   363,   364,   365,   366,
-     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
-     377,    -1,   379,    -1,   381,   382,   383,   384,    -1,    -1,
-     387,    -1,   389,    -1,   391,   392,   393,    -1,    -1,   396,
-      -1,    -1,    -1,    -1,   401,    -1,    -1,   404,   405,    -1,
-     407,   408,    -1,   410,   411,     4,     5,     6,     7,     8,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    22,    -1,    -1,    25,    26,    27,    -1,
-      29,    30,    31,    32,    -1,    -1,    35,    -1,    37,    -1,
-      39,    40,    41,    42,    43,    -1,    -1,    46,    -1,    48,
-      49,    50,    51,    -1,    -1,    54,    55,    56,    57,    58,
-      59,    -1,    -1,    62,    63,    64,    65,    66,    67,    68,
-      69,    -1,    -1,    72,    73,    -1,    -1,    -1,    -1,    78,
-      79,    80,    81,    82,    83,    84,    85,    -1,    -1,    88,
-      -1,    90,    91,    92,    -1,    94,    -1,    -1,    97,    -1,
-      99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,   108,
-      -1,   110,   111,    -1,    -1,   114,   115,    -1,   117,   118,
-     119,   120,   121,    -1,    -1,    -1,   125,    -1,   127,    -1,
-     129,   130,    -1,    -1,   133,   134,    -1,   136,   137,    -1,
-      -1,   140,    -1,    -1,   143,    -1,    -1,   146,   147,    -1,
-      -1,    -1,    -1,   152,   153,    -1,    -1,    -1,   157,   158,
-     159,   160,    -1,    -1,   163,   164,   165,   166,   167,   168,
-     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
-     179,   180,   181,   182,   183,    -1,   185,   186,   187,   188,
-     189,   190,   191,    -1,   193,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   201,   202,    -1,    -1,    -1,   206,   207,   208,
-     209,   210,   211,   212,   213,    -1,   215,    -1,    -1,   218,
-      -1,   220,    -1,   222,   223,    -1,    -1,   226,   227,   228,
-      -1,   230,   231,   232,    -1,    -1,   235,    -1,   237,    -1,
-      -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,   248,
-     249,   250,    -1,    -1,   253,   254,    -1,    -1,    -1,   258,
-      -1,    -1,    -1,   262,    -1,    -1,    -1,   266,    -1,   268,
-      -1,    -1,   271,   272,   273,   274,   275,    -1,    -1,   278,
-     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   290,    -1,   292,    -1,   294,   295,   296,   297,    -1,
-      -1,    -1,   301,    -1,    -1,    -1,    -1,    -1,   307,   308,
-      -1,   310,   311,   312,   313,   314,   315,   316,   317,   318,
-     319,    -1,    -1,    -1,   323,   324,   325,   326,    -1,   328,
-     329,   330,   331,   332,   333,   334,    -1,   336,   337,    -1,
-      -1,   340,   341,   342,   343,   344,   345,   346,   347,   348,
-     349,    -1,   351,   352,   353,   354,   355,   356,   357,    -1,
-     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
-     369,   370,   371,   372,   373,   374,   375,   376,   377,    -1,
-     379,    -1,   381,   382,   383,   384,    -1,    -1,   387,    -1,
-     389,    -1,   391,   392,   393,    -1,    -1,   396,    -1,    -1,
-      -1,    -1,   401,    -1,    -1,   404,   405,    -1,   407,   408,
-      -1,   410,   411,     4,     5,     6,     7,     8,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     183,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
+     193,   194,   195,   196,   197,   198,    -1,   200,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   208,   209,    -1,    -1,    -1,
+     213,   214,   215,   216,   217,   218,   219,   220,    -1,   222,
+      -1,    -1,   225,    -1,   227,    -1,   229,   230,    -1,    -1,
+     233,   234,   235,    -1,   237,   238,   239,    -1,    -1,   242,
+      -1,   244,    -1,    -1,    -1,   248,    -1,   250,    -1,    -1,
+     253,   254,   255,   256,   257,   258,    -1,    -1,   261,   262,
+      -1,    -1,    -1,    -1,   267,    -1,    -1,    -1,   271,    -1,
+      -1,    -1,   275,    -1,   277,    -1,    -1,   280,   281,   282,
+     283,   284,    -1,    -1,   287,   288,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,   301,    -1,
+     303,   304,   305,   306,    -1,    -1,    -1,   310,    -1,    -1,
+      -1,    -1,    -1,   316,   317,    -1,   319,   320,   321,   322,
+     323,   324,   325,   326,   327,   328,    -1,    -1,    -1,   332,
+     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
+     343,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
+     353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
+     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
+     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
+     383,   384,   385,   386,    -1,   388,    -1,   390,   391,   392,
+     393,    -1,    -1,   396,    -1,   398,    -1,   400,   401,   402,
+      -1,    -1,   405,     4,     5,     6,     7,     8,   411,    -1,
+     413,   414,    -1,   416,   417,    -1,   419,   420,    -1,    -1,
       -1,    22,    -1,    -1,    25,    26,    27,    -1,    29,    30,
       31,    32,    -1,    -1,    35,    -1,    37,    -1,    39,    40,
-      41,    42,    43,    -1,    -1,    46,    -1,    48,    49,    50,
-      51,    -1,    -1,    54,    55,    56,    57,    58,    59,    -1,
-      -1,    62,    63,    64,    65,    66,    67,    68,    69,    -1,
-      -1,    72,    73,    -1,    -1,    -1,    -1,    78,    79,    80,
-      81,    82,    83,    84,    85,    -1,    -1,    88,    -1,    90,
-      91,    92,    -1,    94,    -1,    -1,    97,    -1,    99,    -1,
-     101,    -1,    -1,   104,    -1,    -1,   107,   108,    -1,   110,
-     111,    -1,    -1,   114,   115,    -1,   117,   118,   119,   120,
-     121,    -1,    -1,    -1,   125,    -1,   127,    -1,   129,   130,
-      -1,    -1,   133,   134,    -1,   136,   137,    -1,    -1,   140,
-      -1,    -1,   143,    -1,    -1,   146,   147,    -1,    -1,    -1,
-      -1,   152,   153,    -1,    -1,    -1,   157,   158,   159,   160,
-      -1,    -1,   163,   164,   165,   166,   167,   168,   169,   170,
+      41,    42,    -1,    44,    45,    -1,    -1,    48,    -1,    -1,
+      51,    52,    53,    54,    -1,    56,    -1,    58,    59,    60,
+      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
+      71,    72,    73,    -1,    -1,    -1,    77,    78,    79,    -1,
+      -1,    -1,    -1,    84,    85,    86,    87,    88,    89,    90,
+      91,    -1,    -1,    94,    -1,    96,    97,    98,    -1,   100,
+      -1,    -1,   103,    -1,   105,    -1,   107,    -1,    -1,   110,
+      -1,    -1,   113,   114,    -1,   116,   117,    -1,    -1,   120,
+     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,    -1,
+     131,    -1,   133,    -1,   135,   136,    -1,    -1,   139,   140,
+      -1,   142,   143,    -1,    -1,   146,    -1,    -1,    -1,   150,
+      -1,    -1,   153,   154,    -1,    -1,    -1,    -1,   159,   160,
+      -1,    -1,    -1,   164,   165,   166,   167,    -1,    -1,   170,
      171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
-     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
-     191,    -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     201,   202,    -1,    -1,    -1,   206,   207,   208,   209,   210,
-     211,   212,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
-      -1,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
-     231,   232,    -1,    -1,   235,    -1,   237,    -1,    -1,   240,
-      -1,   242,    -1,    -1,   245,   246,   247,   248,   249,   250,
-      -1,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,
-      -1,   262,    -1,    -1,    -1,   266,    -1,   268,    -1,    -1,
-     271,   272,   273,   274,   275,    -1,    -1,   278,   279,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,
-      -1,   292,    -1,   294,   295,   296,   297,    -1,    -1,    -1,
-     301,    -1,    -1,    -1,    -1,    -1,   307,   308,    -1,   310,
-     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
-      -1,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
-     331,   332,   333,   334,    -1,   336,   337,    -1,    -1,   340,
-     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
-     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
-     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
-     371,   372,   373,   374,   375,   376,   377,    -1,   379,    -1,
-     381,   382,   383,   384,    -1,    -1,   387,    -1,   389,    -1,
-     391,   392,   393,    -1,    -1,   396,    -1,    -1,    -1,    -1,
-     401,    -1,    -1,   404,    -1,    -1,   407,   408,    -1,   410,
-     411,     4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
+     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
+      -1,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   208,   209,    -1,
+      -1,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
+      -1,   222,    -1,    -1,   225,    -1,   227,    -1,   229,   230,
+      -1,    -1,   233,   234,   235,    -1,   237,   238,   239,    -1,
+      -1,   242,    -1,   244,    -1,    -1,    -1,   248,    -1,   250,
+      -1,    -1,   253,   254,   255,   256,   257,   258,    -1,    -1,
+     261,   262,    -1,    -1,    -1,    -1,   267,    -1,    -1,    -1,
+     271,    -1,    -1,    -1,   275,    -1,   277,    -1,    -1,   280,
+     281,   282,   283,   284,    -1,    -1,   287,   288,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
+     301,    -1,   303,   304,   305,   306,    -1,    -1,    -1,   310,
+      -1,    -1,    -1,    -1,    -1,   316,   317,    -1,   319,   320,
+     321,   322,   323,   324,   325,   326,   327,   328,    -1,    -1,
+      -1,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
+     341,   342,   343,    -1,   345,   346,    -1,    -1,   349,   350,
+     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
+     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
+     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
+     381,   382,   383,   384,   385,   386,    -1,   388,    -1,   390,
+     391,   392,   393,    -1,    -1,   396,    -1,   398,    -1,   400,
+     401,   402,    -1,    -1,   405,     4,     5,     6,     7,     8,
+     411,    -1,   413,   414,    -1,   416,   417,    -1,   419,   420,
+      -1,    -1,    -1,    22,    -1,    -1,    25,    26,    27,    -1,
+      29,    30,    31,    32,    -1,    -1,    35,    -1,    37,    -1,
+      39,    40,    41,    42,    -1,    44,    45,    -1,    -1,    48,
+      -1,    -1,    51,    52,    53,    54,    -1,    56,    -1,    58,
+      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
+      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
+      79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,    88,
+      89,    90,    91,    -1,    -1,    94,    -1,    96,    97,    98,
+      -1,   100,    -1,    -1,   103,    -1,   105,    -1,   107,    -1,
+      -1,   110,    -1,    -1,   113,   114,    -1,   116,   117,    -1,
+      -1,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
+      -1,    -1,   131,    -1,   133,    -1,   135,   136,    -1,    -1,
+     139,   140,    -1,   142,   143,    -1,    -1,   146,    -1,    -1,
+      -1,   150,    -1,    -1,   153,   154,    -1,    -1,    -1,    -1,
+     159,   160,    -1,    -1,    -1,   164,   165,   166,   167,    -1,
+      -1,   170,   171,   172,   173,   174,   175,   176,   177,   178,
+     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
+     189,   190,    -1,   192,   193,   194,   195,   196,   197,   198,
+      -1,   200,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   208,
+     209,    -1,    -1,    -1,   213,   214,   215,   216,   217,   218,
+     219,   220,    -1,   222,    -1,    -1,   225,    -1,   227,    -1,
+     229,   230,    -1,    -1,   233,   234,   235,    -1,   237,   238,
+     239,    -1,    -1,   242,    -1,   244,    -1,    -1,    -1,   248,
+      -1,   250,    -1,    -1,   253,   254,   255,   256,   257,   258,
+      -1,    -1,   261,   262,    -1,    -1,    -1,    -1,   267,    -1,
+      -1,    -1,   271,    -1,    -1,    -1,   275,    -1,   277,    -1,
+      -1,   280,   281,   282,   283,   284,    -1,    -1,   287,   288,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     299,    -1,   301,    -1,   303,   304,   305,   306,    -1,    -1,
+      -1,   310,    -1,    -1,    -1,    -1,    -1,   316,   317,    -1,
+     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
+      -1,    -1,    -1,   332,   333,   334,   335,    -1,   337,   338,
+     339,   340,   341,   342,   343,    -1,   345,   346,    -1,    -1,
+     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
+      -1,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
+     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
+     379,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
+      -1,   390,   391,   392,   393,    -1,    -1,   396,    -1,   398,
+      -1,   400,   401,   402,    -1,    -1,   405,     4,     5,     6,
+       7,     8,   411,    -1,   413,   414,    -1,   416,   417,    -1,
+     419,   420,    -1,    -1,    -1,    22,    -1,    -1,    25,    26,
+      27,    -1,    29,    30,    31,    32,    -1,    -1,    35,    -1,
+      37,    -1,    39,    40,    41,    42,    -1,    44,    45,    -1,
+      -1,    48,    -1,    -1,    51,    52,    53,    54,    -1,    56,
+      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
+      67,    68,    69,    70,    71,    72,    73,    -1,    -1,    -1,
+      77,    78,    79,    -1,    -1,    -1,    -1,    84,    85,    86,
+      87,    88,    89,    90,    91,    -1,    -1,    94,    -1,    96,
+      97,    98,    -1,   100,    -1,    -1,   103,    -1,   105,    -1,
+     107,    -1,    -1,   110,    -1,    -1,   113,   114,    -1,   116,
+     117,    -1,    -1,   120,   121,    -1,   123,   124,   125,   126,
+     127,    -1,    -1,    -1,   131,    -1,   133,    -1,   135,   136,
+      -1,    -1,   139,   140,    -1,   142,   143,    -1,    -1,   146,
+      -1,    -1,    -1,   150,    -1,    -1,   153,   154,    -1,    -1,
+      -1,    -1,   159,   160,    -1,    -1,    -1,   164,   165,   166,
+     167,    -1,    -1,   170,   171,   172,   173,   174,   175,   176,
+     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
+     187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
+     197,   198,    -1,   200,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   208,   209,    -1,    -1,    -1,   213,   214,   215,   216,
+     217,   218,   219,   220,    -1,   222,    -1,    -1,   225,    -1,
+     227,    -1,   229,   230,    -1,    -1,   233,   234,   235,    -1,
+     237,   238,   239,    -1,    -1,   242,    -1,   244,    -1,    -1,
+      -1,   248,    -1,   250,    -1,    -1,   253,   254,   255,   256,
+     257,   258,    -1,    -1,   261,   262,    -1,    -1,    -1,    -1,
+     267,    -1,    -1,    -1,   271,    -1,    -1,    -1,   275,    -1,
+     277,    -1,    -1,   280,   281,   282,   283,   284,    -1,    -1,
+     287,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   299,    -1,   301,    -1,   303,   304,   305,   306,
+      -1,    -1,    -1,   310,    -1,    -1,    -1,    -1,    -1,   316,
+     317,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
+     327,   328,    -1,    -1,    -1,   332,   333,   334,   335,    -1,
+     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
+      -1,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
+     357,   358,    -1,   360,   361,   362,   363,   364,   365,   366,
+      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
+     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
+      -1,   388,    -1,   390,   391,   392,   393,    -1,    -1,   396,
+      -1,   398,    -1,   400,   401,   402,    -1,    -1,   405,     4,
+       5,     6,     7,     8,   411,    -1,   413,    -1,    -1,   416,
+     417,    -1,   419,   420,    -1,    -1,    -1,    22,    -1,    -1,
+      25,    26,    27,    -1,    29,    30,    31,    32,    -1,    -1,
+      35,    -1,    37,    -1,    39,    40,    41,    42,    -1,    44,
+      45,    -1,    -1,    48,    -1,    -1,    51,    52,    53,    54,
+      -1,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
+      -1,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
+      -1,    -1,    77,    78,    79,    -1,    -1,    -1,    -1,    84,
+      85,    86,    87,    88,    89,    90,    91,    -1,    -1,    94,
+      -1,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
+     105,    -1,   107,    -1,    -1,   110,    -1,    -1,   113,   114,
+      -1,   116,   117,    -1,    -1,   120,   121,    -1,   123,   124,
+     125,   126,   127,    -1,    -1,    -1,   131,    -1,   133,    -1,
+     135,   136,    -1,    -1,   139,   140,    -1,   142,   143,    -1,
+      -1,   146,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,
+      -1,    -1,    -1,    -1,   159,   160,    -1,    -1,    -1,   164,
+     165,   166,   167,    -1,    -1,   170,   171,   172,   173,   174,
+     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
+     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
+     195,   196,   197,   198,    -1,   200,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   208,   209,    -1,    -1,    -1,   213,   214,
+     215,   216,   217,   218,   219,   220,    -1,   222,    -1,    -1,
+     225,    -1,   227,    -1,   229,   230,    -1,    -1,   233,   234,
+     235,    -1,   237,   238,   239,    -1,    -1,   242,    -1,   244,
+      -1,    -1,    -1,   248,    -1,   250,    -1,    -1,   253,   254,
+     255,   256,   257,   258,    -1,    -1,   261,   262,    -1,    -1,
+      -1,    -1,   267,    -1,    -1,    -1,   271,    -1,    -1,    -1,
+     275,    -1,   277,    -1,    -1,   280,   281,   282,   283,   284,
+      -1,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   299,    -1,   301,    -1,   303,   304,
+     305,   306,    -1,    -1,    -1,   310,    -1,    -1,    -1,    -1,
+      -1,   316,   317,    -1,   319,   320,   321,   322,   323,   324,
+     325,   326,   327,   328,    -1,    -1,    -1,   332,   333,   334,
+     335,    -1,   337,   338,   339,   340,   341,   342,   343,    -1,
+     345,   346,    -1,    -1,   349,   350,   351,   352,   353,   354,
+     355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
+     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
+     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
+     385,   386,    -1,   388,    -1,   390,   391,   392,   393,    -1,
+      -1,   396,    -1,   398,    -1,   400,   401,   402,    -1,    -1,
+     405,     4,     5,     6,     7,     8,   411,    -1,   413,    -1,
+      -1,   416,   417,    -1,   419,   420,    -1,    -1,    -1,    22,
       -1,    -1,    25,    26,    27,    -1,    29,    30,    31,    32,
       -1,    -1,    35,    -1,    37,    -1,    39,    40,    41,    42,
-      43,    -1,    -1,    46,    -1,    48,    49,    50,    51,    -1,
-      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
-      63,    64,    65,    66,    67,    68,    69,    -1,    -1,    72,
-      73,    -1,    -1,    -1,    -1,    78,    79,    80,    81,    82,
-      83,    84,    85,    -1,    -1,    88,    -1,    90,    91,    92,
-      -1,    94,    -1,    -1,    97,    -1,    99,    -1,   101,    -1,
-      -1,   104,    -1,    -1,   107,   108,    -1,   110,   111,    -1,
-      -1,   114,   115,    -1,   117,   118,   119,   120,   121,    -1,
-      -1,    -1,   125,    -1,   127,    -1,   129,   130,    -1,    -1,
-     133,   134,    -1,   136,   137,    -1,    -1,   140,    -1,    -1,
-     143,    -1,    -1,   146,   147,    -1,    -1,    -1,    -1,   152,
-     153,    -1,    -1,    -1,   157,   158,   159,   160,    -1,    -1,
-     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
+      -1,    44,    45,    -1,    -1,    48,    -1,    -1,    51,    52,
+      53,    54,    -1,    56,    -1,    58,    59,    60,    61,    62,
+      63,    -1,    -1,    66,    67,    68,    69,    70,    71,    72,
+      73,    -1,    -1,    -1,    77,    78,    79,    -1,    -1,    -1,
+      -1,    84,    85,    86,    87,    88,    89,    90,    91,    -1,
+      -1,    94,    -1,    96,    97,    98,    -1,   100,    -1,    -1,
+     103,    -1,   105,    -1,   107,    -1,    -1,   110,    -1,    -1,
+     113,   114,    -1,   116,   117,    -1,    -1,   120,   121,    -1,
+     123,   124,   125,   126,   127,    -1,    -1,    -1,   131,    -1,
+     133,    -1,   135,   136,    -1,    -1,   139,   140,    -1,   142,
+     143,    -1,    -1,   146,    -1,    -1,    -1,   150,    -1,    -1,
+     153,   154,    -1,    -1,    -1,    -1,   159,   160,    -1,    -1,
+      -1,   164,   165,   166,   167,    -1,    -1,   170,   171,   172,
      173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
-     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
-     193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,   202,
-      -1,    -1,    -1,   206,   207,   208,   209,   210,   211,   212,
-     213,    -1,   215,    -1,    -1,   218,    -1,   220,    -1,   222,
-     223,    -1,    -1,   226,   227,   228,    -1,   230,   231,   232,
-      -1,    -1,   235,    -1,   237,    -1,    -1,   240,    -1,   242,
-      -1,    -1,   245,   246,   247,   248,   249,   250,    -1,    -1,
-     253,   254,    -1,    -1,    -1,   258,    -1,    -1,    -1,   262,
-      -1,    -1,    -1,   266,    -1,   268,    -1,    -1,   271,   272,
-     273,   274,   275,    -1,    -1,   278,   279,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,    -1,   292,
-      -1,   294,   295,   296,   297,    -1,    -1,    -1,   301,    -1,
-      -1,    -1,    -1,    -1,   307,   308,    -1,   310,   311,   312,
-     313,   314,   315,   316,   317,   318,   319,    -1,    -1,    -1,
-     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
-     333,   334,    -1,   336,   337,    -1,    -1,   340,   341,   342,
-     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
-     353,   354,   355,   356,   357,    -1,   359,   360,   361,   362,
-     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
-     373,   374,   375,   376,   377,    -1,   379,    -1,   381,   382,
-     383,   384,    -1,    -1,   387,    -1,   389,    -1,   391,   392,
-     393,    -1,    -1,   396,    -1,    -1,    -1,    -1,   401,    -1,
-      -1,   404,    -1,    -1,   407,   408,    -1,   410,   411,     4,
-       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,
-      25,    26,    27,    -1,    29,    30,    31,    32,    -1,    -1,
-      35,    -1,    37,    -1,    39,    40,    41,    42,    43,    -1,
-      -1,    46,    -1,    48,    49,    50,    51,    -1,    -1,    54,
-      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
-      65,    66,    67,    68,    69,    -1,    -1,    72,    73,    -1,
-      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
-      85,    -1,    -1,    88,    -1,    90,    91,    92,    -1,    94,
-      -1,    -1,    97,    -1,    99,    -1,   101,    -1,    -1,   104,
-      -1,    -1,   107,   108,    -1,   110,   111,    -1,    -1,   114,
-     115,    -1,   117,   118,   119,   120,   121,    -1,    -1,    -1,
-     125,    -1,   127,    -1,   129,   130,    -1,    -1,   133,   134,
-      -1,   136,   137,    -1,    -1,   140,    -1,    -1,   143,    -1,
-      -1,   146,   147,    -1,    -1,    -1,    -1,   152,   153,    -1,
-      -1,    -1,   157,   158,   159,   160,    -1,    -1,   163,   164,
-     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
-     175,   176,   177,   178,   179,   180,   181,   182,   183,    -1,
-     185,   186,   187,   188,   189,   190,   191,    -1,   193,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   201,   202,    -1,    -1,
-      -1,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
-     215,    -1,    -1,   218,    -1,   220,    -1,   222,   223,    -1,
-      -1,   226,   227,   228,    -1,   230,   231,   232,    -1,    -1,
-     235,    -1,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
-     245,   246,   247,   248,   249,   250,    -1,    -1,   253,   254,
-      -1,    -1,    -1,   258,    -1,    -1,    -1,   262,    -1,    -1,
-      -1,   266,    -1,   268,    -1,    -1,   271,   272,   273,   274,
-     275,    -1,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   290,    -1,   292,    -1,   294,
-     295,   296,   297,    -1,    -1,    -1,   301,    -1,    -1,    -1,
-      -1,    -1,   307,   308,    -1,   310,   311,   312,   313,   314,
-     315,   316,   317,   318,   319,    -1,    -1,    -1,   323,   324,
-     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
-      -1,   336,   337,    -1,    -1,   340,   341,   342,   343,   344,
-     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
-     355,   356,   357,    -1,   359,   360,   361,   362,   363,   364,
-     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
-     375,   376,   377,    -1,   379,    -1,   381,   382,   383,   384,
-      -1,    -1,   387,    -1,   389,    -1,   391,   392,   393,    -1,
-      -1,   396,    -1,    -1,    -1,    -1,   401,    -1,    -1,   404,
-      -1,    -1,   407,   408,    -1,   410,   411,     4,     5,     6,
-       7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,    25,    26,
-      27,    -1,    29,    30,    31,    32,    -1,    -1,    35,    -1,
-      37,    -1,    39,    40,    41,    42,    43,    -1,    -1,    46,
-      -1,    48,    49,    50,    51,    -1,    -1,    54,    55,    56,
-      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
-      67,    68,    69,    -1,    -1,    72,    73,    -1,    -1,    -1,
-      -1,    78,    79,    80,    81,    82,    83,    84,    85,    -1,
-      -1,    88,    -1,    90,    91,    92,    -1,    94,    -1,    -1,
-      97,    -1,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,
-     107,   108,    -1,   110,   111,    -1,    -1,   114,   115,    -1,
-     117,   118,   119,   120,   121,    -1,    -1,    -1,   125,    -1,
-     127,    -1,   129,   130,    -1,    -1,   133,   134,    -1,   136,
-     137,    -1,    -1,   140,    -1,    -1,   143,    -1,    -1,   146,
-     147,    -1,    -1,    -1,    -1,   152,   153,    -1,    -1,    -1,
-     157,   158,   159,   160,    -1,    -1,   163,   164,   165,   166,
-     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
-     177,   178,   179,   180,   181,   182,   183,    -1,   185,   186,
-     187,   188,   189,   190,   191,    -1,   193,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,   206,
-     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
-      -1,   218,    -1,   220,    -1,   222,   223,    -1,    -1,   226,
-     227,   228,    -1,   230,   231,   232,    -1,    -1,   235,    -1,
-     237,    -1,    -1,   240,    -1,   242,    -1,    -1,   245,   246,
-     247,   248,   249,   250,    -1,    -1,   253,   254,    -1,    -1,
-      -1,   258,    -1,    -1,    -1,   262,    -1,    -1,    -1,   266,
-      -1,   268,    -1,    -1,   271,   272,   273,   274,   275,    -1,
-      -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   290,    -1,   292,    -1,   294,   295,   296,
-     297,    -1,    -1,    -1,   301,    -1,    -1,    -1,    -1,    -1,
-     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
-     317,   318,   319,    -1,    -1,    -1,   323,   324,   325,   326,
-      -1,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
-     337,    -1,    -1,   340,   341,   342,   343,   344,   345,   346,
-     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
-     357,    -1,   359,   360,   361,   362,   363,   364,   365,   366,
-     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
-     377,    -1,   379,    -1,   381,   382,   383,   384,    -1,    -1,
-     387,    -1,   389,    -1,   391,   392,   393,    -1,    -1,   396,
-      -1,    -1,    -1,    -1,   401,    -1,    -1,   404,    -1,    -1,
-     407,   408,    -1,   410,   411,     4,     5,     6,     7,     8,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    22,    -1,    -1,    25,    26,    27,    -1,
-      29,    30,    31,    32,    -1,    -1,    35,    -1,    37,    -1,
-      39,    40,    41,    42,    43,    -1,    -1,    46,    -1,    48,
-      49,    50,    51,    -1,    -1,    54,    55,    56,    57,    58,
-      59,    -1,    -1,    62,    63,    64,    65,    66,    67,    68,
-      69,    -1,    -1,    72,    73,    -1,    -1,    -1,    -1,    78,
-      79,    80,    81,    82,    83,    84,    85,    -1,    -1,    88,
-      -1,    90,    91,    92,    -1,    94,    -1,    -1,    97,    -1,
-      99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,   108,
-      -1,   110,   111,    -1,    -1,   114,   115,    -1,   117,   118,
-     119,   120,   121,    -1,    -1,    -1,   125,    -1,   127,    -1,
-     129,   130,    -1,    -1,   133,   134,    -1,   136,   137,    -1,
-      -1,   140,    -1,    -1,   143,    -1,    -1,   146,   147,    -1,
-      -1,    -1,    -1,   152,   153,    -1,    -1,    -1,   157,   158,
-     159,   160,    -1,    -1,   163,   164,   165,   166,   167,   168,
-     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
-     179,   180,   181,   182,   183,    -1,   185,   186,   187,   188,
-     189,   190,   191,    -1,   193,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   201,   202,    -1,    -1,    -1,   206,   207,   208,
-     209,   210,   211,   212,   213,    -1,   215,    -1,    -1,   218,
-      -1,   220,    -1,   222,   223,    -1,    -1,   226,   227,   228,
-      -1,   230,   231,   232,    -1,    -1,   235,    -1,   237,    -1,
-      -1,   240,    -1,   242,    -1,    -1,   245,   246,   247,   248,
-     249,   250,    -1,    -1,   253,   254,    -1,    -1,    -1,   258,
-      -1,    -1,    -1,   262,    -1,    -1,    -1,   266,    -1,   268,
-      -1,    -1,   271,   272,   273,   274,   275,    -1,    -1,   278,
-     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   290,    -1,   292,    -1,   294,   295,   296,   297,    -1,
-      -1,    -1,   301,    -1,    -1,    -1,    -1,    -1,   307,   308,
-      -1,   310,   311,   312,   313,   314,   315,   316,   317,   318,
-     319,    -1,    -1,    -1,   323,   324,   325,   326,    -1,   328,
-     329,   330,   331,   332,   333,   334,    -1,   336,   337,    -1,
-      -1,   340,   341,   342,   343,   344,   345,   346,   347,   348,
-     349,    -1,   351,   352,   353,   354,   355,   356,   357,    -1,
-     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
-     369,   370,   371,   372,   373,   374,   375,   376,   377,    -1,
-     379,    -1,   381,   382,   383,   384,    -1,    -1,   387,    -1,
-     389,    -1,   391,   392,   393,    -1,    -1,   396,    -1,    -1,
-      -1,    -1,   401,    -1,    -1,   404,    -1,    -1,   407,   408,
-      -1,   410,   411,     4,     5,     6,     7,     8,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     183,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
+     193,   194,   195,   196,   197,   198,    -1,   200,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   208,   209,    -1,    -1,    -1,
+     213,   214,   215,   216,   217,   218,   219,   220,    -1,   222,
+      -1,    -1,   225,    -1,   227,    -1,   229,   230,    -1,    -1,
+     233,   234,   235,    -1,   237,   238,   239,    -1,    -1,   242,
+      -1,   244,    -1,    -1,    -1,   248,    -1,   250,    -1,    -1,
+     253,   254,   255,   256,   257,   258,    -1,    -1,   261,   262,
+      -1,    -1,    -1,    -1,   267,    -1,    -1,    -1,   271,    -1,
+      -1,    -1,   275,    -1,   277,    -1,    -1,   280,   281,   282,
+     283,   284,    -1,    -1,   287,   288,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,   301,    -1,
+     303,   304,   305,   306,    -1,    -1,    -1,   310,    -1,    -1,
+      -1,    -1,    -1,   316,   317,    -1,   319,   320,   321,   322,
+     323,   324,   325,   326,   327,   328,    -1,    -1,    -1,   332,
+     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
+     343,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
+     353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
+     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
+     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
+     383,   384,   385,   386,    -1,   388,    -1,   390,   391,   392,
+     393,    -1,    -1,   396,    -1,   398,    -1,   400,   401,   402,
+      -1,    -1,   405,     4,     5,     6,     7,     8,   411,    -1,
+     413,    -1,    -1,   416,   417,    -1,   419,   420,    -1,    -1,
       -1,    22,    -1,    -1,    25,    26,    27,    -1,    29,    30,
       31,    32,    -1,    -1,    35,    -1,    37,    -1,    39,    40,
-      41,    42,    43,    -1,    -1,    46,    -1,    48,    49,    50,
-      51,    -1,    -1,    54,    55,    56,    57,    58,    59,    -1,
-      -1,    62,    63,    64,    65,    66,    67,    68,    69,    -1,
-      -1,    72,    73,    -1,    -1,    -1,    -1,    78,    79,    80,
-      81,    82,    83,    84,    85,    -1,    -1,    88,    -1,    90,
-      91,    92,    -1,    94,    -1,    -1,    97,    -1,    99,    -1,
-     101,    -1,    -1,   104,    -1,    -1,   107,   108,    -1,   110,
-     111,    -1,    -1,   114,   115,    -1,   117,   118,   119,   120,
-     121,    -1,    -1,    -1,   125,    -1,   127,    -1,   129,   130,
-      -1,    -1,   133,   134,    -1,   136,   137,    -1,    -1,   140,
-      -1,    -1,   143,    -1,    -1,   146,   147,    -1,    -1,    -1,
-      -1,   152,   153,    -1,    -1,    -1,   157,   158,   159,   160,
-      -1,    -1,   163,   164,   165,   166,   167,   168,   169,   170,
+      41,    42,    -1,    44,    45,    -1,    -1,    48,    -1,    -1,
+      51,    52,    53,    54,    -1,    56,    -1,    58,    59,    60,
+      61,    62,    63,    -1,    -1,    66,    67,    68,    69,    70,
+      71,    72,    73,    -1,    -1,    -1,    77,    78,    79,    -1,
+      -1,    -1,    -1,    84,    85,    86,    87,    88,    89,    90,
+      91,    -1,    -1,    94,    -1,    96,    97,    98,    -1,   100,
+      -1,    -1,   103,    -1,   105,    -1,   107,    -1,    -1,   110,
+      -1,    -1,   113,   114,    -1,   116,   117,    -1,    -1,   120,
+     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,    -1,
+     131,    -1,   133,    -1,   135,   136,    -1,    -1,   139,   140,
+      -1,   142,   143,    -1,    -1,   146,    -1,    -1,    -1,   150,
+      -1,    -1,   153,   154,    -1,    -1,    -1,    -1,   159,   160,
+      -1,    -1,    -1,   164,   165,   166,   167,    -1,    -1,   170,
      171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
-     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
-     191,    -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     201,   202,    -1,    -1,    -1,   206,   207,   208,   209,   210,
-     211,   212,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
-      -1,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
-     231,   232,    -1,    -1,   235,    -1,   237,    -1,    -1,   240,
-      -1,   242,    -1,    -1,   245,   246,   247,   248,   249,   250,
-      -1,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,
-      -1,   262,    -1,    -1,    -1,   266,    -1,   268,    -1,    -1,
-     271,   272,   273,   274,   275,    -1,    -1,   278,   279,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,
-      -1,   292,    -1,   294,   295,   296,   297,    -1,    -1,    -1,
-     301,    -1,    -1,    -1,    -1,    -1,   307,   308,    -1,   310,
-     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
-      -1,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
-     331,   332,   333,   334,    -1,   336,   337,    -1,    -1,   340,
-     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
-     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
-     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
-     371,   372,   373,   374,   375,   376,   377,    -1,   379,    -1,
-     381,   382,   383,   384,    -1,    -1,   387,    -1,   389,    -1,
-     391,   392,   393,    -1,    -1,   396,    -1,    -1,    -1,    -1,
-     401,    -1,    -1,   404,    -1,    -1,   407,   408,    -1,   410,
-     411,     4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
+     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
+      -1,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   208,   209,    -1,
+      -1,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
+      -1,   222,    -1,    -1,   225,    -1,   227,    -1,   229,   230,
+      -1,    -1,   233,   234,   235,    -1,   237,   238,   239,    -1,
+      -1,   242,    -1,   244,    -1,    -1,    -1,   248,    -1,   250,
+      -1,    -1,   253,   254,   255,   256,   257,   258,    -1,    -1,
+     261,   262,    -1,    -1,    -1,    -1,   267,    -1,    -1,    -1,
+     271,    -1,    -1,    -1,   275,    -1,   277,    -1,    -1,   280,
+     281,   282,   283,   284,    -1,    -1,   287,   288,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
+     301,    -1,   303,   304,   305,   306,    -1,    -1,    -1,   310,
+      -1,    -1,    -1,    -1,    -1,   316,   317,    -1,   319,   320,
+     321,   322,   323,   324,   325,   326,   327,   328,    -1,    -1,
+      -1,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
+     341,   342,   343,    -1,   345,   346,    -1,    -1,   349,   350,
+     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
+     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
+     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
+     381,   382,   383,   384,   385,   386,    -1,   388,    -1,   390,
+     391,   392,   393,    -1,    -1,   396,    -1,   398,    -1,   400,
+     401,   402,    -1,    -1,   405,     4,     5,     6,     7,     8,
+     411,    -1,   413,    -1,    -1,   416,   417,    -1,   419,   420,
+      -1,    -1,    -1,    22,    -1,    -1,    25,    26,    27,    -1,
+      29,    30,    31,    32,    -1,    -1,    35,    -1,    37,    -1,
+      39,    40,    41,    42,    -1,    44,    45,    -1,    -1,    48,
+      -1,    -1,    51,    52,    53,    54,    -1,    56,    -1,    58,
+      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
+      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
+      79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,    88,
+      89,    90,    91,    -1,    -1,    94,    -1,    96,    97,    98,
+      -1,   100,    -1,    -1,   103,    -1,   105,    -1,   107,    -1,
+      -1,   110,    -1,    -1,   113,   114,    -1,   116,   117,    -1,
+      -1,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
+      -1,    -1,   131,    -1,   133,    -1,   135,   136,    -1,    -1,
+     139,   140,    -1,   142,   143,    -1,    -1,   146,    -1,    -1,
+      -1,   150,    -1,    -1,   153,   154,    -1,    -1,    -1,    -1,
+     159,   160,    -1,    -1,    -1,   164,   165,   166,   167,    -1,
+      -1,   170,   171,   172,   173,   174,   175,   176,   177,   178,
+     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
+     189,   190,    -1,   192,   193,   194,   195,   196,   197,   198,
+      -1,   200,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   208,
+     209,    -1,    -1,    -1,   213,   214,   215,   216,   217,   218,
+     219,   220,    -1,   222,    -1,    -1,   225,    -1,   227,    -1,
+     229,   230,    -1,    -1,   233,   234,   235,    -1,   237,   238,
+     239,    -1,    -1,   242,    -1,   244,    -1,    -1,    -1,   248,
+      -1,   250,    -1,    -1,   253,   254,   255,   256,   257,   258,
+      -1,    -1,   261,   262,    -1,    -1,    -1,    -1,   267,    -1,
+      -1,    -1,   271,    -1,    -1,    -1,   275,    -1,   277,    -1,
+      -1,   280,   281,   282,   283,   284,    -1,    -1,   287,   288,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     299,    -1,   301,    -1,   303,   304,   305,   306,    -1,    -1,
+      -1,   310,    -1,    -1,    -1,    -1,    -1,   316,   317,    -1,
+     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
+      -1,    -1,    -1,   332,   333,   334,   335,    -1,   337,   338,
+     339,   340,   341,   342,   343,    -1,   345,   346,    -1,    -1,
+     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
+      -1,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
+     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
+     379,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
+      -1,   390,   391,   392,   393,    -1,    -1,   396,    -1,   398,
+      -1,   400,   401,   402,    -1,    -1,   405,     4,     5,     6,
+       7,     8,   411,    -1,   413,    -1,    -1,   416,   417,    -1,
+     419,   420,    -1,    -1,    -1,    22,    -1,    -1,    25,    26,
+      27,    -1,    29,    30,    31,    32,    -1,    -1,    35,    -1,
+      37,    -1,    39,    40,    41,    42,    -1,    44,    45,    -1,
+      -1,    48,    -1,    -1,    51,    52,    53,    54,    -1,    56,
+      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
+      67,    68,    69,    70,    71,    72,    73,    -1,    -1,    -1,
+      77,    78,    79,    -1,    -1,    -1,    -1,    84,    85,    86,
+      87,    88,    89,    90,    91,    -1,    -1,    94,    -1,    96,
+      97,    98,    -1,   100,    -1,    -1,   103,    -1,   105,    -1,
+     107,    -1,    -1,   110,    -1,    -1,   113,   114,    -1,   116,
+     117,    -1,    -1,   120,   121,    -1,   123,   124,   125,   126,
+     127,    -1,    -1,    -1,   131,    -1,   133,    -1,   135,   136,
+      -1,    -1,   139,   140,    -1,   142,   143,    -1,    -1,   146,
+      -1,    -1,    -1,   150,    -1,    -1,   153,   154,    -1,    -1,
+      -1,    -1,   159,   160,    -1,    -1,    -1,   164,   165,   166,
+     167,    -1,    -1,   170,   171,   172,   173,   174,   175,   176,
+     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
+     187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
+     197,   198,    -1,   200,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   208,   209,    -1,    -1,    -1,   213,   214,   215,   216,
+     217,   218,   219,   220,    -1,   222,    -1,    -1,   225,    -1,
+     227,    -1,   229,   230,    -1,    -1,   233,   234,   235,    -1,
+     237,   238,   239,    -1,    -1,   242,    -1,   244,    -1,    -1,
+      -1,   248,    -1,   250,    -1,    -1,   253,   254,   255,   256,
+     257,   258,    -1,    -1,   261,   262,    -1,    -1,    -1,    -1,
+     267,    -1,    -1,    -1,   271,    -1,    -1,    -1,   275,    -1,
+     277,    -1,    -1,   280,   281,   282,   283,   284,    -1,    -1,
+     287,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   299,    -1,   301,    -1,   303,   304,   305,   306,
+      -1,    -1,    -1,   310,    -1,    -1,    -1,    -1,    -1,   316,
+     317,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
+     327,   328,    -1,    -1,    -1,   332,   333,   334,   335,    -1,
+     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
+      -1,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
+     357,   358,    -1,   360,   361,   362,   363,   364,   365,   366,
+      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
+     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
+      -1,   388,    -1,   390,   391,   392,   393,    -1,    -1,   396,
+      -1,   398,    -1,   400,   401,   402,    -1,    -1,   405,     4,
+       5,     6,     7,     8,   411,    -1,   413,    -1,    -1,   416,
+     417,    -1,   419,   420,    -1,    -1,    -1,    22,    -1,    -1,
+      25,    26,    27,    -1,    29,    30,    31,    32,    -1,    -1,
+      35,    -1,    37,    -1,    39,    40,    41,    42,    -1,    44,
+      45,    -1,    -1,    48,    -1,    -1,    51,    52,    53,    54,
+      -1,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
+      -1,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
+      -1,    -1,    77,    78,    79,    -1,    -1,    -1,    -1,    84,
+      85,    86,    87,    88,    89,    90,    91,    -1,    -1,    94,
+      -1,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
+     105,    -1,   107,    -1,    -1,   110,    -1,    -1,   113,   114,
+      -1,   116,   117,    -1,    -1,   120,   121,    -1,   123,   124,
+     125,   126,   127,    -1,    -1,    -1,   131,    -1,   133,    -1,
+     135,   136,    -1,    -1,   139,   140,    -1,   142,   143,    -1,
+      -1,   146,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,
+      -1,    -1,    -1,    -1,   159,   160,    -1,    -1,    -1,   164,
+     165,   166,   167,    -1,    -1,   170,   171,   172,   173,   174,
+     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
+     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
+     195,   196,   197,   198,    -1,   200,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   208,   209,    -1,    -1,    -1,   213,   214,
+     215,   216,   217,   218,   219,   220,    -1,   222,    -1,    -1,
+     225,    -1,   227,    -1,   229,   230,    -1,    -1,   233,   234,
+     235,    -1,   237,   238,   239,    -1,    -1,   242,    -1,   244,
+      -1,    -1,    -1,   248,    -1,   250,    -1,    -1,   253,   254,
+     255,   256,   257,   258,    -1,    -1,   261,   262,    -1,    -1,
+      -1,    -1,   267,    -1,    -1,    -1,   271,    -1,    -1,    -1,
+     275,    -1,   277,    -1,    -1,   280,   281,   282,   283,   284,
+      -1,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   299,    -1,   301,    -1,   303,   304,
+     305,   306,    -1,    -1,    -1,   310,    -1,    -1,    -1,    -1,
+      -1,   316,   317,    -1,   319,   320,   321,   322,   323,   324,
+     325,   326,   327,   328,    -1,    -1,    -1,   332,   333,   334,
+     335,    -1,   337,   338,   339,   340,   341,   342,   343,    -1,
+     345,   346,    -1,    -1,   349,   350,   351,   352,   353,   354,
+     355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
+     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
+     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
+     385,   386,    -1,   388,    -1,   390,   391,   392,   393,    -1,
+      -1,   396,    -1,   398,    -1,   400,   401,   402,    -1,    -1,
+     405,     4,     5,     6,     7,     8,   411,    -1,   413,    -1,
+      -1,   416,   417,    -1,   419,   420,    -1,    -1,    -1,    22,
       -1,    -1,    25,    26,    27,    -1,    29,    30,    31,    32,
       -1,    -1,    35,    -1,    37,    -1,    39,    40,    41,    42,
-      43,    -1,    -1,    46,    -1,    48,    49,    50,    51,    -1,
-      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
-      63,    64,    65,    66,    67,    68,    69,    -1,    -1,    72,
-      73,    -1,    -1,    -1,    -1,    78,    79,    80,    81,    82,
-      83,    84,    85,    -1,    -1,    88,    -1,    90,    91,    92,
-      -1,    94,    -1,    -1,    97,    -1,    99,    -1,   101,    -1,
-      -1,   104,    -1,    -1,   107,   108,    -1,   110,   111,    -1,
-      -1,   114,   115,    -1,   117,   118,   119,   120,   121,    -1,
-      -1,    -1,   125,    -1,   127,    -1,   129,   130,    -1,    -1,
-     133,   134,    -1,   136,   137,    -1,    -1,   140,    -1,    -1,
-     143,    -1,    -1,   146,   147,    -1,    -1,    -1,    -1,   152,
-     153,    -1,    -1,    -1,   157,   158,   159,   160,    -1,    -1,
-     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
+      -1,    44,    45,    -1,    -1,    48,    -1,    -1,    51,    52,
+      53,    54,    -1,    56,    -1,    58,    59,    60,    61,    62,
+      63,    -1,    -1,    66,    67,    68,    69,    70,    71,    72,
+      73,    -1,    -1,    -1,    77,    78,    79,    -1,    -1,    -1,
+      -1,    84,    85,    86,    87,    88,    89,    90,    91,    -1,
+      -1,    94,    -1,    96,    97,    98,    -1,   100,    -1,    -1,
+     103,    -1,   105,    -1,   107,    -1,    -1,   110,    -1,    -1,
+     113,   114,    -1,   116,   117,    -1,    -1,   120,   121,    -1,
+     123,   124,   125,   126,   127,    -1,    -1,    -1,   131,    -1,
+     133,    -1,   135,   136,    -1,    -1,   139,   140,    -1,   142,
+     143,    -1,    -1,   146,    -1,    -1,    -1,   150,    -1,    -1,
+     153,   154,    -1,    -1,    -1,    -1,   159,   160,    -1,    -1,
+      -1,   164,   165,   166,   167,    -1,    -1,   170,   171,   172,
      173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
-     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
-     193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,   202,
-      -1,    -1,    -1,   206,   207,   208,   209,   210,   211,   212,
-     213,    -1,   215,    -1,    -1,   218,    -1,   220,    -1,   222,
-     223,    -1,    -1,   226,   227,   228,    -1,   230,   231,   232,
-      -1,    -1,   235,    -1,   237,    -1,    -1,   240,    -1,   242,
-      -1,    -1,   245,   246,   247,   248,   249,   250,    -1,    -1,
-     253,   254,    -1,    -1,    -1,   258,    -1,    -1,    -1,   262,
-      -1,    -1,    -1,   266,    -1,   268,    -1,    -1,   271,   272,
-     273,   274,   275,    -1,    -1,   278,   279,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,    -1,   292,
-      -1,   294,   295,   296,   297,    -1,    -1,    -1,   301,    -1,
-      -1,    -1,    -1,    -1,   307,   308,    -1,   310,   311,   312,
-     313,   314,   315,   316,   317,   318,   319,    -1,    -1,    -1,
-     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
-     333,   334,    -1,   336,   337,    -1,    -1,   340,   341,   342,
-     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
-     353,   354,   355,   356,   357,    -1,   359,   360,   361,   362,
-     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
-     373,   374,   375,   376,   377,    -1,   379,    -1,   381,   382,
-     383,   384,    -1,    -1,   387,    -1,   389,    -1,   391,   392,
-     393,    -1,    -1,   396,    -1,    -1,    -1,    -1,   401,    -1,
-      -1,   404,    -1,    -1,   407,   408,    -1,   410,   411,     4,
+     183,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
+     193,   194,   195,   196,   197,   198,    -1,   200,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   208,   209,    -1,    -1,    -1,
+     213,   214,   215,   216,   217,   218,   219,   220,    -1,   222,
+      -1,    -1,   225,    -1,   227,    -1,   229,   230,    -1,    -1,
+     233,   234,   235,    -1,   237,   238,   239,    -1,    -1,   242,
+      -1,   244,    -1,    -1,    -1,   248,    -1,   250,    -1,    -1,
+     253,   254,   255,   256,   257,   258,    -1,    -1,   261,   262,
+      -1,    -1,    -1,    -1,   267,    -1,    -1,    -1,   271,    -1,
+      -1,    -1,   275,    -1,   277,    -1,    -1,   280,   281,   282,
+     283,   284,    -1,    -1,   287,   288,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,   301,    -1,
+     303,   304,   305,   306,    -1,    -1,    -1,   310,    -1,    -1,
+      -1,    -1,    -1,   316,   317,    -1,   319,   320,   321,   322,
+     323,   324,   325,   326,   327,   328,    -1,    -1,    -1,   332,
+     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
+     343,    -1,   345,   346,    -1,    -1,   349,   350,   351,   352,
+     353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
+     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
+     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
+     383,   384,   385,   386,    -1,   388,    -1,   390,   391,   392,
+     393,    -1,    -1,   396,    -1,   398,    -1,   400,   401,   402,
+      -1,    -1,   405,     4,     5,     6,     7,     8,   411,    -1,
+     413,    -1,    -1,   416,   417,    -1,   419,   420,    -1,    -1,
+      -1,    22,    -1,    -1,    25,    26,    27,    -1,    29,    30,
+      31,    -1,    -1,    -1,    35,    -1,    37,    -1,    39,    40,
+      41,    42,    -1,    -1,    45,    -1,    -1,    48,    -1,    -1,
+      51,    -1,    -1,    54,    -1,    56,    -1,    58,    59,    60,
+      61,    62,    63,    64,    -1,    66,    67,    68,    -1,    70,
+      -1,    72,    73,    -1,    -1,    -1,    77,    78,    79,    -1,
+      -1,    -1,    -1,    84,    85,    86,    87,    -1,    89,    90,
+      91,    -1,    -1,    94,    -1,    -1,    97,    98,    -1,   100,
+      -1,    -1,   103,   104,    -1,    -1,   107,    -1,    -1,   110,
+      -1,    -1,   113,   114,    -1,   116,   117,    -1,    -1,   120,
+     121,    -1,   123,   124,   125,   126,    -1,    -1,    -1,    -1,
+     131,   132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
+      -1,   142,   143,    -1,   145,   146,    -1,    -1,    -1,   150,
+      -1,    -1,   153,   154,    -1,    -1,   157,    -1,    -1,   160,
+      -1,    -1,    -1,   164,    -1,   166,    -1,    -1,    -1,   170,
+     171,   172,   173,   174,   175,   176,   177,   178,   179,    -1,
+     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
+      -1,   192,   193,    -1,   195,    -1,    -1,   198,    -1,   200,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   208,   209,    -1,
+      -1,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
+      -1,    -1,    -1,    -1,   225,    -1,   227,    -1,   229,   230,
+      -1,    -1,   233,   234,   235,    -1,   237,   238,   239,    -1,
+      -1,   242,    -1,   244,    -1,    -1,    -1,   248,    -1,    -1,
+      -1,    -1,   253,   254,    -1,    -1,    -1,    -1,    -1,    -1,
+     261,   262,    -1,    -1,    -1,    -1,   267,    -1,    -1,    -1,
+     271,    -1,    -1,    -1,   275,    -1,   277,    -1,    -1,    -1,
+     281,    -1,   283,   284,    -1,    -1,   287,   288,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
+     301,    -1,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   316,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   332,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   349,   350,
+      -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,
+     361,   362,   363,    -1,   365,    -1,    -1,    -1,    -1,    -1,
+      -1,   372,   373,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,    -1,   390,
+      -1,    -1,   393,    -1,    -1,   396,    -1,   398,    -1,   400,
+     401,   402,     4,     5,     6,     7,     8,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   420,
+      22,    -1,    -1,    25,    26,    27,    -1,    29,    30,    31,
+      -1,    -1,    -1,    35,    -1,    37,    -1,    39,    40,    41,
+      42,    -1,    -1,    45,    -1,    -1,    48,    -1,    -1,    51,
+      -1,    -1,    54,    -1,    56,    -1,    58,    59,    60,    61,
+      62,    63,    -1,    -1,    66,    67,    68,    -1,    70,    -1,
+      72,    73,    -1,    -1,    -1,    77,    78,    79,    -1,    -1,
+      -1,    -1,    84,    85,    86,    87,    -1,    89,    90,    91,
+      -1,    -1,    94,    -1,    -1,    97,    98,    -1,   100,    -1,
+      -1,   103,   104,    -1,    -1,   107,    -1,    -1,   110,    -1,
+      -1,   113,   114,    -1,   116,   117,    -1,    -1,   120,   121,
+      -1,   123,   124,   125,   126,    -1,    -1,    -1,    -1,   131,
+     132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,    -1,
+     142,   143,    -1,   145,   146,    -1,    -1,    -1,   150,    -1,
+      -1,   153,   154,    -1,    -1,   157,    -1,    -1,   160,    -1,
+      -1,    -1,   164,    -1,   166,    -1,    -1,    -1,   170,   171,
+     172,   173,   174,   175,   176,   177,   178,   179,    -1,   181,
+     182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
+     192,   193,    -1,   195,    -1,    -1,   198,    -1,   200,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   208,   209,    -1,    -1,
+      -1,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
+      -1,    -1,    -1,   225,    -1,   227,    -1,   229,   230,    -1,
+      -1,   233,   234,   235,    -1,   237,   238,   239,    -1,    -1,
+     242,    -1,   244,    -1,    -1,    -1,   248,    -1,    -1,    -1,
+      -1,   253,   254,    -1,    -1,    -1,    -1,    -1,    -1,   261,
+     262,    -1,    -1,    -1,    -1,   267,    -1,    -1,    -1,   271,
+      -1,    -1,    -1,   275,    -1,   277,    -1,    -1,    -1,   281,
+      -1,   283,   284,    -1,    -1,   287,   288,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,   301,
+      -1,   303,   304,   305,   306,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   316,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     332,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   349,   350,    -1,
+     352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,   361,
+     362,   363,    -1,   365,    -1,    -1,    -1,    -1,    -1,    -1,
+     372,   373,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   388,    -1,   390,    -1,
+      -1,   393,    -1,    -1,   396,    -1,   398,    -1,   400,   401,
+     402,     4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   420,    22,
+      -1,    -1,    25,    26,    27,    -1,    29,    30,    31,    -1,
+      -1,    -1,    35,    -1,    37,    -1,    39,    40,    41,    42,
+      -1,    -1,    45,    -1,    -1,    48,    -1,    -1,    51,    -1,
+      -1,    54,    -1,    56,    -1,    58,    59,    60,    61,    62,
+      63,    64,    -1,    66,    67,    68,    -1,    70,    -1,    72,
+      73,    -1,    -1,    -1,    77,    78,    79,    -1,    -1,    -1,
+      -1,    84,    85,    86,    87,    -1,    89,    90,    91,    -1,
+      -1,    94,    -1,    -1,    97,    98,    -1,   100,    -1,    -1,
+     103,    -1,    -1,    -1,   107,    -1,    -1,   110,    -1,    -1,
+     113,   114,    -1,   116,   117,    -1,    -1,   120,   121,    -1,
+     123,   124,   125,   126,    -1,    -1,    -1,    -1,   131,    -1,
+     133,    -1,   135,    -1,    -1,    -1,   139,    -1,    -1,   142,
+     143,    -1,    -1,   146,    -1,    -1,    -1,   150,    -1,    -1,
+     153,   154,    -1,    -1,    -1,    -1,    -1,   160,    -1,    -1,
+      -1,   164,    -1,   166,    -1,    -1,    -1,   170,   171,   172,
+     173,   174,   175,   176,   177,   178,   179,    -1,   181,   182,
+     183,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
+     193,    -1,   195,    -1,    -1,   198,    -1,   200,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   208,   209,    -1,    -1,    -1,
+     213,   214,   215,   216,   217,   218,   219,   220,    -1,    -1,
+      -1,    -1,   225,    -1,   227,    -1,   229,   230,    -1,    -1,
+     233,   234,   235,    -1,   237,   238,   239,    -1,    -1,   242,
+      -1,   244,    -1,    -1,    -1,   248,    -1,    -1,    -1,    -1,
+     253,   254,    -1,    -1,    -1,    -1,    -1,    -1,   261,   262,
+      -1,    -1,    -1,    -1,   267,    -1,    -1,    -1,   271,    -1,
+      -1,    -1,   275,    -1,   277,    -1,    -1,    -1,   281,    -1,
+     283,   284,    -1,    -1,   287,   288,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,   301,    -1,
+     303,   304,   305,   306,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   316,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   332,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   349,   350,    -1,   352,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,   361,   362,
+     363,    -1,   365,    -1,    -1,    -1,    -1,    -1,    -1,   372,
+     373,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   388,    -1,   390,    -1,    -1,
+     393,    -1,    -1,   396,    -1,   398,    -1,   400,   401,   402,
+       4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,
+     413,    -1,    -1,    -1,    -1,    -1,    -1,   420,    22,    -1,
+      -1,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
+      -1,    35,    -1,    37,    -1,    39,    40,    41,    42,    -1,
+      -1,    45,    -1,    -1,    48,    -1,    -1,    51,    -1,    -1,
+      54,    -1,    56,    -1,    58,    59,    60,    61,    62,    63,
+      64,    -1,    66,    67,    68,    -1,    70,    -1,    72,    73,
+      -1,    -1,    -1,    77,    78,    79,    -1,    -1,    -1,    -1,
+      84,    85,    86,    87,    -1,    89,    90,    91,    -1,    -1,
+      94,    -1,    -1,    97,    98,    -1,   100,    -1,    -1,   103,
+      -1,    -1,    -1,   107,    -1,    -1,   110,    -1,    -1,   113,
+     114,    -1,   116,   117,    -1,    -1,   120,   121,    -1,   123,
+     124,   125,   126,    -1,    -1,    -1,    -1,   131,    -1,   133,
+      -1,   135,    -1,    -1,    -1,   139,    -1,    -1,   142,   143,
+      -1,    -1,   146,    -1,    -1,    -1,   150,    -1,    -1,   153,
+     154,    -1,    -1,    -1,    -1,    -1,   160,    -1,    -1,    -1,
+     164,    -1,   166,    -1,    -1,    -1,   170,   171,   172,   173,
+     174,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
+     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
+      -1,   195,    -1,    -1,   198,    -1,   200,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   208,   209,    -1,    -1,    -1,   213,
+     214,   215,   216,   217,   218,   219,   220,    -1,    -1,    -1,
+      -1,   225,    -1,   227,    -1,   229,   230,    -1,    -1,   233,
+     234,   235,    -1,   237,   238,   239,    -1,    -1,   242,    -1,
+     244,    -1,    -1,    -1,   248,    -1,    -1,    -1,    -1,   253,
+     254,    -1,    -1,    -1,    -1,    -1,    -1,   261,   262,    -1,
+      -1,    -1,    -1,   267,    -1,    -1,    -1,   271,    -1,    -1,
+      -1,   275,    -1,   277,    -1,    -1,    -1,   281,    -1,   283,
+     284,    -1,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   299,    -1,   301,    -1,   303,
+     304,   305,   306,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   332,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   349,   350,    -1,   352,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   360,   361,   362,   363,
+      -1,   365,    -1,    -1,    -1,    -1,    -1,    -1,   372,   373,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   388,    -1,   390,    -1,    -1,   393,
+      -1,    -1,   396,    -1,   398,    -1,   400,   401,   402,     4,
        5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,
-      25,    26,    27,    -1,    29,    30,    31,    32,    -1,    -1,
-      35,    -1,    37,    -1,    39,    40,    41,    42,    43,    -1,
-      -1,    46,    -1,    48,    49,    50,    51,    -1,    -1,    54,
-      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
-      65,    66,    67,    68,    69,    -1,    -1,    72,    73,    -1,
-      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
-      85,    -1,    -1,    88,    -1,    90,    91,    92,    -1,    94,
-      -1,    -1,    97,    -1,    99,    -1,   101,    -1,    -1,   104,
-      -1,    -1,   107,   108,    -1,   110,   111,    -1,    -1,   114,
-     115,    -1,   117,   118,   119,   120,   121,    -1,    -1,    -1,
-     125,    -1,   127,    -1,   129,   130,    -1,    -1,   133,   134,
-      -1,   136,   137,    -1,    -1,   140,    -1,    -1,   143,    -1,
-      -1,   146,   147,    -1,    -1,    -1,    -1,   152,   153,    -1,
-      -1,    -1,   157,   158,   159,   160,    -1,    -1,   163,   164,
-     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
-     175,   176,   177,   178,   179,   180,   181,   182,   183,    -1,
-     185,   186,   187,   188,   189,   190,   191,    -1,   193,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   201,   202,    -1,    -1,
-      -1,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
-     215,    -1,    -1,   218,    -1,   220,    -1,   222,   223,    -1,
-      -1,   226,   227,   228,    -1,   230,   231,   232,    -1,    -1,
-     235,    -1,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
-     245,   246,   247,   248,   249,   250,    -1,    -1,   253,   254,
-      -1,    -1,    -1,   258,    -1,    -1,    -1,   262,    -1,    -1,
-      -1,   266,    -1,   268,    -1,    -1,   271,   272,   273,   274,
-     275,    -1,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   290,    -1,   292,    -1,   294,
-     295,   296,   297,    -1,    -1,    -1,   301,    -1,    -1,    -1,
-      -1,    -1,   307,   308,    -1,   310,   311,   312,   313,   314,
-     315,   316,   317,   318,   319,    -1,    -1,    -1,   323,   324,
-     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
-      -1,   336,   337,    -1,    -1,   340,   341,   342,   343,   344,
-     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
-     355,   356,   357,    -1,   359,   360,   361,   362,   363,   364,
-     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
-     375,   376,   377,    -1,   379,    -1,   381,   382,   383,   384,
-      -1,    -1,   387,    -1,   389,    -1,   391,   392,   393,    -1,
-      -1,   396,    -1,    -1,    -1,    -1,   401,    -1,    -1,   404,
-      -1,    -1,   407,   408,    -1,   410,   411,     4,     5,     6,
-       7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,    25,    26,
-      27,    -1,    29,    30,    31,    -1,    -1,    -1,    35,    -1,
-      37,    -1,    39,    40,    41,    -1,    43,    -1,    -1,    46,
-      -1,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    56,
-      57,    58,    59,    60,    -1,    62,    63,    64,    -1,    66,
-      -1,    68,    69,    -1,    -1,    72,    73,    -1,    -1,    -1,
-      -1,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
-      -1,    88,    -1,    -1,    91,    92,    -1,    94,    -1,    -1,
-      97,    98,    -1,    -1,   101,    -1,    -1,   104,    -1,    -1,
-     107,   108,    -1,   110,   111,    -1,    -1,   114,   115,    -1,
-     117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,   126,
-     127,    -1,   129,    -1,    -1,    -1,   133,    -1,    -1,   136,
-     137,    -1,   139,   140,    -1,    -1,   143,    -1,    -1,   146,
-     147,    -1,    -1,   150,    -1,    -1,   153,    -1,    -1,    -1,
-     157,    -1,   159,    -1,    -1,    -1,   163,   164,   165,   166,
-     167,   168,   169,   170,   171,   172,    -1,   174,   175,   176,
-     177,   178,   179,   180,   181,   182,   183,    -1,   185,   186,
-      -1,   188,    -1,    -1,   191,    -1,   193,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,   206,
-     207,   208,   209,   210,   211,   212,   213,    -1,    -1,    -1,
-      -1,   218,    -1,   220,    -1,   222,   223,    -1,    -1,   226,
-     227,   228,    -1,   230,   231,   232,    -1,    -1,   235,    -1,
-     237,    -1,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,
-      -1,    -1,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,
-      -1,   258,    -1,    -1,    -1,   262,    -1,    -1,    -1,   266,
-      -1,   268,    -1,    -1,    -1,   272,    -1,   274,   275,    -1,
-      -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   290,    -1,   292,    -1,   294,   295,   296,
-     297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   340,   341,    -1,   343,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   351,   352,   353,   354,    -1,   356,
-      -1,    -1,    -1,    -1,    -1,    -1,   363,   364,    -1,    -1,
+     414,    -1,    -1,    -1,    -1,    -1,   420,    22,    -1,    -1,
+      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
+      35,    -1,    37,    -1,    39,    40,    41,    42,    -1,    -1,
+      45,    -1,    -1,    48,    -1,    -1,    51,    -1,    -1,    54,
+      -1,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
+      -1,    66,    67,    68,    -1,    70,    -1,    72,    73,    -1,
+      -1,    -1,    77,    78,    79,    -1,    -1,    -1,    -1,    84,
+      85,    86,    87,    -1,    89,    90,    91,    -1,    -1,    94,
+      -1,    -1,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
+      -1,    -1,   107,    -1,    -1,   110,    -1,    -1,   113,   114,
+      -1,   116,   117,    -1,    -1,   120,   121,    -1,   123,   124,
+     125,   126,    -1,    -1,    -1,    -1,   131,    -1,   133,    -1,
+     135,    -1,    -1,    -1,   139,    -1,    -1,   142,   143,    -1,
+      -1,   146,    -1,    -1,    -1,   150,   151,    -1,   153,   154,
+      -1,    -1,    -1,    -1,    -1,   160,    -1,    -1,    -1,   164,
+      -1,   166,    -1,    -1,    -1,   170,   171,   172,   173,   174,
+     175,   176,   177,   178,   179,    -1,   181,   182,   183,   184,
+     185,   186,   187,   188,   189,   190,    -1,   192,   193,    -1,
+     195,    -1,    -1,   198,    -1,   200,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   208,   209,    -1,    -1,    -1,   213,   214,
+     215,   216,   217,   218,   219,   220,    -1,    -1,    -1,    -1,
+     225,    -1,   227,    -1,   229,   230,    -1,    -1,   233,   234,
+     235,    -1,   237,   238,   239,    -1,    -1,   242,    -1,   244,
+      -1,    -1,    -1,   248,    -1,    -1,    -1,    -1,   253,   254,
+      -1,    -1,    -1,    -1,    -1,    -1,   261,   262,    -1,    -1,
+      -1,    -1,   267,    -1,    -1,    -1,   271,    -1,    -1,    -1,
+     275,    -1,   277,    -1,    -1,    -1,   281,    -1,   283,   284,
+      -1,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   299,    -1,   301,    -1,   303,   304,
+     305,   306,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   332,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   349,   350,    -1,   352,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   360,   361,   362,   363,    -1,
+     365,    -1,    -1,    -1,    -1,    -1,    -1,   372,   373,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   388,    -1,   390,    -1,    -1,   393,    -1,
+      -1,   396,    -1,   398,    -1,   400,   401,   402,     4,     5,
+       6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   420,    22,    -1,    -1,    25,
+      26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,    35,
+      -1,    37,    -1,    39,    40,    41,    42,    -1,    -1,    45,
+      -1,    -1,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
+      56,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
+      66,    67,    68,    -1,    70,    -1,    72,    73,    -1,    -1,
+      -1,    77,    78,    79,    -1,    -1,    -1,    -1,    84,    85,
+      86,    87,    -1,    89,    90,    91,    -1,    -1,    94,    -1,
+      -1,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
+      -1,   107,    -1,    -1,   110,    -1,    -1,   113,   114,    -1,
+     116,   117,    -1,    -1,   120,   121,    -1,   123,   124,   125,
+     126,    -1,    -1,    -1,    -1,   131,    -1,   133,    -1,   135,
+      -1,    -1,    -1,   139,    -1,    -1,   142,   143,    -1,    -1,
+     146,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,    -1,
+      -1,    -1,    -1,    -1,   160,    -1,    -1,    -1,   164,    -1,
+     166,    -1,    -1,    -1,   170,   171,   172,   173,   174,   175,
+     176,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
+     186,   187,   188,   189,   190,    -1,   192,   193,    -1,   195,
+      -1,    -1,   198,    -1,   200,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   208,   209,    -1,    -1,    -1,   213,   214,   215,
+     216,   217,   218,   219,   220,    -1,    -1,    -1,    -1,   225,
+      -1,   227,    -1,   229,   230,    -1,    -1,   233,   234,   235,
+      -1,   237,   238,   239,    -1,    -1,   242,    -1,   244,    -1,
+      -1,    -1,   248,    -1,    -1,    -1,    -1,   253,   254,    -1,
+      -1,    -1,    -1,    -1,    -1,   261,   262,    -1,    -1,    -1,
+      -1,   267,    -1,    -1,    -1,   271,    -1,    -1,    -1,   275,
+      -1,   277,    -1,    -1,    -1,   281,    -1,   283,   284,    -1,
+      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   299,    -1,   301,    -1,   303,   304,   305,
+     306,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   332,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   349,   350,    -1,   352,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   360,   361,   362,   363,    -1,   365,
+      -1,    -1,    -1,    -1,    -1,    -1,   372,   373,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   388,    -1,   390,    -1,    -1,   393,    -1,    -1,
+     396,    -1,   398,    -1,   400,   401,   402,    -1,    -1,    -1,
+      -1,   407,     4,     5,     6,     7,     8,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   420,    -1,    -1,    -1,    -1,    -1,
+      22,    -1,    -1,    25,    26,    27,    -1,    29,    30,    31,
+      -1,    -1,    -1,    35,    -1,    37,    -1,    39,    40,    41,
+      42,    -1,    -1,    45,    -1,    -1,    48,    -1,    -1,    51,
+      -1,    -1,    54,    -1,    56,    -1,    58,    59,    60,    61,
+      62,    63,    -1,    -1,    66,    67,    68,    -1,    70,    -1,
+      72,    73,    -1,    -1,    -1,    77,    78,    79,    -1,    -1,
+      -1,    -1,    84,    85,    86,    87,    -1,    89,    90,    91,
+      -1,    -1,    94,    -1,    -1,    97,    98,    -1,   100,    -1,
+      -1,   103,    -1,    -1,    -1,   107,    -1,    -1,   110,    -1,
+      -1,   113,   114,    -1,   116,   117,    -1,    -1,   120,   121,
+      -1,   123,   124,   125,   126,    -1,    -1,    -1,    -1,   131,
+      -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,    -1,
+     142,   143,    -1,    -1,   146,    -1,    -1,    -1,   150,    -1,
+      -1,   153,   154,    -1,    -1,    -1,    -1,    -1,   160,    -1,
+      -1,    -1,   164,    -1,   166,    -1,    -1,    -1,   170,   171,
+     172,   173,   174,   175,   176,   177,   178,   179,    -1,   181,
+     182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
+     192,   193,    -1,   195,    -1,    -1,   198,    -1,   200,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   208,   209,    -1,    -1,
+      -1,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
+      -1,    -1,    -1,   225,    -1,   227,    -1,   229,   230,    -1,
+      -1,   233,   234,   235,    -1,   237,   238,   239,    -1,    -1,
+     242,    -1,   244,    -1,    -1,    -1,   248,    -1,    -1,    -1,
+      -1,   253,   254,    -1,    -1,    -1,    -1,    -1,    -1,   261,
+     262,    -1,    -1,    -1,    -1,   267,    -1,    -1,    -1,   271,
+      -1,    -1,    -1,   275,    -1,   277,    -1,    -1,    -1,   281,
+      -1,   283,   284,    -1,    -1,   287,   288,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,   301,
+      -1,   303,   304,   305,   306,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   316,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     332,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   349,   350,    -1,
+     352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,   361,
+     362,   363,    -1,   365,    -1,    -1,    -1,    -1,    -1,    -1,
+     372,   373,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   388,    -1,   390,    -1,
+      -1,   393,    -1,    -1,   396,    -1,   398,    -1,   400,   401,
+     402,     4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,
+      -1,   413,    -1,    -1,    -1,    -1,    -1,    -1,   420,    22,
+      -1,    -1,    25,    26,    27,    -1,    29,    30,    31,    -1,
+      -1,    -1,    35,    -1,    37,    -1,    39,    40,    41,    42,
+      -1,    -1,    45,    -1,    -1,    48,    -1,    -1,    51,    -1,
+      -1,    54,    -1,    56,    -1,    58,    59,    60,    61,    62,
+      63,    -1,    -1,    66,    67,    68,    -1,    70,    -1,    72,
+      73,    -1,    -1,    -1,    77,    78,    79,    -1,    -1,    -1,
+      -1,    84,    85,    86,    87,    -1,    89,    90,    91,    -1,
+      -1,    94,    -1,    -1,    97,    98,    -1,   100,    -1,    -1,
+     103,    -1,    -1,    -1,   107,    -1,    -1,   110,    -1,    -1,
+     113,   114,    -1,   116,   117,    -1,    -1,   120,   121,    -1,
+     123,   124,   125,   126,    -1,    -1,    -1,    -1,   131,    -1,
+     133,    -1,   135,    -1,    -1,    -1,   139,    -1,    -1,   142,
+     143,    -1,    -1,   146,    -1,    -1,    -1,   150,    -1,    -1,
+     153,   154,    -1,    -1,    -1,    -1,    -1,   160,    -1,    -1,
+      -1,   164,    -1,   166,    -1,    -1,    -1,   170,   171,   172,
+     173,   174,   175,   176,   177,   178,   179,    -1,   181,   182,
+     183,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
+     193,    -1,   195,    -1,    -1,   198,    -1,   200,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   208,   209,    -1,    -1,    -1,
+     213,   214,   215,   216,   217,   218,   219,   220,    -1,    -1,
+      -1,    -1,   225,    -1,   227,    -1,   229,   230,    -1,    -1,
+     233,   234,   235,    -1,   237,   238,   239,    -1,    -1,   242,
+      -1,   244,    -1,    -1,    -1,   248,    -1,    -1,    -1,    -1,
+     253,   254,    -1,    -1,    -1,    -1,    -1,    -1,   261,   262,
+      -1,    -1,    -1,    -1,   267,    -1,    -1,    -1,   271,    -1,
+      -1,    -1,   275,    -1,   277,    -1,    -1,    -1,   281,    -1,
+     283,   284,    -1,    -1,   287,   288,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,   301,    -1,
+     303,   304,   305,   306,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   316,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   332,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   349,   350,    -1,   352,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,   361,   362,
+     363,    -1,   365,    -1,    -1,    -1,    -1,    -1,    -1,   372,
+     373,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   388,    -1,   390,    -1,    -1,
+     393,    -1,    -1,   396,    -1,   398,    -1,   400,   401,   402,
+       4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,
+      -1,   414,    -1,    -1,    -1,    -1,    -1,   420,    22,    -1,
+      -1,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
+      -1,    35,    -1,    37,    -1,    39,    40,    41,    42,    -1,
+      -1,    45,    -1,    -1,    48,    -1,    -1,    51,    -1,    -1,
+      54,    -1,    56,    -1,    58,    59,    60,    61,    62,    63,
+      -1,    -1,    66,    67,    68,    -1,    70,    -1,    72,    73,
+      -1,    -1,    -1,    77,    78,    79,    -1,    -1,    -1,    -1,
+      84,    85,    86,    87,    -1,    89,    90,    91,    -1,    -1,
+      94,    -1,    -1,    97,    98,    -1,   100,    -1,    -1,   103,
+      -1,    -1,    -1,   107,    -1,    -1,   110,    -1,    -1,   113,
+     114,    -1,   116,   117,    -1,    -1,   120,   121,    -1,   123,
+     124,   125,   126,    -1,    -1,    -1,    -1,   131,    -1,   133,
+      -1,   135,    -1,    -1,    -1,   139,    -1,    -1,   142,   143,
+      -1,    -1,   146,    -1,    -1,    -1,   150,    -1,    -1,   153,
+     154,    -1,    -1,    -1,    -1,    -1,   160,    -1,    -1,    -1,
+     164,    -1,   166,    -1,    -1,    -1,   170,   171,   172,   173,
+     174,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
+     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
+      -1,   195,    -1,    -1,   198,    -1,   200,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   208,   209,    -1,    -1,    -1,   213,
+     214,   215,   216,   217,   218,   219,   220,    -1,    -1,    -1,
+      -1,   225,    -1,   227,    -1,   229,   230,    -1,    -1,   233,
+     234,   235,    -1,   237,   238,   239,    -1,    -1,   242,    -1,
+     244,    -1,    -1,    -1,   248,    -1,    -1,    -1,    -1,   253,
+     254,    -1,    -1,    -1,    -1,    -1,    -1,   261,   262,    -1,
+      -1,    -1,    -1,   267,    -1,    -1,    -1,   271,    -1,    -1,
+      -1,   275,    -1,   277,    -1,    -1,    -1,   281,    -1,   283,
+     284,    -1,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   299,    -1,   301,    -1,   303,
+     304,   305,   306,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   332,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   349,   350,    -1,   352,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   360,   361,   362,   363,
+      -1,   365,    -1,    -1,    -1,    -1,    -1,    -1,   372,   373,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   379,    -1,   381,    -1,    -1,   384,    -1,    -1,
-     387,    -1,   389,    -1,   391,   392,   393,     4,     5,     6,
-       7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   411,    22,    -1,    -1,    25,    26,
-      27,    -1,    29,    30,    31,    -1,    -1,    -1,    35,    -1,
-      37,    -1,    39,    40,    41,    -1,    43,    -1,    -1,    46,
-      -1,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    56,
-      57,    58,    59,    -1,    -1,    62,    63,    64,    -1,    66,
-      -1,    68,    69,    -1,    -1,    72,    73,    -1,    -1,    -1,
-      -1,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
-      -1,    88,    -1,    -1,    91,    92,    -1,    94,    -1,    -1,
-      97,    98,    -1,    -1,   101,    -1,    -1,   104,    -1,    -1,
-     107,   108,    -1,   110,   111,    -1,    -1,   114,   115,    -1,
-     117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,   126,
-     127,    -1,   129,    -1,    -1,    -1,   133,    -1,    -1,   136,
-     137,    -1,   139,   140,    -1,    -1,   143,    -1,    -1,   146,
-     147,    -1,    -1,   150,    -1,    -1,   153,    -1,    -1,    -1,
-     157,    -1,   159,    -1,    -1,    -1,   163,   164,   165,   166,
-     167,   168,   169,   170,   171,   172,    -1,   174,   175,   176,
-     177,   178,   179,   180,   181,   182,   183,    -1,   185,   186,
-      -1,   188,    -1,    -1,   191,    -1,   193,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,   206,
-     207,   208,   209,   210,   211,   212,   213,    -1,    -1,    -1,
-      -1,   218,    -1,   220,    -1,   222,   223,    -1,    -1,   226,
-     227,   228,    -1,   230,   231,   232,    -1,    -1,   235,    -1,
-     237,    -1,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,
-      -1,    -1,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,
-      -1,   258,    -1,    -1,    -1,   262,    -1,    -1,    -1,   266,
-      -1,   268,    -1,    -1,    -1,   272,    -1,   274,   275,    -1,
-      -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   290,    -1,   292,    -1,   294,   295,   296,
-     297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   340,   341,    -1,   343,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   351,   352,   353,   354,    -1,   356,
-      -1,    -1,    -1,    -1,    -1,    -1,   363,   364,    -1,    -1,
+      -1,    -1,    -1,    -1,   388,    -1,   390,    -1,    -1,   393,
+      -1,    -1,   396,    -1,   398,    -1,   400,   401,   402,     4,
+       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   420,    22,    -1,    -1,
+      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
+      35,    -1,    37,    -1,    39,    40,    41,    42,    -1,    -1,
+      45,    -1,    -1,    48,    -1,    -1,    51,    -1,    -1,    54,
+      -1,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
+      -1,    66,    67,    68,    -1,    70,    -1,    72,    73,    -1,
+      -1,    -1,    77,    78,    79,    -1,    -1,    -1,    -1,    84,
+      85,    86,    87,    -1,    89,    90,    91,    -1,    -1,    94,
+      -1,    -1,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
+      -1,    -1,   107,    -1,    -1,   110,    -1,    -1,   113,   114,
+      -1,   116,   117,    -1,    -1,   120,   121,    -1,   123,   124,
+     125,   126,    -1,    -1,    -1,    -1,   131,    -1,   133,    -1,
+     135,    -1,    -1,    -1,   139,    -1,    -1,   142,   143,    -1,
+      -1,   146,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,
+      -1,    -1,    -1,    -1,    -1,   160,    -1,    -1,    -1,   164,
+      -1,   166,    -1,    -1,    -1,   170,   171,   172,   173,   174,
+     175,   176,   177,   178,   179,    -1,   181,   182,   183,   184,
+     185,   186,   187,   188,   189,   190,    -1,   192,   193,    -1,
+     195,    -1,    -1,   198,    -1,   200,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   208,   209,    -1,    -1,    -1,   213,   214,
+     215,   216,   217,   218,   219,   220,    -1,    -1,    -1,    -1,
+     225,    -1,   227,    -1,   229,   230,    -1,    -1,   233,   234,
+     235,    -1,   237,   238,   239,    -1,    -1,   242,    -1,   244,
+      -1,    -1,    -1,   248,    -1,    -1,    -1,    -1,   253,   254,
+      -1,    -1,    -1,    -1,    -1,    -1,   261,   262,    -1,    -1,
+      -1,    -1,   267,    -1,    -1,    -1,   271,    -1,    -1,    -1,
+     275,    -1,   277,    -1,    -1,    -1,   281,    -1,   283,   284,
+      -1,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   299,    -1,   301,    -1,   303,   304,
+     305,   306,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   332,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   349,   350,    -1,   352,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   360,   361,   362,   363,    -1,
+     365,    -1,    -1,    -1,    -1,    -1,    -1,   372,   373,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   388,    -1,   390,    -1,    -1,   393,    -1,
+      -1,   396,    -1,   398,    -1,   400,   401,   402,     4,     5,
+       6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   420,    22,    -1,    -1,    25,
+      26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,    35,
+      -1,    37,    -1,    39,    40,    41,    42,    -1,    -1,    45,
+      -1,    -1,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
+      56,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
+      66,    67,    68,    -1,    70,    -1,    72,    73,    -1,    -1,
+      -1,    77,    78,    79,    -1,    -1,    -1,    -1,    84,    85,
+      86,    87,    -1,    89,    90,    91,    -1,    -1,    94,    -1,
+      -1,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
+      -1,   107,    -1,    -1,   110,    -1,    -1,   113,   114,    -1,
+     116,   117,    -1,    -1,   120,   121,    -1,   123,   124,   125,
+     126,    -1,    -1,    -1,    -1,   131,    -1,   133,    -1,   135,
+      -1,    -1,    -1,   139,    -1,    -1,   142,   143,    -1,    -1,
+     146,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,    -1,
+      -1,    -1,    -1,    -1,   160,    -1,    -1,    -1,   164,    -1,
+     166,    -1,    -1,    -1,   170,   171,   172,   173,   174,   175,
+     176,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
+     186,   187,   188,   189,   190,    -1,   192,   193,    -1,   195,
+      -1,    -1,   198,    -1,   200,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   208,   209,    -1,    -1,    -1,   213,   214,   215,
+     216,   217,   218,   219,   220,    -1,    -1,    -1,    -1,   225,
+      -1,   227,    -1,   229,   230,    -1,    -1,   233,   234,   235,
+      -1,   237,   238,   239,    -1,    -1,   242,    -1,   244,    -1,
+      -1,    -1,   248,    -1,    -1,    -1,    -1,   253,   254,    -1,
+      -1,    -1,    -1,    -1,    -1,   261,   262,    -1,    -1,    -1,
+      -1,   267,    -1,    -1,    -1,   271,    -1,    -1,    -1,   275,
+      -1,   277,    -1,    -1,    -1,   281,    -1,   283,   284,    -1,
+      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   299,    -1,   301,    -1,   303,   304,   305,
+     306,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   332,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   349,   350,    -1,   352,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   360,   361,   362,   363,    -1,   365,
+      -1,    -1,    -1,    -1,    -1,    -1,   372,   373,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   379,    -1,   381,    -1,    -1,   384,    -1,    -1,
-     387,    -1,   389,    -1,   391,   392,   393,     4,     5,     6,
+      -1,    -1,   388,    -1,   390,    -1,    -1,   393,    -1,    -1,
+     396,    -1,   398,    -1,   400,   401,   402,     4,     5,     6,
        7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   411,    22,    -1,    -1,    25,    26,
-      27,    -1,    29,    30,    31,    -1,    -1,    -1,    35,    -1,
-      37,    -1,    39,    40,    41,    -1,    43,    -1,    -1,    46,
-      -1,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    56,
-      57,    58,    59,    60,    -1,    62,    63,    64,    -1,    66,
-      -1,    68,    69,    -1,    -1,    72,    73,    -1,    -1,    -1,
-      -1,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
-      -1,    88,    -1,    -1,    91,    92,    -1,    94,    -1,    -1,
-      97,    -1,    -1,    -1,   101,    -1,    -1,   104,    -1,    -1,
-     107,   108,    -1,   110,   111,    -1,    -1,   114,   115,    -1,
-     117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
-     127,    -1,   129,    -1,    -1,    -1,   133,    -1,    -1,   136,
-     137,    -1,    -1,   140,    -1,    -1,   143,    -1,    -1,   146,
-     147,    -1,    -1,    -1,    -1,    -1,   153,    -1,    -1,    -1,
-     157,    -1,   159,    -1,    -1,    -1,   163,   164,   165,   166,
-     167,   168,   169,   170,   171,   172,    -1,   174,   175,   176,
-     177,   178,   179,   180,   181,   182,   183,    -1,   185,   186,
-      -1,   188,    -1,    -1,   191,    -1,   193,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,   206,
-     207,   208,   209,   210,   211,   212,   213,    -1,    -1,    -1,
-      -1,   218,    -1,   220,    -1,   222,   223,    -1,    -1,   226,
-     227,   228,    -1,   230,   231,   232,    -1,    -1,   235,    -1,
-     237,    -1,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,
-      -1,    -1,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,
-      -1,   258,    -1,    -1,    -1,   262,    -1,    -1,    -1,   266,
-      -1,   268,    -1,    -1,    -1,   272,    -1,   274,   275,    -1,
-      -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   290,    -1,   292,    -1,   294,   295,   296,
-     297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   340,   341,    -1,   343,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   351,   352,   353,   354,    -1,   356,
-      -1,    -1,    -1,    -1,    -1,    -1,   363,   364,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   379,    -1,   381,    -1,    -1,   384,    -1,    -1,
-     387,    -1,   389,    -1,   391,   392,   393,     4,     5,     6,
-       7,     8,    -1,    -1,    -1,    -1,    -1,   404,    -1,    -1,
-      -1,    -1,    -1,    -1,   411,    22,    -1,    -1,    25,    26,
+      -1,    -1,    -1,    -1,   420,    22,    -1,    -1,    25,    26,
       27,    -1,    29,    30,    31,    -1,    -1,    -1,    35,    -1,
-      37,    -1,    39,    40,    41,    -1,    43,    -1,    -1,    46,
-      -1,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    56,
-      57,    58,    59,    60,    -1,    62,    63,    64,    -1,    66,
-      -1,    68,    69,    -1,    -1,    72,    73,    -1,    -1,    -1,
-      -1,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
-      -1,    88,    -1,    -1,    91,    92,    -1,    94,    -1,    -1,
-      97,    -1,    -1,    -1,   101,    -1,    -1,   104,    -1,    -1,
-     107,   108,    -1,   110,   111,    -1,    -1,   114,   115,    -1,
-     117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
-     127,    -1,   129,    -1,    -1,    -1,   133,    -1,    -1,   136,
-     137,    -1,    -1,   140,    -1,    -1,   143,    -1,    -1,   146,
-     147,    -1,    -1,    -1,    -1,    -1,   153,    -1,    -1,    -1,
-     157,    -1,   159,    -1,    -1,    -1,   163,   164,   165,   166,
-     167,   168,   169,   170,   171,   172,    -1,   174,   175,   176,
-     177,   178,   179,   180,   181,   182,   183,    -1,   185,   186,
-      -1,   188,    -1,    -1,   191,    -1,   193,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,   206,
-     207,   208,   209,   210,   211,   212,   213,    -1,    -1,    -1,
-      -1,   218,    -1,   220,    -1,   222,   223,    -1,    -1,   226,
-     227,   228,    -1,   230,   231,   232,    -1,    -1,   235,    -1,
-     237,    -1,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,
-      -1,    -1,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,
-      -1,   258,    -1,    -1,    -1,   262,    -1,    -1,    -1,   266,
-      -1,   268,    -1,    -1,    -1,   272,    -1,   274,   275,    -1,
-      -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   290,    -1,   292,    -1,   294,   295,   296,
-     297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   340,   341,    -1,   343,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   351,   352,   353,   354,    -1,   356,
-      -1,    -1,    -1,    -1,    -1,    -1,   363,   364,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   379,    -1,   381,    -1,    -1,   384,    -1,    -1,
-     387,    -1,   389,    -1,   391,   392,   393,     4,     5,     6,
-       7,     8,    -1,    -1,    -1,    -1,    -1,    -1,   405,    -1,
-      -1,    -1,    -1,    -1,   411,    22,    -1,    -1,    25,    26,
-      27,    -1,    29,    30,    31,    -1,    -1,    -1,    35,    -1,
-      37,    -1,    39,    40,    41,    -1,    43,    -1,    -1,    46,
-      -1,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    56,
-      57,    58,    59,    -1,    -1,    62,    63,    64,    -1,    66,
-      -1,    68,    69,    -1,    -1,    72,    73,    -1,    -1,    -1,
-      -1,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
-      -1,    88,    -1,    -1,    91,    92,    -1,    94,    -1,    -1,
-      97,    -1,    -1,    -1,   101,    -1,    -1,   104,    -1,    -1,
-     107,   108,    -1,   110,   111,    -1,    -1,   114,   115,    -1,
-     117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
-     127,    -1,   129,    -1,    -1,    -1,   133,    -1,    -1,   136,
-     137,    -1,    -1,   140,    -1,    -1,   143,   144,    -1,   146,
-     147,    -1,    -1,    -1,    -1,    -1,   153,    -1,    -1,    -1,
-     157,    -1,   159,    -1,    -1,    -1,   163,   164,   165,   166,
-     167,   168,   169,   170,   171,   172,    -1,   174,   175,   176,
-     177,   178,   179,   180,   181,   182,   183,    -1,   185,   186,
-      -1,   188,    -1,    -1,   191,    -1,   193,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,   206,
-     207,   208,   209,   210,   211,   212,   213,    -1,    -1,    -1,
-      -1,   218,    -1,   220,    -1,   222,   223,    -1,    -1,   226,
-     227,   228,    -1,   230,   231,   232,    -1,    -1,   235,    -1,
-     237,    -1,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,
-      -1,    -1,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,
-      -1,   258,    -1,    -1,    -1,   262,    -1,    -1,    -1,   266,
-      -1,   268,    -1,    -1,    -1,   272,    -1,   274,   275,    -1,
-      -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   290,    -1,   292,    -1,   294,   295,   296,
-     297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   340,   341,    -1,   343,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   351,   352,   353,   354,    -1,   356,
-      -1,    -1,    -1,    -1,    -1,    -1,   363,   364,    -1,    -1,
+      37,    -1,    39,    40,    41,    42,    -1,    -1,    45,    -1,
+      -1,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
+      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
+      67,    68,    -1,    70,    -1,    72,    73,    -1,    -1,    -1,
+      77,    78,    79,    -1,    -1,    -1,    -1,    84,    85,    86,
+      87,    -1,    89,    90,    91,    -1,    -1,    94,    -1,    -1,
+      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,
+     107,    -1,    -1,   110,    -1,    -1,   113,   114,    -1,   116,
+     117,    -1,    -1,   120,   121,    -1,   123,   124,   125,   126,
+      -1,    -1,    -1,    -1,   131,    -1,   133,    -1,   135,    -1,
+      -1,    -1,   139,    -1,    -1,   142,   143,    -1,    -1,   146,
+      -1,    -1,    -1,   150,    -1,    -1,   153,   154,    -1,    -1,
+      -1,    -1,    -1,   160,   161,    -1,    -1,   164,    -1,   166,
+      -1,    -1,    -1,   170,   171,   172,   173,   174,   175,   176,
+     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
+     187,   188,   189,   190,    -1,   192,   193,    -1,   195,    -1,
+      -1,   198,    -1,   200,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   208,   209,    -1,    -1,    -1,   213,   214,   215,   216,
+     217,   218,   219,   220,    -1,    -1,    -1,    -1,   225,    -1,
+     227,    -1,   229,   230,    -1,    -1,   233,   234,   235,    -1,
+     237,   238,   239,    -1,    -1,   242,    -1,   244,    -1,    -1,
+      -1,   248,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,
+      -1,    -1,    -1,    -1,   261,   262,    -1,    -1,    -1,    -1,
+     267,    -1,    -1,    -1,   271,    -1,    -1,    -1,   275,    -1,
+     277,    -1,    -1,    -1,   281,    -1,   283,   284,    -1,    -1,
+     287,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   299,    -1,   301,    -1,   303,   304,   305,   306,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   316,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   332,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   349,   350,    -1,   352,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   360,   361,   362,   363,    -1,   365,    -1,
+      -1,    -1,    -1,    -1,    -1,   372,   373,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   379,    -1,   381,    -1,    -1,   384,    -1,    -1,
-     387,    -1,   389,    -1,   391,   392,   393,     4,     5,     6,
-       7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   411,    22,    -1,    -1,    25,    26,
-      27,    -1,    29,    30,    31,    -1,    -1,    -1,    35,    -1,
-      37,    -1,    39,    40,    41,    -1,    43,    -1,    -1,    46,
-      -1,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    56,
-      57,    58,    59,    -1,    -1,    62,    63,    64,    -1,    66,
-      -1,    68,    69,    -1,    -1,    72,    73,    -1,    -1,    -1,
-      -1,    78,    79,    80,    81,    -1,    83,    84,    85,    -1,
-      -1,    88,    -1,    -1,    91,    92,    -1,    94,    -1,    -1,
-      97,    -1,    -1,    -1,   101,    -1,    -1,   104,    -1,    -1,
-     107,   108,    -1,   110,   111,    -1,    -1,   114,   115,    -1,
-     117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
-     127,    -1,   129,    -1,    -1,    -1,   133,    -1,    -1,   136,
-     137,    -1,    -1,   140,    -1,    -1,   143,    -1,    -1,   146,
-     147,    -1,    -1,    -1,    -1,    -1,   153,    -1,    -1,    -1,
-     157,    -1,   159,    -1,    -1,    -1,   163,   164,   165,   166,
-     167,   168,   169,   170,   171,   172,    -1,   174,   175,   176,
-     177,   178,   179,   180,   181,   182,   183,    -1,   185,   186,
-      -1,   188,    -1,    -1,   191,    -1,   193,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,   206,
-     207,   208,   209,   210,   211,   212,   213,    -1,    -1,    -1,
-      -1,   218,    -1,   220,    -1,   222,   223,    -1,    -1,   226,
-     227,   228,    -1,   230,   231,   232,    -1,    -1,   235,    -1,
-     237,    -1,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,
-      -1,    -1,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,
-      -1,   258,    -1,    -1,    -1,   262,    -1,    -1,    -1,   266,
-      -1,   268,    -1,    -1,    -1,   272,    -1,   274,   275,    -1,
-      -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   290,    -1,   292,    -1,   294,   295,   296,
-     297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   340,   341,    -1,   343,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   351,   352,   353,   354,    -1,   356,
-      -1,    -1,    -1,    -1,    -1,    -1,   363,   364,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   379,    -1,   381,    -1,    -1,   384,    -1,    -1,
-     387,    -1,   389,    -1,   391,   392,   393,    -1,    -1,    -1,
-      -1,   398,     4,     5,     6,     7,     8,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   411,    -1,    -1,    -1,    -1,    -1,
-      22,    -1,    -1,    25,    26,    27,    -1,    29,    30,    31,
-      -1,    -1,    -1,    35,    -1,    37,    -1,    39,    40,    41,
-      -1,    43,    -1,    -1,    46,    -1,    48,    -1,    -1,    51,
-      -1,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
-      62,    63,    64,    -1,    66,    -1,    68,    69,    -1,    -1,
-      72,    73,    -1,    -1,    -1,    -1,    78,    79,    80,    81,
-      -1,    83,    84,    85,    -1,    -1,    88,    -1,    -1,    91,
-      92,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,
-      -1,    -1,   104,    -1,    -1,   107,   108,    -1,   110,   111,
-      -1,    -1,   114,   115,    -1,   117,   118,   119,   120,    -1,
-      -1,    -1,    -1,   125,    -1,   127,    -1,   129,    -1,    -1,
-      -1,   133,    -1,    -1,   136,   137,    -1,    -1,   140,    -1,
-      -1,   143,    -1,    -1,   146,   147,    -1,    -1,    -1,    -1,
-      -1,   153,    -1,    -1,    -1,   157,    -1,   159,    -1,    -1,
-      -1,   163,   164,   165,   166,   167,   168,   169,   170,   171,
-     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
-     182,   183,    -1,   185,   186,    -1,   188,    -1,    -1,   191,
-      -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,
-     202,    -1,    -1,    -1,   206,   207,   208,   209,   210,   211,
-     212,   213,    -1,    -1,    -1,    -1,   218,    -1,   220,    -1,
-     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,   231,
-     232,    -1,    -1,   235,    -1,   237,    -1,    -1,   240,    -1,
-      -1,    -1,    -1,   245,   246,    -1,    -1,    -1,    -1,    -1,
-      -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,    -1,
-     262,    -1,    -1,    -1,   266,    -1,   268,    -1,    -1,    -1,
-     272,    -1,   274,   275,    -1,    -1,   278,   279,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,    -1,
-     292,    -1,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   307,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   323,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341,
-      -1,   343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
-     352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,    -1,
-      -1,   363,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,    -1,   381,
-      -1,    -1,   384,    -1,    -1,   387,    -1,   389,    -1,   391,
-     392,   393,     4,     5,     6,     7,     8,    -1,    -1,    -1,
-      -1,    -1,   404,    -1,    -1,    -1,    -1,    -1,    -1,   411,
-      22,    -1,    -1,    25,    26,    27,    -1,    29,    30,    31,
-      -1,    -1,    -1,    35,    -1,    37,    -1,    39,    40,    41,
-      -1,    43,    -1,    -1,    46,    -1,    48,    -1,    -1,    51,
-      -1,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
-      62,    63,    64,    -1,    66,    -1,    68,    69,    -1,    -1,
-      72,    73,    -1,    -1,    -1,    -1,    78,    79,    80,    81,
-      -1,    83,    84,    85,    -1,    -1,    88,    -1,    -1,    91,
-      92,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,
-      -1,    -1,   104,    -1,    -1,   107,   108,    -1,   110,   111,
-      -1,    -1,   114,   115,    -1,   117,   118,   119,   120,    -1,
-      -1,    -1,    -1,   125,    -1,   127,    -1,   129,    -1,    -1,
-      -1,   133,    -1,    -1,   136,   137,    -1,    -1,   140,    -1,
-      -1,   143,    -1,    -1,   146,   147,    -1,    -1,    -1,    -1,
-      -1,   153,    -1,    -1,    -1,   157,    -1,   159,    -1,    -1,
-      -1,   163,   164,   165,   166,   167,   168,   169,   170,   171,
-     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
-     182,   183,    -1,   185,   186,    -1,   188,    -1,    -1,   191,
-      -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,
-     202,    -1,    -1,    -1,   206,   207,   208,   209,   210,   211,
-     212,   213,    -1,    -1,    -1,    -1,   218,    -1,   220,    -1,
-     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,   231,
-     232,    -1,    -1,   235,    -1,   237,    -1,    -1,   240,    -1,
-      -1,    -1,    -1,   245,   246,    -1,    -1,    -1,    -1,    -1,
-      -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,    -1,
-     262,    -1,    -1,    -1,   266,    -1,   268,    -1,    -1,    -1,
-     272,    -1,   274,   275,    -1,    -1,   278,   279,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,    -1,
-     292,    -1,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   307,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   323,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341,
-      -1,   343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
-     352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,    -1,
-      -1,   363,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,    -1,   381,
-      -1,    -1,   384,    -1,    -1,   387,    -1,   389,    -1,   391,
-     392,   393,     4,     5,     6,     7,     8,    -1,    -1,    -1,
-      -1,    -1,    -1,   405,    -1,    -1,    -1,    -1,    -1,   411,
-      22,    -1,    -1,    25,    26,    27,    -1,    29,    30,    31,
-      -1,    -1,    -1,    35,    -1,    37,    -1,    39,    40,    41,
-      -1,    43,    -1,    -1,    46,    -1,    48,    -1,    -1,    51,
-      -1,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
-      62,    63,    64,    -1,    66,    -1,    68,    69,    -1,    -1,
-      72,    73,    -1,    -1,    -1,    -1,    78,    79,    80,    81,
-      -1,    83,    84,    85,    -1,    -1,    88,    -1,    -1,    91,
-      92,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,
-      -1,    -1,   104,    -1,    -1,   107,   108,    -1,   110,   111,
-      -1,    -1,   114,   115,    -1,   117,   118,   119,   120,    -1,
-      -1,    -1,    -1,   125,    -1,   127,    -1,   129,    -1,    -1,
-      -1,   133,    -1,    -1,   136,   137,    -1,    -1,   140,    -1,
-      -1,   143,    -1,    -1,   146,   147,    -1,    -1,    -1,    -1,
-      -1,   153,    -1,    -1,    -1,   157,    -1,   159,    -1,    -1,
-      -1,   163,   164,   165,   166,   167,   168,   169,   170,   171,
-     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
-     182,   183,    -1,   185,   186,    -1,   188,    -1,    -1,   191,
-      -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,
-     202,    -1,    -1,    -1,   206,   207,   208,   209,   210,   211,
-     212,   213,    -1,    -1,    -1,    -1,   218,    -1,   220,    -1,
-     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,   231,
-     232,    -1,    -1,   235,    -1,   237,    -1,    -1,   240,    -1,
-      -1,    -1,    -1,   245,   246,    -1,    -1,    -1,    -1,    -1,
-      -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,    -1,
-     262,    -1,    -1,    -1,   266,    -1,   268,    -1,    -1,    -1,
-     272,    -1,   274,   275,    -1,    -1,   278,   279,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,    -1,
-     292,    -1,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   307,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   323,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341,
-      -1,   343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
-     352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,    -1,
-      -1,   363,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,    -1,   381,
-      -1,    -1,   384,    -1,    -1,   387,    -1,   389,    -1,   391,
-     392,   393,     4,     5,     6,     7,     8,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   411,
-      22,    -1,    -1,    25,    26,    27,    -1,    29,    30,    31,
-      -1,    -1,    -1,    35,    -1,    37,    -1,    39,    40,    41,
-      -1,    43,    -1,    -1,    46,    -1,    48,    -1,    -1,    51,
-      -1,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
-      62,    63,    64,    -1,    66,    -1,    68,    69,    -1,    -1,
-      72,    73,    -1,    -1,    -1,    -1,    78,    79,    80,    81,
-      -1,    83,    84,    85,    -1,    -1,    88,    -1,    -1,    91,
-      92,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,
-      -1,    -1,   104,    -1,    -1,   107,   108,    -1,   110,   111,
-      -1,    -1,   114,   115,    -1,   117,   118,   119,   120,    -1,
-      -1,    -1,    -1,   125,    -1,   127,    -1,   129,    -1,    -1,
-      -1,   133,    -1,    -1,   136,   137,    -1,    -1,   140,    -1,
-      -1,   143,    -1,    -1,   146,   147,    -1,    -1,    -1,    -1,
-      -1,   153,    -1,    -1,    -1,   157,    -1,   159,    -1,    -1,
-      -1,   163,   164,   165,   166,   167,   168,   169,   170,   171,
-     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
-     182,   183,    -1,   185,   186,    -1,   188,    -1,    -1,   191,
-      -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,
-     202,    -1,    -1,    -1,   206,   207,   208,   209,   210,   211,
-     212,   213,    -1,    -1,    -1,    -1,   218,    -1,   220,    -1,
-     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,   231,
-     232,    -1,    -1,   235,    -1,   237,    -1,    -1,   240,    -1,
-      -1,    -1,    -1,   245,   246,    -1,    -1,    -1,    -1,    -1,
-      -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,    -1,
-     262,    -1,    -1,    -1,   266,    -1,   268,    -1,    -1,    -1,
-     272,    -1,   274,   275,    -1,    -1,   278,   279,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,    -1,
-     292,    -1,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   307,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   323,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341,
-      -1,   343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
-     352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,    -1,
-      -1,   363,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,    -1,   381,
-      -1,    -1,   384,    -1,    -1,   387,    -1,   389,    -1,   391,
-     392,   393,     4,     5,     6,     7,     8,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   411,
-      22,    -1,    -1,    25,    26,    27,    -1,    29,    30,    31,
-      -1,    -1,    -1,    35,    -1,    37,    -1,    39,    40,    41,
-      -1,    43,    -1,    -1,    46,    -1,    48,    -1,    -1,    51,
-      -1,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
-      62,    63,    64,    -1,    66,    -1,    68,    69,    -1,    -1,
-      72,    73,    -1,    -1,    -1,    -1,    78,    79,    80,    81,
-      -1,    83,    84,    85,    -1,    -1,    88,    -1,    -1,    91,
-      92,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,
-      -1,    -1,   104,    -1,    -1,   107,   108,    -1,   110,   111,
-      -1,    -1,   114,   115,    -1,   117,   118,   119,   120,    -1,
-      -1,    -1,    -1,   125,    -1,   127,    -1,   129,    -1,    -1,
-      -1,   133,    -1,    -1,   136,   137,    -1,    -1,   140,    -1,
-      -1,   143,    -1,    -1,   146,   147,    -1,    -1,    -1,    -1,
-      -1,   153,    -1,    -1,    -1,   157,    -1,   159,    -1,    -1,
-      -1,   163,   164,   165,   166,   167,   168,   169,   170,   171,
-     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
-     182,   183,    -1,   185,   186,    -1,   188,    -1,    -1,   191,
-      -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,
-     202,    -1,    -1,    -1,   206,   207,   208,   209,   210,   211,
-     212,   213,    -1,    -1,    -1,    -1,   218,    -1,   220,    -1,
-     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,   231,
-     232,    -1,    -1,   235,    -1,   237,    -1,    -1,   240,    -1,
-      -1,    -1,    -1,   245,   246,    -1,    -1,    -1,    -1,    -1,
-      -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,    -1,
-     262,    -1,    -1,    -1,   266,    -1,   268,    -1,    -1,    -1,
-     272,    -1,   274,   275,    -1,    -1,   278,   279,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,    -1,
-     292,    -1,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   307,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   323,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341,
-      -1,   343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
-     352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,    -1,
-      -1,   363,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,    -1,   381,
-      -1,    -1,   384,    -1,    -1,   387,    -1,   389,    -1,   391,
-     392,   393,     4,     5,     6,     7,     8,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   411,
-      22,    -1,    -1,    25,    26,    27,    -1,    29,    30,    31,
-      -1,    -1,    -1,    35,    -1,    37,    -1,    39,    40,    41,
-      -1,    43,    -1,    -1,    46,    -1,    48,    -1,    -1,    51,
-      -1,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
-      62,    63,    64,    -1,    66,    -1,    68,    69,    -1,    -1,
-      72,    73,    -1,    -1,    -1,    -1,    78,    79,    80,    81,
-      -1,    83,    84,    85,    -1,    -1,    88,    -1,    -1,    91,
-      92,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,
-      -1,    -1,   104,    -1,    -1,   107,   108,    -1,   110,   111,
-      -1,    -1,   114,   115,    -1,   117,   118,   119,   120,    -1,
-      -1,    -1,    -1,   125,    -1,   127,    -1,   129,    -1,    -1,
-      -1,   133,    -1,    -1,   136,   137,    -1,    -1,   140,    -1,
-      -1,   143,    -1,    -1,   146,   147,    -1,    -1,    -1,    -1,
-      -1,   153,   154,    -1,    -1,   157,    -1,   159,    -1,    -1,
-      -1,   163,   164,   165,   166,   167,   168,   169,   170,   171,
-     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
-     182,   183,    -1,   185,   186,    -1,   188,    -1,    -1,   191,
-      -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,
-     202,    -1,    -1,    -1,   206,   207,   208,   209,   210,   211,
-     212,   213,    -1,    -1,    -1,    -1,   218,    -1,   220,    -1,
-     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,   231,
-     232,    -1,    -1,   235,    -1,   237,    -1,    -1,   240,    -1,
-     242,    -1,    -1,   245,   246,    -1,    -1,    -1,    -1,    -1,
-      -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,    -1,
-     262,    -1,    -1,    -1,   266,    -1,   268,    -1,    -1,    -1,
-     272,    -1,   274,   275,    -1,    -1,   278,   279,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,    -1,
-     292,    -1,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   307,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   323,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341,
-      -1,   343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
-     352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,    -1,
-      -1,   363,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,    -1,   381,
-      -1,    -1,   384,    -1,    -1,   387,    -1,   389,    -1,   391,
-     392,   393,     4,     5,     6,     7,     8,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   410,    -1,
-      22,    -1,    -1,    25,    26,    27,    -1,    29,    30,    31,
-      -1,    -1,    -1,    35,    -1,    37,    -1,    39,    40,    41,
-      -1,    43,    -1,    -1,    46,    -1,    48,    -1,    -1,    51,
-      -1,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
-      62,    63,    64,    -1,    66,    -1,    68,    69,    -1,    -1,
-      72,    73,    -1,    -1,    -1,    -1,    78,    79,    80,    81,
-      -1,    83,    84,    85,    -1,    -1,    88,    -1,    -1,    91,
-      92,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,
-      -1,    -1,   104,    -1,    -1,   107,   108,    -1,   110,   111,
-      -1,    -1,   114,   115,    -1,   117,   118,   119,   120,    -1,
-      -1,    -1,    -1,   125,    -1,   127,    -1,   129,    -1,    -1,
-      -1,   133,    -1,    -1,   136,   137,    -1,    -1,   140,    -1,
-      -1,   143,    -1,    -1,   146,   147,    -1,    -1,    -1,    -1,
-      -1,   153,   154,    -1,    -1,   157,    -1,   159,    -1,    -1,
-      -1,   163,   164,   165,   166,   167,   168,   169,   170,   171,
-     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
-     182,   183,    -1,   185,   186,    -1,   188,    -1,    -1,   191,
-      -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,
-     202,    -1,    -1,    -1,   206,   207,   208,   209,   210,   211,
-     212,   213,    -1,    -1,    -1,    -1,   218,    -1,   220,    -1,
-     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,   231,
-     232,    -1,    -1,   235,    -1,   237,    -1,    -1,   240,    -1,
-     242,    -1,    -1,   245,   246,    -1,    -1,    -1,    -1,    -1,
-      -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,    -1,
-     262,    -1,    -1,    -1,   266,    -1,   268,    -1,    -1,    -1,
-     272,    -1,   274,   275,    -1,    -1,   278,   279,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,    -1,
-     292,    -1,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   307,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   323,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341,
-      -1,   343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
-     352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,    -1,
-      -1,   363,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,    -1,   381,
-      -1,    -1,   384,    -1,    -1,   387,    -1,   389,    -1,   391,
-     392,   393,     4,     5,     6,     7,     8,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   410,    -1,
-      22,    -1,    -1,    25,    26,    27,    -1,    29,    30,    31,
-      -1,    -1,    -1,    35,    -1,    37,    -1,    39,    40,    41,
-      -1,    43,    -1,    -1,    46,    -1,    48,    -1,    -1,    51,
-      -1,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
-      62,    63,    64,    -1,    66,    -1,    68,    69,    -1,    -1,
-      72,    73,    -1,    -1,    -1,    -1,    78,    79,    80,    81,
-      -1,    83,    84,    85,    -1,    -1,    88,    -1,    -1,    91,
-      92,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,
-      -1,    -1,   104,    -1,    -1,   107,   108,    -1,   110,   111,
-      -1,    -1,   114,   115,    -1,   117,   118,   119,   120,    -1,
-      -1,    -1,    -1,   125,    -1,   127,    -1,   129,    -1,    -1,
-      -1,   133,    -1,    -1,   136,   137,    -1,    -1,   140,    -1,
-      -1,   143,    -1,    -1,   146,   147,    -1,    -1,    -1,    -1,
-      -1,   153,    -1,    -1,    -1,   157,    -1,   159,    -1,    -1,
-      -1,   163,   164,   165,   166,   167,   168,   169,   170,   171,
-     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
-     182,   183,    -1,   185,   186,    -1,   188,    -1,    -1,   191,
-      -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,
-     202,    -1,    -1,    -1,   206,   207,   208,   209,   210,   211,
-     212,   213,    -1,    -1,    -1,    -1,   218,    -1,   220,    -1,
-     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,   231,
-     232,    -1,    -1,   235,    -1,   237,    -1,    -1,   240,    -1,
-      -1,    -1,    -1,   245,   246,    -1,    -1,    -1,    -1,    -1,
-      -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,    -1,
-     262,    -1,    -1,    -1,   266,    -1,   268,    -1,    -1,   271,
-     272,    -1,   274,   275,    -1,    -1,   278,   279,     9,    10,
-      11,    12,    13,    14,    15,    16,    17,    18,   290,    -1,
-     292,    -1,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   307,     9,    10,    11,    12,
-      13,    14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,
-      -1,   323,     9,    10,    11,    12,    13,    14,    15,    16,
-      17,    18,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341,
-      -1,   343,    -1,    -1,    75,    -1,    -1,    -1,    -1,   351,
-     352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,    -1,
-      -1,   363,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    75,    -1,    -1,    -1,    -1,   379,    -1,   381,
-      -1,    -1,   384,    -1,    -1,   387,    -1,   389,    75,   391,
-     392,   393,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   410,    -1,
-      -1,    -1,    -1,    -1,   145,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   155,     9,    10,    11,    12,    13,
-      14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   155,    -1,    -1,    -1,   187,    -1,   145,    -1,
-      -1,    -1,    -1,    -1,    -1,   196,   197,    -1,   155,     9,
-      10,    11,    12,    13,    14,    15,    16,    17,    18,    -1,
-      -1,    -1,    -1,    -1,   187,    -1,   217,    -1,    -1,    -1,
-      -1,    75,    -1,   196,   197,    -1,    -1,    -1,    -1,    -1,
-     187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,
-     197,    -1,    -1,    -1,   217,    -1,    -1,    -1,    -1,    -1,
+      -1,   388,    -1,   390,    -1,    -1,   393,    -1,    -1,   396,
+      -1,   398,    -1,   400,   401,   402,     4,     5,     6,     7,
+       8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   419,    -1,    22,    -1,    -1,    25,    26,    27,
+      -1,    29,    30,    31,    -1,    -1,    -1,    35,    -1,    37,
+      -1,    39,    40,    41,    42,    -1,    -1,    45,    -1,    -1,
+      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    -1,
+      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
+      68,    -1,    70,    -1,    72,    73,    -1,    -1,    -1,    77,
+      78,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
+      -1,    89,    90,    91,    -1,    -1,    94,    -1,    -1,    97,
+      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
+      -1,    -1,   110,    -1,    -1,   113,   114,    -1,   116,   117,
+      -1,    -1,   120,   121,    -1,   123,   124,   125,   126,    -1,
+      -1,    -1,    -1,   131,    -1,   133,    -1,   135,    -1,    -1,
+      -1,   139,    -1,    -1,   142,   143,    -1,    -1,   146,    -1,
+      -1,    -1,   150,    -1,    -1,   153,   154,    -1,    -1,    -1,
+      -1,    -1,   160,   161,    -1,    -1,   164,    -1,   166,    -1,
+      -1,    -1,   170,   171,   172,   173,   174,   175,   176,   177,
+     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
+     188,   189,   190,    -1,   192,   193,    -1,   195,    -1,    -1,
+     198,    -1,   200,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     208,   209,    -1,    -1,    -1,   213,   214,   215,   216,   217,
+     218,   219,   220,    -1,    -1,    -1,    -1,   225,    -1,   227,
+      -1,   229,   230,    -1,    -1,   233,   234,   235,    -1,   237,
+     238,   239,    -1,    -1,   242,    -1,   244,    -1,    -1,    -1,
+     248,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,    -1,
+      -1,    -1,    -1,   261,   262,    -1,    -1,    -1,    -1,   267,
+      -1,    -1,    -1,   271,    -1,    -1,    -1,   275,    -1,   277,
+      -1,    -1,    -1,   281,    -1,   283,   284,    -1,    -1,   287,
+     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   299,    -1,   301,    -1,   303,   304,   305,   306,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   316,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   332,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   349,   350,    -1,   352,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   360,   361,   362,   363,    -1,   365,    -1,    -1,
+      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     388,    -1,   390,    -1,    -1,   393,    -1,    -1,   396,    -1,
+     398,    -1,   400,   401,   402,     4,     5,     6,     7,     8,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   419,    -1,    22,    -1,    -1,    25,    26,    27,    -1,
+      29,    30,    31,    -1,    -1,    -1,    35,    -1,    37,    -1,
+      39,    40,    41,    42,    -1,    -1,    45,    -1,    -1,    48,
+      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    -1,    58,
+      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
+      -1,    70,    -1,    72,    73,    -1,    -1,    -1,    77,    78,
+      79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,
+      89,    90,    91,    -1,    -1,    94,    -1,    -1,    97,    98,
+      -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,    -1,
+      -1,   110,    -1,    -1,   113,   114,    -1,   116,   117,    -1,
+      -1,   120,   121,    -1,   123,   124,   125,   126,    -1,    -1,
+      -1,    -1,   131,    -1,   133,    -1,   135,    -1,    -1,    -1,
+     139,    -1,    -1,   142,   143,    -1,    -1,   146,    -1,    -1,
+      -1,   150,    -1,    -1,   153,   154,    -1,    -1,    -1,    -1,
+      -1,   160,    -1,    -1,    -1,   164,    -1,   166,    -1,    -1,
+      -1,   170,   171,   172,   173,   174,   175,   176,   177,   178,
+     179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
+     189,   190,    -1,   192,   193,    -1,   195,    -1,    -1,   198,
+      -1,   200,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   208,
+     209,    -1,    -1,    -1,   213,   214,   215,   216,   217,   218,
+     219,   220,    -1,    -1,    -1,    -1,   225,    -1,   227,    -1,
+     229,   230,    -1,    -1,   233,   234,   235,    -1,   237,   238,
+     239,    -1,    -1,   242,    -1,   244,    -1,    -1,    -1,   248,
+      -1,    -1,    -1,    -1,   253,   254,    -1,    -1,    -1,    -1,
+      -1,    -1,   261,   262,    -1,    -1,    -1,    -1,   267,    -1,
+      -1,    -1,   271,    -1,    -1,    -1,   275,    -1,   277,    -1,
+      -1,   280,   281,    -1,   283,   284,    -1,    -1,   287,   288,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     217,    -1,    -1,    -1,    -1,    75,   267,    -1,    -1,    -1,
-      -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
-      17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   145,    -1,    -1,   267,    -1,    -1,    -1,    -1,    -1,
-      -1,   155,    -1,    -1,    -1,    -1,    -1,    -1,   309,    -1,
-     267,    -1,    -1,    -1,    -1,     9,    10,    11,    12,    13,
-      14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   187,    -1,   145,   309,    -1,    75,    -1,
-      -1,    -1,   196,   197,    -1,   155,    -1,    -1,    -1,    -1,
-      -1,    -1,   309,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   217,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   187,    -1,    -1,
-      -1,    75,    -1,    -1,    -1,    -1,   196,   197,    -1,    -1,
-      -1,    -1,    -1,   394,   395,   396,   397,   398,   399,   400,
-      -1,    -1,   403,    -1,   405,   406,    -1,   217,   145,    -1,
-      -1,    -1,    -1,   267,    -1,    -1,    -1,    -1,   155,    -1,
-      -1,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
-     403,    -1,   405,   406,    -1,    -1,    -1,   394,   395,   396,
-     397,   398,   399,   400,    -1,    -1,   403,    -1,   405,   406,
-     187,   145,    -1,    -1,    -1,   309,    -1,   267,    -1,   196,
-     197,   155,     9,    10,    11,    12,    13,    14,    15,    16,
-      17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   187,    -1,    -1,    -1,    -1,    -1,   309,
-      -1,    -1,   196,   197,    -1,     9,    10,    11,    12,    13,
-      14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   217,    -1,    -1,    -1,    -1,    75,    -1,
-     267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     394,   395,   396,   397,   398,   399,   400,    -1,    -1,   403,
-      -1,   405,   406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
-      18,    75,   309,   267,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   394,   395,   396,   397,   398,   399,
-     400,    -1,    -1,   403,    -1,   405,   406,    -1,   145,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,
-      -1,    -1,    -1,    -1,    -1,   309,    -1,    -1,    -1,    -1,
-     124,    -1,    -1,    -1,    -1,    -1,    -1,    75,     9,    10,
+     299,    -1,   301,    -1,   303,   304,   305,   306,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   316,     9,    10,
       11,    12,    13,    14,    15,    16,    17,    18,    -1,    -1,
-     187,   145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,
-     197,   155,    -1,    -1,    -1,    -1,    -1,   394,   395,   396,
-     397,   398,   399,   400,    -1,    -1,   403,    -1,   405,   406,
-     217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   187,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   196,   197,    75,    -1,    -1,   145,    -1,    -1,
-     394,   395,   396,   397,   398,   399,   400,   155,    -1,   403,
-      -1,   405,   406,   217,    -1,    -1,    -1,    -1,    -1,    -1,
-     267,    -1,    -1,    -1,    -1,    -1,     9,    10,    11,    12,
-      13,    14,    15,    16,    17,    18,    -1,    -1,    -1,   187,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,   197,
-      -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
-      18,    -1,   309,   267,   145,    -1,    -1,    -1,    -1,   217,
-      -1,    -1,    -1,    -1,   155,     9,    10,    11,    12,    13,
-      14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    75,    -1,     9,    10,    11,    12,    13,    14,
-      15,    16,    17,    18,    -1,   309,   187,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   196,   197,    75,    -1,   267,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,
-      -1,    75,    -1,    -1,    -1,    -1,    -1,   394,   395,   396,
-     397,   398,   399,   400,    -1,    -1,   403,    -1,   405,   406,
-      75,   309,   145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   155,    -1,    -1,     9,    10,    11,    12,    13,
-      14,    15,    16,    17,    18,    -1,   267,   145,    -1,    -1,
-     394,   395,   396,   397,   398,   399,   400,   155,    -1,   403,
-      -1,    -1,   406,    -1,   187,    -1,    -1,    -1,    -1,    -1,
-      -1,   145,    -1,   196,   197,    -1,    -1,    -1,    -1,    -1,
-      -1,   155,    -1,    -1,    -1,    -1,    -1,    -1,   309,   187,
-     145,    -1,    -1,    -1,   217,    -1,    -1,    -1,   196,   197,
-     155,    75,    -1,    -1,    -1,    -1,   394,   395,   396,   397,
-     398,   399,   400,   187,    -1,   403,    -1,   405,   406,   217,
-      -1,    -1,   196,   197,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   196,   197,   217,   267,    -1,    -1,    -1,    -1,     9,
-      10,    11,    12,    13,    14,    15,    16,    17,    18,    -1,
-      -1,    -1,   217,    -1,    -1,    -1,    -1,    -1,    -1,   267,
-      -1,   145,    -1,   394,   395,   396,   397,   398,   399,   400,
-      -1,   155,   403,    -1,   405,   406,   309,    -1,    -1,    -1,
-      -1,    -1,    -1,   267,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   309,   267,   187,    -1,    75,    -1,    -1,    -1,    -1,
-      -1,    -1,   196,   197,    -1,     9,    10,    11,    12,    13,
-      14,    15,    16,    17,    18,   309,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   217,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   309,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
-     403,    -1,   405,   406,    -1,   145,    -1,    -1,    -1,    -1,
-      -1,    75,    -1,   267,    -1,   155,   394,   395,   396,   397,
-     398,   399,   400,    -1,    -1,   403,    -1,   405,   406,     9,
-      10,    11,    12,    13,    14,    15,    16,    17,    18,    -1,
-     394,   395,   396,   397,   398,   399,   400,   187,    -1,   403,
-      -1,   405,   406,    -1,    -1,   309,   196,   197,    -1,   394,
-     395,   396,   397,   398,   399,   400,    -1,    -1,   403,    -1,
-     405,   406,    -1,    -1,    -1,    -1,    -1,   217,    -1,    -1,
-      -1,   145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   155,    -1,    -1,    -1,    75,     9,    10,    11,    12,
+      -1,    -1,    -1,   332,     9,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,
+     349,   350,    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   360,   361,   362,   363,    -1,   365,    -1,    -1,    -1,
+      -1,    -1,    -1,   372,   373,    -1,    -1,     9,    10,    11,
+      12,    13,    14,    15,    16,    17,    18,    -1,    -1,   388,
+      81,   390,    -1,    -1,   393,    -1,    -1,   396,    -1,   398,
+      -1,   400,   401,   402,    -1,    -1,    81,    -1,    -1,    -1,
+       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
+     419,    -1,    -1,    -1,    -1,    -1,     9,    10,    11,    12,
       13,    14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   162,    -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,
+      -1,    -1,    81,    -1,    -1,    -1,    -1,   162,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,
+      -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   203,   204,    -1,    -1,    -1,    -1,    -1,   194,
+     152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   203,   204,
+     162,    -1,    -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,
+      -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   194,   162,    -1,    -1,    -1,    -1,    -1,   152,
+      -1,   203,   204,    -1,    -1,    -1,    -1,    -1,    -1,   162,
+      -1,    -1,    -1,    -1,    -1,   276,    -1,    -1,    -1,    -1,
+      -1,    -1,   224,    -1,    -1,   194,    -1,    -1,    -1,    -1,
+      -1,   276,    -1,    -1,   203,   204,    -1,    -1,    -1,    -1,
+      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     203,   204,    -1,    -1,    -1,   224,    -1,   318,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   224,    -1,   318,   276,    -1,    -1,    -1,     9,    10,
+      11,    12,    13,    14,    15,    16,    17,    18,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   187,    -1,    -1,    -1,   267,    -1,    -1,
-      -1,    -1,   196,   197,    -1,    -1,    -1,    -1,    -1,    -1,
-     394,   395,   396,   397,   398,   399,   400,    -1,    -1,   403,
-      -1,   405,   406,   217,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    75,    -1,    -1,   145,    -1,    -1,    -1,   309,
-      -1,    -1,    -1,    -1,    -1,   155,    -1,     9,    10,    11,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   276,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   318,    -1,    -1,    -1,
+      -1,    -1,    -1,   276,     9,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   318,
+      81,   412,    -1,   414,   415,    -1,    -1,    -1,   403,   404,
+     405,   406,   407,   408,   409,   318,    -1,   412,    -1,   414,
+     415,    -1,    -1,    -1,    -1,    -1,    -1,     9,    10,    11,
       12,    13,    14,    15,    16,    17,    18,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    -1,    -1,
+      -1,   403,   404,   405,   406,   407,   408,   409,    -1,    -1,
+     412,    -1,   414,   415,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   162,    -1,    -1,   403,   404,   405,   406,   407,   408,
+     409,    -1,    -1,   412,    -1,   414,   415,    -1,    -1,    81,
+     403,   404,   405,   406,   407,   408,   409,    -1,    -1,   412,
+      -1,   414,   415,   194,    -1,    -1,    -1,   152,    -1,    -1,
+      -1,    -1,   203,   204,    -1,    -1,    -1,   162,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   224,     9,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,   194,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   203,   204,
+     152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     162,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,
+      -1,    -1,    -1,    -1,    -1,   276,    -1,     9,    10,    11,
+      12,    13,    14,    15,    16,    17,    18,    -1,    -1,    -1,
+      -1,    -1,   194,    -1,    -1,    -1,    81,    -1,    -1,    -1,
+      -1,   203,   204,     9,    10,    11,    12,    13,    14,    15,
+      16,    17,    18,    -1,    -1,    -1,    -1,   318,    -1,    -1,
+      -1,   276,   224,    -1,    -1,    -1,     9,    10,    11,    12,
+      13,    14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    81,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   267,    -1,    -1,    -1,   187,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   196,   197,    -1,    -1,
-       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
-      -1,    -1,   145,    -1,    -1,    -1,    -1,   217,    -1,    -1,
-      -1,    -1,   155,    75,    -1,   309,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   394,   395,   396,   397,   398,   399,
-     400,    -1,    -1,   403,    -1,    -1,   406,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   187,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   196,   197,    -1,    75,   267,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   145,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   155,    -1,    -1,    -1,    -1,    -1,   309,
-     394,   395,   396,   397,   398,   399,   400,    -1,    -1,   403,
-      -1,    -1,   406,     9,    10,    11,    12,    13,    14,    15,
-      16,    17,    18,    -1,   267,   187,   145,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   196,   197,   155,     9,    10,    11,
+      -1,    -1,    -1,   318,    -1,    -1,    -1,   152,    -1,    -1,
+      -1,    -1,    -1,    -1,   276,    81,    -1,   162,    -1,    -1,
+      -1,    -1,    -1,     9,    10,    11,    12,    13,    14,    15,
+      16,    17,    18,    -1,    -1,    -1,    -1,    -1,    81,    -1,
+      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   194,
+      -1,   412,    -1,   414,   415,    -1,   318,    -1,   203,   204,
+     152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     162,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,
+      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   403,   404,
+     405,   406,   407,   408,   409,    81,   162,   412,    -1,   414,
+     415,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,   152,
+      -1,   203,   204,    -1,    -1,    -1,    -1,    -1,    -1,   162,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,
+      -1,   276,   224,    -1,    -1,    -1,    -1,   203,   204,    -1,
+      -1,   403,   404,   405,   406,   407,   408,   409,    -1,    -1,
+     412,   194,   414,   415,    -1,    -1,    -1,    -1,   224,    -1,
+     203,   204,    -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,
+      -1,    -1,    -1,   318,    -1,    -1,   162,    -1,    -1,    -1,
+      -1,   224,    -1,    -1,   276,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,
+     276,    -1,    -1,    -1,    -1,    -1,    -1,   203,   204,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   318,    -1,    -1,    -1,
+      -1,    -1,    -1,   276,    -1,    -1,    -1,    -1,   224,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   318,    -1,    -1,    -1,    -1,    -1,   403,   404,
+     405,   406,   407,   408,   409,    -1,    -1,   412,    -1,    -1,
+     415,    -1,    -1,    -1,    -1,   318,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     276,    -1,    -1,    -1,    -1,     9,    10,    11,    12,    13,
+      14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,
+      -1,   403,   404,   405,   406,   407,   408,   409,    -1,    -1,
+     412,    -1,   414,   415,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   318,    -1,    -1,    -1,    -1,   403,   404,   405,
+     406,   407,   408,   409,    -1,    -1,   412,    -1,   414,   415,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     403,   404,   405,   406,   407,   408,   409,    81,    -1,   412,
+      -1,   414,   415,     9,    10,    11,    12,    13,    14,    15,
+      16,    17,    18,    -1,    -1,    -1,    -1,     9,    10,    11,
       12,    13,    14,    15,    16,    17,    18,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   309,    -1,   187,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,   197,    75,
-      -1,    -1,    -1,    -1,   394,   395,   396,   397,   398,   399,
-     400,    -1,    -1,   403,    -1,    -1,   406,    -1,   217,    -1,
-      -1,    -1,    -1,    75,    -1,   267,    -1,    -1,    -1,    -1,
-      -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
-      18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,   404,   405,
+     406,   407,   408,   409,    -1,    -1,   412,    -1,   414,   415,
+      -1,    -1,    -1,    -1,    23,    -1,    -1,    -1,   152,    -1,
+      -1,    -1,    -1,    -1,    33,    81,    -1,    36,   162,    38,
+      -1,    40,    -1,    -1,    -1,    44,    -1,    -1,    -1,    81,
+      49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      59,    -1,    81,    -1,    -1,    64,    65,    -1,    -1,    -1,
+     194,    -1,    -1,    72,    -1,    -1,    -1,    76,    -1,   203,
+     204,    80,     9,    10,    11,    12,    13,    14,    15,    16,
+      17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     224,    -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,    -1,
+     152,    -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,
+     162,    -1,    -1,   152,    -1,   134,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   162,    -1,    -1,   145,    -1,   194,    -1,
+      -1,    -1,   276,    -1,    81,    -1,    -1,   203,   204,    -1,
+      -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   203,   204,    -1,    -1,   194,    -1,    -1,   224,    -1,
+      -1,    -1,    -1,    -1,   203,   204,    -1,    -1,    -1,    -1,
+      -1,    -1,   224,    -1,   318,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   213,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   223,   152,   225,    -1,    -1,    -1,
+     276,    -1,    -1,    -1,    -1,   162,    -1,    -1,    -1,    -1,
+     239,    -1,    -1,    -1,   276,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   276,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   265,   194,    -1,    -1,
+      -1,    -1,   318,    -1,    -1,    -1,   203,   204,    -1,   403,
+     404,   405,   406,   407,   408,   409,   318,    -1,   412,    -1,
+     414,   415,    -1,    -1,    -1,    -1,    -1,   224,    -1,   318,
       -1,    -1,    -1,    -1,    -1,    -1,     9,    10,    11,    12,
-      13,    14,    15,    16,    17,    18,    -1,   309,   267,   145,
-      -1,   394,   395,   396,   397,   398,   399,   400,    -1,   155,
-     403,    -1,    -1,   406,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   145,    -1,    -1,    -1,    75,    -1,    -1,
-      -1,    -1,    -1,   155,    -1,    -1,    -1,    -1,    -1,    -1,
-     309,   187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     196,   197,    75,    -1,     9,    10,    11,    12,    13,    14,
-      15,    16,    17,    18,    -1,   187,    -1,    -1,    -1,    -1,
-      -1,   217,    -1,    -1,   196,   197,    -1,    -1,    -1,    -1,
-      -1,    -1,   394,   395,   396,   397,   398,   399,   400,    -1,
-      -1,   403,    -1,    -1,   406,   217,    -1,   145,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,     9,
-      10,    11,    12,    13,    14,    15,    16,    17,    18,    -1,
-      75,   267,   145,    -1,    -1,   394,   395,   396,   397,   398,
-     399,   400,   155,    -1,   403,    -1,    -1,   406,    -1,   187,
-      -1,    -1,    -1,    -1,    -1,   267,    -1,    -1,   196,   197,
-      -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
-      17,    18,    -1,   309,   187,    -1,    -1,    -1,    -1,   217,
-      -1,    -1,    -1,   196,   197,    75,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   309,    -1,    -1,
-     145,    -1,    -1,    -1,   217,    -1,    -1,    -1,    -1,    -1,
-     155,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,   267,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   196,   197,    -1,   267,   145,    -1,    -1,   394,   395,
-     396,   397,   398,   399,   400,   155,    -1,   403,    -1,    -1,
-     406,   309,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   394,   395,   396,   397,   398,   399,   400,    -1,
-      -1,   403,    -1,    -1,   406,    -1,   309,   187,   145,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   196,   197,   155,    -1,
+      13,    14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,
        9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
-      -1,    -1,   267,    -1,    -1,    -1,    -1,   217,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,
-     197,    -1,    -1,    -1,    -1,    -1,   394,   395,   396,   397,
-     398,   399,   400,    -1,   309,   403,    -1,    -1,   406,    -1,
-     217,    -1,    -1,    -1,    -1,    -1,    75,   267,    -1,    -1,
-      -1,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
-     403,    -1,    -1,   406,     9,    10,    11,    12,    13,    14,
-      15,    16,    17,    18,    -1,    -1,    -1,    -1,     9,    10,
-      11,    12,    13,    14,    15,    16,    17,    18,    -1,   309,
-     267,     9,    10,    11,    12,    13,    14,    15,    16,    17,
-      18,    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,
-      15,    16,    17,    18,    -1,    -1,   145,    -1,    -1,   394,
-     395,   396,   397,   398,   399,   400,   155,    -1,   403,    -1,
-      75,   406,   309,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    75,    -1,    -1,     9,    10,    11,
-      12,    13,    14,    15,    16,    17,    18,    75,   187,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,   197,    -1,
-      75,    -1,    -1,    -1,   394,   395,   396,   397,   398,   399,
-     400,    -1,    -1,   403,    -1,    -1,   406,    -1,   217,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     155,    -1,    -1,    75,   145,    -1,    -1,   394,   395,   396,
-     397,   398,   399,   400,   155,    -1,   403,   145,    -1,   406,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   155,   267,    -1,
-     145,    -1,   187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     155,   196,   197,    -1,    -1,    -1,   187,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   196,   197,    -1,    -1,   187,
-      -1,    -1,   217,    -1,    -1,    -1,    -1,    -1,   196,   197,
-     309,    -1,   187,   145,    -1,    -1,   217,    -1,    -1,    -1,
-      -1,   196,   197,   155,    -1,    -1,    -1,    -1,    -1,   217,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   267,    -1,    -1,   187,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   196,   197,   267,     9,    10,    11,
-      12,    13,    14,    15,    16,    17,    18,    -1,    -1,   267,
-      -1,    -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,    -1,
-      -1,    -1,   267,    -1,   309,   394,   395,   396,   397,   398,
-     399,   400,    -1,    -1,   403,    -1,    -1,   406,   309,    -1,
-       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
-      -1,   309,    -1,     9,    10,    11,    12,    13,    14,    15,
-      16,    17,    18,    75,   309,   267,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,    10,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   276,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,   404,   405,
+     406,   407,   408,   409,    -1,    -1,   412,    -1,   414,   415,
+      -1,   403,   404,   405,   406,   407,   408,   409,    81,    -1,
+     412,    -1,   414,   415,   403,   404,   405,   406,   407,   408,
+     409,   318,    81,   412,    -1,    -1,   415,    -1,     9,    10,
       11,    12,    13,    14,    15,    16,    17,    18,    -1,    -1,
-      -1,    -1,    -1,     9,    10,    11,    12,    13,    14,    15,
-      16,    17,    18,    -1,    -1,    -1,    75,   309,    -1,   394,
-     395,   396,   397,   398,   399,   400,    -1,    -1,   403,    75,
-      -1,   406,    -1,   394,   395,   396,   397,   398,   399,   400,
-      -1,    -1,   403,   145,    -1,   406,   394,   395,   396,   397,
-     398,   399,   400,   155,    75,   403,    -1,    -1,   406,   394,
-     395,   396,   397,   398,   399,   400,    -1,    -1,   403,    75,
-      -1,   406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   187,   145,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   196,   197,   155,    -1,    -1,   145,
-      -1,    -1,   394,   395,   396,   397,   398,   399,   400,   155,
-      -1,   403,    -1,    -1,   406,   217,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   145,    -1,    -1,    -1,   187,    -1,
-      -1,    -1,    -1,    -1,   155,    -1,    -1,   196,   197,   145,
-      -1,   187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   155,
-     196,   197,    -1,    -1,    -1,    -1,    -1,    -1,   217,    -1,
-      -1,    -1,    -1,    -1,    -1,   267,   187,    -1,    -1,    -1,
-      -1,   217,    -1,    -1,    -1,   196,   197,    -1,    -1,    -1,
-      -1,   187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     196,   197,    -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   309,   267,    -1,
-      -1,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   267,    -1,     9,    10,    11,    12,    13,    14,    15,
-      16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   267,    -1,    -1,    -1,
-     309,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   267,    -1,   309,    -1,    -1,     9,    10,    11,    12,
-      13,    14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   309,    75,
-      -1,    -1,   394,   395,   396,   397,   398,   399,   400,    -1,
-      -1,   403,    -1,   309,   406,     9,    10,    11,    12,    13,
+      -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
+      17,    18,    -1,    -1,    -1,     9,    10,    11,    12,    13,
       14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,
+      -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,
+      81,    -1,    -1,   162,    -1,    -1,   403,   404,   405,   406,
+     407,   408,   409,    -1,    81,   412,    -1,    -1,   415,    -1,
+      -1,   194,    -1,    -1,    -1,    -1,    -1,    81,    -1,    -1,
+     203,   204,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   203,   204,    -1,    -1,    -1,    -1,
+      -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,
+      -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   162,    -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,   152,    -1,
+      -1,    -1,    -1,   276,    -1,    -1,    -1,    -1,   162,    -1,
+      -1,    -1,    -1,   194,    -1,    -1,    -1,   276,    -1,    -1,
+      -1,    -1,   203,   204,    -1,    -1,    -1,   194,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   203,   204,    -1,    -1,
+     194,    -1,    -1,   224,    -1,   318,    -1,    -1,    -1,   203,
+     204,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,   318,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   276,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   276,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   276,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     403,   404,   405,   406,   407,   408,   409,   318,    -1,   412,
+      -1,    -1,   415,    -1,   403,   404,   405,   406,   407,   408,
+     409,   318,    -1,   412,    -1,    -1,   415,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   318,    -1,    -1,    -1,    -1,    -1,
       -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
-      18,    -1,    75,    -1,    -1,   394,   395,   396,   397,   398,
-     399,   400,    -1,    -1,   403,    -1,    -1,   406,   394,   395,
-     396,   397,   398,   399,   400,    -1,    -1,   403,    -1,   145,
-     406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   155,
-      -1,    75,    -1,   394,   395,   396,   397,   398,   399,   400,
-      -1,    -1,   403,    -1,    -1,   406,    -1,    75,   394,   395,
-     396,   397,   398,   399,   400,    -1,    -1,   403,    -1,    -1,
-     406,   187,   145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     196,   197,   155,    -1,     9,    10,    11,    12,    13,    14,
-      15,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   145,    -1,    -1,   187,    -1,    -1,    -1,    -1,    -1,
-      -1,   155,    -1,   196,   197,    -1,    -1,   145,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,
-      -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,    -1,    -1,
-      75,   267,    -1,   187,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   196,   197,    -1,    -1,    -1,    -1,    -1,   187,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,   197,
-      -1,    -1,    -1,   217,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   309,   267,    -1,    -1,    -1,    -1,   217,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,    10,
-      11,    12,    13,    14,    15,    16,    17,    18,    -1,    -1,
-     145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     155,    -1,    -1,   267,    -1,    -1,   309,     9,    10,    11,
-      12,    13,    14,    15,    16,    17,    18,    -1,    -1,   267,
-      -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
-      18,    -1,   187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   196,   197,    -1,    75,   309,    -1,    -1,   394,   395,
-     396,   397,   398,   399,   400,    -1,    -1,   403,    -1,    -1,
-     406,   309,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    75,     9,    10,    11,    12,    13,    14,
-      15,    16,    17,    18,    -1,    -1,    -1,    75,    -1,    -1,
-      -1,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
-     403,    -1,    -1,   406,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   267,    -1,   145,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,    -1,    -1,
-     394,   395,   396,   397,   398,   399,   400,    -1,    -1,   403,
-      75,    -1,   406,   145,    -1,    -1,   394,   395,   396,   397,
-     398,   399,   400,   155,   309,   403,   187,   145,   406,    -1,
-      -1,    -1,    -1,    -1,    -1,   196,   197,   155,    -1,    -1,
-      -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
-      17,    18,    -1,    -1,    -1,   187,   217,    -1,    -1,   124,
-      -1,    -1,    -1,    -1,   196,   197,    -1,    -1,    -1,   187,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,   197,
-     145,    -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,    -1,
-     155,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,
-      -1,    -1,    -1,    -1,    -1,    -1,   267,    -1,    75,   394,
-     395,   396,   397,   398,   399,   400,    -1,    -1,   403,    -1,
-      -1,   406,   187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   196,   197,    -1,    -1,   267,    -1,     9,    10,    11,
-      12,    13,    14,    15,    16,    17,    18,    -1,   309,   267,
-      -1,    -1,   217,    -1,    -1,    -1,    -1,    -1,    -1,     9,
+      18,    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    -1,    -1,    -1,     9,    10,    11,
+      12,    13,    14,    15,    16,    17,    18,    -1,    -1,    -1,
+       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
+      -1,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
+      -1,   412,    -1,    -1,   415,    -1,   403,   404,   405,   406,
+     407,   408,   409,    81,    -1,   412,    -1,    -1,   415,   403,
+     404,   405,   406,   407,   408,   409,    81,    -1,   412,    -1,
+      -1,   415,    -1,    -1,    -1,    -1,    30,    -1,    -1,    81,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,     9,
+      10,    11,    12,    13,    14,    15,    16,    17,    18,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,
+      84,    85,    -1,    -1,   162,    -1,    -1,   152,    -1,    -1,
+      -1,    -1,    -1,    97,    98,    -1,    -1,   162,    -1,    -1,
+     152,    -1,    -1,   107,    -1,    -1,   110,    23,    -1,    -1,
+     162,    -1,    -1,   152,    -1,    -1,   194,    33,    -1,    -1,
+      36,    81,    38,   162,    40,   203,   204,    -1,    44,   194,
+      -1,    -1,    -1,    49,    -1,    -1,    -1,    -1,   203,   204,
+      -1,   145,   194,    59,    -1,    -1,   224,    -1,    64,    65,
+      -1,   203,   204,    -1,    -1,   194,    72,    -1,    -1,   224,
+      76,    -1,    -1,    -1,   203,   204,    -1,    -1,    -1,    -1,
+      -1,    -1,   224,    -1,    -1,    -1,    -1,   181,    -1,    -1,
+      -1,    -1,    -1,    -1,   188,   224,    -1,    -1,    -1,    -1,
+      -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,   276,    -1,
+      -1,    -1,   162,    -1,    -1,   209,    -1,    -1,   124,    -1,
+      -1,   276,    -1,    -1,   218,   219,   220,    -1,   134,    -1,
+      -1,    -1,    -1,    -1,   276,    -1,    -1,    -1,    -1,   145,
+     234,    -1,    -1,    -1,   194,    -1,    -1,   276,    -1,    -1,
+     318,    -1,    -1,   203,   204,    -1,    -1,    -1,    -1,    -1,
+     254,    -1,    -1,   318,    -1,    -1,    -1,    -1,    -1,   263,
+      -1,    -1,    -1,    -1,   224,    -1,   318,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   280,    -1,    -1,   318,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,    10,    11,
+      12,    13,    14,    15,    16,    17,    18,   213,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   223,    -1,   225,
+      -1,    -1,    -1,    -1,    -1,    -1,   276,    -1,    -1,    -1,
+      -1,    -1,    -1,   239,    -1,   403,   404,   405,   406,   407,
+     408,   409,    -1,    -1,   412,    -1,    -1,   415,   403,   404,
+     405,   406,   407,   408,   409,    -1,    -1,   412,   352,   265,
+     415,   403,   404,   405,   406,   407,   408,   409,   318,    81,
+     412,   365,    -1,   415,   403,   404,   405,   406,   407,   408,
+     409,    -1,    -1,   412,    -1,    -1,   415,    -1,    -1,     9,
       10,    11,    12,    13,    14,    15,    16,    17,    18,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   309,   145,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,
-      -1,   309,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   267,    75,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   335,    -1,    -1,
-     187,    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,   196,
-     197,    -1,    -1,   394,   395,   396,   397,   398,   399,   400,
-      -1,    -1,   403,    -1,   309,   406,    -1,    -1,    -1,    -1,
-     217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   394,   395,   396,   397,   398,   399,   400,    -1,
-      -1,   403,    -1,   145,   406,    -1,   394,   395,   396,   397,
-     398,   399,   400,   155,    -1,   403,    -1,   405,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   145,    -1,    -1,    -1,    -1,
-     267,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   187,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   196,   197,    -1,    -1,    -1,   394,
-     395,   396,   397,   398,   399,   400,    -1,   187,   403,    -1,
-     405,    -1,   309,    -1,    -1,   217,   196,   197,    -1,    -1,
       -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
-      17,    18,    -1,    -1,    -1,    -1,    -1,   217,    -1,    -1,
-      -1,    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,
+      17,    18,    -1,    -1,    -1,     9,    10,    11,    12,    13,
+      14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     162,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
+      -1,    81,   412,    -1,    -1,   415,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   194,    -1,    -1,    -1,    -1,    81,    -1,    -1,
+      -1,   203,   204,    -1,     9,    10,    11,    12,    13,    14,
       15,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   267,     9,    10,    11,    12,
-      13,    14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,    75,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,   396,
-     397,   398,   399,   400,    -1,    -1,   403,   309,   405,    -1,
-      75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,
-      10,    11,    12,    13,    14,    15,    16,    17,    18,   309,
-      -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
-      18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   145,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,
+      -1,    -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     145,    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,
-     155,    -1,   394,   395,   396,   397,   398,   399,   400,    -1,
-     187,   403,   145,   405,    -1,    -1,    -1,    75,    -1,   196,
-     197,    -1,   155,    -1,   394,   395,   396,   397,   398,   399,
-     400,    -1,   187,   403,    -1,   405,    -1,    -1,    -1,    -1,
-     217,   196,   197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   187,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   217,   196,   197,   145,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   217,    -1,    -1,   145,    -1,    -1,
-     267,    -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   187,    -1,    -1,
-      -1,    -1,   267,    -1,    -1,    -1,   196,   197,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   187,
-      -1,    -1,   309,    -1,   267,    -1,    -1,   217,   196,   197,
-      -1,    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,
-      15,    16,    17,    18,   309,    -1,    -1,    -1,    -1,   217,
-      -1,    -1,    -1,    -1,    -1,    -1,     9,    10,    11,    12,
-      13,    14,    15,    16,    17,    18,   309,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,     9,    10,
-      11,    12,    13,    14,    15,    16,    17,    18,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,
-      75,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,   396,
-     397,   398,   399,   400,    -1,    -1,   403,    -1,   405,   309,
-      -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,   394,
-     395,   396,   397,   398,   399,   400,    -1,    -1,   403,    -1,
-     405,   309,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,
-      -1,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
-     403,    -1,   405,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     155,     9,    10,    11,    12,    13,    14,    15,    16,    17,
-      18,    -1,   145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   155,    -1,   394,   395,   396,   397,   398,   399,
-     400,    -1,   187,   403,   145,   405,    -1,    -1,    -1,    -1,
-      -1,   196,   197,    -1,   155,    -1,   394,   395,   396,   397,
-     398,   399,   400,    -1,   187,   403,    -1,   405,    -1,    -1,
-      -1,    -1,   217,   196,   197,    -1,    -1,    75,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   187,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   217,   196,   197,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,
-      -1,    -1,   267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   267,    -1,    -1,   145,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,
-      -1,    -1,    -1,    -1,   309,    -1,   267,     9,    10,    11,
+      -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   162,    -1,    -1,   152,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,   152,    -1,
+      -1,    -1,    -1,    -1,   276,    -1,    81,    -1,   162,    -1,
+      -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   203,   204,    -1,    -1,   194,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   203,   204,    -1,    -1,
+     194,    -1,    -1,    -1,   224,    -1,   318,    -1,    -1,   203,
+     204,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     224,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   276,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   276,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,
+      -1,    -1,   276,    -1,    -1,    -1,    -1,    -1,   203,   204,
+      -1,   403,   404,   405,   406,   407,   408,   409,   318,    -1,
+     412,    -1,    -1,   415,    -1,    -1,    -1,    -1,    -1,   224,
+      -1,   318,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   318,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
+      17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   276,    -1,     9,    10,    11,    12,    13,    14,    15,
+      16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
+      -1,    -1,   412,    -1,    -1,   415,   403,   404,   405,   406,
+     407,   408,   409,   318,    81,   412,    -1,    -1,   415,   403,
+     404,   405,   406,   407,   408,   409,    -1,    -1,   412,    -1,
+      -1,   415,    -1,    -1,     9,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    -1,    81,    -1,     9,    10,    11,
       12,    13,    14,    15,    16,    17,    18,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   309,    -1,    -1,   187,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,   197,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   309,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    75,     9,    10,    11,    12,    13,    14,
-      15,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,   394,
-     395,   396,   397,   398,   399,   400,    -1,    -1,   403,    -1,
-     405,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,
-      -1,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
-     403,    -1,   405,     9,    10,    11,    12,    13,    14,    15,
-      16,    17,    18,   394,   395,   396,   397,   398,   399,   400,
-      75,    -1,   403,   145,   405,    -1,    -1,    -1,    -1,    -1,
-      -1,   309,    -1,   155,    -1,    -1,     9,    10,    11,    12,
-      13,    14,    15,    16,    17,    18,    -1,    -1,    -1,     9,
-      10,    11,    12,    13,    14,    15,    16,    17,    18,    -1,
-      -1,    -1,    -1,    -1,    -1,   187,    -1,    -1,    -1,    75,
-      -1,    -1,    -1,    -1,   196,   197,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,   403,   404,
+     405,   406,   407,   408,   409,    -1,    81,   412,    -1,    -1,
+     415,    -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,    81,
+      -1,    -1,    -1,    -1,    -1,    -1,   162,   194,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   203,   204,    -1,    -1,
        9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
-     145,    -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,    -1,
-     155,    -1,    75,    -1,     9,    10,    11,    12,    13,    14,
-      15,    16,    17,    18,    -1,    75,   394,   395,   396,   397,
-     398,   399,   400,    -1,    -1,   403,    -1,   405,    -1,    -1,
-      -1,    -1,   187,    -1,    -1,    -1,    -1,    -1,    -1,   145,
-      -1,   196,   197,    -1,    -1,   267,    75,    -1,    -1,   155,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      75,    -1,   145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   187,   155,    -1,    -1,   145,    -1,   309,    -1,    -1,
-     196,   197,    -1,    -1,    -1,   155,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   217,   267,    -1,   187,    -1,   145,    -1,    -1,    -1,
-      -1,    -1,    -1,   196,   197,    -1,   155,   187,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   196,   197,    -1,    -1,
-     145,    -1,    -1,    -1,   217,    -1,    -1,    -1,    -1,    -1,
-     155,    -1,    -1,    -1,   309,    -1,    -1,   217,   187,    -1,
-      -1,   267,    -1,    -1,    -1,    -1,    -1,   196,   197,    -1,
-      -1,    -1,   394,   395,   396,   397,   398,   399,   400,    -1,
-      -1,   403,   187,   405,    -1,    -1,    -1,    -1,   217,    -1,
-      -1,   196,   197,    -1,   267,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   309,    -1,    -1,    -1,   267,    -1,    -1,
-      -1,    -1,   217,    -1,    -1,    -1,    -1,    -1,     9,    10,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,   194,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   203,   204,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,   224,    -1,
+     152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     162,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   276,
+      -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,   194,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   203,   204,
+      -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     276,   203,   204,    -1,    -1,    -1,    -1,    -1,    -1,   224,
+      -1,   318,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   318,   152,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   162,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   276,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   276,     9,    10,    11,    12,    13,
+      14,    15,    16,    17,    18,   194,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   203,   204,   403,   404,   405,   406,
+     407,   408,   409,   318,    -1,   412,    -1,    -1,   415,    -1,
+      -1,    -1,    -1,    -1,    -1,   224,   318,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,   404,   405,
+     406,   407,   408,   409,    -1,    -1,   412,    -1,    -1,   415,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,     9,
+      10,    11,    12,    13,    14,    15,    16,    17,    18,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   276,     9,    10,
+      11,    12,    13,    14,    15,    16,    17,    18,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,   404,
+     405,   406,   407,   408,   409,    -1,    -1,   412,    -1,    -1,
+     415,   403,   404,   405,   406,   407,   408,   409,    -1,   318,
+     412,    -1,    -1,   415,    -1,    -1,    -1,    -1,   152,    -1,
+      -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,   162,     9,
+      10,    11,    12,    13,    14,    15,    16,    17,    18,    -1,
+      81,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
+      17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   203,
+     204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     224,    -1,   152,    -1,   403,   404,   405,   406,   407,   408,
+     409,    81,   162,   412,    -1,    -1,   415,    -1,    -1,    -1,
+      -1,   152,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,
+      -1,   162,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   276,   203,   204,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   203,   204,   224,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   162,   224,   318,   152,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   194,    -1,   276,    -1,    -1,    -1,
+      -1,    -1,    -1,   203,   204,    -1,    -1,   194,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   276,   203,   204,    -1,    -1,
+      -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,   318,     9,
+      10,    11,    12,    13,    14,    15,    16,    17,    18,   403,
+     404,   405,   406,   407,   408,   409,    -1,   318,   412,    -1,
+      -1,   415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   276,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   276,
+      -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
+      17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,   318,    -1,
+      -1,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
+      -1,   318,   412,    -1,    -1,   415,    -1,    -1,    -1,    -1,
+      -1,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
+      -1,   412,    -1,    -1,   415,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   162,     9,    10,    11,    12,    13,    14,    15,
+      16,    17,    18,   403,   404,   405,   406,   407,   408,   409,
+      -1,    -1,   412,    -1,    -1,   415,   403,   404,   405,   406,
+     407,   408,   409,    -1,   194,   412,    -1,    -1,   415,    -1,
+      -1,    -1,    -1,   203,   204,   152,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   203,   204,     9,    10,
       11,    12,    13,    14,    15,    16,    17,    18,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   309,    -1,   267,   394,
-     395,   396,   397,   398,   399,   400,    -1,    -1,   403,   309,
-     405,     9,    10,    11,    12,    13,    14,    15,    16,    17,
-      18,    -1,   267,     9,    10,    11,    12,    13,    14,    15,
+      -1,    -1,    -1,    -1,    -1,    -1,   276,   224,    -1,    -1,
+      -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
+      18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,   318,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   276,
+      81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,    10,
+      11,    12,    13,    14,    15,    16,    17,    18,   194,    -1,
+      -1,    -1,    -1,    81,    -1,    -1,    -1,   203,   204,    -1,
+       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
+      -1,   318,    -1,    -1,    -1,    -1,    -1,    -1,   224,   130,
+      -1,    -1,    -1,     9,    10,    11,    12,    13,    14,    15,
       16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     309,    -1,    -1,    -1,    75,    -1,    -1,    -1,   394,   395,
-     396,   397,   398,   399,   400,    -1,    -1,   403,    -1,   405,
-      -1,    -1,    -1,    -1,   309,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,
-      -1,   394,   395,   396,   397,   398,   399,   400,    -1,    75,
-     403,    -1,   405,    -1,   394,   395,   396,   397,   398,   399,
-     400,    -1,    -1,   403,    -1,   405,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   145,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   155,   394,   395,   396,   397,   398,
-     399,   400,    -1,    -1,   403,    -1,   405,     9,    10,    11,
-      12,    13,    14,    15,    16,    17,    18,   145,    -1,   394,
-     395,   396,   397,   398,   399,   400,   187,   155,   403,   145,
-     405,    -1,    -1,    -1,    -1,   196,   197,    -1,    -1,   155,
+      -1,   152,    -1,   403,   404,   405,   406,   407,   408,   409,
+      81,   162,   412,    -1,    -1,   415,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,
+     276,    -1,    81,    -1,   162,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   203,   204,    -1,    81,   403,   404,   405,   406,
+     407,   408,   409,    -1,    -1,   412,   194,    -1,   415,    -1,
+      -1,    -1,   318,   224,    -1,   203,   204,    -1,    -1,    -1,
+      -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   162,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,
+      -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   162,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   194,    -1,   276,   152,    -1,    -1,    -1,
+      -1,    -1,   203,   204,    -1,    -1,   162,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,   276,    -1,
+      -1,    -1,    -1,   224,   203,   204,    -1,   403,   404,   405,
+     406,   407,   408,   409,    -1,    -1,   412,   318,   194,   415,
+      -1,    -1,    -1,    -1,    -1,   224,    -1,   203,   204,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     318,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,
+      -1,    -1,    -1,    -1,    -1,   276,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   344,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   276,    -1,    -1,
       -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
-      18,    -1,    -1,    -1,    -1,    -1,   217,    -1,    -1,   187,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,   197,
-      -1,   187,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,
-     196,   197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,
+      18,    -1,    -1,    -1,    -1,    -1,    -1,   318,    -1,    -1,
+     276,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
+      -1,   412,    -1,   414,    -1,    -1,    -1,    -1,    -1,   318,
+      -1,    -1,    -1,    -1,    -1,   403,   404,   405,   406,   407,
+     408,   409,    -1,    -1,   412,    -1,   414,    -1,    -1,    -1,
+      -1,    -1,   318,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,     9,    10,    11,    12,    13,
+      14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
+      -1,   412,    -1,   414,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   403,   404,   405,   406,   407,   408,
+     409,    -1,    -1,   412,    -1,   414,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   152,    -1,    -1,   403,   404,   405,
+     406,   407,   408,   409,   162,    -1,   412,    81,   414,     9,
+      10,    11,    12,    13,    14,    15,    16,    17,    18,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   203,   204,     9,    10,    11,
+      12,    13,    14,    15,    16,    17,    18,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,
+      -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   276,    81,
+     194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   203,
+     204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     224,    -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     318,    -1,   162,     9,    10,    11,    12,    13,    14,    15,
+      16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   217,    -1,    -1,    -1,    -1,   267,    75,    -1,    -1,
+     152,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,
+     162,    -1,   276,   203,   204,    -1,     9,    10,    11,    12,
+      13,    14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   194,    -1,    -1,    81,    -1,    -1,    -1,    -1,
+      -1,   203,   204,    -1,   318,   403,   404,   405,   406,   407,
+     408,   409,    -1,    -1,   412,    -1,   414,    -1,    -1,    -1,
+      -1,    -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   276,    -1,    81,    -1,
        9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,
-      -1,    -1,    -1,   145,    -1,    -1,    -1,    -1,   309,    -1,
-      -1,   267,    -1,   155,    -1,     9,    10,    11,    12,    13,
-      14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    75,   145,    -1,    -1,
-      -1,   309,    -1,    -1,    -1,   187,    -1,   155,    -1,    -1,
-      -1,    -1,    -1,   309,   196,   197,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,   187,
-      -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,   196,   197,
-      -1,    -1,    -1,   394,   395,   396,   397,   398,   399,   400,
-      -1,    -1,   403,    -1,   405,    -1,   145,    -1,    -1,   217,
-      -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   267,   394,   395,   396,   397,
-     398,   399,   400,    -1,    -1,   403,    -1,   405,   394,   395,
-     396,   397,   398,   399,   400,    -1,    -1,   403,   187,   405,
-      -1,   145,    -1,    -1,    -1,    -1,    -1,   196,   197,   267,
-      -1,   155,    -1,    -1,    -1,    -1,    -1,   309,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   276,    -1,   162,    -1,   318,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,
+     404,   405,   406,   407,   408,   409,    -1,    -1,   412,    -1,
+     414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,   152,
+      -1,    -1,    81,    -1,    -1,    -1,   318,   203,   204,   162,
+       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,     9,
+      10,    11,    12,    13,    14,    15,    16,    17,    18,    -1,
+      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     203,   204,    -1,   403,   404,   405,   406,   407,   408,   409,
+      -1,    -1,   412,    -1,   414,    -1,    -1,    -1,    -1,    -1,
+      -1,   224,    -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,
+     276,    -1,    81,   162,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   403,   404,   405,   406,   407,   408,   409,    -1,    -1,
+     412,    81,   414,    -1,    -1,     9,    10,    11,    12,    13,
+      14,    15,    16,    17,    18,   194,    -1,    -1,    -1,    -1,
+      -1,    -1,   318,   276,   203,   204,    -1,     9,    10,    11,
+      12,    13,    14,    15,    16,    17,    18,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   162,    -1,   318,    -1,    -1,    -1,    -1,
+      -1,    -1,   152,    -1,    -1,    -1,    -1,    81,    -1,    -1,
+      -1,    -1,   162,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   194,    -1,   276,    -1,    81,
+      -1,    -1,    -1,    -1,   203,   204,    -1,   403,   404,   405,
+     406,   407,   408,   409,   194,    -1,   412,    -1,   414,    -1,
+      -1,    -1,    -1,   203,   204,   224,     9,    10,    11,    12,
+      13,    14,    15,    16,    17,    18,    -1,    -1,    -1,   318,
+      -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,   152,    -1,
+     403,   404,   405,   406,   407,   408,   409,    -1,   162,   412,
+      -1,   414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     152,    -1,    -1,    -1,    -1,    -1,    -1,   276,    -1,    -1,
+     162,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     194,    -1,    -1,    -1,    -1,    -1,   276,    -1,    81,   203,
+     204,     9,    10,    11,    12,    13,    14,    15,    16,    17,
+      18,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,   318,
+     224,   203,   204,    -1,   403,   404,   405,   406,   407,   408,
+     409,    -1,    -1,   412,    -1,   414,    -1,    -1,   318,    -1,
+      -1,    -1,   224,    -1,     9,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,
+      -1,    -1,   276,    81,    -1,    -1,    -1,    -1,    -1,   162,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   187,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   309,   196,   197,    -1,     9,    10,    11,    12,    13,
-      14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   217,    -1,    -1,    -1,    -1,   267,    -1,
-      -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
-      17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   394,   395,   396,   397,   398,   399,   400,    -1,
-      -1,   403,    -1,   405,    -1,    -1,    -1,    -1,    -1,    -1,
-     309,    75,    -1,   267,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   394,   395,   396,   397,
-     398,   399,   400,    -1,    -1,   403,    -1,   405,    75,    -1,
-      -1,    -1,    -1,    -1,    -1,     9,    10,    11,    12,    13,
-      14,    15,    16,    17,    18,   309,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,
+      -1,    -1,    -1,    -1,   276,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   403,   404,   405,   406,   407,   408,
+     409,   194,    -1,   412,   318,   414,    81,    -1,    -1,    -1,
+     203,   204,    -1,   403,   404,   405,   406,   407,   408,   409,
+      -1,    -1,   412,    -1,   414,    -1,   318,    -1,    -1,    -1,
+      -1,   224,    -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   162,    -1,     9,    10,    11,    12,
+      13,    14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   194,   152,    -1,    -1,
+      -1,    -1,    -1,   276,    -1,   203,   204,   162,    -1,   403,
+     404,   405,   406,   407,   408,   409,    -1,    -1,   412,    -1,
+     414,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,
+      -1,   403,   404,   405,   406,   407,   408,   409,    81,   194,
+     412,    -1,   414,    -1,    -1,   318,    -1,    -1,   203,   204,
+       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   276,    -1,
+      -1,    -1,    -1,     9,    10,    11,    12,    13,    14,    15,
+      16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,
+     318,   276,    81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     403,   404,   405,   406,   407,   408,   409,    -1,    -1,   412,
+      -1,   414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   194,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
+     203,   204,    -1,   318,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   162,    -1,   403,   404,   405,   406,   407,
+     408,   409,    -1,    -1,   412,    -1,   414,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,
+      -1,    -1,    -1,   276,    -1,   194,   162,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   203,   204,    -1,    -1,   403,   404,
+     405,   406,   407,   408,   409,    -1,    -1,   412,    -1,   414,
+      -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,   194,    -1,
+      -1,    -1,    -1,    -1,    -1,   318,    -1,   203,   204,     9,
       10,    11,    12,    13,    14,    15,    16,    17,    18,    -1,
-      -1,   145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   155,    -1,    -1,    -1,   394,   395,   396,   397,   398,
-     399,   400,    -1,    -1,   403,    -1,   405,    -1,   145,    -1,
-      -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,
-      -1,    -1,    -1,   187,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   196,   197,    -1,    75,    -1,    -1,    -1,    -1,
-     394,   395,   396,   397,   398,   399,   400,    -1,    -1,   403,
-     187,   405,    -1,   217,    -1,    -1,    -1,    -1,    -1,   196,
-     197,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   276,     9,    10,
+      11,    12,    13,    14,    15,    16,    17,    18,    -1,    -1,
+      -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
       17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     217,   145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   155,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   267,    -1,   145,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   187,    -1,    -1,    -1,    -1,    75,    -1,
-     267,    -1,   196,   197,    -1,     9,    10,    11,    12,    13,
-      14,    15,    16,    17,    18,   309,    -1,   187,    -1,    -1,
-      -1,    -1,    -1,   217,    -1,    -1,   196,   197,    -1,     9,
+     276,    81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,
+     403,   404,   405,   406,   407,   408,   409,    -1,    -1,   412,
+      -1,   414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,
       10,    11,    12,    13,    14,    15,    16,    17,    18,    -1,
-      -1,    -1,   309,    -1,    -1,    -1,    -1,   217,    -1,    -1,
+      81,    -1,   318,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   145,    -1,
-      -1,    75,    -1,   267,    -1,    -1,    -1,    -1,   155,    -1,
+      -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   162,    -1,     9,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,   403,   404,   405,   406,   407,   408,
+     409,    81,    -1,   412,    -1,   414,    -1,    -1,    -1,    -1,
+      -1,   152,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,
+      -1,   162,    -1,   203,   204,   152,    -1,   403,   404,   405,
+     406,   407,   408,   409,    -1,   162,   412,    -1,   414,    -1,
+      -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   194,    -1,    -1,    81,    -1,    -1,    -1,
+      -1,    -1,   203,   204,    -1,    -1,    -1,   194,    -1,    -1,
+      -1,    -1,   152,    -1,    -1,    -1,   203,   204,    -1,    -1,
+      -1,    -1,   162,   224,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   276,   224,    -1,    -1,
+      -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
+      18,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   203,   204,    -1,    -1,   152,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   276,    -1,   162,   318,    -1,
+      -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,   276,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,    10,
+      11,    12,    13,    14,    15,    16,    17,    18,    -1,   194,
+      -1,    -1,    -1,    81,    -1,    -1,    -1,   318,   203,   204,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    75,    -1,   267,    -1,    -1,
-     394,   395,   396,   397,   398,   399,   400,    -1,    -1,   403,
-     187,   405,    -1,    -1,    -1,   309,    -1,    -1,    -1,   196,
-     197,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,   396,
-     397,   398,   399,   400,    -1,    -1,   403,    -1,   405,   309,
-     217,   145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   155,     9,    10,    11,    12,    13,    14,    15,    16,
-      17,    18,    -1,    -1,    -1,   145,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   187,    -1,    -1,    -1,    -1,    -1,    -1,
-     267,    -1,   196,   197,    -1,    -1,    -1,    -1,    -1,    -1,
-     394,   395,   396,   397,   398,   399,   400,   187,    -1,   403,
-      -1,   405,    -1,   217,    -1,    -1,   196,   197,    75,    -1,
-      -1,    -1,    -1,    -1,   394,   395,   396,   397,   398,   399,
-     400,    -1,   309,   403,    -1,   405,    -1,   217,    -1,    -1,
+      -1,   318,    -1,    -1,    -1,    -1,   276,    -1,    -1,   224,
+      -1,    -1,    -1,     9,    10,    11,    12,    13,    14,    15,
+      16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
+      81,    -1,   412,    -1,   414,    -1,    -1,    -1,   318,    -1,
+      -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,
+      -1,   276,    -1,    -1,   162,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
+      -1,   412,    -1,   414,    -1,    81,   403,   404,   405,   406,
+     407,   408,   409,    -1,    -1,   412,   194,   414,    -1,    -1,
+      -1,    -1,    -1,   318,    -1,   203,   204,    -1,    -1,    -1,
+      -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   162,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,
+      -1,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
+      -1,    -1,   412,    -1,   414,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   194,    -1,    -1,   152,    -1,    -1,    -1,
+      -1,    -1,   203,   204,    -1,    -1,   162,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   276,    -1,
+      -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,   403,   404,
+     405,   406,   407,   408,   409,    -1,    -1,   412,   194,   414,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   203,   204,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     318,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,
+      -1,    -1,    -1,    -1,    -1,   276,    -1,    -1,    -1,    -1,
+       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
+      -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
+      17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,    -1,    -1,
+     276,    -1,    -1,     9,    10,    11,    12,    13,    14,    15,
+      16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   403,   404,   405,   406,   407,
+     408,   409,    81,    -1,   412,    -1,   414,    -1,    -1,    -1,
+      -1,    -1,   318,    -1,    81,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
+      17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
+      -1,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
+      -1,   412,    -1,   414,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   162,    -1,   152,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    81,   162,    -1,   403,   404,   405,
+     406,   407,   408,   409,    -1,    -1,   412,    -1,   414,    -1,
+      -1,    -1,    -1,    -1,    -1,   194,   152,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   203,   204,   162,   194,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   203,   204,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,   194,    -1,
+      -1,    -1,    -1,    -1,    -1,   152,    -1,   203,   204,    -1,
+      -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   276,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,   276,
+      -1,    -1,    -1,    -1,    -1,    -1,   203,   204,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,   318,
+     276,     9,    10,    11,    12,    13,    14,    15,    16,    17,
+      18,   318,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   267,    -1,    -1,     9,    10,    11,    12,
-      13,    14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,   145,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,
-      -1,    -1,    -1,    -1,    -1,   309,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,   396,
-     397,   398,   399,   400,    -1,    -1,   403,    -1,   405,   309,
-     187,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,   196,
-     197,     9,    10,    11,    12,    13,    14,    15,    16,    17,
+      -1,    -1,   318,    -1,    -1,    -1,    -1,    -1,    -1,   276,
+      -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
       18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     217,    -1,    -1,    -1,    -1,    -1,     9,    10,    11,    12,
-      13,    14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   403,   404,   405,   406,   407,   408,
+     409,   318,    81,   412,    -1,   414,   403,   404,   405,   406,
+     407,   408,   409,    -1,    -1,   412,    -1,   414,    -1,    -1,
+      -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
+      17,    18,    -1,    81,    -1,    -1,    -1,   403,   404,   405,
+     406,   407,   408,   409,    -1,    -1,   412,    -1,   414,    -1,
+      -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   162,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   162,    -1,    -1,   403,   404,   405,   406,
+     407,   408,   409,    -1,    81,   412,   194,   414,    -1,    -1,
+      -1,    -1,    -1,    -1,   152,   203,   204,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   162,   194,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   203,   204,   224,    -1,     9,    10,
+      11,    12,    13,    14,    15,    16,    17,    18,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   224,   194,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   203,   204,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   162,   224,    -1,   276,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   276,    -1,    -1,
+      81,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   203,   204,    -1,    -1,
+     318,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   276,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,   318,
+      -1,    -1,    -1,    -1,    -1,     9,    10,    11,    12,    13,
+      14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     318,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   162,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   276,
        9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
-     394,   395,   396,   397,   398,   399,   400,    -1,    -1,   403,
-      -1,   405,   145,    -1,    -1,    -1,    -1,    75,    -1,    -1,
-     267,    -1,   155,    -1,   394,   395,   396,   397,   398,   399,
-     400,    -1,    -1,   403,    -1,   405,    -1,    -1,    -1,    -1,
-      -1,    -1,    75,    -1,     9,    10,    11,    12,    13,    14,
-      15,    16,    17,    18,   187,    -1,    75,    -1,    -1,    -1,
-      -1,    -1,   309,   196,   197,    -1,    -1,    -1,    -1,     9,
+      -1,    -1,    -1,    -1,    -1,   403,   404,   405,   406,   407,
+     408,   409,    -1,   194,   412,    -1,   414,    81,    -1,    -1,
+      -1,    -1,   203,   204,   403,   404,   405,   406,   407,   408,
+     409,   318,    -1,   412,    -1,   414,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   403,   404,   405,   406,   407,
+     408,   409,    81,    -1,   412,    -1,   414,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,
+      -1,    -1,    -1,    -1,    -1,   276,    -1,    -1,   162,     9,
       10,    11,    12,    13,    14,    15,    16,    17,    18,    -1,
-      -1,    -1,    -1,    -1,   217,    -1,    -1,   145,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,
-       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
-      75,    -1,   145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   155,    -1,    -1,    -1,   145,    -1,    -1,   187,
-      -1,    -1,    -1,    -1,   267,    75,   155,    -1,   196,   197,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,   396,
-     397,   398,   399,   400,   187,    -1,   403,    -1,   405,   217,
-      -1,    -1,    -1,   196,   197,    -1,    75,    -1,   187,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   309,   196,   197,    -1,
-     145,    -1,    -1,    -1,   217,    -1,    -1,    -1,    -1,    -1,
-     155,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,    -1,
-      -1,    -1,    -1,    -1,    -1,   145,    -1,    -1,    -1,   267,
-      -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,    -1,
-      -1,    -1,   187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   196,   197,    -1,   267,    -1,   145,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   155,   187,   267,    -1,
-      -1,   309,   217,    -1,    -1,    -1,   196,   197,    -1,    -1,
-      -1,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
-     403,    -1,   405,    -1,    -1,    -1,   309,   217,   187,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,   197,    -1,
-     309,     9,    10,    11,    12,    13,    14,    15,    16,    17,
-      18,    -1,   267,    -1,    -1,    -1,    -1,    -1,   217,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   394,   395,   396,   397,
-     398,   399,   400,    -1,   309,   403,    -1,   405,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,   267,    -1,
-      -1,   394,   395,   396,   397,   398,   399,   400,    -1,   309,
-     403,    -1,   405,    -1,    -1,   394,   395,   396,   397,   398,
-     399,   400,    -1,    -1,   403,    -1,   405,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   403,   404,   405,   406,
+     407,   408,   409,    -1,    -1,   412,    -1,   414,    -1,    -1,
+     194,    -1,    -1,   152,    -1,    -1,    -1,   318,    -1,   203,
+     204,    -1,    -1,   162,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    81,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   203,   204,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,
+      -1,    -1,   276,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
+      -1,   412,    -1,   414,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   162,    -1,   318,    -1,    -1,   276,     9,    10,
+      11,    12,    13,    14,    15,    16,    17,    18,    -1,    -1,
+      -1,    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,   194,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   203,   204,    -1,    -1,    -1,    -1,   318,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     309,     9,    10,    11,    12,    13,    14,    15,    16,    17,
-      18,    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,
-      15,    16,    17,    18,    -1,    -1,    -1,   145,    -1,   394,
-     395,   396,   397,   398,   399,   400,    -1,   155,   403,    -1,
-     405,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    30,
-      -1,    -1,    -1,    -1,   394,   395,   396,   397,   398,   399,
-     400,    -1,    -1,   403,    -1,   405,    -1,    75,    -1,   187,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,   197,
-      75,    -1,    -1,    -1,    -1,   394,   395,   396,   397,   398,
-     399,   400,    -1,    -1,   403,    -1,   405,    78,    79,   217,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      91,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     101,    -1,    -1,   104,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   145,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    21,   155,    23,   267,
-     145,    -1,    -1,    28,    -1,    30,    -1,    -1,   139,    -1,
-     155,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   187,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,   197,
-      -1,   309,   187,   174,    -1,    -1,    -1,    -1,    -1,    -1,
-     181,   196,   197,    78,    79,    -1,    -1,    -1,    -1,   217,
-      -1,    -1,    -1,    -1,    -1,    -1,    91,    92,    -1,    -1,
-      -1,   202,   217,    -1,    -1,    -1,   101,    -1,    -1,   104,
-     211,   212,   213,   108,    -1,    -1,   111,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   227,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,
-      -1,    -1,    -1,    -1,   139,   246,    -1,    -1,    -1,    -1,
-      -1,    -1,   267,    -1,   255,    -1,   394,   395,   396,   397,
-     398,   399,   400,    -1,    -1,   403,    -1,   405,    -1,    -1,
-     271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   174,
-      -1,   309,    -1,    -1,    -1,    -1,   181,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   309,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   198,    -1,    -1,    -1,   202,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   211,   212,   213,    -1,
-      -1,    -1,    -1,    -1,   219,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   227,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   246,    -1,    -1,    -1,   356,    -1,    -1,    -1,    -1,
-     255,    -1,    -1,    -1,    -1,    -1,   394,   395,   396,   397,
-     398,   399,   400,    -1,    -1,   403,   271,   405,    -1,   394,
-     395,   396,   397,   398,   399,   400,    -1,    -1,   403,    -1,
-     405,     4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
-      -1,    -1,    25,    26,    27,    -1,    29,    30,    31,    -1,
-      -1,    -1,    35,    -1,    37,    -1,    39,    40,    41,    -1,
-      43,    -1,    -1,    46,    -1,    48,    -1,    -1,    51,    -1,
-      -1,    54,    55,    56,    57,    58,    59,    -1,   343,    62,
-      63,    64,    -1,    66,    -1,    68,    69,    -1,   353,    72,
-      73,   356,    -1,    -1,    -1,    78,    79,    80,    81,    -1,
-      83,    84,    85,    -1,    -1,    88,    -1,    -1,    91,    92,
-      -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,
-      -1,   104,    -1,    -1,   107,   108,    -1,   110,   111,    -1,
-      -1,   114,   115,    -1,   117,   118,   119,   120,    -1,    -1,
-      -1,    -1,   125,    -1,   127,    -1,   129,    -1,    -1,    -1,
-     133,    -1,    -1,   136,   137,    -1,    -1,   140,    -1,    -1,
-     143,    -1,    -1,   146,   147,    -1,    -1,    -1,    -1,    -1,
-     153,    -1,    -1,    -1,   157,    -1,   159,    -1,    -1,    -1,
-     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
-      -1,   174,   175,   176,   177,   178,   179,   180,   181,   182,
-     183,    -1,   185,   186,    -1,   188,    -1,    -1,   191,    -1,
-     193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,   202,
-      -1,    -1,    -1,   206,   207,   208,   209,   210,   211,   212,
-     213,    -1,    -1,    -1,    -1,   218,    -1,   220,    -1,   222,
-     223,    -1,    -1,   226,   227,   228,    -1,   230,   231,   232,
-      -1,    -1,   235,    -1,   237,    -1,    -1,   240,    -1,    -1,
-      -1,    -1,   245,   246,    -1,    -1,    -1,    -1,    -1,    -1,
-     253,   254,    -1,    -1,    -1,   258,    -1,    -1,    -1,   262,
-      -1,    -1,    -1,   266,    -1,   268,    -1,    -1,    -1,   272,
-      -1,   274,   275,    -1,    -1,   278,   279,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,    -1,   292,
-      -1,   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   307,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     323,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341,    -1,
-     343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,
-     353,   354,    -1,   356,    -1,    -1,    -1,    -1,    -1,    -1,
-     363,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   379,    -1,   381,    -1,
-      -1,   384,    -1,    -1,   387,    -1,   389,    -1,   391,   392,
-     393,    -1,    -1,    -1,    -1,   398,     4,     5,     6,     7,
-       8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    22,    -1,    -1,    25,    26,    27,
-      -1,    29,    30,    31,    -1,    -1,    -1,    35,    -1,    37,
-      -1,    39,    40,    41,    -1,    43,    -1,    -1,    46,    -1,
-      48,    -1,    -1,    51,    -1,    -1,    54,    55,    56,    57,
-      58,    59,    -1,    -1,    62,    63,    64,    -1,    66,    -1,
-      68,    69,    -1,    -1,    72,    73,    -1,    -1,    -1,    -1,
-      78,    79,    80,    81,    -1,    83,    84,    85,    -1,    -1,
-      88,    -1,    -1,    91,    92,    -1,    94,    -1,    -1,    97,
-      -1,    -1,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,
-     108,    -1,   110,   111,    -1,    -1,   114,   115,    -1,   117,
-     118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,   127,
-      -1,   129,    -1,    -1,    -1,   133,    -1,    -1,   136,   137,
-      -1,    -1,   140,    -1,    -1,   143,    -1,    -1,   146,   147,
-      -1,    -1,    -1,    -1,    -1,   153,    -1,    -1,    -1,   157,
-      -1,   159,    -1,    -1,    -1,   163,   164,   165,   166,   167,
-     168,   169,   170,   171,   172,    -1,   174,   175,   176,   177,
-     178,   179,   180,   181,   182,   183,    -1,   185,   186,    -1,
-     188,    -1,    -1,   191,    -1,   193,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   201,   202,    -1,    -1,    -1,   206,   207,
-     208,   209,   210,   211,   212,   213,    -1,    -1,    -1,    -1,
-     218,    -1,   220,    -1,   222,   223,    -1,    -1,   226,   227,
-     228,    -1,   230,   231,   232,    -1,    -1,   235,    -1,   237,
-      -1,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,    -1,
-      -1,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,    -1,
-     258,    -1,    -1,    -1,   262,    -1,    -1,    -1,   266,    -1,
-     268,    -1,    -1,    -1,   272,    -1,   274,   275,    -1,    -1,
-     278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   290,    -1,   292,    -1,   294,   295,   296,   297,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   307,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   340,   341,    -1,   343,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   351,   352,   353,   354,    -1,   356,    -1,
-      -1,    -1,    -1,    -1,    -1,   363,   364,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   379,    -1,   381,    -1,    -1,   384,    -1,    -1,   387,
-      -1,   389,    -1,   391,   392,   393,    -1,    -1,    -1,    -1,
-     398,     4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
-      -1,    -1,    25,    26,    27,    -1,    29,    30,    31,    -1,
-      -1,    -1,    35,    -1,    37,    -1,    39,    40,    41,    -1,
-      43,    -1,    -1,    46,    -1,    48,    -1,    -1,    51,    -1,
-      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
-      63,    64,    -1,    66,    -1,    68,    69,    -1,    -1,    72,
-      73,    -1,    -1,    -1,    -1,    78,    79,    80,    81,    -1,
-      83,    84,    85,    -1,    -1,    88,    -1,    -1,    91,    92,
-      -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,
-      -1,   104,    -1,    -1,   107,   108,    -1,   110,   111,    -1,
-      -1,   114,   115,    -1,   117,   118,   119,   120,    -1,    -1,
-      -1,    -1,   125,    -1,   127,    -1,   129,    -1,    -1,    -1,
-     133,    -1,    -1,   136,   137,    -1,    -1,   140,    -1,    -1,
-     143,    -1,    -1,   146,   147,    -1,    -1,    -1,    -1,    -1,
-     153,    -1,    -1,    -1,   157,    -1,   159,    -1,    -1,    -1,
-     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
-      -1,   174,   175,   176,   177,   178,   179,   180,   181,   182,
-     183,    -1,   185,   186,    -1,   188,    -1,    -1,   191,    -1,
-     193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,   202,
-      -1,    -1,    -1,   206,   207,   208,   209,   210,   211,   212,
-     213,    -1,    -1,    -1,    -1,   218,    -1,   220,    -1,   222,
-     223,    -1,    -1,   226,   227,   228,    -1,   230,   231,   232,
-      -1,    -1,   235,    -1,   237,    -1,    -1,   240,    -1,    -1,
-      -1,    -1,   245,   246,    -1,    -1,    -1,    -1,    -1,    -1,
-     253,   254,    -1,    -1,    -1,   258,    -1,    -1,    -1,   262,
-      -1,    -1,    -1,   266,    -1,   268,    -1,    -1,    -1,   272,
-      -1,   274,   275,    -1,    -1,   278,   279,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,    -1,   292,
-      -1,   294,   295,   296,   297,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   307,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     323,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,   341,    -1,
-     343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,
-     353,   354,    -1,   356,    -1,    -1,    -1,    -1,    -1,    -1,
-     363,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   379,    -1,   381,    -1,
-      -1,   384,    -1,    -1,   387,    -1,   389,    -1,   391,   392,
-     393,    -1,    -1,    -1,    -1,   398,     4,     5,     6,     7,
+      -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,
+     404,   405,   406,   407,   408,   409,    81,    -1,   412,    -1,
+     414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   276,     9,    10,    11,
+      12,    13,    14,    15,    16,    17,    18,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   403,   404,   405,   406,   407,   408,
+     409,    -1,    -1,   412,    -1,   414,    -1,    -1,    -1,    -1,
+      -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,   318,    -1,
+      -1,   162,    -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,     9,    10,
+      11,    12,    13,    14,    15,    16,    17,    18,    -1,    81,
+      -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   203,   204,    -1,    -1,    -1,    -1,    -1,   194,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   203,   204,
+      -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,
+      -1,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
+      81,    -1,   412,    -1,   414,    -1,    -1,    -1,    -1,    -1,
+     152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     162,    -1,    -1,    -1,    -1,   276,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   276,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   203,   204,    -1,    -1,    -1,    -1,   318,    -1,    -1,
+      -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   162,   224,   318,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   203,   204,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   276,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
+      -1,   412,    -1,   414,    -1,    -1,    -1,    -1,   403,   404,
+     405,   406,   407,   408,   409,    -1,   318,   412,    -1,   414,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   276,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   403,   404,   405,   406,   407,   408,   409,    -1,    -1,
+     412,    -1,   414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,     4,     5,     6,     7,     8,    -1,
+      -1,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
+      -1,   412,    22,   414,    -1,    25,    26,    27,    -1,    29,
+      30,    31,    -1,    -1,    -1,    35,    -1,    37,    -1,    39,
+      40,    41,    42,    -1,    -1,    45,    -1,    -1,    48,    -1,
+      -1,    51,    -1,    -1,    54,    -1,    56,    -1,    58,    59,
+      60,    61,    62,    63,    -1,    -1,    66,    67,    68,    -1,
+      70,    -1,    72,    73,    -1,    -1,    -1,    77,    78,    79,
+      -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,    89,
+      90,    91,    -1,    -1,    94,    -1,    -1,    97,    98,    -1,
+     100,    -1,    -1,   103,    -1,    -1,    -1,   107,    -1,    -1,
+     110,    -1,    -1,   113,   114,    -1,   116,   117,    -1,    -1,
+     120,   121,    -1,   123,   124,   125,   126,    -1,    -1,    -1,
+      -1,   131,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
+      -1,    -1,   142,   143,    -1,    -1,   146,    -1,    -1,    -1,
+     150,    -1,    -1,   153,   154,    -1,    -1,    -1,    -1,    -1,
+     160,    -1,    -1,    -1,   164,    -1,   166,    -1,    -1,    -1,
+     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
+      -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,
+     190,    -1,   192,   193,    -1,   195,    -1,    -1,   198,    -1,
+     200,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   208,   209,
+      -1,    -1,    -1,   213,   214,   215,   216,   217,   218,   219,
+     220,    -1,    -1,    -1,    -1,   225,    -1,   227,    -1,   229,
+     230,    -1,    -1,   233,   234,   235,    -1,   237,   238,   239,
+      -1,    -1,   242,    -1,   244,    -1,    -1,    -1,   248,    -1,
+      -1,    -1,    -1,   253,   254,    -1,    -1,    -1,    -1,    -1,
+      -1,   261,   262,    -1,    -1,    -1,    -1,   267,    -1,    -1,
+      -1,   271,    -1,    -1,    -1,   275,    -1,   277,    -1,    -1,
+      -1,   281,    -1,   283,   284,    -1,    -1,   287,   288,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
+      -1,   301,    -1,   303,   304,   305,   306,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   316,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   332,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   349,
+     350,    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     360,   361,   362,   363,    -1,   365,    -1,    -1,    -1,    -1,
+      -1,    -1,   372,   373,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,    -1,
+     390,    -1,    -1,   393,    -1,    -1,   396,    -1,   398,    -1,
+     400,   401,   402,    -1,    -1,    -1,    -1,   407,     4,     5,
+       6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,    25,
+      26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,    35,
+      -1,    37,    -1,    39,    40,    41,    42,    -1,    -1,    45,
+      -1,    -1,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
+      56,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
+      66,    67,    68,    -1,    70,    -1,    72,    73,    -1,    -1,
+      -1,    77,    78,    79,    -1,    -1,    -1,    -1,    84,    85,
+      86,    87,    -1,    89,    90,    91,    -1,    -1,    94,    -1,
+      -1,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
+      -1,   107,    -1,    -1,   110,    -1,    -1,   113,   114,    -1,
+     116,   117,    -1,    -1,   120,   121,    -1,   123,   124,   125,
+     126,    -1,    -1,    -1,    -1,   131,    -1,   133,    -1,   135,
+      -1,    -1,    -1,   139,    -1,    -1,   142,   143,    -1,    -1,
+     146,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,    -1,
+      -1,    -1,    -1,    -1,   160,    -1,    -1,    -1,   164,    -1,
+     166,    -1,    -1,    -1,   170,   171,   172,   173,   174,   175,
+     176,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
+     186,   187,   188,   189,   190,    -1,   192,   193,    -1,   195,
+      -1,    -1,   198,    -1,   200,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   208,   209,    -1,    -1,    -1,   213,   214,   215,
+     216,   217,   218,   219,   220,    -1,    -1,    -1,    -1,   225,
+      -1,   227,    -1,   229,   230,    -1,    -1,   233,   234,   235,
+      -1,   237,   238,   239,    -1,    -1,   242,    -1,   244,    -1,
+      -1,    -1,   248,    -1,    -1,    -1,    -1,   253,   254,    -1,
+      -1,    -1,    -1,    -1,    -1,   261,   262,    -1,    -1,    -1,
+      -1,   267,    -1,    -1,    -1,   271,    -1,    -1,    -1,   275,
+      -1,   277,    -1,    -1,    -1,   281,    -1,   283,   284,    -1,
+      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   299,    -1,   301,    -1,   303,   304,   305,
+     306,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   332,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   349,   350,    -1,   352,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   360,   361,   362,   363,    -1,   365,
+      -1,    -1,    -1,    -1,    -1,    -1,   372,   373,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   388,    -1,   390,    -1,    -1,   393,    -1,    -1,
+     396,    -1,   398,    -1,   400,   401,   402,    -1,    -1,    -1,
+      -1,   407,     4,     5,     6,     7,     8,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      22,    -1,    -1,    25,    26,    27,    -1,    29,    30,    31,
+      -1,    -1,    -1,    35,    -1,    37,    -1,    39,    40,    41,
+      42,    -1,    -1,    45,    -1,    -1,    48,    -1,    -1,    51,
+      -1,    -1,    54,    -1,    56,    -1,    58,    59,    60,    61,
+      62,    63,    -1,    -1,    66,    67,    68,    -1,    70,    -1,
+      72,    73,    -1,    -1,    -1,    77,    78,    79,    -1,    -1,
+      -1,    -1,    84,    85,    86,    87,    -1,    89,    90,    91,
+      -1,    -1,    94,    -1,    -1,    97,    98,    -1,   100,    -1,
+      -1,   103,    -1,    -1,    -1,   107,    -1,    -1,   110,    -1,
+      -1,   113,   114,    -1,   116,   117,    -1,    -1,   120,   121,
+      -1,   123,   124,   125,   126,    -1,    -1,    -1,    -1,   131,
+      -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,    -1,
+     142,   143,    -1,    -1,   146,    -1,    -1,    -1,   150,    -1,
+      -1,   153,   154,    -1,    -1,    -1,    -1,    -1,   160,    -1,
+      -1,    -1,   164,    -1,   166,    -1,    -1,    -1,   170,   171,
+     172,   173,   174,   175,   176,   177,   178,   179,    -1,   181,
+     182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
+     192,   193,    -1,   195,    -1,    -1,   198,    -1,   200,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   208,   209,    -1,    -1,
+      -1,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
+      -1,    -1,    -1,   225,    -1,   227,    -1,   229,   230,    -1,
+      -1,   233,   234,   235,    -1,   237,   238,   239,    -1,    -1,
+     242,    -1,   244,    -1,    -1,    -1,   248,    -1,    -1,    -1,
+      -1,   253,   254,    -1,    -1,    -1,    -1,    -1,    -1,   261,
+     262,    -1,    -1,    -1,    -1,   267,    -1,    -1,    -1,   271,
+      -1,    -1,    -1,   275,    -1,   277,    -1,    -1,    -1,   281,
+      -1,   283,   284,    -1,    -1,   287,   288,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,   301,
+      -1,   303,   304,   305,   306,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   316,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     332,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   349,   350,    -1,
+     352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,   361,
+     362,   363,    -1,   365,    -1,    -1,    -1,    -1,    -1,    -1,
+     372,   373,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   388,    -1,   390,    -1,
+      -1,   393,    -1,    -1,   396,    -1,   398,    -1,   400,   401,
+     402,    -1,    -1,    -1,    -1,   407,     4,     5,     6,     7,
        8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    22,    -1,    -1,    25,    26,    27,
       -1,    29,    30,    31,    -1,    -1,    -1,    35,    -1,    37,
-      -1,    39,    40,    41,    -1,    43,    -1,    -1,    46,    -1,
-      48,    -1,    -1,    51,    -1,    -1,    54,    55,    56,    57,
-      58,    59,    -1,    -1,    62,    63,    64,    -1,    66,    -1,
-      68,    69,    -1,    -1,    72,    73,    -1,    -1,    -1,    -1,
-      78,    79,    80,    81,    -1,    83,    84,    85,    -1,    -1,
-      88,    -1,    -1,    91,    92,    -1,    94,    -1,    -1,    97,
-      -1,    -1,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,
-     108,    -1,   110,   111,    -1,    -1,   114,   115,    -1,   117,
-     118,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,   127,
-      -1,   129,    -1,    -1,    -1,   133,    -1,    -1,   136,   137,
-      -1,    -1,   140,    -1,    -1,   143,    -1,    -1,   146,   147,
-      -1,    -1,    -1,    -1,    -1,   153,    -1,    -1,    -1,   157,
-      -1,   159,    -1,    -1,    -1,   163,   164,   165,   166,   167,
-     168,   169,   170,   171,   172,    -1,   174,   175,   176,   177,
-     178,   179,   180,   181,   182,   183,    -1,   185,   186,    -1,
-     188,    -1,    -1,   191,    -1,   193,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   201,   202,    -1,    -1,    -1,   206,   207,
-     208,   209,   210,   211,   212,   213,    -1,    -1,    -1,    -1,
-     218,    -1,   220,    -1,   222,   223,    -1,    -1,   226,   227,
-     228,    -1,   230,   231,   232,    -1,    -1,   235,    -1,   237,
-      -1,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,    -1,
-      -1,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,    -1,
-     258,    -1,    -1,    -1,   262,    -1,    -1,    -1,   266,    -1,
-     268,    -1,    -1,    -1,   272,    -1,   274,   275,    -1,    -1,
-     278,   279,     9,    10,    11,    12,    13,    14,    15,    16,
-      17,    18,   290,    -1,   292,    -1,   294,   295,   296,   297,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   307,
-       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
-      -1,    -1,    -1,    -1,    -1,   323,     9,    10,    11,    12,
-      13,    14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,
-      -1,    -1,   340,   341,    -1,   343,    -1,    -1,    75,    -1,
-      -1,    -1,    -1,   351,   352,   353,   354,    -1,   356,    -1,
-      -1,    -1,    -1,    -1,    -1,   363,   364,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
-      -1,   379,    -1,   381,    -1,    -1,   384,    -1,    -1,   387,
-      -1,   389,    75,   391,   392,   393,    -1,    -1,    -1,    -1,
-     398,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   145,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   155,     9,
+      -1,    39,    40,    41,    42,    -1,    -1,    45,    -1,    -1,
+      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    -1,
+      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
+      68,    -1,    70,    -1,    72,    73,    -1,    -1,    -1,    77,
+      78,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
+      -1,    89,    90,    91,    -1,    -1,    94,    -1,    -1,    97,
+      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
+      -1,    -1,   110,    -1,    -1,   113,   114,    -1,   116,   117,
+      -1,    -1,   120,   121,    -1,   123,   124,   125,   126,    -1,
+      -1,    -1,    -1,   131,    -1,   133,    -1,   135,    -1,    -1,
+      -1,   139,    -1,    -1,   142,   143,    -1,    -1,   146,    -1,
+      -1,    -1,   150,    -1,    -1,   153,   154,    -1,    -1,    -1,
+      -1,    -1,   160,    -1,    -1,    -1,   164,    -1,   166,    -1,
+      -1,    -1,   170,   171,   172,   173,   174,   175,   176,   177,
+     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
+     188,   189,   190,    -1,   192,   193,    -1,   195,    -1,    -1,
+     198,    -1,   200,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     208,   209,    -1,    -1,    -1,   213,   214,   215,   216,   217,
+     218,   219,   220,    -1,    -1,    -1,    -1,   225,    -1,   227,
+      -1,   229,   230,    -1,    -1,   233,   234,   235,    -1,   237,
+     238,   239,    -1,    -1,   242,    -1,   244,    -1,    -1,    -1,
+     248,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,    -1,
+      -1,    -1,    -1,   261,   262,    -1,    -1,    -1,    -1,   267,
+      -1,    -1,    -1,   271,    -1,    -1,    -1,   275,    -1,   277,
+      -1,    -1,    -1,   281,    -1,   283,   284,    -1,    -1,   287,
+     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   299,    -1,   301,    -1,   303,   304,   305,   306,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   316,     9,
       10,    11,    12,    13,    14,    15,    16,    17,    18,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   145,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,
-     187,    -1,   145,    -1,    -1,    -1,    -1,    -1,    -1,   196,
-     197,    -1,   155,     9,    10,    11,    12,    13,    14,    15,
-      16,    17,    18,    -1,    -1,    -1,    -1,    -1,   187,    -1,
-     217,    -1,    -1,    -1,    -1,    75,    -1,   196,   197,    -1,
-      -1,    -1,    -1,    -1,   187,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   196,   197,    -1,    -1,    -1,   217,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,    -1,    75,
-     267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,    10,
-      11,    12,    13,    14,    15,    16,    17,    18,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   145,    -1,    -1,   267,    -1,
-      -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,    -1,
-      -1,    -1,   309,    -1,   267,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   187,    -1,   145,
-     309,   338,   339,   340,    75,    -1,   196,   197,    -1,   155,
-      -1,    -1,    -1,   350,   351,    -1,   309,   354,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   363,   217,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   187,    -1,   380,   381,    -1,    -1,    -1,    -1,    -1,
-     196,   197,    -1,    -1,    -1,    -1,    -1,   394,   395,   396,
-     397,   398,   399,   400,    -1,    -1,   403,    -1,    -1,    -1,
-      -1,   217,    -1,    -1,   145,    -1,    -1,   267,    -1,    -1,
-      -1,    -1,    -1,    -1,   155,   394,   395,   396,   397,   398,
-     399,   400,   385,    -1,   403,    -1,    -1,    -1,    -1,    -1,
-      -1,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
-     403,    -1,    -1,    -1,    -1,    -1,   187,    -1,    -1,   309,
-      -1,   267,    -1,    -1,    -1,   196,   197,     9,    10,    11,
-      12,    13,    14,    15,    16,    17,    18,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,
-      -1,    -1,     9,    10,    11,    12,    13,    14,    15,    16,
-      17,    18,    -1,   309,     9,    10,    11,    12,    13,    14,
-      15,    16,    17,    18,    -1,     9,    10,    11,    12,    13,
+      -1,    -1,    -1,    -1,   332,     9,    10,    11,    12,    13,
       14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    75,    -1,   385,   267,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   394,   395,   396,   397,   398,   399,
-     400,    -1,    -1,   403,    -1,    -1,    -1,    -1,    75,    -1,
-       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
-      75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   309,    -1,
-      -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,
-     396,   397,   398,   399,   400,    -1,    -1,   403,    -1,    -1,
-      -1,    -1,    -1,   145,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   155,    -1,     9,    10,    11,    12,    13,
-      14,    15,    16,    17,    18,    -1,    75,    -1,   145,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,
-     145,    -1,    -1,    -1,    -1,   187,    -1,    -1,    -1,    -1,
-     155,   145,    -1,    -1,   196,   197,    -1,    -1,    -1,    -1,
-      -1,   155,    -1,   394,   395,   396,   397,   398,   399,   400,
-     187,    -1,   403,    -1,    -1,   217,    -1,    -1,    -1,   196,
-     197,    75,   187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   196,   197,   187,    -1,    -1,   145,    -1,    -1,    -1,
-     217,    -1,   196,   197,    -1,    -1,   155,    -1,    -1,    -1,
-      -1,    -1,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   217,    -1,   267,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   187,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,   197,    -1,
-     267,   145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   155,   267,    -1,    -1,    -1,    -1,   309,   217,    -1,
-      -1,    -1,    -1,   267,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   309,   187,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   196,   197,   309,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   309,    -1,    -1,   267,    -1,
-      -1,    -1,    -1,   217,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   394,   395,   396,   397,   398,   399,   400,    -1,
-     309,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   267,    -1,    -1,    -1,   394,   395,   396,
-     397,   398,   399,   400,    -1,    -1,   403,    -1,    -1,   394,
-     395,   396,   397,   398,   399,   400,    -1,    -1,   403,    -1,
-     394,   395,   396,   397,   398,   399,   400,    -1,    -1,   403,
-      -1,    -1,    -1,    -1,    -1,   309,    -1,    -1,    -1,    -1,
+      -1,   349,   350,    -1,   352,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   360,   361,   362,   363,    -1,   365,    -1,    -1,
+      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,     9,    10,
+      11,    12,    13,    14,    15,    16,    17,    18,    -1,    -1,
+     388,    81,   390,    -1,    -1,   393,    -1,    -1,   396,    -1,
+     398,    -1,   400,   401,   402,    -1,    -1,    81,    82,   407,
+      -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
+      18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,    10,
+      11,    12,    13,    14,    15,    16,    17,    18,    -1,     9,
+      10,    11,    12,    13,    14,    15,    16,    17,    18,    -1,
+      81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   162,    -1,    -1,    -1,    -1,    -1,   152,    -1,
+      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,   162,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      81,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,
+      -1,    81,    -1,   203,   204,    -1,    -1,    -1,    -1,    -1,
+     194,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   203,
+     204,   162,    -1,    -1,   224,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     224,    -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   194,   162,    -1,    -1,    -1,    -1,    -1,
+      -1,   152,   203,   204,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   162,   152,    -1,    -1,    -1,   276,    -1,    -1,    -1,
+      -1,    -1,   162,   224,    -1,    -1,   194,    -1,    -1,    -1,
+      -1,    -1,   276,    -1,    -1,   203,   204,    -1,    -1,    -1,
+      -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   203,   204,   194,    -1,   224,    -1,   318,    -1,
+      -1,    -1,    -1,   203,   204,    -1,    -1,    -1,    -1,   329,
+     330,   331,   332,   224,   318,   276,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   224,    -1,    -1,   347,   348,   349,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   359,
+     360,    -1,    -1,   363,    -1,    -1,    -1,    -1,   276,    -1,
+      -1,    -1,   372,    -1,    -1,    -1,    -1,   318,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   276,    -1,    -1,    -1,   389,
+     390,    -1,    -1,    -1,    -1,    -1,   276,    -1,    -1,    -1,
+      -1,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
+     318,    -1,   412,    -1,    -1,    -1,    -1,    -1,    -1,   403,
+     404,   405,   406,   407,   408,   409,    -1,   318,   412,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,     9,
+      10,    11,    12,    13,    14,    15,    16,    17,    18,    -1,
+      -1,    -1,    -1,   394,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
+      -1,   412,     9,    10,    11,    12,    13,    14,    15,    16,
+      17,    18,    -1,    -1,    -1,    -1,   394,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   403,   404,   405,   406,   407,
+     408,   409,    -1,    -1,   412,    -1,    -1,    -1,    -1,    -1,
+      -1,    81,   403,   404,   405,   406,   407,   408,   409,    -1,
+      -1,   412,    -1,   403,   404,   405,   406,   407,   408,   409,
+      -1,    -1,   412,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    81,    -1,     9,    10,    11,    12,
+      13,    14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   162,     9,    10,    11,    12,    13,    14,    15,
+      16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,    81,    -1,
+      -1,    -1,    -1,    -1,   194,   162,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   203,   204,    -1,    81,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   224,    -1,    -1,   194,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    81,   203,   204,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,   152,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,
+      -1,    -1,    -1,    -1,    -1,    -1,   276,   152,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   194,    -1,    -1,    -1,    -1,   152,    -1,    -1,   276,
+     203,   204,    -1,    -1,    -1,    -1,   162,    -1,   318,   194,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   203,   204,
+      -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,   224,
+      -1,   318,    -1,    -1,    -1,    -1,    -1,   203,   204,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,
+      -1,    -1,    -1,   276,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   276,    -1,   403,   404,   405,   406,   407,   408,   409,
+      -1,    -1,   412,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   318,    -1,    -1,    -1,    -1,
+     276,    -1,    -1,    -1,    -1,    -1,   403,   404,   405,   406,
+     407,   408,   409,   318,    -1,   412,     9,    10,    11,    12,
+      13,    14,    15,    16,    17,    18,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   318,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   394,   395,   396,   397,   398,
-     399,   400,    -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,
-       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,
-     394,   395,   396,   397,   398,   399,   400,    22,    -1,   403,
-      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
-      35,    -1,    37,    -1,    39,    40,    41,    -1,    43,    -1,
-      -1,    46,    -1,    48,    -1,    -1,    51,    -1,    -1,    54,
-      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
-      -1,    66,    -1,    68,    69,    -1,    -1,    72,    73,    -1,
-      -1,    -1,    -1,    78,    79,    80,    81,    -1,    83,    84,
-      85,    -1,    -1,    88,    -1,    -1,    91,    92,    -1,    94,
-      -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,   104,
-      -1,    -1,   107,   108,    -1,   110,   111,    -1,    -1,   114,
-     115,    -1,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
-     125,    -1,   127,    -1,   129,    -1,    -1,    -1,   133,   134,
-      -1,   136,   137,    -1,    -1,   140,    -1,    -1,   143,    -1,
-      -1,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,    -1,
-      -1,    -1,   157,    -1,   159,    -1,    -1,    -1,   163,   164,
-     165,   166,   167,   168,   169,   170,   171,   172,    -1,   174,
-     175,   176,   177,   178,   179,   180,   181,   182,   183,    -1,
-     185,   186,    -1,   188,    -1,    -1,   191,    -1,   193,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   201,   202,    -1,    -1,
-      -1,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
-      -1,    -1,    -1,   218,    -1,   220,    -1,   222,   223,    -1,
-      -1,   226,   227,   228,    -1,   230,   231,   232,    -1,    -1,
-     235,    -1,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
-     245,   246,    -1,    -1,    -1,    -1,    -1,    -1,   253,   254,
-      -1,    -1,    -1,   258,    -1,    -1,    -1,   262,    -1,    -1,
-      -1,   266,    -1,   268,    -1,    -1,    -1,   272,    -1,   274,
-     275,    -1,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   290,    -1,   292,    -1,   294,
-     295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   323,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,
-      -1,   356,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,
+     403,   404,   405,   406,   407,   408,   409,    -1,    81,   412,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,   404,
+     405,   406,   407,   408,   409,    -1,    -1,   412,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   379,    -1,   381,    -1,    -1,   384,
-      -1,    -1,   387,    -1,   389,    -1,   391,   392,   393,     4,
-       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,
-      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
-      35,    -1,    37,    -1,    39,    40,    41,    -1,    43,    -1,
-      -1,    46,    -1,    48,    -1,    -1,    51,    -1,    -1,    54,
-      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
-      -1,    66,    -1,    68,    69,    -1,    -1,    72,    73,    -1,
-      -1,    -1,    -1,    78,    79,    80,    81,    -1,    83,    84,
-      85,    -1,    -1,    88,    -1,    -1,    91,    92,    -1,    94,
-      -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,   104,
-      -1,    -1,   107,   108,    -1,   110,   111,    -1,    -1,   114,
-     115,    -1,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
-     125,    -1,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,
-      -1,   136,   137,    -1,    -1,   140,    -1,    -1,   143,    -1,
-      -1,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,   154,
-      -1,    -1,   157,    -1,   159,    -1,    -1,    -1,   163,   164,
-     165,   166,   167,   168,   169,   170,   171,   172,    -1,   174,
-     175,   176,   177,   178,   179,   180,   181,   182,   183,    -1,
-     185,   186,    -1,   188,    -1,    -1,   191,    -1,   193,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   201,   202,    -1,    -1,
-      -1,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
-      -1,    -1,    -1,   218,    -1,   220,    -1,   222,   223,    -1,
-      -1,   226,   227,   228,    -1,   230,   231,   232,    -1,    -1,
-     235,    -1,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
-     245,   246,    -1,    -1,    -1,    -1,    -1,    -1,   253,   254,
-      -1,    -1,    -1,   258,    -1,    -1,    -1,   262,    -1,    -1,
-      -1,   266,    -1,   268,    -1,    -1,    -1,   272,    -1,   274,
-     275,    -1,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   290,    -1,   292,    -1,   294,
-     295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   323,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,
-      -1,   356,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,   404,   405,
+     406,   407,   408,   409,    -1,    -1,   412,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   379,    -1,   381,    -1,    -1,   384,
-      -1,    -1,   387,    -1,   389,    -1,   391,   392,   393,     4,
-       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,
-      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
-      35,    -1,    37,    -1,    39,    40,    41,    -1,    43,    -1,
-      -1,    46,    -1,    48,    -1,    -1,    51,    -1,    -1,    54,
-      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
-      -1,    66,    -1,    68,    69,    -1,    -1,    72,    73,    -1,
-      -1,    76,    -1,    78,    79,    80,    81,    -1,    83,    84,
-      85,    -1,    -1,    88,    -1,    -1,    91,    92,    -1,    94,
-      -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,   104,
-      -1,    -1,   107,   108,    -1,   110,   111,    -1,    -1,   114,
-     115,    -1,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
-     125,    -1,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,
-      -1,   136,   137,    -1,    -1,   140,    -1,    -1,   143,    -1,
-      -1,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,    -1,
-      -1,    -1,   157,    -1,   159,    -1,    -1,    -1,   163,   164,
-     165,   166,   167,   168,   169,   170,   171,   172,    -1,   174,
-     175,   176,   177,   178,   179,   180,   181,   182,   183,    -1,
-     185,   186,    -1,   188,    -1,    -1,   191,    -1,   193,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   201,   202,    -1,    -1,
-      -1,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
-      -1,    -1,    -1,   218,    -1,   220,    -1,   222,   223,    -1,
-      -1,   226,   227,   228,    -1,   230,   231,   232,    -1,    -1,
-     235,    -1,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
-     245,   246,    -1,    -1,    -1,    -1,    -1,    -1,   253,   254,
-      -1,    -1,    -1,   258,    -1,    -1,    -1,   262,    -1,    -1,
-      -1,   266,    -1,   268,    -1,    -1,    -1,   272,    -1,   274,
-     275,    -1,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   290,    -1,   292,    -1,   294,
-     295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   323,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,
-      -1,   356,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   379,    -1,   381,    -1,    -1,   384,
-      -1,    -1,   387,    -1,   389,    -1,   391,   392,   393,     4,
-       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,
-      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
-      35,    -1,    37,    -1,    39,    40,    41,    -1,    43,    -1,
-      -1,    46,    -1,    48,    -1,    -1,    51,    -1,    -1,    54,
-      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
-      -1,    66,    -1,    68,    69,    -1,    -1,    72,    73,    -1,
-      -1,    -1,    -1,    78,    79,    80,    81,    -1,    83,    84,
-      85,    -1,    -1,    88,    -1,    -1,    91,    92,    -1,    94,
-      -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,   104,
-      -1,    -1,   107,   108,    -1,   110,   111,    -1,    -1,   114,
-     115,    -1,   117,   118,   119,   120,    -1,    -1,    -1,   124,
-     125,    -1,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,
-      -1,   136,   137,    -1,    -1,   140,    -1,    -1,   143,    -1,
-      -1,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,    -1,
-      -1,    -1,   157,    -1,   159,    -1,    -1,    -1,   163,   164,
-     165,   166,   167,   168,   169,   170,   171,   172,    -1,   174,
-     175,   176,   177,   178,   179,   180,   181,   182,   183,    -1,
-     185,   186,    -1,   188,    -1,    -1,   191,    -1,   193,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   201,   202,    -1,    -1,
-      -1,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
-      -1,    -1,    -1,   218,    -1,   220,    -1,   222,   223,    -1,
-      -1,   226,   227,   228,    -1,   230,   231,   232,    -1,    -1,
-     235,    -1,   237,    -1,    -1,   240,    -1,    -1,    -1,    -1,
-     245,   246,    -1,    -1,    -1,    -1,    -1,    -1,   253,   254,
-      -1,    -1,    -1,   258,    -1,    -1,    -1,   262,    -1,    -1,
-      -1,   266,    -1,   268,    -1,    -1,    -1,   272,    -1,   274,
-     275,    -1,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   290,    -1,   292,    -1,   294,
-     295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   323,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,
-      -1,   356,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   379,    -1,   381,    -1,    -1,   384,
-      -1,    -1,   387,    -1,   389,    -1,   391,   392,   393,     4,
-       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,
-      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
-      35,    -1,    37,    -1,    39,    40,    41,    -1,    43,    -1,
-      -1,    46,    -1,    48,    -1,    -1,    51,    -1,    -1,    54,
-      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
-      -1,    66,    -1,    68,    69,    -1,    -1,    72,    73,    -1,
-      -1,    -1,    -1,    78,    79,    80,    81,    -1,    83,    84,
-      85,    -1,    -1,    88,    -1,    -1,    91,    92,    -1,    94,
-      -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,   104,
-      -1,    -1,   107,   108,    -1,   110,   111,    -1,    -1,   114,
-     115,    -1,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
-     125,    -1,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,
-      -1,   136,   137,    -1,    -1,   140,    -1,    -1,   143,    -1,
-      -1,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,    -1,
-      -1,    -1,   157,    -1,   159,    -1,    -1,    -1,   163,   164,
-     165,   166,   167,   168,   169,   170,   171,   172,    -1,   174,
-     175,   176,   177,   178,   179,   180,   181,   182,   183,    -1,
-     185,   186,    -1,   188,    -1,    -1,   191,    -1,   193,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   201,   202,    -1,    -1,
-      -1,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
-      -1,    -1,    -1,   218,    -1,   220,    -1,   222,   223,    -1,
-      -1,   226,   227,   228,    -1,   230,   231,   232,    -1,    -1,
-     235,    -1,   237,    -1,    -1,   240,    -1,   242,    -1,    -1,
-     245,   246,    -1,    -1,    -1,    -1,    -1,    -1,   253,   254,
-      -1,    -1,    -1,   258,    -1,    -1,    -1,   262,    -1,    -1,
-      -1,   266,    -1,   268,    -1,    -1,    -1,   272,    -1,   274,
-     275,    -1,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   290,    -1,   292,    -1,   294,
-     295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   323,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,
-      -1,   356,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   379,    -1,   381,    -1,    -1,   384,
-      -1,    -1,   387,    -1,   389,    -1,   391,   392,   393,     4,
-       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,
-      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
-      35,    -1,    37,    -1,    39,    40,    41,    -1,    43,    -1,
-      -1,    46,    -1,    48,    -1,    -1,    51,    -1,    -1,    54,
-      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
-      -1,    66,    -1,    68,    69,    -1,    -1,    72,    73,    -1,
-      -1,    -1,    -1,    78,    79,    80,    81,    -1,    83,    84,
-      85,    -1,    -1,    88,    -1,    -1,    91,    92,    -1,    94,
-      -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,   104,
-      -1,    -1,   107,   108,    -1,   110,   111,    -1,    -1,   114,
-     115,    -1,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
-     125,    -1,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,
-      -1,   136,   137,    -1,    -1,   140,    -1,    -1,   143,    -1,
-      -1,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,    -1,
-      -1,    -1,   157,    -1,   159,    -1,    -1,    -1,   163,   164,
-     165,   166,   167,   168,   169,   170,   171,   172,    -1,   174,
-     175,   176,   177,   178,   179,   180,   181,   182,   183,    -1,
-     185,   186,    -1,   188,    -1,    -1,   191,    -1,   193,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   201,   202,    -1,   204,
-      -1,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
-      -1,    -1,    -1,   218,    -1,   220,    -1,   222,   223,    -1,
-      -1,   226,   227,   228,    -1,   230,   231,   232,    -1,    -1,
-     235,    -1,   237,    -1,    -1,   240,    -1,    -1,    -1,    -1,
-     245,   246,    -1,    -1,    -1,    -1,    -1,    -1,   253,   254,
-      -1,    -1,    -1,   258,    -1,    -1,    -1,   262,    -1,    -1,
-      -1,   266,    -1,   268,    -1,    -1,    -1,   272,    -1,   274,
-     275,    -1,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   290,    -1,   292,    -1,   294,
-     295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   323,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,
-      -1,   356,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,
+      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     203,   204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   379,    -1,   381,    -1,    -1,   384,
-      -1,    -1,   387,    -1,   389,    -1,   391,   392,   393,     4,
-       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,
-      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
-      35,    -1,    37,    -1,    39,    40,    41,    -1,    43,    -1,
-      -1,    46,    -1,    48,    -1,    -1,    51,    -1,    -1,    54,
-      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
-      -1,    66,    -1,    68,    69,    -1,    -1,    72,    73,    -1,
-      -1,    -1,    -1,    78,    79,    80,    81,    -1,    83,    84,
-      85,    -1,    -1,    88,    -1,    -1,    91,    92,    -1,    94,
-      -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,   104,
-      -1,    -1,   107,   108,    -1,   110,   111,    -1,    -1,   114,
-     115,    -1,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
-     125,    -1,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,
-      -1,   136,   137,    -1,    -1,   140,    -1,    -1,   143,    -1,
-      -1,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,    -1,
-      -1,    -1,   157,    -1,   159,    -1,    -1,    -1,   163,   164,
-     165,   166,   167,   168,   169,   170,   171,   172,    -1,   174,
-     175,   176,   177,   178,   179,   180,   181,   182,   183,    -1,
-     185,   186,    -1,   188,    -1,    -1,   191,    -1,   193,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   201,   202,    -1,    -1,
-      -1,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
-      -1,    -1,    -1,   218,    -1,   220,    -1,   222,   223,    -1,
-      -1,   226,   227,   228,    -1,   230,   231,   232,    -1,    -1,
-     235,    -1,   237,    -1,    -1,   240,    -1,    -1,    -1,    -1,
-     245,   246,    -1,    -1,    -1,    -1,    -1,    -1,   253,   254,
-      -1,    -1,    -1,   258,    -1,    -1,    -1,   262,    -1,    -1,
-      -1,   266,    -1,   268,    -1,    -1,    -1,   272,    -1,   274,
-     275,    -1,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   290,    -1,   292,    -1,   294,
-     295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   323,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,
-      -1,   356,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,
+      -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   379,    -1,   381,    -1,    -1,   384,
-      -1,    -1,   387,    -1,   389,    -1,   391,   392,   393,     4,
-       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,
-      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
-      35,    -1,    37,    -1,    39,    40,    41,    -1,    43,    -1,
-      -1,    46,    -1,    48,    -1,    -1,    51,    -1,    -1,    54,
-      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
-      -1,    66,    -1,    68,    69,    -1,    -1,    72,    73,    -1,
-      -1,    -1,    -1,    78,    79,    80,    81,    -1,    83,    84,
-      85,    -1,    -1,    88,    -1,    -1,    91,    92,    -1,    94,
-      -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,   104,
-      -1,    -1,   107,   108,    -1,   110,   111,    -1,    -1,   114,
-     115,    -1,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
-     125,    -1,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,
-      -1,   136,   137,    -1,    -1,   140,    -1,    -1,   143,    -1,
-      -1,   146,   147,    -1,    -1,    -1,    -1,    -1,   153,    -1,
-      -1,    -1,   157,    -1,   159,    -1,    -1,    -1,   163,   164,
-     165,   166,   167,   168,   169,   170,   171,   172,    -1,   174,
-     175,   176,   177,   178,   179,   180,   181,   182,   183,    -1,
-     185,   186,    -1,   188,    -1,    -1,   191,    -1,   193,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   201,   202,    -1,    -1,
-      -1,   206,   207,   208,   209,   210,   211,   212,   213,    82,
-      83,    84,    -1,   218,    -1,   220,    -1,   222,   223,    -1,
-      -1,   226,   227,   228,    -1,   230,   231,   232,    -1,    -1,
-     235,    -1,   237,    -1,    -1,   240,    -1,    -1,    -1,    -1,
-     245,   246,    -1,    -1,    -1,    -1,    -1,    -1,   253,   254,
-      -1,    -1,    -1,   258,    -1,    -1,    -1,   262,    -1,    -1,
-      -1,   266,    -1,   268,    -1,    -1,    -1,   272,    -1,   274,
-     275,    -1,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   290,    -1,   292,   161,   294,
-     295,   296,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     183,    -1,    -1,   186,    -1,    -1,    -1,    -1,   323,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,
-      -1,   356,    -1,    -1,    -1,    -1,   229,    -1,   363,   364,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   379,    -1,   381,    -1,    -1,   384,
-      -1,    -1,   387,    -1,   389,    -1,   391,   392,   393,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   269,   270,   271,    -1,
-      -1,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
-     283,   284,   285,   286,   287,   288,    -1,    -1,   291,    23,
-     293,    -1,   295,   296,   297,   298,   299,   300,    -1,    33,
-     303,   304,    36,    -1,    38,    -1,    40,    -1,    42,    -1,
-      -1,    -1,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    55,    -1,    -1,    -1,    -1,    60,    61,    -1,    -1,
-      -1,    -1,    -1,    -1,    68,    -1,    -1,    71,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,    -1,
-      -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   139,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   276,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   318,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   206,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   216,    -1,   218,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   232,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,
+       5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,
+     403,   404,   405,   406,   407,   408,   409,    22,    -1,   412,
+      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
+      35,    -1,    37,    -1,    39,    40,    41,    42,    -1,    -1,
+      45,    -1,    -1,    48,    -1,    -1,    51,    -1,    -1,    54,
+      -1,    56,    -1,    58,    59,    60,    61,    62,    63,    -1,
+      -1,    66,    67,    68,    -1,    70,    -1,    72,    73,    -1,
+      -1,    -1,    77,    78,    79,    -1,    -1,    -1,    -1,    84,
+      85,    86,    87,    -1,    89,    90,    91,    -1,    -1,    94,
+      -1,    -1,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
+      -1,    -1,   107,    -1,    -1,   110,    -1,    -1,   113,   114,
+      -1,   116,   117,    -1,    -1,   120,   121,    -1,   123,   124,
+     125,   126,    -1,    -1,    -1,    -1,   131,    -1,   133,    -1,
+     135,    -1,    -1,    -1,   139,   140,    -1,   142,   143,    -1,
+      -1,   146,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,
+      -1,    -1,    -1,    -1,    -1,   160,    -1,    -1,    -1,   164,
+      -1,   166,    -1,    -1,    -1,   170,   171,   172,   173,   174,
+     175,   176,   177,   178,   179,    -1,   181,   182,   183,   184,
+     185,   186,   187,   188,   189,   190,    -1,   192,   193,    -1,
+     195,    -1,    -1,   198,    -1,   200,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   208,   209,    -1,    -1,    -1,   213,   214,
+     215,   216,   217,   218,   219,   220,    -1,    -1,    -1,    -1,
+     225,    -1,   227,    -1,   229,   230,    -1,    -1,   233,   234,
+     235,    -1,   237,   238,   239,    -1,    -1,   242,    -1,   244,
+      -1,    -1,    -1,   248,    -1,   250,    -1,    -1,   253,   254,
+      -1,    -1,    -1,    -1,    -1,    -1,   261,   262,    -1,    -1,
+      -1,    -1,   267,    -1,    -1,    -1,   271,    -1,    -1,    -1,
+     275,    -1,   277,    -1,    -1,    -1,   281,    -1,   283,   284,
+      -1,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   299,    -1,   301,    -1,   303,   304,
+     305,   306,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   332,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   349,   350,    -1,   352,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   360,   361,   362,   363,    -1,
+     365,    -1,    -1,    -1,    -1,    -1,    -1,   372,   373,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   388,    -1,   390,    -1,    -1,   393,    -1,
+      -1,   396,    -1,   398,    -1,   400,   401,   402,     4,     5,
+       6,     7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,    25,
+      26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,    35,
+      -1,    37,    -1,    39,    40,    41,    42,    -1,    -1,    45,
+      -1,    -1,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
+      56,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
+      66,    67,    68,    -1,    70,    -1,    72,    73,    -1,    -1,
+      -1,    77,    78,    79,    -1,    -1,    -1,    -1,    84,    85,
+      86,    87,    -1,    89,    90,    91,    -1,    -1,    94,    -1,
+      -1,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
+      -1,   107,    -1,    -1,   110,    -1,    -1,   113,   114,    -1,
+     116,   117,    -1,    -1,   120,   121,    -1,   123,   124,   125,
+     126,    -1,    -1,    -1,    -1,   131,    -1,   133,    -1,   135,
+      -1,    -1,    -1,   139,    -1,    -1,   142,   143,    -1,    -1,
+     146,    -1,    -1,    -1,   150,    -1,    -1,   153,   154,    -1,
+      -1,    -1,    -1,    -1,   160,   161,    -1,    -1,   164,    -1,
+     166,    -1,    -1,    -1,   170,   171,   172,   173,   174,   175,
+     176,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
+     186,   187,   188,   189,   190,    -1,   192,   193,    -1,   195,
+      -1,    -1,   198,    -1,   200,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   208,   209,    -1,    -1,    -1,   213,   214,   215,
+     216,   217,   218,   219,   220,    -1,    -1,    -1,    -1,   225,
+      -1,   227,    -1,   229,   230,    -1,    -1,   233,   234,   235,
+      -1,   237,   238,   239,    -1,    -1,   242,    -1,   244,    -1,
+      -1,    -1,   248,    -1,   250,    -1,    -1,   253,   254,    -1,
+      -1,    -1,    -1,    -1,    -1,   261,   262,    -1,    -1,    -1,
+      -1,   267,    -1,    -1,    -1,   271,    -1,    -1,    -1,   275,
+      -1,   277,    -1,    -1,    -1,   281,    -1,   283,   284,    -1,
+      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   299,    -1,   301,    -1,   303,   304,   305,
+     306,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     316,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   332,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   349,   350,    -1,   352,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   360,   361,   362,   363,    -1,   365,
+      -1,    -1,    -1,    -1,    -1,    -1,   372,   373,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   388,    -1,   390,    -1,    -1,   393,    -1,    -1,
+     396,    -1,   398,    -1,   400,   401,   402,     4,     5,     6,
+       7,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,    25,    26,
+      27,    -1,    29,    30,    31,    -1,    -1,    -1,    35,    -1,
+      37,    -1,    39,    40,    41,    42,    -1,    -1,    45,    -1,
+      -1,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
+      -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    66,
+      67,    68,    -1,    70,    -1,    72,    73,    -1,    -1,    -1,
+      77,    78,    79,    -1,    -1,    82,    -1,    84,    85,    86,
+      87,    -1,    89,    90,    91,    -1,    -1,    94,    -1,    -1,
+      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,
+     107,    -1,    -1,   110,    -1,    -1,   113,   114,    -1,   116,
+     117,    -1,    -1,   120,   121,    -1,   123,   124,   125,   126,
+      -1,    -1,    -1,    -1,   131,    -1,   133,    -1,   135,    -1,
+      -1,    -1,   139,    -1,    -1,   142,   143,    -1,    -1,   146,
+      -1,    -1,    -1,   150,    -1,    -1,   153,   154,    -1,    -1,
+      -1,    -1,    -1,   160,    -1,    -1,    -1,   164,    -1,   166,
+      -1,    -1,    -1,   170,   171,   172,   173,   174,   175,   176,
+     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
+     187,   188,   189,   190,    -1,   192,   193,    -1,   195,    -1,
+      -1,   198,    -1,   200,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   208,   209,    -1,    -1,    -1,   213,   214,   215,   216,
+     217,   218,   219,   220,    -1,    -1,    -1,    -1,   225,    -1,
+     227,    -1,   229,   230,    -1,    -1,   233,   234,   235,    -1,
+     237,   238,   239,    -1,    -1,   242,    -1,   244,    -1,    -1,
+      -1,   248,    -1,   250,    -1,    -1,   253,   254,    -1,    -1,
+      -1,    -1,    -1,    -1,   261,   262,    -1,    -1,    -1,    -1,
+     267,    -1,    -1,    -1,   271,    -1,    -1,    -1,   275,    -1,
+     277,    -1,    -1,    -1,   281,    -1,   283,   284,    -1,    -1,
+     287,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   299,    -1,   301,    -1,   303,   304,   305,   306,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   316,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   332,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   349,   350,    -1,   352,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   360,   361,   362,   363,    -1,   365,    -1,
+      -1,    -1,    -1,    -1,    -1,   372,   373,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   388,    -1,   390,    -1,    -1,   393,    -1,    -1,   396,
+      -1,   398,    -1,   400,   401,   402,     4,     5,     6,     7,
+       8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    22,    -1,    -1,    25,    26,    27,
+      -1,    29,    30,    31,    -1,    -1,    -1,    35,    -1,    37,
+      -1,    39,    40,    41,    42,    -1,    -1,    45,    -1,    -1,
+      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    -1,
+      58,    59,    60,    61,    62,    63,    -1,    -1,    66,    67,
+      68,    -1,    70,    -1,    72,    73,    -1,    -1,    -1,    77,
+      78,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
+      -1,    89,    90,    91,    -1,    -1,    94,    -1,    -1,    97,
+      98,    -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,
+      -1,    -1,   110,    -1,    -1,   113,   114,    -1,   116,   117,
+      -1,    -1,   120,   121,    -1,   123,   124,   125,   126,    -1,
+      -1,    -1,   130,   131,    -1,   133,    -1,   135,    -1,    -1,
+      -1,   139,    -1,    -1,   142,   143,    -1,    -1,   146,    -1,
+      -1,    -1,   150,    -1,    -1,   153,   154,    -1,    -1,    -1,
+      -1,    -1,   160,    -1,    -1,    -1,   164,    -1,   166,    -1,
+      -1,    -1,   170,   171,   172,   173,   174,   175,   176,   177,
+     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
+     188,   189,   190,    -1,   192,   193,    -1,   195,    -1,    -1,
+     198,    -1,   200,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     208,   209,    -1,    -1,    -1,   213,   214,   215,   216,   217,
+     218,   219,   220,    -1,    -1,    -1,    -1,   225,    -1,   227,
+      -1,   229,   230,    -1,    -1,   233,   234,   235,    -1,   237,
+     238,   239,    -1,    -1,   242,    -1,   244,    -1,    -1,    -1,
+     248,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,    -1,
+      -1,    -1,    -1,   261,   262,    -1,    -1,    -1,    -1,   267,
+      -1,    -1,    -1,   271,    -1,    -1,    -1,   275,    -1,   277,
+      -1,    -1,    -1,   281,    -1,   283,   284,    -1,    -1,   287,
+     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   299,    -1,   301,    -1,   303,   304,   305,   306,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   316,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   332,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   349,   350,    -1,   352,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   360,   361,   362,   363,    -1,   365,    -1,    -1,
+      -1,    -1,    -1,    -1,   372,   373,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     388,    -1,   390,    -1,    -1,   393,    -1,    -1,   396,    -1,
+     398,    -1,   400,   401,   402,     4,     5,     6,     7,     8,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    22,    -1,    -1,    25,    26,    27,    -1,
+      29,    30,    31,    -1,    -1,    -1,    35,    -1,    37,    -1,
+      39,    40,    41,    42,    -1,    -1,    45,    -1,    -1,    48,
+      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    -1,    58,
+      59,    60,    61,    62,    63,    -1,    -1,    66,    67,    68,
+      -1,    70,    -1,    72,    73,    -1,    -1,    -1,    77,    78,
+      79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,
+      89,    90,    91,    -1,    -1,    94,    -1,    -1,    97,    98,
+      -1,   100,    -1,    -1,   103,    -1,    -1,    -1,   107,    -1,
+      -1,   110,    -1,    -1,   113,   114,    -1,   116,   117,    -1,
+      -1,   120,   121,    -1,   123,   124,   125,   126,    -1,    -1,
+      -1,    -1,   131,    -1,   133,    -1,   135,    -1,    -1,    -1,
+     139,    -1,    -1,   142,   143,    -1,    -1,   146,    -1,    -1,
+      -1,   150,    -1,    -1,   153,   154,    -1,    -1,    -1,    -1,
+      -1,   160,    -1,    -1,    -1,   164,    -1,   166,    -1,    -1,
+      -1,   170,   171,   172,   173,   174,   175,   176,   177,   178,
+     179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
+     189,   190,    -1,   192,   193,    -1,   195,    -1,    -1,   198,
+      -1,   200,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   208,
+     209,    -1,    -1,    -1,   213,   214,   215,   216,   217,   218,
+     219,   220,    -1,    -1,    -1,    -1,   225,    -1,   227,    -1,
+     229,   230,    -1,    -1,   233,   234,   235,    -1,   237,   238,
+     239,    -1,    -1,   242,    -1,   244,    -1,    -1,    -1,   248,
+      -1,   250,    -1,    -1,   253,   254,    -1,    -1,    -1,    -1,
+      -1,    -1,   261,   262,    -1,    -1,    -1,    -1,   267,    -1,
+      -1,    -1,   271,    -1,    -1,    -1,   275,    -1,   277,    -1,
+      -1,    -1,   281,    -1,   283,   284,    -1,    -1,   287,   288,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     299,    -1,   301,    -1,   303,   304,   305,   306,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   316,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   332,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     349,   350,    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   360,   361,   362,   363,    -1,   365,    -1,    -1,    -1,
+      -1,    -1,    -1,   372,   373,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,
+      -1,   390,    -1,    -1,   393,    -1,    -1,   396,    -1,   398,
+      -1,   400,   401,   402,     4,     5,     6,     7,     8,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    22,    -1,    -1,    25,    26,    27,    -1,    29,
+      30,    31,    -1,    -1,    -1,    35,    -1,    37,    -1,    39,
+      40,    41,    42,    -1,    -1,    45,    -1,    -1,    48,    -1,
+      -1,    51,    -1,    -1,    54,    -1,    56,    -1,    58,    59,
+      60,    61,    62,    63,    -1,    -1,    66,    67,    68,    -1,
+      70,    -1,    72,    73,    -1,    -1,    -1,    77,    78,    79,
+      -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,    89,
+      90,    91,    -1,    -1,    94,    -1,    -1,    97,    98,    -1,
+     100,    -1,    -1,   103,    -1,    -1,    -1,   107,    -1,    -1,
+     110,    -1,    -1,   113,   114,    -1,   116,   117,    -1,    -1,
+     120,   121,    -1,   123,   124,   125,   126,    -1,    -1,    -1,
+      -1,   131,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
+      -1,    -1,   142,   143,    -1,    -1,   146,    -1,    -1,    -1,
+     150,    -1,    -1,   153,   154,    -1,    -1,    -1,    -1,    -1,
+     160,    -1,    -1,    -1,   164,    -1,   166,    -1,    -1,    -1,
+     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
+      -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,
+     190,    -1,   192,   193,    -1,   195,    -1,    -1,   198,    -1,
+     200,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   208,   209,
+      -1,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
+     220,    -1,    -1,    -1,    -1,   225,    -1,   227,    -1,   229,
+     230,    -1,    -1,   233,   234,   235,    -1,   237,   238,   239,
+      -1,    -1,   242,    -1,   244,    -1,    -1,    -1,   248,    -1,
+      -1,    -1,    -1,   253,   254,    -1,    -1,    -1,    -1,    -1,
+      -1,   261,   262,    -1,    -1,    -1,    -1,   267,    -1,    -1,
+      -1,   271,    -1,    -1,    -1,   275,    -1,   277,    -1,    -1,
+      -1,   281,    -1,   283,   284,    -1,    -1,   287,   288,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
+      -1,   301,    -1,   303,   304,   305,   306,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   316,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   332,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   349,
+     350,    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     360,   361,   362,   363,    -1,   365,    -1,    -1,    -1,    -1,
+      -1,    -1,   372,   373,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,    -1,
+     390,    -1,    -1,   393,    -1,    -1,   396,    -1,   398,    -1,
+     400,   401,   402,     4,     5,     6,     7,     8,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    22,    -1,    -1,    25,    26,    27,    -1,    29,    30,
+      31,    -1,    -1,    -1,    35,    -1,    37,    -1,    39,    40,
+      41,    42,    -1,    -1,    45,    -1,    -1,    48,    -1,    -1,
+      51,    -1,    -1,    54,    -1,    56,    -1,    58,    59,    60,
+      61,    62,    63,    -1,    -1,    66,    67,    68,    -1,    70,
+      -1,    72,    73,    -1,    -1,    -1,    77,    78,    79,    -1,
+      -1,    -1,    -1,    84,    85,    86,    87,    -1,    89,    90,
+      91,    -1,    -1,    94,    -1,    -1,    97,    98,    -1,   100,
+      -1,    -1,   103,    -1,    -1,    -1,   107,    -1,    -1,   110,
+      -1,    -1,   113,   114,    -1,   116,   117,    -1,    -1,   120,
+     121,    -1,   123,   124,   125,   126,    -1,    -1,    -1,    -1,
+     131,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
+      -1,   142,   143,    -1,    -1,   146,    -1,    -1,    -1,   150,
+      -1,    -1,   153,   154,    -1,    -1,    -1,    -1,    -1,   160,
+      -1,    -1,    -1,   164,    -1,   166,    -1,    -1,    -1,   170,
+     171,   172,   173,   174,   175,   176,   177,   178,   179,    -1,
+     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
+      -1,   192,   193,    -1,   195,    -1,    -1,   198,    -1,   200,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   208,   209,    -1,
+      -1,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
+      -1,    -1,    -1,    -1,   225,    -1,   227,    -1,   229,   230,
+      -1,    -1,   233,   234,   235,    -1,   237,   238,   239,    -1,
+      -1,   242,    -1,   244,    -1,    -1,    -1,   248,    -1,    -1,
+      -1,    -1,   253,   254,    -1,    -1,    -1,    -1,    -1,    -1,
+     261,   262,    -1,    -1,    -1,    -1,   267,    -1,    -1,    -1,
+     271,    -1,    -1,    -1,   275,    -1,   277,    -1,    -1,    -1,
+     281,    -1,   283,   284,    -1,    -1,   287,   288,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
+     301,    -1,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   316,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   332,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   349,   350,
+      -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,
+     361,   362,   363,    -1,   365,    -1,    -1,    -1,    -1,    -1,
+      -1,   372,   373,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,    -1,   390,
+      -1,    -1,   393,    -1,    -1,   396,    -1,   398,    -1,   400,
+     401,   402,     4,     5,     6,     7,     8,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   257
+      22,    -1,    -1,    25,    26,    27,    -1,    29,    30,    31,
+      -1,    -1,    -1,    35,    -1,    37,    -1,    39,    40,    41,
+      42,    -1,    -1,    45,    -1,    -1,    48,    -1,    -1,    51,
+      -1,    -1,    54,    -1,    56,    -1,    58,    59,    60,    61,
+      62,    63,    -1,    -1,    66,    67,    68,    -1,    70,    -1,
+      72,    73,    -1,    -1,    -1,    77,    78,    79,    -1,    -1,
+      -1,    -1,    84,    85,    86,    87,    -1,    89,    90,    91,
+      -1,    -1,    94,    -1,    -1,    97,    98,    -1,   100,    -1,
+      -1,   103,    -1,    -1,    -1,   107,    -1,    -1,   110,    -1,
+      -1,   113,   114,    -1,   116,   117,    -1,    -1,   120,   121,
+      -1,   123,   124,   125,   126,    -1,    -1,    -1,    -1,   131,
+      -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,    -1,
+     142,   143,    -1,    -1,   146,    -1,    -1,    -1,   150,    -1,
+      -1,   153,   154,    -1,    -1,    -1,    -1,    -1,   160,    -1,
+      -1,    -1,   164,    -1,   166,    -1,    -1,    -1,   170,   171,
+     172,   173,   174,   175,   176,   177,   178,   179,    -1,   181,
+     182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
+     192,   193,    -1,   195,    -1,    -1,   198,    -1,   200,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   208,   209,    -1,    -1,
+      -1,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
+      -1,    -1,    -1,   225,    -1,   227,    -1,   229,   230,    -1,
+      -1,   233,   234,   235,    -1,   237,   238,   239,    -1,    -1,
+     242,    -1,   244,    -1,    -1,    -1,   248,    -1,    -1,    -1,
+      -1,   253,   254,    -1,    -1,    -1,    -1,    -1,    -1,   261,
+     262,    -1,    -1,    -1,    -1,   267,    -1,    -1,    -1,   271,
+      -1,    -1,    -1,   275,    -1,   277,    -1,    -1,    -1,   281,
+      -1,   283,   284,    -1,    -1,   287,   288,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,   301,
+      -1,   303,   304,   305,   306,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   316,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     332,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   349,   350,    -1,
+     352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,   361,
+     362,   363,    -1,   365,    -1,    -1,    -1,    -1,    -1,    -1,
+     372,   373,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   388,    -1,   390,    -1,
+      -1,   393,    -1,    -1,   396,    -1,   398,    -1,   400,   401,
+     402
 };
+#define YYPURE 1
 
-/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
-   symbol of state STATE-NUM.  */
-static const unsigned short yystos[] =
-{
-       0,     3,     5,    23,    24,    26,    28,    31,    33,    36,
-      37,    38,    41,    42,    44,    45,    47,    52,    53,    54,
-      56,    57,    59,    60,    61,    62,    64,    66,    69,    70,
-      71,    80,    93,   105,   106,   128,   219,   223,   225,   229,
-     259,   360,   404,   413,   414,   415,   419,   487,   500,   501,
-     505,   507,   509,   514,   516,   521,   523,   527,   528,   613,
-     615,   621,   624,   648,   653,   664,   666,   676,   678,   680,
-     686,   690,   692,   693,   694,   720,   732,   738,   739,   746,
-     748,   770,   773,   774,   775,     4,     5,     6,     7,     8,
-      22,    25,    26,    27,    29,    30,    31,    35,    37,    39,
-      40,    41,    43,    46,    48,    51,    54,    55,    56,    57,
-      58,    59,    62,    63,    64,    66,    68,    69,    72,    73,
-      78,    79,    80,    81,    83,    84,    85,    88,    91,    92,
-      94,    97,   101,   104,   107,   108,   110,   111,   114,   115,
-     117,   118,   119,   120,   125,   127,   129,   133,   136,   137,
-     140,   143,   146,   147,   153,   157,   159,   163,   164,   165,
-     166,   167,   168,   169,   170,   171,   172,   174,   175,   176,
-     177,   178,   179,   180,   181,   182,   183,   185,   186,   188,
-     191,   193,   201,   202,   206,   207,   208,   209,   210,   211,
-     212,   213,   218,   220,   222,   223,   226,   227,   228,   230,
-     231,   232,   235,   237,   240,   245,   246,   253,   254,   258,
-     262,   266,   268,   272,   274,   275,   278,   279,   290,   292,
-     294,   295,   296,   297,   307,   323,   340,   341,   343,   351,
-     352,   353,   354,   356,   363,   364,   379,   381,   384,   387,
-     389,   391,   392,   393,   411,   714,   715,   716,   719,   138,
-     496,   238,   239,   734,   771,    48,    73,   126,   240,   256,
-     317,   432,   433,   434,   444,   482,   654,   614,   139,   240,
-     253,   317,   620,   681,   622,    25,    32,    42,    49,    50,
-      65,    67,    69,    82,    90,    99,   121,   130,   134,   152,
-     158,   160,   173,   187,   189,   190,   215,   242,   247,   248,
-     249,   250,   271,   273,   275,   296,   297,   301,   308,   310,
-     311,   312,   313,   314,   315,   316,   317,   318,   319,   324,
-     325,   326,   328,   329,   330,   331,   332,   333,   334,   336,
-     337,   340,   342,   344,   345,   346,   347,   348,   349,   351,
-     354,   355,   356,   357,   359,   360,   361,   362,   363,   365,
-     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
-     376,   377,   381,   382,   383,   396,   401,   404,   407,   408,
-     410,   411,   546,   547,   550,   552,   706,   708,   712,   716,
-     101,   239,   734,   734,   691,   734,   687,   243,   716,   531,
-     532,   667,    64,    66,    62,   245,    62,   239,   665,   734,
-     649,   734,   734,   749,   734,   734,   747,   194,   722,   716,
-     625,    60,     0,     3,   527,   714,   716,   716,   193,     4,
-     214,   411,   239,   515,   379,   772,   243,   342,   435,   239,
-     433,   253,   139,   162,   290,   662,   663,   102,   546,   646,
-     647,   716,   716,   342,   619,   239,    48,    62,   107,   136,
-     159,   205,   208,   222,   235,   238,   682,   683,   734,   103,
-     135,   162,   627,   404,   404,   404,   404,   404,   404,   404,
-     404,   546,   404,   404,   404,   404,   404,   404,   561,   562,
-     563,   546,   404,   404,   404,   404,   404,   404,   706,   706,
-     706,   404,   404,   404,   546,   565,   404,   404,   404,   545,
-     404,   545,   404,   404,   404,   404,   404,   404,   404,   404,
-     404,   404,   404,   404,   404,   404,   404,   404,   404,   404,
-     546,   404,   404,   404,   404,   404,   404,   404,   404,   545,
-     404,   404,   404,   404,   404,   404,   404,   404,   404,   404,
-     404,   404,   404,   404,   404,   404,   404,   404,   404,   404,
-     404,   404,   404,   546,   546,   546,   546,   716,   154,   242,
-     410,   716,   717,   716,     9,    10,    11,    12,    13,    14,
-      15,    16,    17,    18,    75,   145,   155,   187,   196,   197,
-     217,   267,   309,   394,   395,   396,   397,   398,   399,   400,
-     403,   242,   411,    97,   124,   162,   697,   714,   733,   522,
-      48,   510,    48,    62,   208,   688,   689,    59,   529,    74,
-     109,   135,   236,   386,   387,   388,   389,   390,   391,   535,
-     536,   537,    27,    33,    48,    62,   100,   125,   127,   129,
-     139,   140,   143,   149,   157,   159,   185,   193,   231,   235,
-     238,   239,   481,   668,   672,   725,    43,    63,   503,   504,
-     503,   503,   502,   503,   618,   714,   162,   652,   508,   517,
-      23,    33,    36,    38,    40,    42,    47,    55,    60,    61,
-      68,    71,    74,   118,   128,   139,   206,   216,   218,   232,
-     257,   750,   751,   752,   524,   506,   750,   721,   103,   628,
-     652,   531,   677,   411,     9,    76,   585,   586,   740,   716,
-     714,   617,   618,   416,   187,   716,   435,   716,   716,   124,
-     655,   659,   660,   716,   662,   406,   192,   116,   716,   619,
-      88,   264,   406,   684,   496,    74,   555,   587,   109,   555,
-     587,   546,   555,   555,   555,   555,   546,   546,   546,   546,
-     546,   546,   562,   307,   564,   712,   405,   546,   546,   546,
-     558,   559,   558,   546,   555,   555,   378,   558,   546,   405,
-     546,   405,   546,   546,   546,   546,   546,   546,   546,   546,
-     546,   320,   321,   322,   323,   338,   339,   340,   350,   351,
-     354,   363,   380,   381,   584,   546,   546,   546,   706,   546,
-     546,   546,   584,   405,   546,   546,   546,   546,   546,   546,
-     546,   546,   546,   548,   550,   405,   546,   546,   546,   546,
-     546,   546,   546,    86,   151,   244,   546,   551,   558,   551,
-     551,   551,   551,   551,   706,   405,   546,   405,   546,   546,
-     546,   121,   160,   190,   215,   301,   604,   405,   546,   127,
-     157,   231,   726,    19,   411,   546,   546,   546,   546,   546,
-     546,   546,   187,   189,   546,   546,   546,   404,   550,   145,
-     155,   217,   309,   546,   546,   546,   546,   549,   550,   546,
-     546,   344,   546,   344,   546,   546,   546,   546,   546,   716,
-      48,   157,   696,   124,   714,   735,   736,   617,   159,   617,
-      88,   406,   716,   255,   776,   777,   398,   539,   540,   541,
-     537,    39,   239,   159,   235,   136,   235,   155,   671,   335,
-     235,    48,   238,   671,   124,   145,   670,   673,   235,   673,
-      95,   207,   262,   406,   496,   617,   617,   240,   754,   238,
-      29,    62,   753,   100,   755,   205,   194,   756,   192,   406,
-     525,   526,   714,   617,   192,   127,   157,   231,   723,   724,
-     144,   618,   629,   630,   405,   134,   242,   679,   707,   716,
-     716,   716,     7,   119,   716,   741,   742,   488,   117,   178,
-     272,   279,   290,   406,   518,   519,   520,   163,   164,   165,
-     166,   167,   168,   169,   171,   172,   417,   418,   116,   714,
-     422,   192,   659,   714,   716,   406,   657,   411,   661,   647,
-     714,   617,   214,   683,   617,   685,   629,   405,   556,   553,
-     405,   398,   406,   405,   405,   405,   405,   406,    76,   406,
-     406,   406,   405,   406,   405,   404,   406,   405,   406,   406,
-     405,   546,   560,   405,   405,   406,   405,   405,   567,   568,
-     405,   406,   405,   406,   406,   406,   405,   406,   405,   406,
-     406,   406,   405,   406,   406,   124,   406,   406,   405,   406,
-     406,   405,   406,   406,   397,   405,   406,   406,   406,   406,
-     405,   405,   405,   405,     9,    10,    11,    12,    13,    14,
-      15,    16,    17,    18,    75,   145,   155,   187,   196,   197,
-     217,   267,   309,   394,   395,   396,   397,   398,   399,   400,
-     403,   405,   406,   406,   405,   406,   405,   124,   406,   406,
-     546,   570,   570,   570,   124,   405,   405,   405,   405,   405,
-     405,   405,   406,   405,   405,   406,   405,   405,   406,   406,
-     409,   411,   411,   411,   717,   546,   716,   189,   558,   115,
-     591,   404,   550,   546,   549,     9,    10,    11,    12,    13,
-      14,    15,    16,    17,    18,    75,   145,   155,   187,   196,
-     197,   217,   267,   309,   394,   395,   396,   397,   398,   399,
-     400,   403,   546,   546,   411,   141,    48,   586,   406,   518,
-     243,   117,   258,   290,   511,   512,   513,   689,    74,   109,
-     782,   124,   144,   282,   406,   533,   534,   600,   611,   543,
-     546,   710,   716,   145,   674,   714,   707,   717,   718,   335,
-     670,   671,   716,   670,   714,   673,   671,   504,   404,   408,
-     571,   576,   577,   243,   518,   238,   404,   763,   763,   763,
-     763,   398,   714,   716,   760,   752,   406,   243,   124,   760,
-     406,   245,   271,   356,   410,   716,   727,   728,   630,   626,
-     530,     6,     7,     8,     9,    11,    12,    13,    14,   119,
-     743,   745,   263,   588,    21,    23,    28,    30,    38,    78,
-      79,    91,    92,   101,   104,   108,   111,   139,   174,   181,
-     198,   202,   211,   212,   213,   219,   227,   246,   255,   271,
-     343,   353,   356,   437,   438,   489,   490,   491,   596,   618,
-     519,     9,     9,     9,     9,     9,     9,     9,     9,     9,
-     406,   420,   251,   714,   658,   656,   411,   660,   124,   398,
-     716,   616,    89,   224,   497,    47,   623,   546,   558,   405,
-     546,   546,    82,   271,   274,   275,   292,   297,   302,   557,
-     557,   558,   558,   546,   546,   712,   546,   546,   406,   546,
-     327,   566,   546,   569,   558,   344,   344,   242,   546,   546,
-     558,   242,   546,   546,   546,   558,   190,   546,   190,   546,
-     558,   546,   546,   546,   558,   546,   546,   546,   546,   546,
-     546,   546,   546,   187,   189,   546,   546,   546,   546,   550,
-     155,   217,   309,   546,   546,   546,   546,   549,   546,   546,
-     344,   546,   344,   546,   546,   546,   546,   546,   546,   546,
-     546,   546,   546,   546,   124,   124,   124,   546,   190,   546,
-     546,   546,   405,   242,   558,   591,    75,   546,   546,   546,
-     546,   546,   546,   546,   187,   189,   546,   546,   546,   404,
-     550,   145,   155,   217,   309,   546,   546,   546,   546,   549,
-     546,   546,   344,   546,   344,   546,   546,   546,   546,   546,
-     584,   584,   716,   242,   162,   214,   265,   737,   736,   242,
-     512,   778,   571,   200,   201,   601,   540,    47,   335,   538,
-     611,   534,   542,   411,   242,   124,   675,   410,    62,   671,
-     671,   670,   714,   571,   716,    34,   142,   148,   184,   229,
-     236,   346,   361,   406,   575,   714,   242,   716,   764,   765,
-     411,   411,   243,   526,   714,   242,   124,   724,   146,   229,
-       9,    19,   335,   641,   410,   717,   641,    60,   229,   261,
-     404,   429,   631,   635,   777,   779,   780,   781,   744,   546,
-     600,    96,    98,   126,   139,   150,   449,   452,   453,   479,
-     480,   495,   495,   495,     9,   123,   204,   480,   495,     9,
-       9,   641,   642,     9,   114,     9,   149,   149,   114,     9,
-       9,    87,     9,     9,     9,     9,     9,    76,   243,   499,
-       9,     9,     9,   229,     9,   495,     9,   437,   406,   404,
-     411,   448,   454,   713,   716,   242,   242,   242,   121,   160,
-     190,   215,   301,   605,   242,   604,   604,   242,   604,   418,
-     404,   423,   436,   437,   281,   291,   294,   445,   421,   260,
-     588,   716,   571,   411,   661,   631,   554,   406,   405,   281,
-     281,   405,   405,   405,   405,   405,   145,   405,   405,   406,
-     546,   405,   546,   384,   385,   378,   405,   546,   546,   405,
-     405,   405,   405,   405,   405,   406,   405,   405,   405,   405,
-     406,   406,   405,   405,   405,   406,   405,   405,   406,   189,
-     405,   591,   550,   546,   549,    75,   546,   546,   406,   405,
-     405,   335,   405,   405,   406,   406,   546,   546,   546,   405,
-     406,   405,   405,   405,   405,   546,   189,   558,   591,   404,
-     550,   546,   549,    75,   546,   546,   695,   265,   157,   528,
-     588,   242,   242,   602,   604,   145,    71,    76,   242,   544,
-     716,   398,   716,   605,   669,   717,   264,   670,   405,   576,
-     148,   148,   148,   346,   361,   651,   712,   571,   199,   578,
-     578,   571,   571,   586,   405,   406,   398,   398,   718,   761,
-     762,   761,   727,   153,   642,   718,   242,   356,   730,   726,
-     641,    74,   102,   192,   546,   731,   430,   632,   404,   638,
-     643,   405,   429,   634,   709,   710,   712,   636,   595,   596,
-     404,   485,   713,   480,    93,   123,   204,   256,   451,   450,
-     451,   485,   713,   713,   242,   150,   150,   713,   713,   605,
-     604,   716,   604,     9,   604,     9,   605,   605,   597,   102,
-     604,   209,   210,   441,   604,   604,   604,   714,   102,   110,
-     120,   268,   440,    81,   133,   143,   147,   179,   180,   182,
-     439,   404,   642,     6,   119,   188,   442,   713,   242,   491,
-     446,   447,   448,   449,   716,    22,   119,   498,   216,   450,
-     474,   455,   411,   424,   429,   446,   138,   360,   426,   698,
-     252,   404,   571,   595,   588,   405,   546,    85,   546,   546,
-     546,   584,   584,   546,   190,   546,   546,   546,   591,    75,
-     546,   584,   584,   546,   546,   546,   546,   405,   405,   405,
-     190,   405,   558,   591,    75,   546,   584,   584,   698,   131,
-     592,   612,   191,   406,   364,   242,   716,   411,   600,   165,
-     671,   346,   571,   578,   578,   406,   650,   641,   148,   148,
-     192,   260,   122,   138,   259,   579,   765,   341,   221,   406,
-     766,   214,   220,   230,   729,   731,   641,   404,   728,   546,
-     535,   639,   640,   712,   644,   406,   404,   635,   405,   405,
-     406,   776,   600,   646,   546,   150,   150,   480,   404,    38,
-     229,   492,   485,   497,   242,   242,   546,   598,   711,   617,
-     716,   493,   405,   406,   716,   714,    82,    83,    84,   161,
-     183,   186,   229,   269,   270,   271,   274,   275,   276,   277,
-     278,   280,   281,   283,   284,   285,   286,   287,   288,   291,
-     293,   295,   296,   297,   298,   299,   300,   303,   304,   381,
-     456,   459,   460,   461,   462,   716,   405,   405,    76,   431,
-     242,   483,   484,   716,   588,   282,   603,   406,   352,   405,
-     385,   405,   405,   405,   406,   406,   405,   405,   405,   546,
-     405,   405,   405,   405,   406,   405,   546,   144,    87,   132,
-     589,    95,   699,   604,   604,   352,   398,     9,   199,   148,
-     148,   712,   588,   546,   571,   571,   546,   572,   480,   580,
-     580,   580,    87,    51,   233,   237,   266,   392,   393,   758,
-     759,   762,   264,   767,    94,   254,   214,   730,   242,   641,
-     539,   406,   641,   645,   646,   643,   637,   635,   709,   405,
-     485,   483,   102,   102,   454,   406,    77,   105,   599,   405,
-     456,   447,   173,   192,   404,   475,   476,   477,   404,   404,
-     468,   303,   459,   460,   271,   304,   304,   458,   404,   463,
-     464,   289,   457,   463,   463,   404,   404,   468,    30,    78,
-     102,   187,   189,   204,   256,   470,   471,   472,    82,   271,
-     305,   404,   473,   404,   468,   404,   464,   469,   425,   436,
-     404,   429,   405,   406,   599,   404,   605,   546,   405,   546,
-     546,   555,   558,   239,   593,   711,   590,   595,   112,   113,
-     195,   241,   700,   701,   156,   702,   242,   148,   571,   571,
-     641,   595,   192,   573,   192,   574,   404,   581,   242,   356,
-     242,   242,   242,    75,   757,   128,   175,   176,   177,   768,
-     769,   405,   731,   443,   534,   640,   647,   405,   779,   404,
-     405,   275,   296,   297,   708,   498,   711,   470,   125,   203,
-      36,    71,   483,   477,   190,   190,   404,   190,   292,   302,
-     306,   465,   466,   467,   404,   465,   465,   190,   190,   465,
-     706,   708,   189,   150,   150,   472,   229,   190,   190,   465,
-     190,   465,   779,   426,   429,   427,   484,   190,   405,   405,
-     406,   405,   405,   714,   264,   406,   594,   599,   546,   600,
-      87,    87,   112,    87,   701,   234,   241,   703,   704,    75,
-     576,   546,   603,   546,   260,   546,   260,   583,   716,   404,
-     242,   758,   194,   604,   604,   604,   769,   538,   483,   599,
-     494,    89,   188,   224,   229,   478,   478,   405,   405,   405,
-     486,   707,   405,   406,   467,   486,   405,   405,   642,   405,
-     405,   405,   776,   599,   405,   546,   699,    35,    58,   711,
-     358,   606,   707,   707,    87,   707,    87,    87,   704,   166,
-     192,   404,   404,   405,   406,   204,   582,   716,   405,   498,
-      72,   102,   189,   475,   405,   406,   190,   405,   716,   473,
-     473,   428,   405,   702,   599,   716,   707,   707,   707,     9,
-     546,   583,   583,   716,   405,   406,   474,   707,   405,   779,
-     138,   705,   607,   605,   409,   405,   405,   716,   190,   404,
-     633,   404,    75,   156,   405,   634,   541,   608,   609,   610,
-     170,   405,   546,   405,   406,     9,   610,   604
-};
+/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
+#line 3 "/usr/share/bison/bison.simple"
 
-#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
-# define YYSIZE_T __SIZE_TYPE__
-#endif
-#if ! defined (YYSIZE_T) && defined (size_t)
-# define YYSIZE_T size_t
-#endif
-#if ! defined (YYSIZE_T)
-# if defined (__STDC__) || defined (__cplusplus)
-#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
-#  define YYSIZE_T size_t
-# endif
-#endif
-#if ! defined (YYSIZE_T)
-# define YYSIZE_T unsigned int
-#endif
+/* Skeleton output parser for bison,
 
-#define yyerrok		(yyerrstatus = 0)
-#define yyclearin	(yychar = YYEMPTY)
-#define YYEMPTY		(-2)
-#define YYEOF		0
+   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
+   Foundation, Inc.
 
-#define YYACCEPT	goto yyacceptlab
-#define YYABORT		goto yyabortlab
-#define YYERROR		goto yyerrorlab
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2, or (at your option)
+   any later version.
 
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
 
-/* Like YYERROR except do call yyerror.  This remains here temporarily
-   to ease the transition to the new meaning of YYERROR, for GCC.
-   Once GCC version 2 has supplanted version 1, this can go.  */
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.  */
 
-#define YYFAIL		goto yyerrlab
+/* As a special exception, when this file is copied by Bison into a
+   Bison output file, you may use that output file without restriction.
+   This special exception was added by the Free Software Foundation
+   in version 1.24 of Bison.  */
 
-#define YYRECOVERING()  (!!yyerrstatus)
+/* This is the parser code that is written into each bison parser when
+   the %semantic_parser declaration is not specified in the grammar.
+   It was written by Richard Stallman by simplifying the hairy parser
+   used when %semantic_parser is specified.  */
 
-#define YYBACKUP(Token, Value)					\
-do								\
-  if (yychar == YYEMPTY && yylen == 1)				\
-    {								\
-      yychar = (Token);						\
-      yylval = (Value);						\
-      yytoken = YYTRANSLATE (yychar);				\
-      YYPOPSTACK;						\
-      goto yybackup;						\
-    }								\
-  else								\
-    { 								\
-      yyerror ("syntax error: cannot back up");\
-      YYERROR;							\
-    }								\
-while (0)
+/* All symbols defined below should begin with yy or YY, to avoid
+   infringing on user name space.  This should be done even for local
+   variables, as they might otherwise be expanded by user macros.
+   There are some unavoidable exceptions within include files to
+   define necessary library symbols; they are noted "INFRINGES ON
+   USER NAME SPACE" below.  */
+
+#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)
+
+/* The parser invokes alloca or malloc; define the necessary symbols.  */
+
+# if YYSTACK_USE_ALLOCA
+#  define YYSTACK_ALLOC alloca
+# else
+#  ifndef YYSTACK_USE_ALLOCA
+#   if defined (alloca) || defined (_ALLOCA_H)
+#    define YYSTACK_ALLOC alloca
+#   else
+#    ifdef __GNUC__
+#     define YYSTACK_ALLOC __builtin_alloca
+#    endif
+#   endif
+#  endif
+# endif
+
+# ifdef YYSTACK_ALLOC
+   /* Pacify GCC's `empty if-body' warning. */
+#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
+# else
+#  if defined (__STDC__) || defined (__cplusplus)
+#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+#   define YYSIZE_T size_t
+#  endif
+#  define YYSTACK_ALLOC malloc
+#  define YYSTACK_FREE free
+# endif
+#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */
+
+
+#if (! defined (yyoverflow) \
+     && (! defined (__cplusplus) \
+	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
+
+/* A type that is properly aligned for any stack member.  */
+union yyalloc
+{
+  short yyss;
+  YYSTYPE yyvs;
+# if YYLSP_NEEDED
+  YYLTYPE yyls;
+# endif
+};
+
+/* The size of the maximum gap between one aligned stack and the next.  */
+# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)
+
+/* The size of an array large to enough to hold all stacks, each with
+   N elements.  */
+# if YYLSP_NEEDED
+#  define YYSTACK_BYTES(N) \
+     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
+      + 2 * YYSTACK_GAP_MAX)
+# else
+#  define YYSTACK_BYTES(N) \
+     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
+      + YYSTACK_GAP_MAX)
+# endif
+
+/* Copy COUNT objects from FROM to TO.  The source and destination do
+   not overlap.  */
+# ifndef YYCOPY
+#  if 1 < __GNUC__
+#   define YYCOPY(To, From, Count) \
+      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
+#  else
+#   define YYCOPY(To, From, Count)		\
+      do					\
+	{					\
+	  register YYSIZE_T yyi;		\
+	  for (yyi = 0; yyi < (Count); yyi++)	\
+	    (To)[yyi] = (From)[yyi];		\
+	}					\
+      while (0)
+#  endif
+# endif
+
+/* Relocate STACK from its old location to the new one.  The
+   local variables YYSIZE and YYSTACKSIZE give the old and new number of
+   elements in the stack, and YYPTR gives the new location of the
+   stack.  Advance YYPTR to a properly aligned location for the next
+   stack.  */
+# define YYSTACK_RELOCATE(Stack)					\
+    do									\
+      {									\
+	YYSIZE_T yynewbytes;						\
+	YYCOPY (&yyptr->Stack, Stack, yysize);				\
+	Stack = &yyptr->Stack;						\
+	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
+	yyptr += yynewbytes / sizeof (*yyptr);				\
+      }									\
+    while (0)
+
+#endif
+
+
+#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
+# define YYSIZE_T __SIZE_TYPE__
+#endif
+#if ! defined (YYSIZE_T) && defined (size_t)
+# define YYSIZE_T size_t
+#endif
+#if ! defined (YYSIZE_T)
+# if defined (__STDC__) || defined (__cplusplus)
+#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYSIZE_T size_t
+# endif
+#endif
+#if ! defined (YYSIZE_T)
+# define YYSIZE_T unsigned int
+#endif
+
+#define yyerrok		(yyerrstatus = 0)
+#define yyclearin	(yychar = YYEMPTY)
+#define YYEMPTY		-2
+#define YYEOF		0
+#define YYACCEPT	goto yyacceptlab
+#define YYABORT 	goto yyabortlab
+#define YYERROR		goto yyerrlab1
+/* Like YYERROR except do call yyerror.  This remains here temporarily
+   to ease the transition to the new meaning of YYERROR, for GCC.
+   Once GCC version 2 has supplanted version 1, this can go.  */
+#define YYFAIL		goto yyerrlab
+#define YYRECOVERING()  (!!yyerrstatus)
+#define YYBACKUP(Token, Value)					\
+do								\
+  if (yychar == YYEMPTY && yylen == 1)				\
+    {								\
+      yychar = (Token);						\
+      yylval = (Value);						\
+      yychar1 = YYTRANSLATE (yychar);				\
+      YYPOPSTACK;						\
+      goto yybackup;						\
+    }								\
+  else								\
+    { 								\
+      yyerror ("syntax error: cannot back up");			\
+      YYERROR;							\
+    }								\
+while (0)
 
 #define YYTERROR	1
 #define YYERRCODE	256
 
+
 /* YYLLOC_DEFAULT -- Compute the default location (before the actions
-   are run).  */
+   are run).
+
+   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
+   first token.  By default, to implement support for ranges, extend
+   its range to the last symbol.  */
 
 #ifndef YYLLOC_DEFAULT
-# define YYLLOC_DEFAULT(Current, Rhs, N)		\
-   ((Current).first_line   = (Rhs)[1].first_line,	\
-    (Current).first_column = (Rhs)[1].first_column,	\
-    (Current).last_line    = (Rhs)[N].last_line,	\
-    (Current).last_column  = (Rhs)[N].last_column)
+# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
+   Current.last_line   = Rhs[N].last_line;	\
+   Current.last_column = Rhs[N].last_column;
 #endif
 
+
 /* YYLEX -- calling `yylex' with the right arguments.  */
 
-#ifdef YYLEX_PARAM
-# define YYLEX yylex (&yylval, YYLEX_PARAM)
-#else
-# define YYLEX yylex (&yylval)
-#endif
+#if YYPURE
+# if YYLSP_NEEDED
+#  ifdef YYLEX_PARAM
+#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
+#  else
+#   define YYLEX		yylex (&yylval, &yylloc)
+#  endif
+# else /* !YYLSP_NEEDED */
+#  ifdef YYLEX_PARAM
+#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
+#  else
+#   define YYLEX		yylex (&yylval)
+#  endif
+# endif /* !YYLSP_NEEDED */
+#else /* !YYPURE */
+# define YYLEX			yylex ()
+#endif /* !YYPURE */
+
 
 /* Enable debugging if requested.  */
 #if YYDEBUG
@@ -8439,93 +8013,13 @@
   if (yydebug)					\
     YYFPRINTF Args;				\
 } while (0)
-
-# define YYDSYMPRINT(Args)			\
-do {						\
-  if (yydebug)					\
-    yysymprint Args;				\
-} while (0)
-
-# define YYDSYMPRINTF(Title, Token, Value, Location)		\
-do {								\
-  if (yydebug)							\
-    {								\
-      YYFPRINTF (stderr, "%s ", Title);				\
-      yysymprint (stderr, 					\
-                  Token, Value);	\
-      YYFPRINTF (stderr, "\n");					\
-    }								\
-} while (0)
-
-/*------------------------------------------------------------------.
-| yy_stack_print -- Print the state stack from its BOTTOM up to its |
-| TOP (included).                                                   |
-`------------------------------------------------------------------*/
-
-#if defined (__STDC__) || defined (__cplusplus)
-static void
-yy_stack_print (short *bottom, short *top)
-#else
-static void
-yy_stack_print (bottom, top)
-    short *bottom;
-    short *top;
-#endif
-{
-  YYFPRINTF (stderr, "Stack now");
-  for (/* Nothing. */; bottom <= top; ++bottom)
-    YYFPRINTF (stderr, " %d", *bottom);
-  YYFPRINTF (stderr, "\n");
-}
-
-# define YY_STACK_PRINT(Bottom, Top)				\
-do {								\
-  if (yydebug)							\
-    yy_stack_print ((Bottom), (Top));				\
-} while (0)
-
-
-/*------------------------------------------------.
-| Report that the YYRULE is going to be reduced.  |
-`------------------------------------------------*/
-
-#if defined (__STDC__) || defined (__cplusplus)
-static void
-yy_reduce_print (int yyrule)
-#else
-static void
-yy_reduce_print (yyrule)
-    int yyrule;
-#endif
-{
-  int yyi;
-  unsigned int yylno = yyrline[yyrule];
-  YYFPRINTF (stderr, "Reducing stack by rule %d (line %u), ",
-             yyrule - 1, yylno);
-  /* Print the symbols being reduced, and their result.  */
-  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
-    YYFPRINTF (stderr, "%s ", yytname [yyrhs[yyi]]);
-  YYFPRINTF (stderr, "-> %s\n", yytname [yyr1[yyrule]]);
-}
-
-# define YY_REDUCE_PRINT(Rule)		\
-do {					\
-  if (yydebug)				\
-    yy_reduce_print (Rule);		\
-} while (0)
-
 /* Nonzero means print parse trace.  It is left uninitialized so that
    multiple parsers can coexist.  */
 int yydebug;
 #else /* !YYDEBUG */
 # define YYDPRINTF(Args)
-# define YYDSYMPRINT(Args)
-# define YYDSYMPRINTF(Title, Token, Value, Location)
-# define YY_STACK_PRINT(Bottom, Top)
-# define YY_REDUCE_PRINT(Rule)
 #endif /* !YYDEBUG */
 
-
 /* YYINITDEPTH -- initial size of the parser's stacks.  */
 #ifndef	YYINITDEPTH
 # define YYINITDEPTH 200
@@ -8538,17 +8032,15 @@
    SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
    evaluated with infinite-precision integer arithmetic.  */
 
-#if defined (YYMAXDEPTH) && YYMAXDEPTH == 0
+#if YYMAXDEPTH == 0
 # undef YYMAXDEPTH
 #endif
 
 #ifndef YYMAXDEPTH
 # define YYMAXDEPTH 10000
 #endif
-
 
-
-#if YYERROR_VERBOSE
+#ifdef YYERROR_VERBOSE
 
 # ifndef yystrlen
 #  if defined (__GLIBC__) && defined (_STRING_H)
@@ -8598,126 +8090,78 @@
 }
 #  endif
 # endif
-
-#endif /* !YYERROR_VERBOSE */
-
-
-
-#if YYDEBUG
-/*--------------------------------.
-| Print this symbol on YYOUTPUT.  |
-`--------------------------------*/
-
-#if defined (__STDC__) || defined (__cplusplus)
-static void
-yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)
-#else
-static void
-yysymprint (yyoutput, yytype, yyvaluep)
-    FILE *yyoutput;
-    int yytype;
-    YYSTYPE *yyvaluep;
-#endif
-{
-  /* Pacify ``unused variable'' warnings.  */
-  (void) yyvaluep;
-
-  if (yytype < YYNTOKENS)
-    {
-      YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
-# ifdef YYPRINT
-      YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
-# endif
-    }
-  else
-    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);
-
-  switch (yytype)
-    {
-      default:
-        break;
-    }
-  YYFPRINTF (yyoutput, ")");
-}
-
-#endif /* ! YYDEBUG */
-/*-----------------------------------------------.
-| Release the memory associated to this symbol.  |
-`-----------------------------------------------*/
-
-#if defined (__STDC__) || defined (__cplusplus)
-static void
-yydestruct (int yytype, YYSTYPE *yyvaluep)
-#else
-static void
-yydestruct (yytype, yyvaluep)
-    int yytype;
-    YYSTYPE *yyvaluep;
 #endif
-{
-  /* Pacify ``unused variable'' warnings.  */
-  (void) yyvaluep;
-
-  switch (yytype)
-    {
-
-      default:
-        break;
-    }
-}
 
+#line 315 "/usr/share/bison/bison.simple"
 
-/* Prevent warnings from -Wmissing-prototypes.  */
+
+/* The user can define YYPARSE_PARAM as the name of an argument to be passed
+   into yyparse.  The argument should have type void *.
+   It should actually point to an object.
+   Grammar actions can access the variable by casting it
+   to the proper pointer type.  */
 
 #ifdef YYPARSE_PARAM
 # if defined (__STDC__) || defined (__cplusplus)
-int yyparse (void *YYPARSE_PARAM);
+#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
+#  define YYPARSE_PARAM_DECL
 # else
-int yyparse ();
+#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
+#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
 # endif
-#else /* ! YYPARSE_PARAM */
-#if defined (__STDC__) || defined (__cplusplus)
+#else /* !YYPARSE_PARAM */
+# define YYPARSE_PARAM_ARG
+# define YYPARSE_PARAM_DECL
+#endif /* !YYPARSE_PARAM */
+
+/* Prevent warning if -Wstrict-prototypes.  */
+#ifdef __GNUC__
+# ifdef YYPARSE_PARAM
+int yyparse (void *);
+# else
 int yyparse (void);
-#else
-int yyparse ();
+# endif
 #endif
-#endif /* ! YYPARSE_PARAM */
 
+/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
+   variables are global, or local to YYPARSE.  */
 
+#define YY_DECL_NON_LSP_VARIABLES			\
+/* The lookahead symbol.  */				\
+int yychar;						\
+							\
+/* The semantic value of the lookahead symbol. */	\
+YYSTYPE yylval;						\
+							\
+/* Number of parse errors so far.  */			\
+int yynerrs;
 
+#if YYLSP_NEEDED
+# define YY_DECL_VARIABLES			\
+YY_DECL_NON_LSP_VARIABLES			\
+						\
+/* Location data for the lookahead symbol.  */	\
+YYLTYPE yylloc;
+#else
+# define YY_DECL_VARIABLES			\
+YY_DECL_NON_LSP_VARIABLES
+#endif
 
 
+/* If nonreentrant, generate the variables here. */
 
-/*----------.
-| yyparse.  |
-`----------*/
+#if !YYPURE
+YY_DECL_VARIABLES
+#endif  /* !YYPURE */
 
-#ifdef YYPARSE_PARAM
-# if defined (__STDC__) || defined (__cplusplus)
-int yyparse (void *YYPARSE_PARAM)
-# else
-int yyparse (YYPARSE_PARAM)
-  void *YYPARSE_PARAM;
-# endif
-#else /* ! YYPARSE_PARAM */
-#if defined (__STDC__) || defined (__cplusplus)
-int
-yyparse (void)
-#else
 int
-yyparse ()
-
-#endif
-#endif
+yyparse (YYPARSE_PARAM_ARG)
+     YYPARSE_PARAM_DECL
 {
-  /* The lookahead symbol.  */
-int yychar;
-
-/* The semantic value of the lookahead symbol.  */
-YYSTYPE yylval;
-
-/* Number of syntax errors so far.  */
-int yynerrs;
+  /* If reentrant, generate the variables here. */
+#if YYPURE
+  YY_DECL_VARIABLES
+#endif  /* !YYPURE */
 
   register int yystate;
   register int yyn;
@@ -8725,7 +8169,7 @@
   /* Number of tokens to shift before error messages enabled.  */
   int yyerrstatus;
   /* Lookahead token as an internal (translated) token number.  */
-  int yytoken = 0;
+  int yychar1 = 0;
 
   /* Three stacks and their tools:
      `yyss': related to states,
@@ -8735,7 +8179,7 @@
      Refer to the stacks thru separate pointers, to allow yyoverflow
      to reallocate them elsewhere.  */
 
-  /* The state stack.  */
+  /* The state stack. */
   short	yyssa[YYINITDEPTH];
   short *yyss = yyssa;
   register short *yyssp;
@@ -8745,19 +8189,31 @@
   YYSTYPE *yyvs = yyvsa;
   register YYSTYPE *yyvsp;
 
+#if YYLSP_NEEDED
+  /* The location stack.  */
+  YYLTYPE yylsa[YYINITDEPTH];
+  YYLTYPE *yyls = yylsa;
+  YYLTYPE *yylsp;
+#endif
 
-
-#define YYPOPSTACK   (yyvsp--, yyssp--)
+#if YYLSP_NEEDED
+# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
+#else
+# define YYPOPSTACK   (yyvsp--, yyssp--)
+#endif
 
   YYSIZE_T yystacksize = YYINITDEPTH;
 
+
   /* The variables used to return semantic value and location from the
      action routines.  */
   YYSTYPE yyval;
-
+#if YYLSP_NEEDED
+  YYLTYPE yyloc;
+#endif
 
   /* When reducing, the number of symbols on the RHS of the reduced
-     rule.  */
+     rule. */
   int yylen;
 
   YYDPRINTF ((stderr, "Starting parse\n"));
@@ -8774,7 +8230,9 @@
 
   yyssp = yyss;
   yyvsp = yyvs;
-
+#if YYLSP_NEEDED
+  yylsp = yyls;
+#endif
   goto yysetstate;
 
 /*------------------------------------------------------------.
@@ -8789,7 +8247,7 @@
  yysetstate:
   *yyssp = yystate;
 
-  if (yyss + yystacksize - 1 <= yyssp)
+  if (yyssp >= yyss + yystacksize - 1)
     {
       /* Get the current used size of the three stacks, in elements.  */
       YYSIZE_T yysize = yyssp - yyss + 1;
@@ -8802,17 +8260,24 @@
 	YYSTYPE *yyvs1 = yyvs;
 	short *yyss1 = yyss;
 
-
 	/* Each stack pointer address is followed by the size of the
-	   data in use in that stack, in bytes.  This used to be a
-	   conditional around just the two extra args, but that might
-	   be undefined if yyoverflow is a macro.  */
+	   data in use in that stack, in bytes.  */
+# if YYLSP_NEEDED
+	YYLTYPE *yyls1 = yyls;
+	/* This used to be a conditional around just the two extra args,
+	   but that might be undefined if yyoverflow is a macro.  */
 	yyoverflow ("parser stack overflow",
 		    &yyss1, yysize * sizeof (*yyssp),
 		    &yyvs1, yysize * sizeof (*yyvsp),
-
+		    &yyls1, yysize * sizeof (*yylsp),
 		    &yystacksize);
-
+	yyls = yyls1;
+# else
+	yyoverflow ("parser stack overflow",
+		    &yyss1, yysize * sizeof (*yyssp),
+		    &yyvs1, yysize * sizeof (*yyvsp),
+		    &yystacksize);
+# endif
 	yyss = yyss1;
 	yyvs = yyvs1;
       }
@@ -8821,10 +8286,10 @@
       goto yyoverflowlab;
 # else
       /* Extend the stack our own way.  */
-      if (YYMAXDEPTH <= yystacksize)
+      if (yystacksize >= YYMAXDEPTH)
 	goto yyoverflowlab;
       yystacksize *= 2;
-      if (YYMAXDEPTH < yystacksize)
+      if (yystacksize > YYMAXDEPTH)
 	yystacksize = YYMAXDEPTH;
 
       {
@@ -8835,8 +8300,10 @@
 	  goto yyoverflowlab;
 	YYSTACK_RELOCATE (yyss);
 	YYSTACK_RELOCATE (yyvs);
-
-#  undef YYSTACK_RELOCATE
+# if YYLSP_NEEDED
+	YYSTACK_RELOCATE (yyls);
+# endif
+# undef YYSTACK_RELOCATE
 	if (yyss1 != yyssa)
 	  YYSTACK_FREE (yyss1);
       }
@@ -8845,12 +8312,14 @@
 
       yyssp = yyss + yysize - 1;
       yyvsp = yyvs + yysize - 1;
-
+#if YYLSP_NEEDED
+      yylsp = yyls + yysize - 1;
+#endif
 
       YYDPRINTF ((stderr, "Stack size increased to %lu\n",
 		  (unsigned long int) yystacksize));
 
-      if (yyss + yystacksize - 1 <= yyssp)
+      if (yyssp >= yyss + yystacksize - 1)
 	YYABORT;
     }
 
@@ -8858,6 +8327,7 @@
 
   goto yybackup;
 
+
 /*-----------.
 | yybackup.  |
 `-----------*/
@@ -8870,55 +8340,88 @@
   /* First try to decide what to do without reference to lookahead token.  */
 
   yyn = yypact[yystate];
-  if (yyn == YYPACT_NINF)
+  if (yyn == YYFLAG)
     goto yydefault;
 
   /* Not known => get a lookahead token if don't already have one.  */
 
-  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
+  /* yychar is either YYEMPTY or YYEOF
+     or a valid token in external form.  */
+
   if (yychar == YYEMPTY)
     {
       YYDPRINTF ((stderr, "Reading a token: "));
       yychar = YYLEX;
     }
 
-  if (yychar <= YYEOF)
+  /* Convert token to internal form (in yychar1) for indexing tables with */
+
+  if (yychar <= 0)		/* This means end of input. */
     {
-      yychar = yytoken = YYEOF;
+      yychar1 = 0;
+      yychar = YYEOF;		/* Don't call YYLEX any more */
+
       YYDPRINTF ((stderr, "Now at end of input.\n"));
     }
   else
     {
-      yytoken = YYTRANSLATE (yychar);
-      YYDSYMPRINTF ("Next token is", yytoken, &yylval, &yylloc);
+      yychar1 = YYTRANSLATE (yychar);
+
+#if YYDEBUG
+     /* We have to keep this `#if YYDEBUG', since we use variables
+	which are defined only if `YYDEBUG' is set.  */
+      if (yydebug)
+	{
+	  YYFPRINTF (stderr, "Next token is %d (%s",
+		     yychar, yytname[yychar1]);
+	  /* Give the individual parser a way to print the precise
+	     meaning of a token, for further debugging info.  */
+# ifdef YYPRINT
+	  YYPRINT (stderr, yychar, yylval);
+# endif
+	  YYFPRINTF (stderr, ")\n");
+	}
+#endif
     }
 
-  /* If the proper action on seeing token YYTOKEN is to reduce or to
-     detect an error, take that action.  */
-  yyn += yytoken;
-  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
+  yyn += yychar1;
+  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
     goto yydefault;
+
   yyn = yytable[yyn];
-  if (yyn <= 0)
+
+  /* yyn is what to do for this token type in this state.
+     Negative => reduce, -yyn is rule number.
+     Positive => shift, yyn is new state.
+       New state is final state => don't bother to shift,
+       just return success.
+     0, or most negative number => error.  */
+
+  if (yyn < 0)
     {
-      if (yyn == 0 || yyn == YYTABLE_NINF)
+      if (yyn == YYFLAG)
 	goto yyerrlab;
       yyn = -yyn;
       goto yyreduce;
     }
+  else if (yyn == 0)
+    goto yyerrlab;
 
   if (yyn == YYFINAL)
     YYACCEPT;
 
   /* Shift the lookahead token.  */
-  YYDPRINTF ((stderr, "Shifting token %s, ", yytname[yytoken]));
+  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
+	      yychar, yytname[yychar1]));
 
   /* Discard the token being shifted unless it is eof.  */
   if (yychar != YYEOF)
     yychar = YYEMPTY;
 
   *++yyvsp = yylval;
-
+#if YYLSP_NEEDED
+  *++yylsp = yylloc;
+#endif
 
   /* Count tokens shifted since error; after three, turn off error
      status.  */
@@ -8949,20 +8452,42 @@
   /* If YYLEN is nonzero, implement the default value of the action:
      `$$ = $1'.
 
-     Otherwise, the following line sets YYVAL to garbage.
-     This behavior is undocumented and Bison
+     Otherwise, the following line sets YYVAL to the semantic value of
+     the lookahead token.  This behavior is undocumented and Bison
      users should not rely upon it.  Assigning to YYVAL
      unconditionally makes the parser a bit smaller, and it avoids a
      GCC warning that YYVAL may be used uninitialized.  */
   yyval = yyvsp[1-yylen];
 
+#if YYLSP_NEEDED
+  /* Similarly for the default location.  Let the user run additional
+     commands if for instance locations are ranges.  */
+  yyloc = yylsp[1-yylen];
+  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
+#endif
 
-  YY_REDUCE_PRINT (yyn);
-  switch (yyn)
-    {
-        case 2:
-#line 610 "sql_yacc.yy"
-    {
+#if YYDEBUG
+  /* We have to keep this `#if YYDEBUG', since we use variables which
+     are defined only if `YYDEBUG' is set.  */
+  if (yydebug)
+    {
+      int yyi;
+
+      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
+		 yyn, yyrline[yyn]);
+
+      /* Print the symbols being reduced, and their result.  */
+      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
+	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
+      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
+    }
+#endif
+
+  switch (yyn) {
+
+case 1:
+#line 619 "sql_yacc.yy"
+{
 	   THD *thd=current_thd;
 	   if (!thd->bootstrap &&
 	      (!(thd->lex.select_lex.options & OPTION_FOUND_COMMENT)))
@@ -8976,64 +8501,55 @@
 	   }
 	}
     break;
-
-  case 3:
-#line 623 "sql_yacc.yy"
-    {}
+case 2:
+#line 632 "sql_yacc.yy"
+{}
     break;
-
-  case 42:
-#line 669 "sql_yacc.yy"
-    {
+case 42:
+#line 679 "sql_yacc.yy"
+{
 	  LEX *lex = Lex;
 	  lex->sql_command = SQLCOM_CHANGE_MASTER;
 	  bzero((char*) &lex->mi, sizeof(lex->mi));
         }
     break;
-
-  case 43:
-#line 675 "sql_yacc.yy"
-    {}
+case 43:
+#line 685 "sql_yacc.yy"
+{}
     break;
-
-  case 46:
-#line 684 "sql_yacc.yy"
-    {
+case 46:
+#line 694 "sql_yacc.yy"
+{
 	 Lex->mi.host = yyvsp[0].lex_str.str;
        }
     break;
-
-  case 47:
-#line 689 "sql_yacc.yy"
-    {
+case 47:
+#line 699 "sql_yacc.yy"
+{
 	 Lex->mi.user = yyvsp[0].lex_str.str;
        }
     break;
-
-  case 48:
-#line 694 "sql_yacc.yy"
-    {
+case 48:
+#line 704 "sql_yacc.yy"
+{
 	 Lex->mi.password = yyvsp[0].lex_str.str;
        }
     break;
-
-  case 49:
-#line 699 "sql_yacc.yy"
-    {
+case 49:
+#line 709 "sql_yacc.yy"
+{
 	 Lex->mi.log_file_name = yyvsp[0].lex_str.str;
        }
     break;
-
-  case 50:
-#line 704 "sql_yacc.yy"
-    {
+case 50:
+#line 714 "sql_yacc.yy"
+{
 	 Lex->mi.port = yyvsp[0].ulong_num;
        }
     break;
-
-  case 51:
-#line 709 "sql_yacc.yy"
-    {
+case 51:
+#line 719 "sql_yacc.yy"
+{
 	 Lex->mi.pos = yyvsp[0].ulonglong_number;
          /* 
             If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
@@ -9049,33 +8565,29 @@
          Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
        }
     break;
-
-  case 52:
-#line 726 "sql_yacc.yy"
-    {
+case 52:
+#line 736 "sql_yacc.yy"
+{
 	 Lex->mi.connect_retry = yyvsp[0].ulong_num;
        }
     break;
-
-  case 53:
-#line 731 "sql_yacc.yy"
-    {
+case 53:
+#line 741 "sql_yacc.yy"
+{
 	 Lex->mi.relay_log_name = yyvsp[0].lex_str.str;
        }
     break;
-
-  case 54:
-#line 736 "sql_yacc.yy"
-    {
+case 54:
+#line 746 "sql_yacc.yy"
+{
 	 Lex->mi.relay_log_pos = yyvsp[0].ulong_num;
          /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
          Lex->mi.relay_log_pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
        }
     break;
-
-  case 55:
-#line 747 "sql_yacc.yy"
-    {
+case 55:
+#line 757 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  lex->sql_command= SQLCOM_CREATE_TABLE;
 	  if (!add_table_to_list(yyvsp[0].table,
@@ -9092,15 +8604,13 @@
 	  lex->create_info.db_type= (enum db_type) lex->thd->variables.table_type;
 	}
     break;
-
-  case 56:
-#line 764 "sql_yacc.yy"
-    {Lex->select= &Lex->select_lex;}
+case 56:
+#line 774 "sql_yacc.yy"
+{Lex->select= &Lex->select_lex;}
     break;
-
-  case 57:
-#line 766 "sql_yacc.yy"
-    {
+case 57:
+#line 776 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->sql_command= SQLCOM_CREATE_INDEX;
 	    if (!add_table_to_list(yyvsp[0].table, NULL, TL_OPTION_UPDATING))
@@ -9111,29 +8621,26 @@
 	    lex->change=NullS;
 	  }
     break;
-
-  case 58:
-#line 777 "sql_yacc.yy"
-    {
+case 58:
+#line 787 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->key_list.push_back(new Key(yyvsp[-8].key_type,yyvsp[-6].lex_str.str,lex->col_list));
 	    lex->col_list.empty();
 	  }
     break;
-
-  case 59:
-#line 783 "sql_yacc.yy"
-    {
+case 59:
+#line 793 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->sql_command=SQLCOM_CREATE_DB;
 	    lex->name=yyvsp[0].lex_str.str;
             lex->create_info.options=yyvsp[-1].num;
 	  }
     break;
-
-  case 60:
-#line 790 "sql_yacc.yy"
-    {
+case 60:
+#line 800 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->sql_command = SQLCOM_CREATE_FUNCTION;
 	    lex->udf.name=yyvsp[0].lex_str.str;
@@ -9141,69 +8648,57 @@
 	    lex->udf.type= yyvsp[-2].udf_type;
 	  }
     break;
-
-  case 61:
-#line 798 "sql_yacc.yy"
-    {
+case 61:
+#line 808 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->udf.returns=(Item_result) yyvsp[-2].num;
 	    lex->udf.dl=yyvsp[0].lex_str.str;
 	  }
     break;
-
-  case 62:
-#line 805 "sql_yacc.yy"
-    {}
-    break;
-
-  case 63:
-#line 806 "sql_yacc.yy"
-    {}
-    break;
-
-  case 64:
-#line 809 "sql_yacc.yy"
-    {}
-    break;
-
-  case 65:
-#line 810 "sql_yacc.yy"
-    { Select->braces= 1;}
-    break;
-
-  case 66:
-#line 810 "sql_yacc.yy"
-    {}
-    break;
-
-  case 67:
-#line 814 "sql_yacc.yy"
-    {}
-    break;
-
-  case 68:
-#line 816 "sql_yacc.yy"
-    { Select->braces= 0;}
+case 62:
+#line 815 "sql_yacc.yy"
+{}
     break;
-
-  case 69:
+case 63:
 #line 816 "sql_yacc.yy"
-    {}
-    break;
-
-  case 70:
-#line 818 "sql_yacc.yy"
-    { Select->braces= 1;}
+{}
     break;
-
-  case 71:
-#line 818 "sql_yacc.yy"
-    {}
+case 64:
+#line 819 "sql_yacc.yy"
+{}
+    break;
+case 65:
+#line 820 "sql_yacc.yy"
+{ Select->braces= 1;}
+    break;
+case 66:
+#line 820 "sql_yacc.yy"
+{}
+    break;
+case 67:
+#line 824 "sql_yacc.yy"
+{}
+    break;
+case 68:
+#line 826 "sql_yacc.yy"
+{ Select->braces= 0;}
+    break;
+case 69:
+#line 826 "sql_yacc.yy"
+{}
+    break;
+case 70:
+#line 828 "sql_yacc.yy"
+{ Select->braces= 1;}
+    break;
+case 71:
+#line 828 "sql_yacc.yy"
+{}
     break;
-
-  case 72:
-#line 823 "sql_yacc.yy"
-    {
+case 72:
+#line 833 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->lock_option= using_update_log ? TL_READ_NO_INSERT : TL_READ;
 	    if (lex->sql_command == SQLCOM_INSERT)
@@ -9214,135 +8709,109 @@
 	    mysql_init_select(lex);
           }
     break;
-
-  case 73:
-#line 834 "sql_yacc.yy"
-    { Lex->select->table_list.push_front(&Lex->save_list); }
-    break;
-
-  case 74:
-#line 838 "sql_yacc.yy"
-    {}
-    break;
-
-  case 75:
-#line 839 "sql_yacc.yy"
-    {}
-    break;
-
-  case 76:
-#line 842 "sql_yacc.yy"
-    { yyval.num= 0; }
-    break;
-
-  case 77:
-#line 843 "sql_yacc.yy"
-    { yyval.num= yyvsp[0].num;}
-    break;
-
-  case 78:
-#line 846 "sql_yacc.yy"
-    { yyval.num=yyvsp[0].num; }
-    break;
-
-  case 79:
-#line 847 "sql_yacc.yy"
-    { yyval.num= yyvsp[-1].num | yyvsp[0].num; }
-    break;
-
-  case 80:
-#line 850 "sql_yacc.yy"
-    { yyval.num=HA_LEX_CREATE_TMP_TABLE; }
+case 73:
+#line 844 "sql_yacc.yy"
+{ Lex->select->table_list.push_front(&Lex->save_list); }
+    break;
+case 74:
+#line 848 "sql_yacc.yy"
+{}
+    break;
+case 75:
+#line 849 "sql_yacc.yy"
+{}
+    break;
+case 76:
+#line 852 "sql_yacc.yy"
+{ yyval.num= 0; }
     break;
-
-  case 81:
+case 77:
 #line 853 "sql_yacc.yy"
-    { yyval.num= 0; }
-    break;
-
-  case 82:
-#line 854 "sql_yacc.yy"
-    { yyval.num=HA_LEX_CREATE_IF_NOT_EXISTS; }
-    break;
-
-  case 87:
-#line 865 "sql_yacc.yy"
-    { Lex->create_info.db_type= yyvsp[0].db_type; }
-    break;
-
-  case 88:
-#line 866 "sql_yacc.yy"
-    { Lex->create_info.max_rows= yyvsp[0].ulonglong_number; Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;}
-    break;
-
-  case 89:
-#line 867 "sql_yacc.yy"
-    { Lex->create_info.min_rows= yyvsp[0].ulonglong_number; Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;}
-    break;
-
-  case 90:
-#line 868 "sql_yacc.yy"
-    { Lex->create_info.avg_row_length=yyvsp[0].ulong_num; Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;}
-    break;
-
-  case 91:
-#line 869 "sql_yacc.yy"
-    { Lex->create_info.password=yyvsp[0].lex_str.str; }
+{ yyval.num= yyvsp[0].num;}
     break;
-
-  case 92:
-#line 870 "sql_yacc.yy"
-    { Lex->create_info.comment=yyvsp[0].lex_str.str; }
+case 78:
+#line 856 "sql_yacc.yy"
+{ yyval.num=yyvsp[0].num; }
     break;
-
-  case 93:
-#line 871 "sql_yacc.yy"
-    { Lex->create_info.auto_increment_value=yyvsp[0].ulonglong_number; Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;}
+case 79:
+#line 857 "sql_yacc.yy"
+{ yyval.num= yyvsp[-1].num | yyvsp[0].num; }
     break;
-
-  case 94:
-#line 872 "sql_yacc.yy"
-    { Lex->create_info.table_options|= yyvsp[0].ulong_num ? HA_OPTION_PACK_KEYS : HA_OPTION_NO_PACK_KEYS; Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;}
+case 80:
+#line 860 "sql_yacc.yy"
+{ yyval.num=HA_LEX_CREATE_TMP_TABLE; }
     break;
-
-  case 95:
-#line 873 "sql_yacc.yy"
-    { Lex->create_info.table_options&= ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS); Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;}
+case 81:
+#line 863 "sql_yacc.yy"
+{ yyval.num= 0; }
     break;
-
-  case 96:
-#line 874 "sql_yacc.yy"
-    { Lex->create_info.table_options|= yyvsp[0].ulong_num ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM; }
+case 82:
+#line 864 "sql_yacc.yy"
+{ yyval.num=HA_LEX_CREATE_IF_NOT_EXISTS; }
     break;
-
-  case 97:
+case 87:
 #line 875 "sql_yacc.yy"
-    { Lex->create_info.table_options|= yyvsp[0].ulong_num ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE; }
+{ Lex->create_info.db_type= yyvsp[0].db_type; }
     break;
-
-  case 98:
+case 88:
 #line 876 "sql_yacc.yy"
-    { Lex->create_info.row_type= yyvsp[0].row_type; }
+{ Lex->create_info.max_rows= yyvsp[0].ulonglong_number; Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;}
     break;
-
-  case 99:
+case 89:
 #line 877 "sql_yacc.yy"
-    { Lex->create_info.raid_type= yyvsp[0].ulong_num; Lex->create_info.used_fields|= HA_CREATE_USED_RAID;}
+{ Lex->create_info.min_rows= yyvsp[0].ulonglong_number; Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;}
     break;
-
-  case 100:
+case 90:
 #line 878 "sql_yacc.yy"
-    { Lex->create_info.raid_chunks= yyvsp[0].ulong_num; Lex->create_info.used_fields|= HA_CREATE_USED_RAID;}
+{ Lex->create_info.avg_row_length=yyvsp[0].ulong_num; Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;}
     break;
-
-  case 101:
+case 91:
 #line 879 "sql_yacc.yy"
-    { Lex->create_info.raid_chunksize= yyvsp[0].ulong_num*RAID_BLOCK_SIZE; Lex->create_info.used_fields|= HA_CREATE_USED_RAID;}
+{ Lex->create_info.password=yyvsp[0].lex_str.str; }
     break;
-
-  case 102:
+case 92:
+#line 880 "sql_yacc.yy"
+{ Lex->create_info.comment=yyvsp[0].lex_str.str; }
+    break;
+case 93:
 #line 881 "sql_yacc.yy"
-    {
+{ Lex->create_info.auto_increment_value=yyvsp[0].ulonglong_number; Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;}
+    break;
+case 94:
+#line 882 "sql_yacc.yy"
+{ Lex->create_info.table_options|= yyvsp[0].ulong_num ? HA_OPTION_PACK_KEYS : HA_OPTION_NO_PACK_KEYS; Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;}
+    break;
+case 95:
+#line 883 "sql_yacc.yy"
+{ Lex->create_info.table_options&= ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS); Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;}
+    break;
+case 96:
+#line 884 "sql_yacc.yy"
+{ Lex->create_info.table_options|= yyvsp[0].ulong_num ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM; }
+    break;
+case 97:
+#line 885 "sql_yacc.yy"
+{ Lex->create_info.table_options|= yyvsp[0].ulong_num ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE; }
+    break;
+case 98:
+#line 886 "sql_yacc.yy"
+{ Lex->create_info.row_type= yyvsp[0].row_type; }
+    break;
+case 99:
+#line 887 "sql_yacc.yy"
+{ Lex->create_info.raid_type= yyvsp[0].ulong_num; Lex->create_info.used_fields|= HA_CREATE_USED_RAID;}
+    break;
+case 100:
+#line 888 "sql_yacc.yy"
+{ Lex->create_info.raid_chunks= yyvsp[0].ulong_num; Lex->create_info.used_fields|= HA_CREATE_USED_RAID;}
+    break;
+case 101:
+#line 889 "sql_yacc.yy"
+{ Lex->create_info.raid_chunksize= yyvsp[0].ulong_num*RAID_BLOCK_SIZE; Lex->create_info.used_fields|= HA_CREATE_USED_RAID;}
+    break;
+case 102:
+#line 891 "sql_yacc.yy"
+{
 	    /* Move the union list to the merge_list */
 	    LEX *lex=Lex;
 	    TABLE_LIST *table_list= (TABLE_LIST*) lex->select->table_list.first;
@@ -9355,191 +8824,157 @@
 	    lex->create_info.used_fields|= HA_CREATE_USED_UNION;
 	  }
     break;
-
-  case 103:
-#line 893 "sql_yacc.yy"
-    {}
-    break;
-
-  case 104:
-#line 894 "sql_yacc.yy"
-    {}
-    break;
-
-  case 105:
-#line 895 "sql_yacc.yy"
-    { Lex->create_info.merge_insert_method= yyvsp[0].ulong_num; Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;}
-    break;
-
-  case 106:
-#line 896 "sql_yacc.yy"
-    { Lex->create_info.data_file_name= yyvsp[0].lex_str.str; }
-    break;
-
-  case 107:
-#line 897 "sql_yacc.yy"
-    { Lex->create_info.index_file_name= yyvsp[0].lex_str.str; }
-    break;
-
-  case 108:
-#line 900 "sql_yacc.yy"
-    { yyval.db_type= DB_TYPE_ISAM; }
-    break;
-
-  case 109:
-#line 901 "sql_yacc.yy"
-    { yyval.db_type= DB_TYPE_MYISAM; }
-    break;
-
-  case 110:
-#line 902 "sql_yacc.yy"
-    { yyval.db_type= DB_TYPE_MRG_MYISAM; }
-    break;
-
-  case 111:
+case 103:
 #line 903 "sql_yacc.yy"
-    { yyval.db_type= DB_TYPE_HEAP; }
+{}
     break;
-
-  case 112:
+case 104:
 #line 904 "sql_yacc.yy"
-    { yyval.db_type= DB_TYPE_HEAP; }
+{}
     break;
-
-  case 113:
+case 105:
 #line 905 "sql_yacc.yy"
-    { yyval.db_type= DB_TYPE_BERKELEY_DB; }
+{ Lex->create_info.merge_insert_method= yyvsp[0].ulong_num; Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;}
     break;
-
-  case 114:
+case 106:
 #line 906 "sql_yacc.yy"
-    { yyval.db_type= DB_TYPE_INNODB; }
+{ Lex->create_info.data_file_name= yyvsp[0].lex_str.str; }
     break;
-
-  case 115:
-#line 909 "sql_yacc.yy"
-    { yyval.row_type= ROW_TYPE_DEFAULT; }
+case 107:
+#line 907 "sql_yacc.yy"
+{ Lex->create_info.index_file_name= yyvsp[0].lex_str.str; }
     break;
-
-  case 116:
+case 108:
 #line 910 "sql_yacc.yy"
-    { yyval.row_type= ROW_TYPE_FIXED; }
+{ yyval.db_type= DB_TYPE_ISAM; }
     break;
-
-  case 117:
+case 109:
 #line 911 "sql_yacc.yy"
-    { yyval.row_type= ROW_TYPE_DYNAMIC; }
+{ yyval.db_type= DB_TYPE_MYISAM; }
     break;
-
-  case 118:
+case 110:
 #line 912 "sql_yacc.yy"
-    { yyval.row_type= ROW_TYPE_COMPRESSED; }
+{ yyval.db_type= DB_TYPE_MRG_MYISAM; }
     break;
-
-  case 119:
+case 111:
+#line 913 "sql_yacc.yy"
+{ yyval.db_type= DB_TYPE_HEAP; }
+    break;
+case 112:
+#line 914 "sql_yacc.yy"
+{ yyval.db_type= DB_TYPE_HEAP; }
+    break;
+case 113:
 #line 915 "sql_yacc.yy"
-    { yyval.ulong_num= RAID_TYPE_0; }
+{ yyval.db_type= DB_TYPE_BERKELEY_DB; }
     break;
-
-  case 120:
+case 114:
 #line 916 "sql_yacc.yy"
-    { yyval.ulong_num= RAID_TYPE_0; }
+{ yyval.db_type= DB_TYPE_INNODB; }
     break;
-
-  case 121:
-#line 917 "sql_yacc.yy"
-    { yyval.ulong_num=yyvsp[0].ulong_num;}
+case 115:
+#line 919 "sql_yacc.yy"
+{ yyval.row_type= ROW_TYPE_DEFAULT; }
     break;
-
-  case 122:
+case 116:
 #line 920 "sql_yacc.yy"
-    { yyval.ulong_num= MERGE_INSERT_DISABLED; }
+{ yyval.row_type= ROW_TYPE_FIXED; }
     break;
-
-  case 123:
+case 117:
 #line 921 "sql_yacc.yy"
-    { yyval.ulong_num= MERGE_INSERT_TO_FIRST; }
+{ yyval.row_type= ROW_TYPE_DYNAMIC; }
     break;
-
-  case 124:
+case 118:
 #line 922 "sql_yacc.yy"
-    { yyval.ulong_num= MERGE_INSERT_TO_LAST; }
+{ yyval.row_type= ROW_TYPE_COMPRESSED; }
     break;
-
-  case 127:
-#line 929 "sql_yacc.yy"
-    { yyval.udf_type = UDFTYPE_FUNCTION; }
+case 119:
+#line 925 "sql_yacc.yy"
+{ yyval.ulong_num= RAID_TYPE_0; }
     break;
-
-  case 128:
-#line 930 "sql_yacc.yy"
-    { yyval.udf_type = UDFTYPE_AGGREGATE; }
+case 120:
+#line 926 "sql_yacc.yy"
+{ yyval.ulong_num= RAID_TYPE_0; }
     break;
-
-  case 129:
-#line 933 "sql_yacc.yy"
-    {yyval.num = (int) STRING_RESULT; }
+case 121:
+#line 927 "sql_yacc.yy"
+{ yyval.ulong_num=yyvsp[0].ulong_num;}
     break;
-
-  case 130:
-#line 934 "sql_yacc.yy"
-    {yyval.num = (int) REAL_RESULT; }
+case 122:
+#line 930 "sql_yacc.yy"
+{ yyval.ulong_num= MERGE_INSERT_DISABLED; }
     break;
-
-  case 131:
-#line 935 "sql_yacc.yy"
-    {yyval.num = (int) INT_RESULT; }
+case 123:
+#line 931 "sql_yacc.yy"
+{ yyval.ulong_num= MERGE_INSERT_TO_FIRST; }
+    break;
+case 124:
+#line 932 "sql_yacc.yy"
+{ yyval.ulong_num= MERGE_INSERT_TO_LAST; }
+    break;
+case 127:
+#line 939 "sql_yacc.yy"
+{ yyval.udf_type = UDFTYPE_FUNCTION; }
+    break;
+case 128:
+#line 940 "sql_yacc.yy"
+{ yyval.udf_type = UDFTYPE_AGGREGATE; }
+    break;
+case 129:
+#line 943 "sql_yacc.yy"
+{yyval.num = (int) STRING_RESULT; }
+    break;
+case 130:
+#line 944 "sql_yacc.yy"
+{yyval.num = (int) REAL_RESULT; }
+    break;
+case 131:
+#line 945 "sql_yacc.yy"
+{yyval.num = (int) INT_RESULT; }
     break;
-
-  case 137:
-#line 950 "sql_yacc.yy"
-    {
+case 137:
+#line 960 "sql_yacc.yy"
+{
 	    Lex->col_list.empty();		/* Alloced by sql_alloc */
 	  }
     break;
-
-  case 138:
-#line 957 "sql_yacc.yy"
-    {
+case 138:
+#line 967 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->key_list.push_back(new Key(yyvsp[-4].key_type,yyvsp[-3].simple_string,lex->col_list));
 	    lex->col_list.empty();		/* Alloced by sql_alloc */
 	  }
     break;
-
-  case 139:
-#line 963 "sql_yacc.yy"
-    {
+case 139:
+#line 973 "sql_yacc.yy"
+{
 	    Lex->col_list.empty();		/* Alloced by sql_alloc */
 	  }
     break;
-
-  case 140:
-#line 967 "sql_yacc.yy"
-    {
+case 140:
+#line 977 "sql_yacc.yy"
+{
 	    Lex->col_list.empty();		/* Alloced by sql_alloc */
 	  }
     break;
-
-  case 141:
-#line 971 "sql_yacc.yy"
-    {
+case 141:
+#line 981 "sql_yacc.yy"
+{
 	    Lex->col_list.empty();		/* Alloced by sql_alloc */
 	  }
     break;
-
-  case 148:
-#line 994 "sql_yacc.yy"
-    {
+case 148:
+#line 1004 "sql_yacc.yy"
+{
 	   LEX *lex=Lex;
 	   lex->length=lex->dec=0; lex->type=0; lex->interval=0;
 	   lex->default_value=0;
 	 }
     break;
-
-  case 149:
-#line 1000 "sql_yacc.yy"
-    {
+case 149:
+#line 1010 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  if (add_field_to_list(yyvsp[-3].lex_str.str,
 				(enum enum_field_types) yyvsp[-1].num,
@@ -9549,604 +8984,490 @@
 	    YYABORT;
 	}
     break;
-
-  case 150:
-#line 1011 "sql_yacc.yy"
-    { Lex->length=yyvsp[-1].simple_string; yyval.num=yyvsp[-2].num; }
-    break;
-
-  case 151:
-#line 1012 "sql_yacc.yy"
-    { yyval.num=yyvsp[-2].num; }
+case 150:
+#line 1021 "sql_yacc.yy"
+{ Lex->length=yyvsp[-1].simple_string; yyval.num=yyvsp[-2].num; }
     break;
-
-  case 152:
-#line 1013 "sql_yacc.yy"
-    { yyval.num=FIELD_TYPE_FLOAT; }
+case 151:
+#line 1022 "sql_yacc.yy"
+{ yyval.num=yyvsp[-2].num; }
     break;
-
-  case 153:
-#line 1014 "sql_yacc.yy"
-    { Lex->length=(char*) "1";
+case 152:
+#line 1023 "sql_yacc.yy"
+{ yyval.num=FIELD_TYPE_FLOAT; }
+    break;
+case 153:
+#line 1024 "sql_yacc.yy"
+{ Lex->length=(char*) "1";
 					  yyval.num=FIELD_TYPE_TINY; }
     break;
-
-  case 154:
-#line 1016 "sql_yacc.yy"
-    { Lex->length=(char*) "1";
+case 154:
+#line 1026 "sql_yacc.yy"
+{ Lex->length=(char*) "1";
 					  yyval.num=FIELD_TYPE_TINY; }
     break;
-
-  case 155:
-#line 1018 "sql_yacc.yy"
-    { Lex->length=yyvsp[-2].lex_str.str;
+case 155:
+#line 1028 "sql_yacc.yy"
+{ Lex->length=yyvsp[-2].lex_str.str;
 					  yyval.num=FIELD_TYPE_STRING; }
     break;
-
-  case 156:
-#line 1020 "sql_yacc.yy"
-    { Lex->length=(char*) "1";
+case 156:
+#line 1030 "sql_yacc.yy"
+{ Lex->length=(char*) "1";
 					  yyval.num=FIELD_TYPE_STRING; }
     break;
-
-  case 157:
-#line 1022 "sql_yacc.yy"
-    { Lex->length=yyvsp[-1].lex_str.str;
+case 157:
+#line 1032 "sql_yacc.yy"
+{ Lex->length=yyvsp[-1].lex_str.str;
 					  Lex->type|=BINARY_FLAG;
 					  yyval.num=FIELD_TYPE_STRING; }
     break;
-
-  case 158:
-#line 1025 "sql_yacc.yy"
-    { Lex->length=yyvsp[-2].lex_str.str;
+case 158:
+#line 1035 "sql_yacc.yy"
+{ Lex->length=yyvsp[-2].lex_str.str;
 					  yyval.num=FIELD_TYPE_VAR_STRING; }
     break;
-
-  case 159:
-#line 1027 "sql_yacc.yy"
-    { Lex->length=yyvsp[-1].lex_str.str;
+case 159:
+#line 1037 "sql_yacc.yy"
+{ Lex->length=yyvsp[-1].lex_str.str;
 					  Lex->type|=BINARY_FLAG;
 					  yyval.num=FIELD_TYPE_VAR_STRING; }
     break;
-
-  case 160:
-#line 1030 "sql_yacc.yy"
-    { yyval.num=FIELD_TYPE_YEAR; Lex->length=yyvsp[-1].simple_string; }
+case 160:
+#line 1040 "sql_yacc.yy"
+{ yyval.num=FIELD_TYPE_YEAR; Lex->length=yyvsp[-1].simple_string; }
     break;
-
-  case 161:
-#line 1031 "sql_yacc.yy"
-    { yyval.num=FIELD_TYPE_DATE; }
+case 161:
+#line 1041 "sql_yacc.yy"
+{ yyval.num=FIELD_TYPE_DATE; }
     break;
-
-  case 162:
-#line 1032 "sql_yacc.yy"
-    { yyval.num=FIELD_TYPE_TIME; }
+case 162:
+#line 1042 "sql_yacc.yy"
+{ yyval.num=FIELD_TYPE_TIME; }
     break;
-
-  case 163:
-#line 1033 "sql_yacc.yy"
-    { yyval.num=FIELD_TYPE_TIMESTAMP; }
+case 163:
+#line 1043 "sql_yacc.yy"
+{ yyval.num=FIELD_TYPE_TIMESTAMP; }
     break;
-
-  case 164:
-#line 1034 "sql_yacc.yy"
-    { Lex->length=yyvsp[-1].lex_str.str;
+case 164:
+#line 1044 "sql_yacc.yy"
+{ Lex->length=yyvsp[-1].lex_str.str;
 					  yyval.num=FIELD_TYPE_TIMESTAMP; }
     break;
-
-  case 165:
-#line 1036 "sql_yacc.yy"
-    { yyval.num=FIELD_TYPE_DATETIME; }
+case 165:
+#line 1046 "sql_yacc.yy"
+{ yyval.num=FIELD_TYPE_DATETIME; }
     break;
-
-  case 166:
-#line 1037 "sql_yacc.yy"
-    { Lex->type|=BINARY_FLAG;
+case 166:
+#line 1047 "sql_yacc.yy"
+{ Lex->type|=BINARY_FLAG;
 					  yyval.num=FIELD_TYPE_TINY_BLOB; }
     break;
-
-  case 167:
-#line 1039 "sql_yacc.yy"
-    { Lex->type|=BINARY_FLAG;
+case 167:
+#line 1049 "sql_yacc.yy"
+{ Lex->type|=BINARY_FLAG;
 					  yyval.num=FIELD_TYPE_BLOB; }
     break;
-
-  case 168:
-#line 1041 "sql_yacc.yy"
-    { Lex->type|=BINARY_FLAG;
+case 168:
+#line 1051 "sql_yacc.yy"
+{ Lex->type|=BINARY_FLAG;
 					  yyval.num=FIELD_TYPE_MEDIUM_BLOB; }
     break;
-
-  case 169:
-#line 1043 "sql_yacc.yy"
-    { Lex->type|=BINARY_FLAG;
+case 169:
+#line 1053 "sql_yacc.yy"
+{ Lex->type|=BINARY_FLAG;
 					  yyval.num=FIELD_TYPE_LONG_BLOB; }
     break;
-
-  case 170:
-#line 1045 "sql_yacc.yy"
-    { Lex->type|=BINARY_FLAG;
+case 170:
+#line 1055 "sql_yacc.yy"
+{ Lex->type|=BINARY_FLAG;
 					  yyval.num=FIELD_TYPE_MEDIUM_BLOB; }
     break;
-
-  case 171:
-#line 1047 "sql_yacc.yy"
-    { yyval.num=FIELD_TYPE_MEDIUM_BLOB; }
-    break;
-
-  case 172:
-#line 1048 "sql_yacc.yy"
-    { yyval.num=FIELD_TYPE_TINY_BLOB; }
+case 171:
+#line 1057 "sql_yacc.yy"
+{ yyval.num=FIELD_TYPE_MEDIUM_BLOB; }
     break;
-
-  case 173:
-#line 1049 "sql_yacc.yy"
-    { yyval.num=FIELD_TYPE_BLOB; }
+case 172:
+#line 1058 "sql_yacc.yy"
+{ yyval.num=FIELD_TYPE_TINY_BLOB; }
     break;
-
-  case 174:
-#line 1050 "sql_yacc.yy"
-    { yyval.num=FIELD_TYPE_MEDIUM_BLOB; }
+case 173:
+#line 1059 "sql_yacc.yy"
+{ yyval.num=FIELD_TYPE_BLOB; }
     break;
-
-  case 175:
-#line 1051 "sql_yacc.yy"
-    { yyval.num=FIELD_TYPE_LONG_BLOB; }
+case 174:
+#line 1060 "sql_yacc.yy"
+{ yyval.num=FIELD_TYPE_MEDIUM_BLOB; }
     break;
-
-  case 176:
-#line 1053 "sql_yacc.yy"
-    { yyval.num=FIELD_TYPE_DECIMAL;}
+case 175:
+#line 1061 "sql_yacc.yy"
+{ yyval.num=FIELD_TYPE_LONG_BLOB; }
     break;
-
-  case 177:
-#line 1055 "sql_yacc.yy"
-    { yyval.num=FIELD_TYPE_DECIMAL;}
+case 176:
+#line 1063 "sql_yacc.yy"
+{ yyval.num=FIELD_TYPE_DECIMAL;}
     break;
-
-  case 178:
-#line 1056 "sql_yacc.yy"
-    {Lex->interval_list.empty();}
+case 177:
+#line 1065 "sql_yacc.yy"
+{ yyval.num=FIELD_TYPE_DECIMAL;}
+    break;
+case 178:
+#line 1066 "sql_yacc.yy"
+{Lex->interval_list.empty();}
     break;
-
-  case 179:
-#line 1057 "sql_yacc.yy"
-    {
+case 179:
+#line 1067 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->interval=typelib(lex->interval_list);
 	    yyval.num=FIELD_TYPE_ENUM;
 	  }
     break;
-
-  case 180:
-#line 1062 "sql_yacc.yy"
-    { Lex->interval_list.empty();}
+case 180:
+#line 1072 "sql_yacc.yy"
+{ Lex->interval_list.empty();}
     break;
-
-  case 181:
-#line 1063 "sql_yacc.yy"
-    {
+case 181:
+#line 1073 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->interval=typelib(lex->interval_list);
 	    yyval.num=FIELD_TYPE_SET;
 	  }
     break;
-
-  case 182:
-#line 1070 "sql_yacc.yy"
-    {}
+case 182:
+#line 1080 "sql_yacc.yy"
+{}
     break;
-
-  case 183:
-#line 1071 "sql_yacc.yy"
-    {}
+case 183:
+#line 1081 "sql_yacc.yy"
+{}
     break;
-
-  case 184:
-#line 1072 "sql_yacc.yy"
-    {}
+case 184:
+#line 1082 "sql_yacc.yy"
+{}
     break;
-
-  case 185:
-#line 1075 "sql_yacc.yy"
-    {}
+case 185:
+#line 1085 "sql_yacc.yy"
+{}
     break;
-
-  case 186:
-#line 1076 "sql_yacc.yy"
-    {}
+case 186:
+#line 1086 "sql_yacc.yy"
+{}
     break;
-
-  case 187:
-#line 1077 "sql_yacc.yy"
-    {}
+case 187:
+#line 1087 "sql_yacc.yy"
+{}
     break;
-
-  case 188:
-#line 1078 "sql_yacc.yy"
-    {}
+case 188:
+#line 1088 "sql_yacc.yy"
+{}
     break;
-
-  case 189:
-#line 1081 "sql_yacc.yy"
-    { yyval.num=FIELD_TYPE_LONG; }
+case 189:
+#line 1091 "sql_yacc.yy"
+{ yyval.num=FIELD_TYPE_LONG; }
     break;
-
-  case 190:
-#line 1082 "sql_yacc.yy"
-    { yyval.num=FIELD_TYPE_TINY; }
+case 190:
+#line 1092 "sql_yacc.yy"
+{ yyval.num=FIELD_TYPE_TINY; }
     break;
-
-  case 191:
-#line 1083 "sql_yacc.yy"
-    { yyval.num=FIELD_TYPE_SHORT; }
+case 191:
+#line 1093 "sql_yacc.yy"
+{ yyval.num=FIELD_TYPE_SHORT; }
     break;
-
-  case 192:
-#line 1084 "sql_yacc.yy"
-    { yyval.num=FIELD_TYPE_INT24; }
+case 192:
+#line 1094 "sql_yacc.yy"
+{ yyval.num=FIELD_TYPE_INT24; }
     break;
-
-  case 193:
-#line 1085 "sql_yacc.yy"
-    { yyval.num=FIELD_TYPE_LONGLONG; }
+case 193:
+#line 1095 "sql_yacc.yy"
+{ yyval.num=FIELD_TYPE_LONGLONG; }
     break;
-
-  case 194:
-#line 1088 "sql_yacc.yy"
-    { yyval.num= current_thd->sql_mode & MODE_REAL_AS_FLOAT ?
+case 194:
+#line 1098 "sql_yacc.yy"
+{ yyval.num= current_thd->sql_mode & MODE_REAL_AS_FLOAT ?
 			      FIELD_TYPE_FLOAT : FIELD_TYPE_DOUBLE; }
     break;
-
-  case 195:
-#line 1090 "sql_yacc.yy"
-    { yyval.num=FIELD_TYPE_DOUBLE; }
+case 195:
+#line 1100 "sql_yacc.yy"
+{ yyval.num=FIELD_TYPE_DOUBLE; }
     break;
-
-  case 196:
-#line 1091 "sql_yacc.yy"
-    { yyval.num=FIELD_TYPE_DOUBLE; }
+case 196:
+#line 1101 "sql_yacc.yy"
+{ yyval.num=FIELD_TYPE_DOUBLE; }
     break;
-
-  case 197:
-#line 1095 "sql_yacc.yy"
-    {}
+case 197:
+#line 1105 "sql_yacc.yy"
+{}
     break;
-
-  case 198:
-#line 1096 "sql_yacc.yy"
-    { Lex->length=yyvsp[-1].lex_str.str; }
+case 198:
+#line 1106 "sql_yacc.yy"
+{ Lex->length=yyvsp[-1].lex_str.str; }
     break;
-
-  case 199:
-#line 1097 "sql_yacc.yy"
-    {}
+case 199:
+#line 1107 "sql_yacc.yy"
+{}
     break;
-
-  case 200:
-#line 1101 "sql_yacc.yy"
-    {
+case 200:
+#line 1111 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  lex->length=yyvsp[-3].lex_str.str; lex->dec=yyvsp[-1].lex_str.str;
 	}
     break;
-
-  case 201:
-#line 1107 "sql_yacc.yy"
-    {}
-    break;
-
-  case 202:
-#line 1108 "sql_yacc.yy"
-    {}
-    break;
-
-  case 203:
-#line 1111 "sql_yacc.yy"
-    {}
-    break;
-
-  case 204:
-#line 1112 "sql_yacc.yy"
-    {}
-    break;
-
-  case 205:
-#line 1115 "sql_yacc.yy"
-    {}
-    break;
-
-  case 206:
-#line 1116 "sql_yacc.yy"
-    { Lex->type|= UNSIGNED_FLAG;}
-    break;
-
-  case 207:
+case 201:
 #line 1117 "sql_yacc.yy"
-    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
+{}
     break;
-
-  case 208:
-#line 1120 "sql_yacc.yy"
-    { yyval.simple_string=(char*) 0; }
+case 202:
+#line 1118 "sql_yacc.yy"
+{}
     break;
-
-  case 209:
+case 203:
 #line 1121 "sql_yacc.yy"
-    { yyval.simple_string=yyvsp[-1].lex_str.str; }
+{}
     break;
-
-  case 210:
-#line 1124 "sql_yacc.yy"
-    {}
+case 204:
+#line 1122 "sql_yacc.yy"
+{}
     break;
-
-  case 211:
+case 205:
 #line 1125 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 212:
-#line 1128 "sql_yacc.yy"
-    {}
+case 206:
+#line 1126 "sql_yacc.yy"
+{ Lex->type|= UNSIGNED_FLAG;}
     break;
-
-  case 213:
-#line 1129 "sql_yacc.yy"
-    {}
+case 207:
+#line 1127 "sql_yacc.yy"
+{ Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
     break;
-
-  case 214:
-#line 1132 "sql_yacc.yy"
-    {}
+case 208:
+#line 1130 "sql_yacc.yy"
+{ yyval.simple_string=(char*) 0; }
     break;
-
-  case 216:
-#line 1136 "sql_yacc.yy"
-    { Lex->type&= ~ NOT_NULL_FLAG; }
+case 209:
+#line 1131 "sql_yacc.yy"
+{ yyval.simple_string=yyvsp[-1].lex_str.str; }
     break;
-
-  case 217:
-#line 1137 "sql_yacc.yy"
-    { Lex->type|= NOT_NULL_FLAG; }
+case 210:
+#line 1134 "sql_yacc.yy"
+{}
     break;
-
-  case 218:
+case 211:
+#line 1135 "sql_yacc.yy"
+{}
+    break;
+case 212:
 #line 1138 "sql_yacc.yy"
-    { Lex->default_value=yyvsp[0].item; }
+{}
     break;
-
-  case 219:
+case 213:
 #line 1139 "sql_yacc.yy"
-    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
-    break;
-
-  case 220:
-#line 1140 "sql_yacc.yy"
-    { Lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG; }
-    break;
-
-  case 221:
-#line 1141 "sql_yacc.yy"
-    { Lex->type|= UNIQUE_FLAG; }
+{}
     break;
-
-  case 222:
+case 214:
 #line 1142 "sql_yacc.yy"
-    { Lex->type|= UNIQUE_KEY_FLAG; }
-    break;
-
-  case 223:
-#line 1143 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 224:
+case 216:
 #line 1146 "sql_yacc.yy"
-    {}
+{ Lex->type&= ~ NOT_NULL_FLAG; }
     break;
-
-  case 225:
+case 217:
 #line 1147 "sql_yacc.yy"
-    { Lex->type|=BINARY_FLAG; }
+{ Lex->type|= NOT_NULL_FLAG; }
     break;
-
-  case 226:
+case 218:
 #line 1148 "sql_yacc.yy"
-    {}
+{ Lex->default_value=yyvsp[0].item; }
     break;
-
-  case 227:
+case 219:
+#line 1149 "sql_yacc.yy"
+{ Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
+    break;
+case 220:
+#line 1150 "sql_yacc.yy"
+{ Lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG; }
+    break;
+case 221:
+#line 1151 "sql_yacc.yy"
+{ Lex->type|= UNIQUE_FLAG; }
+    break;
+case 222:
 #line 1152 "sql_yacc.yy"
-    {}
+{ Lex->type|= UNIQUE_KEY_FLAG; }
     break;
-
-  case 228:
-#line 1154 "sql_yacc.yy"
-    {
-	    Lex->col_list.empty();		/* Alloced by sql_alloc */
-	  }
+case 223:
+#line 1153 "sql_yacc.yy"
+{}
     break;
-
-  case 229:
-#line 1159 "sql_yacc.yy"
-    {}
+case 224:
+#line 1156 "sql_yacc.yy"
+{}
     break;
-
-  case 230:
-#line 1160 "sql_yacc.yy"
-    {}
+case 225:
+#line 1157 "sql_yacc.yy"
+{ Lex->type|=BINARY_FLAG; }
     break;
-
-  case 231:
-#line 1163 "sql_yacc.yy"
-    {}
+case 226:
+#line 1158 "sql_yacc.yy"
+{}
     break;
-
-  case 232:
-#line 1164 "sql_yacc.yy"
-    {}
+case 227:
+#line 1162 "sql_yacc.yy"
+{}
     break;
-
-  case 233:
-#line 1168 "sql_yacc.yy"
-    {}
+case 228:
+#line 1164 "sql_yacc.yy"
+{
+	    Lex->col_list.empty();		/* Alloced by sql_alloc */
+	  }
     break;
-
-  case 234:
+case 229:
 #line 1169 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 235:
+case 230:
 #line 1170 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 236:
-#line 1171 "sql_yacc.yy"
-    {}
+case 231:
+#line 1173 "sql_yacc.yy"
+{}
     break;
-
-  case 237:
+case 232:
 #line 1174 "sql_yacc.yy"
-    {}
-    break;
-
-  case 238:
-#line 1175 "sql_yacc.yy"
-    {}
-    break;
-
-  case 239:
-#line 1176 "sql_yacc.yy"
-    {}
-    break;
-
-  case 240:
-#line 1177 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 241:
+case 233:
 #line 1178 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 242:
-#line 1181 "sql_yacc.yy"
-    { yyval.key_type= Key::PRIMARY; }
+case 234:
+#line 1179 "sql_yacc.yy"
+{}
     break;
-
-  case 243:
-#line 1182 "sql_yacc.yy"
-    { yyval.key_type= Key::MULTIPLE; }
+case 235:
+#line 1180 "sql_yacc.yy"
+{}
     break;
-
-  case 244:
-#line 1183 "sql_yacc.yy"
-    { yyval.key_type= Key::FULLTEXT; }
+case 236:
+#line 1181 "sql_yacc.yy"
+{}
     break;
-
-  case 245:
+case 237:
 #line 1184 "sql_yacc.yy"
-    { yyval.key_type= Key::FULLTEXT; }
+{}
     break;
-
-  case 246:
+case 238:
 #line 1185 "sql_yacc.yy"
-    { yyval.key_type= Key::UNIQUE; }
+{}
     break;
-
-  case 247:
+case 239:
 #line 1186 "sql_yacc.yy"
-    { yyval.key_type= Key::UNIQUE; }
+{}
     break;
-
-  case 248:
-#line 1189 "sql_yacc.yy"
-    {}
+case 240:
+#line 1187 "sql_yacc.yy"
+{}
     break;
-
-  case 249:
-#line 1190 "sql_yacc.yy"
-    {}
+case 241:
+#line 1188 "sql_yacc.yy"
+{}
     break;
-
-  case 250:
+case 242:
+#line 1191 "sql_yacc.yy"
+{ yyval.key_type= Key::PRIMARY; }
+    break;
+case 243:
+#line 1192 "sql_yacc.yy"
+{ yyval.key_type= Key::MULTIPLE; }
+    break;
+case 244:
 #line 1193 "sql_yacc.yy"
-    {}
+{ yyval.key_type= Key::FULLTEXT; }
     break;
-
-  case 251:
+case 245:
 #line 1194 "sql_yacc.yy"
-    {}
+{ yyval.key_type= Key::FULLTEXT; }
     break;
-
-  case 252:
+case 246:
 #line 1195 "sql_yacc.yy"
-    {}
+{ yyval.key_type= Key::UNIQUE; }
     break;
-
-  case 253:
-#line 1198 "sql_yacc.yy"
-    { yyval.key_type= Key::MULTIPLE; }
+case 247:
+#line 1196 "sql_yacc.yy"
+{ yyval.key_type= Key::UNIQUE; }
     break;
-
-  case 254:
+case 248:
 #line 1199 "sql_yacc.yy"
-    { yyval.key_type= Key::UNIQUE; }
+{}
     break;
-
-  case 255:
+case 249:
 #line 1200 "sql_yacc.yy"
-    { yyval.key_type= Key::FULLTEXT; }
+{}
     break;
-
-  case 256:
+case 250:
 #line 1203 "sql_yacc.yy"
-    { Lex->col_list.push_back(yyvsp[-1].key_part); }
+{}
     break;
-
-  case 257:
+case 251:
 #line 1204 "sql_yacc.yy"
-    { Lex->col_list.push_back(yyvsp[-1].key_part); }
+{}
     break;
-
-  case 258:
-#line 1207 "sql_yacc.yy"
-    { yyval.key_part=new key_part_spec(yyvsp[0].lex_str.str); }
+case 252:
+#line 1205 "sql_yacc.yy"
+{}
     break;
-
-  case 259:
+case 253:
 #line 1208 "sql_yacc.yy"
-    { yyval.key_part=new key_part_spec(yyvsp[-3].lex_str.str,(uint) atoi(yyvsp[-1].lex_str.str)); }
-    break;
-
-  case 260:
-#line 1211 "sql_yacc.yy"
-    { yyval.simple_string=(char*) 0; }
-    break;
-
-  case 261:
-#line 1212 "sql_yacc.yy"
-    { yyval.simple_string=yyvsp[0].lex_str.str; }
-    break;
-
-  case 262:
-#line 1215 "sql_yacc.yy"
-    { Lex->interval_list.push_back(yyvsp[0].string); }
+{ yyval.key_type= Key::MULTIPLE; }
     break;
-
-  case 263:
-#line 1216 "sql_yacc.yy"
-    { Lex->interval_list.push_back(yyvsp[0].string); }
+case 254:
+#line 1209 "sql_yacc.yy"
+{ yyval.key_type= Key::UNIQUE; }
+    break;
+case 255:
+#line 1210 "sql_yacc.yy"
+{ yyval.key_type= Key::FULLTEXT; }
+    break;
+case 256:
+#line 1213 "sql_yacc.yy"
+{ Lex->col_list.push_back(yyvsp[-1].key_part); }
+    break;
+case 257:
+#line 1214 "sql_yacc.yy"
+{ Lex->col_list.push_back(yyvsp[-1].key_part); }
+    break;
+case 258:
+#line 1217 "sql_yacc.yy"
+{ yyval.key_part=new key_part_spec(yyvsp[0].lex_str.str); }
+    break;
+case 259:
+#line 1218 "sql_yacc.yy"
+{ yyval.key_part=new key_part_spec(yyvsp[-3].lex_str.str,(uint) atoi(yyvsp[-1].lex_str.str)); }
+    break;
+case 260:
+#line 1221 "sql_yacc.yy"
+{ yyval.simple_string=(char*) 0; }
+    break;
+case 261:
+#line 1222 "sql_yacc.yy"
+{ yyval.simple_string=yyvsp[0].lex_str.str; }
+    break;
+case 262:
+#line 1225 "sql_yacc.yy"
+{ Lex->interval_list.push_back(yyvsp[0].string); }
+    break;
+case 263:
+#line 1226 "sql_yacc.yy"
+{ Lex->interval_list.push_back(yyvsp[0].string); }
     break;
-
-  case 264:
-#line 1224 "sql_yacc.yy"
-    {
+case 264:
+#line 1234 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  lex->sql_command = SQLCOM_ALTER_TABLE;
 	  lex->name=0;
@@ -10169,53 +9490,45 @@
           lex->simple_alter=1;
 	}
     break;
-
-  case 265:
-#line 1247 "sql_yacc.yy"
-    {}
-    break;
-
-  case 269:
-#line 1255 "sql_yacc.yy"
-    { Lex->change=0; }
-    break;
-
-  case 270:
-#line 1258 "sql_yacc.yy"
-    { Lex->simple_alter=0; }
+case 265:
+#line 1257 "sql_yacc.yy"
+{}
+    break;
+case 269:
+#line 1265 "sql_yacc.yy"
+{ Lex->change=0; }
     break;
-
-  case 271:
-#line 1259 "sql_yacc.yy"
-    { Lex->simple_alter=0; }
+case 270:
+#line 1268 "sql_yacc.yy"
+{ Lex->simple_alter=0; }
     break;
-
-  case 272:
-#line 1260 "sql_yacc.yy"
-    { Lex->simple_alter=0; }
+case 271:
+#line 1269 "sql_yacc.yy"
+{ Lex->simple_alter=0; }
+    break;
+case 272:
+#line 1270 "sql_yacc.yy"
+{ Lex->simple_alter=0; }
     break;
-
-  case 273:
-#line 1262 "sql_yacc.yy"
-    {
+case 273:
+#line 1272 "sql_yacc.yy"
+{
 	     LEX *lex=Lex;
 	     lex->change= yyvsp[0].lex_str.str; lex->simple_alter=0;
 	  }
     break;
-
-  case 275:
-#line 1268 "sql_yacc.yy"
-    {
+case 275:
+#line 1278 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->length=lex->dec=0; lex->type=0; lex->interval=0;
 	    lex->default_value=0;
             lex->simple_alter=0;
 	  }
     break;
-
-  case 276:
-#line 1275 "sql_yacc.yy"
-    {
+case 276:
+#line 1285 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    if (add_field_to_list(yyvsp[-3].lex_str.str,
 				  (enum enum_field_types) yyvsp[-1].num,
@@ -10225,70 +9538,61 @@
 	      YYABORT;
 	  }
     break;
-
-  case 278:
-#line 1286 "sql_yacc.yy"
-    {
+case 278:
+#line 1296 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->drop_list.push_back(new Alter_drop(Alter_drop::COLUMN,
 					    yyvsp[-1].lex_str.str)); lex->simple_alter=0;
 	  }
     break;
-
-  case 279:
-#line 1292 "sql_yacc.yy"
-    {
+case 279:
+#line 1302 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->drop_primary=1; lex->simple_alter=0;
 	  }
     break;
-
-  case 280:
-#line 1296 "sql_yacc.yy"
-    { Lex->simple_alter=0; }
+case 280:
+#line 1306 "sql_yacc.yy"
+{ Lex->simple_alter=0; }
     break;
-
-  case 281:
-#line 1298 "sql_yacc.yy"
-    {
+case 281:
+#line 1308 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->drop_list.push_back(new Alter_drop(Alter_drop::KEY,
 						    yyvsp[0].lex_str.str));
 	    lex->simple_alter=0;
 	  }
     break;
-
-  case 282:
-#line 1304 "sql_yacc.yy"
-    { Lex->alter_keys_onoff=DISABLE; }
-    break;
-
-  case 283:
-#line 1305 "sql_yacc.yy"
-    { Lex->alter_keys_onoff=ENABLE; }
+case 282:
+#line 1314 "sql_yacc.yy"
+{ Lex->alter_keys_onoff=DISABLE; }
+    break;
+case 283:
+#line 1315 "sql_yacc.yy"
+{ Lex->alter_keys_onoff=ENABLE; }
     break;
-
-  case 284:
-#line 1307 "sql_yacc.yy"
-    {
+case 284:
+#line 1317 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->alter_list.push_back(new Alter_column(yyvsp[-3].lex_str.str,yyvsp[0].item));
 	    lex->simple_alter=0;
 	  }
     break;
-
-  case 285:
-#line 1313 "sql_yacc.yy"
-    {
+case 285:
+#line 1323 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->alter_list.push_back(new Alter_column(yyvsp[-2].lex_str.str,(Item*) 0));
 	    lex->simple_alter=0;
 	  }
     break;
-
-  case 286:
-#line 1319 "sql_yacc.yy"
-    {
+case 286:
+#line 1329 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->select->db=yyvsp[0].table->db.str;
 	    lex->name= yyvsp[0].table->table.str;
@@ -10300,428 +9604,399 @@
             }
 	  }
     break;
-
-  case 287:
-#line 1330 "sql_yacc.yy"
-    { Lex->simple_alter=0; }
-    break;
-
-  case 288:
-#line 1331 "sql_yacc.yy"
-    { Lex->simple_alter=0; }
-    break;
-
-  case 289:
-#line 1334 "sql_yacc.yy"
-    {}
-    break;
-
-  case 290:
-#line 1335 "sql_yacc.yy"
-    {}
-    break;
-
-  case 291:
-#line 1338 "sql_yacc.yy"
-    { Lex->duplicates=DUP_ERROR; }
-    break;
-
-  case 292:
-#line 1339 "sql_yacc.yy"
-    { Lex->duplicates=DUP_IGNORE; }
-    break;
-
-  case 293:
-#line 1342 "sql_yacc.yy"
-    {}
-    break;
-
-  case 294:
-#line 1343 "sql_yacc.yy"
-    {}
+case 287:
+#line 1340 "sql_yacc.yy"
+{ Lex->simple_alter=0; }
+    break;
+case 288:
+#line 1341 "sql_yacc.yy"
+{ Lex->simple_alter=0; }
     break;
-
-  case 295:
+case 289:
 #line 1344 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 296:
-#line 1347 "sql_yacc.yy"
-    {}
+case 290:
+#line 1345 "sql_yacc.yy"
+{}
     break;
-
-  case 297:
+case 291:
 #line 1348 "sql_yacc.yy"
-    { store_position_for_column(yyvsp[0].lex_str.str); }
+{ Lex->duplicates=DUP_ERROR; }
     break;
-
-  case 298:
+case 292:
 #line 1349 "sql_yacc.yy"
-    { store_position_for_column(first_keyword); }
+{ Lex->duplicates=DUP_IGNORE; }
     break;
-
-  case 299:
+case 293:
 #line 1352 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 300:
+case 294:
 #line 1353 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 301:
+case 295:
 #line 1354 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 302:
-#line 1355 "sql_yacc.yy"
-    {}
+case 296:
+#line 1357 "sql_yacc.yy"
+{}
     break;
-
-  case 303:
+case 297:
+#line 1358 "sql_yacc.yy"
+{ store_position_for_column(yyvsp[0].lex_str.str); }
+    break;
+case 298:
+#line 1359 "sql_yacc.yy"
+{ store_position_for_column(first_keyword); }
+    break;
+case 299:
 #line 1362 "sql_yacc.yy"
-    {
+{}
+    break;
+case 300:
+#line 1363 "sql_yacc.yy"
+{}
+    break;
+case 301:
+#line 1364 "sql_yacc.yy"
+{}
+    break;
+case 302:
+#line 1365 "sql_yacc.yy"
+{}
+    break;
+case 303:
+#line 1372 "sql_yacc.yy"
+{
 	   LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
 	   lex->type = 0;
          }
     break;
-
-  case 304:
-#line 1369 "sql_yacc.yy"
-    {
+case 304:
+#line 1378 "sql_yacc.yy"
+{}
+    break;
+case 305:
+#line 1381 "sql_yacc.yy"
+{
 	   LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
 	   lex->type = 0;
          }
     break;
-
-  case 305:
-#line 1376 "sql_yacc.yy"
-    {
+case 306:
+#line 1388 "sql_yacc.yy"
+{
 	   LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
 	   lex->type = 0;
          }
     break;
-
-  case 306:
-#line 1383 "sql_yacc.yy"
-    {
+case 307:
+#line 1395 "sql_yacc.yy"
+{
 	   LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
 	   lex->type = 0;
          }
     break;
-
-  case 307:
-#line 1390 "sql_yacc.yy"
-    { Lex->sql_command = SQLCOM_BEGIN;}
-    break;
-
-  case 308:
-#line 1391 "sql_yacc.yy"
-    {}
+case 308:
+#line 1402 "sql_yacc.yy"
+{ Lex->sql_command = SQLCOM_BEGIN;}
+    break;
+case 309:
+#line 1403 "sql_yacc.yy"
+{}
+    break;
+case 312:
+#line 1411 "sql_yacc.yy"
+{}
+    break;
+case 313:
+#line 1412 "sql_yacc.yy"
+{ Lex->slave_thd_opt|=SLAVE_SQL; }
+    break;
+case 314:
+#line 1413 "sql_yacc.yy"
+{ Lex->slave_thd_opt|=SLAVE_IO; }
+    break;
+case 315:
+#line 1417 "sql_yacc.yy"
+{}
     break;
-
-  case 311:
-#line 1399 "sql_yacc.yy"
-    {}
+case 316:
+#line 1419 "sql_yacc.yy"
+{
+            LEX *lex=Lex;
+	    if  (!lex->mi.log_file_name || !lex->mi.pos)
+            {
+               send_error(&lex->thd->net, ER_SYNTAX_ERROR);
+               YYABORT;
+            }
+          }
     break;
-
-  case 312:
-#line 1400 "sql_yacc.yy"
-    { Lex->slave_thd_opt|=SLAVE_SQL; }
+case 319:
+#line 1435 "sql_yacc.yy"
+{
+         Lex->mi.log_file_name = yyvsp[0].lex_str.str;
+       }
     break;
-
-  case 313:
-#line 1401 "sql_yacc.yy"
-    { Lex->slave_thd_opt|=SLAVE_IO; }
+case 320:
+#line 1439 "sql_yacc.yy"
+{
+           Lex->mi.pos = yyvsp[0].ulonglong_number;
+           /*
+              If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
+              instead of causing subsequent errors.
+              We need to do it in this file, because only there we know that
+              MASTER_LOG_POS has been explicitely specified. On the contrary
+              in change_master() (sql_repl.cc) we cannot distinguish between 0
+              (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
+              whereas we want to distinguish (specified 0 means "read the binlog
+              from 0" (4 in fact), unspecified means "don't change the position
+              (keep the preceding value)").
+           */
+           Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
+         }
     break;
-
-  case 314:
-#line 1406 "sql_yacc.yy"
-    {
+case 321:
+#line 1458 "sql_yacc.yy"
+{
 	   Lex->sql_command = SQLCOM_RESTORE_TABLE;
 	}
     break;
-
-  case 315:
-#line 1410 "sql_yacc.yy"
-    {
+case 322:
+#line 1462 "sql_yacc.yy"
+{
 	  Lex->backup_dir = yyvsp[0].lex_str.str;
         }
     break;
-
-  case 316:
-#line 1416 "sql_yacc.yy"
-    {
+case 323:
+#line 1468 "sql_yacc.yy"
+{
 	   Lex->sql_command = SQLCOM_BACKUP_TABLE;
 	}
     break;
-
-  case 317:
-#line 1420 "sql_yacc.yy"
-    {
+case 324:
+#line 1472 "sql_yacc.yy"
+{
 	  Lex->backup_dir = yyvsp[0].lex_str.str;
         }
     break;
-
-  case 318:
-#line 1426 "sql_yacc.yy"
-    {
+case 325:
+#line 1478 "sql_yacc.yy"
+{
 	   LEX *lex=Lex;
 	   lex->sql_command = SQLCOM_REPAIR;
 	   lex->check_opt.init();
 	}
     break;
-
-  case 319:
-#line 1432 "sql_yacc.yy"
-    {}
-    break;
-
-  case 320:
-#line 1436 "sql_yacc.yy"
-    { Lex->check_opt.flags = T_MEDIUM; }
-    break;
-
-  case 321:
-#line 1437 "sql_yacc.yy"
-    {}
-    break;
-
-  case 322:
-#line 1440 "sql_yacc.yy"
-    {}
+case 326:
+#line 1484 "sql_yacc.yy"
+{}
+    break;
+case 327:
+#line 1488 "sql_yacc.yy"
+{ Lex->check_opt.flags = T_MEDIUM; }
+    break;
+case 328:
+#line 1489 "sql_yacc.yy"
+{}
+    break;
+case 329:
+#line 1492 "sql_yacc.yy"
+{}
     break;
-
-  case 323:
-#line 1441 "sql_yacc.yy"
-    {}
+case 330:
+#line 1493 "sql_yacc.yy"
+{}
     break;
-
-  case 324:
-#line 1444 "sql_yacc.yy"
-    { Lex->check_opt.flags|= T_QUICK; }
+case 331:
+#line 1496 "sql_yacc.yy"
+{ Lex->check_opt.flags|= T_QUICK; }
     break;
-
-  case 325:
-#line 1445 "sql_yacc.yy"
-    { Lex->check_opt.flags|= T_EXTEND; }
+case 332:
+#line 1497 "sql_yacc.yy"
+{ Lex->check_opt.flags|= T_EXTEND; }
     break;
-
-  case 326:
-#line 1446 "sql_yacc.yy"
-    { Lex->check_opt.sql_flags|= TT_USEFRM; }
+case 333:
+#line 1498 "sql_yacc.yy"
+{ Lex->check_opt.sql_flags|= TT_USEFRM; }
     break;
-
-  case 327:
-#line 1450 "sql_yacc.yy"
-    {
+case 334:
+#line 1502 "sql_yacc.yy"
+{
 	   LEX *lex=Lex;
 	   lex->sql_command = SQLCOM_ANALYZE;
 	   lex->check_opt.init();
 	}
     break;
-
-  case 328:
-#line 1456 "sql_yacc.yy"
-    {}
+case 335:
+#line 1508 "sql_yacc.yy"
+{}
     break;
-
-  case 329:
-#line 1461 "sql_yacc.yy"
-    {
+case 336:
+#line 1513 "sql_yacc.yy"
+{
 	   LEX *lex=Lex;
 	   lex->sql_command = SQLCOM_CHECK;
 	   lex->check_opt.init();
 	}
     break;
-
-  case 330:
-#line 1467 "sql_yacc.yy"
-    {}
+case 337:
+#line 1519 "sql_yacc.yy"
+{}
     break;
-
-  case 331:
-#line 1471 "sql_yacc.yy"
-    { Lex->check_opt.flags = T_MEDIUM; }
+case 338:
+#line 1523 "sql_yacc.yy"
+{ Lex->check_opt.flags = T_MEDIUM; }
     break;
-
-  case 332:
-#line 1472 "sql_yacc.yy"
-    {}
+case 339:
+#line 1524 "sql_yacc.yy"
+{}
     break;
-
-  case 333:
-#line 1475 "sql_yacc.yy"
-    {}
+case 340:
+#line 1527 "sql_yacc.yy"
+{}
     break;
-
-  case 334:
-#line 1476 "sql_yacc.yy"
-    {}
+case 341:
+#line 1528 "sql_yacc.yy"
+{}
     break;
-
-  case 335:
-#line 1479 "sql_yacc.yy"
-    { Lex->check_opt.flags|= T_QUICK; }
+case 342:
+#line 1531 "sql_yacc.yy"
+{ Lex->check_opt.flags|= T_QUICK; }
     break;
-
-  case 336:
-#line 1480 "sql_yacc.yy"
-    { Lex->check_opt.flags|= T_FAST; }
+case 343:
+#line 1532 "sql_yacc.yy"
+{ Lex->check_opt.flags|= T_FAST; }
     break;
-
-  case 337:
-#line 1481 "sql_yacc.yy"
-    { Lex->check_opt.flags|= T_MEDIUM; }
+case 344:
+#line 1533 "sql_yacc.yy"
+{ Lex->check_opt.flags|= T_MEDIUM; }
     break;
-
-  case 338:
-#line 1482 "sql_yacc.yy"
-    { Lex->check_opt.flags|= T_EXTEND; }
+case 345:
+#line 1534 "sql_yacc.yy"
+{ Lex->check_opt.flags|= T_EXTEND; }
     break;
-
-  case 339:
-#line 1483 "sql_yacc.yy"
-    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
+case 346:
+#line 1535 "sql_yacc.yy"
+{ Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
     break;
-
-  case 340:
-#line 1487 "sql_yacc.yy"
-    {
+case 347:
+#line 1539 "sql_yacc.yy"
+{
 	   LEX *lex=Lex;
 	   lex->sql_command = SQLCOM_OPTIMIZE;
 	   lex->check_opt.init();
 	}
     break;
-
-  case 341:
-#line 1493 "sql_yacc.yy"
-    {}
+case 348:
+#line 1545 "sql_yacc.yy"
+{}
     break;
-
-  case 342:
-#line 1498 "sql_yacc.yy"
-    {
+case 349:
+#line 1550 "sql_yacc.yy"
+{
 	   Lex->sql_command=SQLCOM_RENAME_TABLE;
 	}
     break;
-
-  case 343:
-#line 1502 "sql_yacc.yy"
-    {}
+case 350:
+#line 1554 "sql_yacc.yy"
+{}
     break;
-
-  case 346:
-#line 1511 "sql_yacc.yy"
-    {
+case 353:
+#line 1563 "sql_yacc.yy"
+{
 	   if (!add_table_to_list(yyvsp[-2].table, NULL, TL_OPTION_UPDATING, TL_IGNORE) ||
 	       !add_table_to_list(yyvsp[0].table, NULL, TL_OPTION_UPDATING, TL_IGNORE))
 	     YYABORT;
  	}
     break;
-
-  case 347:
-#line 1523 "sql_yacc.yy"
-    { Lex->sql_command=SQLCOM_SELECT; }
+case 354:
+#line 1575 "sql_yacc.yy"
+{ Lex->sql_command=SQLCOM_SELECT; }
     break;
-
-  case 348:
-#line 1526 "sql_yacc.yy"
-    { Select->braces= 0;	}
+case 355:
+#line 1578 "sql_yacc.yy"
+{ Select->braces= 0;	}
     break;
-
-  case 350:
-#line 1528 "sql_yacc.yy"
-    { Select->braces= 1;}
+case 357:
+#line 1580 "sql_yacc.yy"
+{ Select->braces= 1;}
     break;
-
-  case 352:
-#line 1532 "sql_yacc.yy"
-    {
+case 359:
+#line 1584 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
           mysql_init_select(lex);
 	}
     break;
-
-  case 354:
-#line 1539 "sql_yacc.yy"
-    {}
+case 361:
+#line 1591 "sql_yacc.yy"
+{}
     break;
-
-  case 364:
-#line 1558 "sql_yacc.yy"
-    { Select->options|= SELECT_STRAIGHT_JOIN; }
+case 371:
+#line 1610 "sql_yacc.yy"
+{ Select->options|= SELECT_STRAIGHT_JOIN; }
     break;
-
-  case 365:
-#line 1560 "sql_yacc.yy"
-    {
+case 372:
+#line 1612 "sql_yacc.yy"
+{
 	    if (check_simple_select())
 	      YYABORT;
 	    Lex->lock_option= TL_READ_HIGH_PRIORITY;
 	  }
     break;
-
-  case 366:
-#line 1565 "sql_yacc.yy"
-    { Select->options|= SELECT_DISTINCT; }
-    break;
-
-  case 367:
-#line 1566 "sql_yacc.yy"
-    { Select->options|= SELECT_SMALL_RESULT; }
-    break;
-
-  case 368:
-#line 1567 "sql_yacc.yy"
-    { Select->options|= SELECT_BIG_RESULT; }
+case 373:
+#line 1617 "sql_yacc.yy"
+{ Select->options|= SELECT_DISTINCT; }
+    break;
+case 374:
+#line 1618 "sql_yacc.yy"
+{ Select->options|= SELECT_SMALL_RESULT; }
+    break;
+case 375:
+#line 1619 "sql_yacc.yy"
+{ Select->options|= SELECT_BIG_RESULT; }
     break;
-
-  case 369:
-#line 1569 "sql_yacc.yy"
-    {
+case 376:
+#line 1621 "sql_yacc.yy"
+{
 	    if (check_simple_select())
 	      YYABORT;
 	    Select->options|= OPTION_BUFFER_RESULT;
 	  }
     break;
-
-  case 370:
-#line 1575 "sql_yacc.yy"
-    {
+case 377:
+#line 1627 "sql_yacc.yy"
+{
 	    if (check_simple_select())
 	      YYABORT;
 	    Select->options|= OPTION_FOUND_ROWS;
 	  }
     break;
-
-  case 371:
-#line 1580 "sql_yacc.yy"
-    { current_thd->safe_to_cache_query=0; }
+case 378:
+#line 1632 "sql_yacc.yy"
+{ current_thd->safe_to_cache_query=0; }
     break;
-
-  case 372:
-#line 1582 "sql_yacc.yy"
-    {
+case 379:
+#line 1634 "sql_yacc.yy"
+{
 	    Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
 	  }
     break;
-
-  case 373:
-#line 1585 "sql_yacc.yy"
-    {}
+case 380:
+#line 1637 "sql_yacc.yy"
+{}
     break;
-
-  case 375:
-#line 1591 "sql_yacc.yy"
-    {
+case 382:
+#line 1643 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    if (check_simple_select())
 	      YYABORT;	
@@ -10729,10 +10004,9 @@
 	    lex->thd->safe_to_cache_query=0;
 	  }
     break;
-
-  case 376:
-#line 1599 "sql_yacc.yy"
-    {
+case 383:
+#line 1651 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    if (check_simple_select())
 	      YYABORT;	
@@ -10740,18 +10014,16 @@
 	    lex->thd->safe_to_cache_query=0;
 	  }
     break;
-
-  case 379:
-#line 1612 "sql_yacc.yy"
-    {
+case 386:
+#line 1664 "sql_yacc.yy"
+{
 	    if (add_item_to_list(new Item_field(NULL,NULL,"*")))
 	      YYABORT;
 	  }
     break;
-
-  case 380:
-#line 1620 "sql_yacc.yy"
-    {
+case 387:
+#line 1672 "sql_yacc.yy"
+{
 	    if (add_item_to_list(yyvsp[-2].item))
 	      YYABORT;
 	    if (yyvsp[0].lex_str.str)
@@ -10760,1529 +10032,1283 @@
 	      yyvsp[-2].item->set_name(yyvsp[-3].simple_string,(uint) (yyvsp[-1].simple_string - yyvsp[-3].simple_string));
 	  }
     break;
-
-  case 381:
-#line 1630 "sql_yacc.yy"
-    { yyval.simple_string=(char*) Lex->tok_start; }
-    break;
-
-  case 382:
-#line 1633 "sql_yacc.yy"
-    { yyval.simple_string=(char*) Lex->tok_end; }
-    break;
-
-  case 383:
-#line 1636 "sql_yacc.yy"
-    { yyval.item=yyvsp[0].item; }
-    break;
-
-  case 384:
-#line 1637 "sql_yacc.yy"
-    { yyval.item=yyvsp[0].item; }
-    break;
-
-  case 385:
-#line 1640 "sql_yacc.yy"
-    { yyval.lex_str.str=0;}
-    break;
-
-  case 386:
-#line 1641 "sql_yacc.yy"
-    { yyval.lex_str=yyvsp[0].lex_str; }
-    break;
-
-  case 387:
-#line 1642 "sql_yacc.yy"
-    { yyval.lex_str=yyvsp[0].lex_str; }
-    break;
-
-  case 388:
-#line 1643 "sql_yacc.yy"
-    { yyval.lex_str=yyvsp[0].lex_str; }
-    break;
-
-  case 389:
-#line 1644 "sql_yacc.yy"
-    { yyval.lex_str=yyvsp[0].lex_str; }
-    break;
-
-  case 390:
-#line 1647 "sql_yacc.yy"
-    {}
-    break;
-
-  case 391:
-#line 1648 "sql_yacc.yy"
-    {}
-    break;
-
-  case 392:
-#line 1651 "sql_yacc.yy"
-    {yyval.item = yyvsp[0].item; }
-    break;
-
-  case 393:
-#line 1652 "sql_yacc.yy"
-    {yyval.item = yyvsp[0].item; }
-    break;
-
-  case 394:
-#line 1657 "sql_yacc.yy"
-    { yyval.item= new Item_func_in(yyvsp[-4].item,*yyvsp[-1].item_list); }
-    break;
-
-  case 395:
-#line 1659 "sql_yacc.yy"
-    { yyval.item= new Item_func_not(new Item_func_in(yyvsp[-5].item,*yyvsp[-1].item_list)); }
-    break;
-
-  case 396:
-#line 1661 "sql_yacc.yy"
-    { yyval.item= new Item_func_between(yyvsp[-4].item,yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 397:
-#line 1663 "sql_yacc.yy"
-    { yyval.item= new Item_func_not(new Item_func_between(yyvsp[-5].item,yyvsp[-2].item,yyvsp[0].item)); }
-    break;
-
-  case 398:
-#line 1664 "sql_yacc.yy"
-    { yyval.item= or_or_concat(yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 399:
-#line 1665 "sql_yacc.yy"
-    { yyval.item= new Item_cond_or(yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 400:
-#line 1666 "sql_yacc.yy"
-    { yyval.item= new Item_cond_xor(yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 401:
-#line 1667 "sql_yacc.yy"
-    { yyval.item= new Item_cond_and(yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 402:
-#line 1668 "sql_yacc.yy"
-    { yyval.item= new Item_func_like(yyvsp[-3].item,yyvsp[-1].item,yyvsp[0].simple_string); }
-    break;
-
-  case 403:
-#line 1669 "sql_yacc.yy"
-    { yyval.item= new Item_func_not(new Item_func_like(yyvsp[-4].item,yyvsp[-1].item,yyvsp[0].simple_string));}
-    break;
-
-  case 404:
-#line 1670 "sql_yacc.yy"
-    { yyval.item= new Item_func_regex(yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 405:
-#line 1671 "sql_yacc.yy"
-    { yyval.item= new Item_func_not(new Item_func_regex(yyvsp[-3].item,yyvsp[0].item)); }
-    break;
-
-  case 406:
-#line 1672 "sql_yacc.yy"
-    { yyval.item= new Item_func_isnull(yyvsp[-2].item); }
-    break;
-
-  case 407:
-#line 1673 "sql_yacc.yy"
-    { yyval.item= new Item_func_isnotnull(yyvsp[-3].item); }
-    break;
-
-  case 408:
-#line 1674 "sql_yacc.yy"
-    { yyval.item= new Item_func_eq(yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 409:
-#line 1675 "sql_yacc.yy"
-    { yyval.item= new Item_func_equal(yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 410:
-#line 1676 "sql_yacc.yy"
-    { yyval.item= new Item_func_ge(yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 411:
-#line 1677 "sql_yacc.yy"
-    { yyval.item= new Item_func_gt(yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 412:
-#line 1678 "sql_yacc.yy"
-    { yyval.item= new Item_func_le(yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 413:
-#line 1679 "sql_yacc.yy"
-    { yyval.item= new Item_func_lt(yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 414:
-#line 1680 "sql_yacc.yy"
-    { yyval.item= new Item_func_ne(yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 415:
-#line 1681 "sql_yacc.yy"
-    { yyval.item= new Item_func_shift_left(yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 416:
+case 388:
 #line 1682 "sql_yacc.yy"
-    { yyval.item= new Item_func_shift_right(yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 417:
-#line 1683 "sql_yacc.yy"
-    { yyval.item= new Item_func_plus(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.simple_string=(char*) Lex->tok_start; }
     break;
-
-  case 418:
-#line 1684 "sql_yacc.yy"
-    { yyval.item= new Item_func_minus(yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 419:
+case 389:
 #line 1685 "sql_yacc.yy"
-    { yyval.item= new Item_func_mul(yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 420:
-#line 1686 "sql_yacc.yy"
-    { yyval.item= new Item_func_div(yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 421:
-#line 1687 "sql_yacc.yy"
-    { yyval.item= new Item_func_bit_or(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.simple_string=(char*) Lex->tok_end; }
     break;
-
-  case 422:
+case 390:
 #line 1688 "sql_yacc.yy"
-    { yyval.item= new Item_func_bit_xor(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item=yyvsp[0].item; }
     break;
-
-  case 423:
+case 391:
 #line 1689 "sql_yacc.yy"
-    { yyval.item= new Item_func_bit_and(yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 424:
-#line 1690 "sql_yacc.yy"
-    { yyval.item= new Item_func_mod(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item=yyvsp[0].item; }
     break;
-
-  case 425:
+case 392:
 #line 1692 "sql_yacc.yy"
-    { yyval.item= new Item_date_add_interval(yyvsp[-4].item,yyvsp[-1].item,yyvsp[0].interval,0); }
+{ yyval.lex_str.str=0;}
     break;
-
-  case 426:
+case 393:
+#line 1693 "sql_yacc.yy"
+{ yyval.lex_str=yyvsp[0].lex_str; }
+    break;
+case 394:
 #line 1694 "sql_yacc.yy"
-    { yyval.item= new Item_date_add_interval(yyvsp[-4].item,yyvsp[-1].item,yyvsp[0].interval,1); }
+{ yyval.lex_str=yyvsp[0].lex_str; }
     break;
-
-  case 427:
-#line 1699 "sql_yacc.yy"
-    { yyval.item= new Item_func_between(yyvsp[-4].item,yyvsp[-2].item,yyvsp[0].item); }
+case 395:
+#line 1695 "sql_yacc.yy"
+{ yyval.lex_str=yyvsp[0].lex_str; }
     break;
-
-  case 428:
-#line 1701 "sql_yacc.yy"
-    { yyval.item= new Item_func_not(new Item_func_between(yyvsp[-5].item,yyvsp[-2].item,yyvsp[0].item)); }
+case 396:
+#line 1696 "sql_yacc.yy"
+{ yyval.lex_str=yyvsp[0].lex_str; }
     break;
-
-  case 429:
-#line 1702 "sql_yacc.yy"
-    { yyval.item= or_or_concat(yyvsp[-2].item,yyvsp[0].item); }
+case 397:
+#line 1699 "sql_yacc.yy"
+{}
     break;
-
-  case 430:
+case 398:
+#line 1700 "sql_yacc.yy"
+{}
+    break;
+case 399:
 #line 1703 "sql_yacc.yy"
-    { yyval.item= new Item_cond_or(yyvsp[-2].item,yyvsp[0].item); }
+{yyval.item = yyvsp[0].item; }
     break;
-
-  case 431:
+case 400:
 #line 1704 "sql_yacc.yy"
-    { yyval.item= new Item_cond_xor(yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 432:
-#line 1705 "sql_yacc.yy"
-    { yyval.item= new Item_cond_and(yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 433:
-#line 1706 "sql_yacc.yy"
-    { yyval.item= new Item_func_like(yyvsp[-3].item,yyvsp[-1].item,yyvsp[0].simple_string); }
-    break;
-
-  case 434:
-#line 1707 "sql_yacc.yy"
-    { yyval.item= new Item_func_not(new Item_func_like(yyvsp[-4].item,yyvsp[-1].item,yyvsp[0].simple_string)); }
+{yyval.item = yyvsp[0].item; }
     break;
-
-  case 435:
-#line 1708 "sql_yacc.yy"
-    { yyval.item= new Item_func_regex(yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 436:
+case 401:
 #line 1709 "sql_yacc.yy"
-    { yyval.item= new Item_func_not(new Item_func_regex(yyvsp[-3].item,yyvsp[0].item)); }
-    break;
-
-  case 437:
-#line 1710 "sql_yacc.yy"
-    { yyval.item= new Item_func_isnull(yyvsp[-2].item); }
+{ yyval.item= new Item_func_in(yyvsp[-4].item,*yyvsp[-1].item_list); }
     break;
-
-  case 438:
+case 402:
 #line 1711 "sql_yacc.yy"
-    { yyval.item= new Item_func_isnotnull(yyvsp[-3].item); }
-    break;
-
-  case 439:
-#line 1712 "sql_yacc.yy"
-    { yyval.item= new Item_func_eq(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_not(new Item_func_in(yyvsp[-5].item,*yyvsp[-1].item_list)); }
     break;
-
-  case 440:
+case 403:
 #line 1713 "sql_yacc.yy"
-    { yyval.item= new Item_func_equal(yyvsp[-2].item,yyvsp[0].item); }
-    break;
-
-  case 441:
-#line 1714 "sql_yacc.yy"
-    { yyval.item= new Item_func_ge(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_between(yyvsp[-4].item,yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 442:
+case 404:
 #line 1715 "sql_yacc.yy"
-    { yyval.item= new Item_func_gt(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_not(new Item_func_between(yyvsp[-5].item,yyvsp[-2].item,yyvsp[0].item)); }
     break;
-
-  case 443:
+case 405:
 #line 1716 "sql_yacc.yy"
-    { yyval.item= new Item_func_le(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= or_or_concat(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 444:
+case 406:
 #line 1717 "sql_yacc.yy"
-    { yyval.item= new Item_func_lt(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_cond_or(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 445:
+case 407:
 #line 1718 "sql_yacc.yy"
-    { yyval.item= new Item_func_ne(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_cond_xor(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 446:
+case 408:
 #line 1719 "sql_yacc.yy"
-    { yyval.item= new Item_func_shift_left(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_cond_and(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 447:
+case 409:
 #line 1720 "sql_yacc.yy"
-    { yyval.item= new Item_func_shift_right(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_like(yyvsp[-3].item,yyvsp[-1].item,yyvsp[0].simple_string); }
     break;
-
-  case 448:
+case 410:
 #line 1721 "sql_yacc.yy"
-    { yyval.item= new Item_func_plus(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_not(new Item_func_like(yyvsp[-4].item,yyvsp[-1].item,yyvsp[0].simple_string));}
     break;
-
-  case 449:
+case 411:
 #line 1722 "sql_yacc.yy"
-    { yyval.item= new Item_func_minus(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_regex(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 450:
+case 412:
 #line 1723 "sql_yacc.yy"
-    { yyval.item= new Item_func_mul(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_not(new Item_func_regex(yyvsp[-3].item,yyvsp[0].item)); }
     break;
-
-  case 451:
+case 413:
 #line 1724 "sql_yacc.yy"
-    { yyval.item= new Item_func_div(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_isnull(yyvsp[-2].item); }
     break;
-
-  case 452:
+case 414:
 #line 1725 "sql_yacc.yy"
-    { yyval.item= new Item_func_bit_or(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_isnotnull(yyvsp[-3].item); }
     break;
-
-  case 453:
+case 415:
 #line 1726 "sql_yacc.yy"
-    { yyval.item= new Item_func_bit_xor(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_eq(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 454:
+case 416:
 #line 1727 "sql_yacc.yy"
-    { yyval.item= new Item_func_bit_and(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_equal(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 455:
+case 417:
 #line 1728 "sql_yacc.yy"
-    { yyval.item= new Item_func_mod(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_ge(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 456:
+case 418:
+#line 1729 "sql_yacc.yy"
+{ yyval.item= new Item_func_gt(yyvsp[-2].item,yyvsp[0].item); }
+    break;
+case 419:
 #line 1730 "sql_yacc.yy"
-    { yyval.item= new Item_date_add_interval(yyvsp[-4].item,yyvsp[-1].item,yyvsp[0].interval,0); }
+{ yyval.item= new Item_func_le(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 457:
+case 420:
+#line 1731 "sql_yacc.yy"
+{ yyval.item= new Item_func_lt(yyvsp[-2].item,yyvsp[0].item); }
+    break;
+case 421:
 #line 1732 "sql_yacc.yy"
-    { yyval.item= new Item_date_add_interval(yyvsp[-4].item,yyvsp[-1].item,yyvsp[0].interval,1); }
+{ yyval.item= new Item_func_ne(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 459:
-#line 1738 "sql_yacc.yy"
-    { yyval.item= new Item_func_in(yyvsp[-4].item,*yyvsp[-1].item_list); }
+case 422:
+#line 1733 "sql_yacc.yy"
+{ yyval.item= new Item_func_shift_left(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 460:
-#line 1740 "sql_yacc.yy"
-    { yyval.item= new Item_func_not(new Item_func_in(yyvsp[-5].item,*yyvsp[-1].item_list)); }
+case 423:
+#line 1734 "sql_yacc.yy"
+{ yyval.item= new Item_func_shift_right(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 461:
-#line 1742 "sql_yacc.yy"
-    { yyval.item= new Item_func_between(yyvsp[-4].item,yyvsp[-2].item,yyvsp[0].item); }
+case 424:
+#line 1735 "sql_yacc.yy"
+{ yyval.item= new Item_func_plus(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 462:
-#line 1744 "sql_yacc.yy"
-    { yyval.item= new Item_func_not(new Item_func_between(yyvsp[-5].item,yyvsp[-2].item,yyvsp[0].item)); }
+case 425:
+#line 1736 "sql_yacc.yy"
+{ yyval.item= new Item_func_minus(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 463:
-#line 1745 "sql_yacc.yy"
-    { yyval.item= or_or_concat(yyvsp[-2].item,yyvsp[0].item); }
+case 426:
+#line 1737 "sql_yacc.yy"
+{ yyval.item= new Item_func_mul(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 464:
-#line 1746 "sql_yacc.yy"
-    { yyval.item= new Item_cond_or(yyvsp[-2].item,yyvsp[0].item); }
+case 427:
+#line 1738 "sql_yacc.yy"
+{ yyval.item= new Item_func_div(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 465:
-#line 1747 "sql_yacc.yy"
-    { yyval.item= new Item_cond_xor(yyvsp[-2].item,yyvsp[0].item); }
+case 428:
+#line 1739 "sql_yacc.yy"
+{ yyval.item= new Item_func_bit_or(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 466:
-#line 1748 "sql_yacc.yy"
-    { yyval.item= new Item_func_like(yyvsp[-3].item,yyvsp[-1].item,yyvsp[0].simple_string); }
+case 429:
+#line 1740 "sql_yacc.yy"
+{ yyval.item= new Item_func_bit_xor(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 467:
-#line 1749 "sql_yacc.yy"
-    { yyval.item= new Item_func_not(new Item_func_like(yyvsp[-4].item,yyvsp[-1].item,yyvsp[0].simple_string)); }
+case 430:
+#line 1741 "sql_yacc.yy"
+{ yyval.item= new Item_func_bit_and(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 468:
-#line 1750 "sql_yacc.yy"
-    { yyval.item= new Item_func_regex(yyvsp[-2].item,yyvsp[0].item); }
+case 431:
+#line 1742 "sql_yacc.yy"
+{ yyval.item= new Item_func_mod(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 469:
-#line 1751 "sql_yacc.yy"
-    { yyval.item= new Item_func_not(new Item_func_regex(yyvsp[-3].item,yyvsp[0].item)); }
+case 432:
+#line 1744 "sql_yacc.yy"
+{ yyval.item= new Item_date_add_interval(yyvsp[-4].item,yyvsp[-1].item,yyvsp[0].interval,0); }
     break;
-
-  case 470:
-#line 1752 "sql_yacc.yy"
-    { yyval.item= new Item_func_isnull(yyvsp[-2].item); }
+case 433:
+#line 1746 "sql_yacc.yy"
+{ yyval.item= new Item_date_add_interval(yyvsp[-4].item,yyvsp[-1].item,yyvsp[0].interval,1); }
     break;
-
-  case 471:
+case 434:
+#line 1751 "sql_yacc.yy"
+{ yyval.item= new Item_func_between(yyvsp[-4].item,yyvsp[-2].item,yyvsp[0].item); }
+    break;
+case 435:
 #line 1753 "sql_yacc.yy"
-    { yyval.item= new Item_func_isnotnull(yyvsp[-3].item); }
+{ yyval.item= new Item_func_not(new Item_func_between(yyvsp[-5].item,yyvsp[-2].item,yyvsp[0].item)); }
     break;
-
-  case 472:
+case 436:
 #line 1754 "sql_yacc.yy"
-    { yyval.item= new Item_func_eq(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= or_or_concat(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 473:
+case 437:
 #line 1755 "sql_yacc.yy"
-    { yyval.item= new Item_func_equal(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_cond_or(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 474:
+case 438:
 #line 1756 "sql_yacc.yy"
-    { yyval.item= new Item_func_ge(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_cond_xor(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 475:
+case 439:
 #line 1757 "sql_yacc.yy"
-    { yyval.item= new Item_func_gt(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_cond_and(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 476:
+case 440:
 #line 1758 "sql_yacc.yy"
-    { yyval.item= new Item_func_le(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_like(yyvsp[-3].item,yyvsp[-1].item,yyvsp[0].simple_string); }
     break;
-
-  case 477:
+case 441:
 #line 1759 "sql_yacc.yy"
-    { yyval.item= new Item_func_lt(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_not(new Item_func_like(yyvsp[-4].item,yyvsp[-1].item,yyvsp[0].simple_string)); }
     break;
-
-  case 478:
+case 442:
 #line 1760 "sql_yacc.yy"
-    { yyval.item= new Item_func_ne(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_regex(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 479:
+case 443:
 #line 1761 "sql_yacc.yy"
-    { yyval.item= new Item_func_shift_left(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_not(new Item_func_regex(yyvsp[-3].item,yyvsp[0].item)); }
     break;
-
-  case 480:
+case 444:
 #line 1762 "sql_yacc.yy"
-    { yyval.item= new Item_func_shift_right(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_isnull(yyvsp[-2].item); }
     break;
-
-  case 481:
+case 445:
 #line 1763 "sql_yacc.yy"
-    { yyval.item= new Item_func_plus(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_isnotnull(yyvsp[-3].item); }
     break;
-
-  case 482:
+case 446:
 #line 1764 "sql_yacc.yy"
-    { yyval.item= new Item_func_minus(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_eq(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 483:
+case 447:
 #line 1765 "sql_yacc.yy"
-    { yyval.item= new Item_func_mul(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_equal(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 484:
+case 448:
 #line 1766 "sql_yacc.yy"
-    { yyval.item= new Item_func_div(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_ge(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 485:
+case 449:
 #line 1767 "sql_yacc.yy"
-    { yyval.item= new Item_func_bit_or(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_gt(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 486:
+case 450:
 #line 1768 "sql_yacc.yy"
-    { yyval.item= new Item_func_bit_xor(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_le(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 487:
+case 451:
 #line 1769 "sql_yacc.yy"
-    { yyval.item= new Item_func_bit_and(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_lt(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 488:
+case 452:
 #line 1770 "sql_yacc.yy"
-    { yyval.item= new Item_func_mod(yyvsp[-2].item,yyvsp[0].item); }
+{ yyval.item= new Item_func_ne(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 489:
+case 453:
+#line 1771 "sql_yacc.yy"
+{ yyval.item= new Item_func_shift_left(yyvsp[-2].item,yyvsp[0].item); }
+    break;
+case 454:
 #line 1772 "sql_yacc.yy"
-    { yyval.item= new Item_date_add_interval(yyvsp[-4].item,yyvsp[-1].item,yyvsp[0].interval,0); }
+{ yyval.item= new Item_func_shift_right(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 490:
+case 455:
+#line 1773 "sql_yacc.yy"
+{ yyval.item= new Item_func_plus(yyvsp[-2].item,yyvsp[0].item); }
+    break;
+case 456:
 #line 1774 "sql_yacc.yy"
-    { yyval.item= new Item_date_add_interval(yyvsp[-4].item,yyvsp[-1].item,yyvsp[0].interval,1); }
+{ yyval.item= new Item_func_minus(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 494:
-#line 1781 "sql_yacc.yy"
-    {
-	    yyval.item= new Item_func_set_user_var(yyvsp[-2].lex_str,yyvsp[0].item);
-	    current_thd->safe_to_cache_query=0;
-	  }
+case 457:
+#line 1775 "sql_yacc.yy"
+{ yyval.item= new Item_func_mul(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 495:
-#line 1786 "sql_yacc.yy"
-    {
-	    yyval.item= new Item_func_get_user_var(yyvsp[0].lex_str);
-	    current_thd->safe_to_cache_query=0;
-	  }
+case 458:
+#line 1776 "sql_yacc.yy"
+{ yyval.item= new Item_func_div(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 496:
-#line 1791 "sql_yacc.yy"
-    {
-	    if (!(yyval.item= get_system_var((enum_var_type) yyvsp[-1].num, yyvsp[0].lex_str)))
-	      YYABORT;
-	  }
+case 459:
+#line 1777 "sql_yacc.yy"
+{ yyval.item= new Item_func_bit_or(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 498:
+case 460:
+#line 1778 "sql_yacc.yy"
+{ yyval.item= new Item_func_bit_xor(yyvsp[-2].item,yyvsp[0].item); }
+    break;
+case 461:
+#line 1779 "sql_yacc.yy"
+{ yyval.item= new Item_func_bit_and(yyvsp[-2].item,yyvsp[0].item); }
+    break;
+case 462:
+#line 1780 "sql_yacc.yy"
+{ yyval.item= new Item_func_mod(yyvsp[-2].item,yyvsp[0].item); }
+    break;
+case 463:
+#line 1782 "sql_yacc.yy"
+{ yyval.item= new Item_date_add_interval(yyvsp[-4].item,yyvsp[-1].item,yyvsp[0].interval,0); }
+    break;
+case 464:
+#line 1784 "sql_yacc.yy"
+{ yyval.item= new Item_date_add_interval(yyvsp[-4].item,yyvsp[-1].item,yyvsp[0].interval,1); }
+    break;
+case 466:
+#line 1790 "sql_yacc.yy"
+{ yyval.item= new Item_func_in(yyvsp[-4].item,*yyvsp[-1].item_list); }
+    break;
+case 467:
+#line 1792 "sql_yacc.yy"
+{ yyval.item= new Item_func_not(new Item_func_in(yyvsp[-5].item,*yyvsp[-1].item_list)); }
+    break;
+case 468:
+#line 1794 "sql_yacc.yy"
+{ yyval.item= new Item_func_between(yyvsp[-4].item,yyvsp[-2].item,yyvsp[0].item); }
+    break;
+case 469:
 #line 1796 "sql_yacc.yy"
-    { yyval.item= new Item_func_neg(yyvsp[0].item); }
+{ yyval.item= new Item_func_not(new Item_func_between(yyvsp[-5].item,yyvsp[-2].item,yyvsp[0].item)); }
     break;
-
-  case 499:
+case 470:
 #line 1797 "sql_yacc.yy"
-    { yyval.item= new Item_func_bit_neg(yyvsp[0].item); }
+{ yyval.item= or_or_concat(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 500:
+case 471:
 #line 1798 "sql_yacc.yy"
-    { yyval.item= new Item_func_not(yyvsp[0].item); }
+{ yyval.item= new Item_cond_or(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 501:
+case 472:
 #line 1799 "sql_yacc.yy"
-    { yyval.item= new Item_func_not(yyvsp[0].item); }
+{ yyval.item= new Item_cond_xor(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 502:
+case 473:
 #line 1800 "sql_yacc.yy"
-    { yyval.item= yyvsp[-1].item; }
+{ yyval.item= new Item_func_like(yyvsp[-3].item,yyvsp[-1].item,yyvsp[0].simple_string); }
     break;
-
-  case 503:
+case 474:
 #line 1801 "sql_yacc.yy"
-    { yyval.item= yyvsp[-1].item; }
+{ yyval.item= new Item_func_not(new Item_func_like(yyvsp[-4].item,yyvsp[-1].item,yyvsp[0].simple_string)); }
     break;
-
-  case 504:
+case 475:
+#line 1802 "sql_yacc.yy"
+{ yyval.item= new Item_func_regex(yyvsp[-2].item,yyvsp[0].item); }
+    break;
+case 476:
 #line 1803 "sql_yacc.yy"
-    { Select->ftfunc_list.push_back((Item_func_match *)
-                   (yyval.item=new Item_func_match_nl(*yyvsp[-4].item_list,yyvsp[-1].item))); }
+{ yyval.item= new Item_func_not(new Item_func_regex(yyvsp[-3].item,yyvsp[0].item)); }
     break;
-
-  case 505:
+case 477:
+#line 1804 "sql_yacc.yy"
+{ yyval.item= new Item_func_isnull(yyvsp[-2].item); }
+    break;
+case 478:
+#line 1805 "sql_yacc.yy"
+{ yyval.item= new Item_func_isnotnull(yyvsp[-3].item); }
+    break;
+case 479:
 #line 1806 "sql_yacc.yy"
-    { Select->ftfunc_list.push_back((Item_func_match *)
-                   (yyval.item=new Item_func_match_bool(*yyvsp[-7].item_list,yyvsp[-4].item))); }
+{ yyval.item= new Item_func_eq(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 506:
+case 480:
+#line 1807 "sql_yacc.yy"
+{ yyval.item= new Item_func_equal(yyvsp[-2].item,yyvsp[0].item); }
+    break;
+case 481:
 #line 1808 "sql_yacc.yy"
-    { yyval.item= new Item_func_binary(yyvsp[0].item); }
+{ yyval.item= new Item_func_ge(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 507:
+case 482:
 #line 1809 "sql_yacc.yy"
-    { yyval.item= create_func_cast(yyvsp[-3].item, yyvsp[-1].cast_type); }
+{ yyval.item= new Item_func_gt(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 508:
+case 483:
+#line 1810 "sql_yacc.yy"
+{ yyval.item= new Item_func_le(yyvsp[-2].item,yyvsp[0].item); }
+    break;
+case 484:
 #line 1811 "sql_yacc.yy"
-    { yyval.item= new Item_func_case(* yyvsp[-2].item_list, yyvsp[-4].item, yyvsp[-1].item ); }
+{ yyval.item= new Item_func_lt(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 509:
+case 485:
 #line 1812 "sql_yacc.yy"
-    { yyval.item= create_func_cast(yyvsp[-3].item, yyvsp[-1].cast_type); }
+{ yyval.item= new Item_func_ne(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 510:
+case 486:
+#line 1813 "sql_yacc.yy"
+{ yyval.item= new Item_func_shift_left(yyvsp[-2].item,yyvsp[0].item); }
+    break;
+case 487:
 #line 1814 "sql_yacc.yy"
-    { yyval.item= ((Item*(*)(void))(yyvsp[-2].symbol.symbol->create_func))();}
+{ yyval.item= new Item_func_shift_right(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 511:
+case 488:
+#line 1815 "sql_yacc.yy"
+{ yyval.item= new Item_func_plus(yyvsp[-2].item,yyvsp[0].item); }
+    break;
+case 489:
 #line 1816 "sql_yacc.yy"
-    { yyval.item= ((Item*(*)(Item*))(yyvsp[-3].symbol.symbol->create_func))(yyvsp[-1].item);}
+{ yyval.item= new Item_func_minus(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 512:
+case 490:
+#line 1817 "sql_yacc.yy"
+{ yyval.item= new Item_func_mul(yyvsp[-2].item,yyvsp[0].item); }
+    break;
+case 491:
 #line 1818 "sql_yacc.yy"
-    { yyval.item= ((Item*(*)(Item*,Item*))(yyvsp[-5].symbol.symbol->create_func))(yyvsp[-3].item,yyvsp[-1].item);}
+{ yyval.item= new Item_func_div(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 513:
+case 492:
+#line 1819 "sql_yacc.yy"
+{ yyval.item= new Item_func_bit_or(yyvsp[-2].item,yyvsp[0].item); }
+    break;
+case 493:
 #line 1820 "sql_yacc.yy"
-    { yyval.item= ((Item*(*)(Item*,Item*,Item*))(yyvsp[-7].symbol.symbol->create_func))(yyvsp[-5].item,yyvsp[-3].item,yyvsp[-1].item);}
+{ yyval.item= new Item_func_bit_xor(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 514:
+case 494:
+#line 1821 "sql_yacc.yy"
+{ yyval.item= new Item_func_bit_and(yyvsp[-2].item,yyvsp[0].item); }
+    break;
+case 495:
 #line 1822 "sql_yacc.yy"
-    { yyval.item= new Item_func_atan(yyvsp[-1].item); }
+{ yyval.item= new Item_func_mod(yyvsp[-2].item,yyvsp[0].item); }
     break;
-
-  case 515:
+case 496:
 #line 1824 "sql_yacc.yy"
-    { yyval.item= new Item_func_atan(yyvsp[-3].item,yyvsp[-1].item); }
+{ yyval.item= new Item_date_add_interval(yyvsp[-4].item,yyvsp[-1].item,yyvsp[0].interval,0); }
     break;
-
-  case 516:
+case 497:
 #line 1826 "sql_yacc.yy"
-    { yyval.item= new Item_func_char(*yyvsp[-1].item_list); }
-    break;
-
-  case 517:
-#line 1828 "sql_yacc.yy"
-    { yyval.item= new Item_func_coalesce(* yyvsp[-1].item_list); }
-    break;
-
-  case 518:
-#line 1830 "sql_yacc.yy"
-    { yyval.item= new Item_func_concat(* yyvsp[-1].item_list); }
-    break;
-
-  case 519:
-#line 1832 "sql_yacc.yy"
-    { yyval.item= new Item_func_concat_ws(yyvsp[-3].item, *yyvsp[-1].item_list); }
+{ yyval.item= new Item_date_add_interval(yyvsp[-4].item,yyvsp[-1].item,yyvsp[0].interval,1); }
     break;
-
-  case 520:
-#line 1834 "sql_yacc.yy"
-    { yyval.item= new Item_func_curdate(); current_thd->safe_to_cache_query=0; }
-    break;
-
-  case 521:
-#line 1836 "sql_yacc.yy"
-    { yyval.item= new Item_func_curtime(); current_thd->safe_to_cache_query=0; }
+case 501:
+#line 1833 "sql_yacc.yy"
+{
+	    yyval.item= new Item_func_set_user_var(yyvsp[-2].lex_str,yyvsp[0].item);
+	    current_thd->safe_to_cache_query=0;
+	  }
     break;
-
-  case 522:
+case 502:
 #line 1838 "sql_yacc.yy"
-    { 
-	    yyval.item= new Item_func_curtime(yyvsp[-1].item); 
+{
+	    yyval.item= new Item_func_get_user_var(yyvsp[0].lex_str);
 	    current_thd->safe_to_cache_query=0;
 	  }
     break;
-
-  case 523:
+case 503:
 #line 1843 "sql_yacc.yy"
-    { yyval.item= new Item_date_add_interval(yyvsp[-5].item,yyvsp[-2].item,yyvsp[-1].interval,0); }
-    break;
-
-  case 524:
-#line 1845 "sql_yacc.yy"
-    { yyval.item= new Item_date_add_interval(yyvsp[-5].item,yyvsp[-2].item,yyvsp[-1].interval,1); }
-    break;
-
-  case 525:
-#line 1847 "sql_yacc.yy"
-    { 
-	    yyval.item= new Item_func_database();
-            current_thd->safe_to_cache_query=0; 
+{
+	    if (!(yyval.item= get_system_var((enum_var_type) yyvsp[-1].num, yyvsp[0].lex_str)))
+	      YYABORT;
 	  }
     break;
-
-  case 526:
+case 505:
+#line 1848 "sql_yacc.yy"
+{ yyval.item= new Item_func_neg(yyvsp[0].item); }
+    break;
+case 506:
+#line 1849 "sql_yacc.yy"
+{ yyval.item= new Item_func_bit_neg(yyvsp[0].item); }
+    break;
+case 507:
+#line 1850 "sql_yacc.yy"
+{ yyval.item= new Item_func_not(yyvsp[0].item); }
+    break;
+case 508:
+#line 1851 "sql_yacc.yy"
+{ yyval.item= new Item_func_not(yyvsp[0].item); }
+    break;
+case 509:
 #line 1852 "sql_yacc.yy"
-    { yyval.item= new Item_func_elt(yyvsp[-3].item, *yyvsp[-1].item_list); }
+{ yyval.item= yyvsp[-1].item; }
     break;
-
-  case 527:
-#line 1854 "sql_yacc.yy"
-    { yyval.item= new Item_func_make_set(yyvsp[-3].item, *yyvsp[-1].item_list); }
+case 510:
+#line 1853 "sql_yacc.yy"
+{ yyval.item= yyvsp[-1].item; }
+    break;
+case 511:
+#line 1855 "sql_yacc.yy"
+{ Select->ftfunc_list.push_back((Item_func_match *)
+                   (yyval.item=new Item_func_match_nl(*yyvsp[-4].item_list,yyvsp[-1].item))); }
     break;
-
-  case 528:
-#line 1856 "sql_yacc.yy"
-    {
-	    yyval.item= new Item_func_encrypt(yyvsp[-1].item);
-	    current_thd->safe_to_cache_query=0; 
-	  }
+case 512:
+#line 1858 "sql_yacc.yy"
+{ Select->ftfunc_list.push_back((Item_func_match *)
+                   (yyval.item=new Item_func_match_bool(*yyvsp[-7].item_list,yyvsp[-4].item))); }
     break;
-
-  case 529:
+case 513:
 #line 1860 "sql_yacc.yy"
-    { yyval.item= new Item_func_encrypt(yyvsp[-3].item,yyvsp[-1].item); }
+{ yyval.item= new Item_func_binary(yyvsp[0].item); }
     break;
-
-  case 530:
-#line 1862 "sql_yacc.yy"
-    { yyval.item= new Item_func_decode(yyvsp[-3].item,yyvsp[-1].lex_str.str); }
+case 514:
+#line 1861 "sql_yacc.yy"
+{ yyval.item= create_func_cast(yyvsp[-3].item, yyvsp[-1].cast_type); }
     break;
-
-  case 531:
+case 515:
+#line 1863 "sql_yacc.yy"
+{ yyval.item= new Item_func_case(* yyvsp[-2].item_list, yyvsp[-4].item, yyvsp[-1].item ); }
+    break;
+case 516:
 #line 1864 "sql_yacc.yy"
-    { yyval.item= new Item_func_encode(yyvsp[-3].item,yyvsp[-1].lex_str.str); }
+{ yyval.item= create_func_cast(yyvsp[-3].item, yyvsp[-1].cast_type); }
     break;
-
-  case 532:
+case 517:
 #line 1866 "sql_yacc.yy"
-    { yyval.item= new Item_func_des_decrypt(yyvsp[-1].item); }
+{ yyval.item= ((Item*(*)(void))(yyvsp[-2].symbol.symbol->create_func))();}
     break;
-
-  case 533:
+case 518:
 #line 1868 "sql_yacc.yy"
-    { yyval.item= new Item_func_des_decrypt(yyvsp[-3].item,yyvsp[-1].item); }
+{ yyval.item= ((Item*(*)(Item*))(yyvsp[-3].symbol.symbol->create_func))(yyvsp[-1].item);}
     break;
-
-  case 534:
+case 519:
 #line 1870 "sql_yacc.yy"
-    { yyval.item= new Item_func_des_encrypt(yyvsp[-1].item); }
+{ yyval.item= ((Item*(*)(Item*,Item*))(yyvsp[-5].symbol.symbol->create_func))(yyvsp[-3].item,yyvsp[-1].item);}
     break;
-
-  case 535:
+case 520:
 #line 1872 "sql_yacc.yy"
-    { yyval.item= new Item_func_des_encrypt(yyvsp[-3].item,yyvsp[-1].item); }
+{ yyval.item= ((Item*(*)(Item*,Item*,Item*))(yyvsp[-7].symbol.symbol->create_func))(yyvsp[-5].item,yyvsp[-3].item,yyvsp[-1].item);}
     break;
-
-  case 536:
+case 521:
 #line 1874 "sql_yacc.yy"
-    { yyval.item= new Item_func_export_set(yyvsp[-5].item, yyvsp[-3].item, yyvsp[-1].item); }
+{ yyval.item= new Item_func_atan(yyvsp[-1].item); }
     break;
-
-  case 537:
+case 522:
 #line 1876 "sql_yacc.yy"
-    { yyval.item= new Item_func_export_set(yyvsp[-7].item, yyvsp[-5].item, yyvsp[-3].item, yyvsp[-1].item); }
+{ yyval.item= new Item_func_atan(yyvsp[-3].item,yyvsp[-1].item); }
     break;
-
-  case 538:
+case 523:
 #line 1878 "sql_yacc.yy"
-    { yyval.item= new Item_func_export_set(yyvsp[-9].item, yyvsp[-7].item, yyvsp[-5].item, yyvsp[-3].item, yyvsp[-1].item); }
+{ yyval.item= new Item_func_char(*yyvsp[-1].item_list); }
     break;
-
-  case 539:
+case 524:
 #line 1880 "sql_yacc.yy"
-    { yyval.item= new Item_func_format(yyvsp[-3].item,atoi(yyvsp[-1].lex_str.str)); }
+{ yyval.item= new Item_func_coalesce(* yyvsp[-1].item_list); }
     break;
-
-  case 540:
+case 525:
 #line 1882 "sql_yacc.yy"
-    { yyval.item= new Item_func_from_unixtime(yyvsp[-1].item); }
+{ yyval.item= new Item_func_concat(* yyvsp[-1].item_list); }
     break;
-
-  case 541:
+case 526:
 #line 1884 "sql_yacc.yy"
-    {
-	    yyval.item= new Item_func_date_format (new Item_func_from_unixtime(yyvsp[-3].item),yyvsp[-1].item,0);
-	  }
+{ yyval.item= new Item_func_concat_ws(yyvsp[-3].item, *yyvsp[-1].item_list); }
     break;
-
-  case 542:
+case 527:
+#line 1886 "sql_yacc.yy"
+{ yyval.item= new Item_func_curdate(); current_thd->safe_to_cache_query=0; }
+    break;
+case 528:
 #line 1888 "sql_yacc.yy"
-    { yyval.item= new Item_func_field(yyvsp[-3].item, *yyvsp[-1].item_list); }
+{ yyval.item= new Item_func_curtime(); current_thd->safe_to_cache_query=0; }
     break;
-
-  case 543:
+case 529:
 #line 1890 "sql_yacc.yy"
-    { yyval.item= new Item_func_hour(yyvsp[-1].item); }
-    break;
-
-  case 544:
-#line 1892 "sql_yacc.yy"
-    { yyval.item= new Item_func_if(yyvsp[-5].item,yyvsp[-3].item,yyvsp[-1].item); }
+{ 
+	    yyval.item= new Item_func_curtime(yyvsp[-1].item); 
+	    current_thd->safe_to_cache_query=0;
+	  }
     break;
-
-  case 545:
-#line 1894 "sql_yacc.yy"
-    { yyval.item= new Item_func_insert(yyvsp[-7].item,yyvsp[-5].item,yyvsp[-3].item,yyvsp[-1].item); }
+case 530:
+#line 1895 "sql_yacc.yy"
+{ yyval.item= new Item_date_add_interval(yyvsp[-5].item,yyvsp[-2].item,yyvsp[-1].interval,0); }
     break;
-
-  case 546:
+case 531:
 #line 1897 "sql_yacc.yy"
-    { yyval.item= new Item_date_add_interval(yyvsp[0].item,yyvsp[-3].item,yyvsp[-2].interval,0); }
+{ yyval.item= new Item_date_add_interval(yyvsp[-5].item,yyvsp[-2].item,yyvsp[-1].interval,1); }
     break;
-
-  case 547:
+case 532:
 #line 1899 "sql_yacc.yy"
-    { yyval.item= new Item_func_interval(yyvsp[-3].item,* yyvsp[-1].item_list); }
-    break;
-
-  case 548:
-#line 1901 "sql_yacc.yy"
-    {
-	    yyval.item= new Item_int((char*) "last_insert_id()",
-			     current_thd->insert_id(),21);
-	    current_thd->safe_to_cache_query=0;
+{ 
+	    yyval.item= new Item_func_database();
+            current_thd->safe_to_cache_query=0; 
 	  }
     break;
-
-  case 549:
-#line 1907 "sql_yacc.yy"
-    {
-	    yyval.item= new Item_func_set_last_insert_id(yyvsp[-1].item);
-	    current_thd->safe_to_cache_query=0;
+case 533:
+#line 1904 "sql_yacc.yy"
+{ yyval.item= new Item_func_elt(yyvsp[-3].item, *yyvsp[-1].item_list); }
+    break;
+case 534:
+#line 1906 "sql_yacc.yy"
+{ yyval.item= new Item_func_make_set(yyvsp[-3].item, *yyvsp[-1].item_list); }
+    break;
+case 535:
+#line 1908 "sql_yacc.yy"
+{
+	    yyval.item= new Item_func_encrypt(yyvsp[-1].item);
+	    current_thd->safe_to_cache_query=0; 
 	  }
     break;
-
-  case 550:
+case 536:
 #line 1912 "sql_yacc.yy"
-    { yyval.item= new Item_func_left(yyvsp[-3].item,yyvsp[-1].item); }
+{ yyval.item= new Item_func_encrypt(yyvsp[-3].item,yyvsp[-1].item); }
     break;
-
-  case 551:
+case 537:
 #line 1914 "sql_yacc.yy"
-    { yyval.item= new Item_func_locate(yyvsp[-1].item,yyvsp[-3].item); }
+{ yyval.item= new Item_func_decode(yyvsp[-3].item,yyvsp[-1].lex_str.str); }
     break;
-
-  case 552:
+case 538:
 #line 1916 "sql_yacc.yy"
-    { yyval.item= new Item_func_locate(yyvsp[-3].item,yyvsp[-5].item,yyvsp[-1].item); }
+{ yyval.item= new Item_func_encode(yyvsp[-3].item,yyvsp[-1].lex_str.str); }
     break;
-
-  case 553:
+case 539:
 #line 1918 "sql_yacc.yy"
-    { yyvsp[-1].item_list->push_front(yyvsp[-3].item); yyval.item= new Item_func_max(*yyvsp[-1].item_list); }
+{ yyval.item= new Item_func_des_decrypt(yyvsp[-1].item); }
     break;
-
-  case 554:
+case 540:
 #line 1920 "sql_yacc.yy"
-    { yyvsp[-1].item_list->push_front(yyvsp[-3].item); yyval.item= new Item_func_min(*yyvsp[-1].item_list); }
+{ yyval.item= new Item_func_des_decrypt(yyvsp[-3].item,yyvsp[-1].item); }
     break;
-
-  case 555:
+case 541:
 #line 1922 "sql_yacc.yy"
-    { yyval.item= new Item_func_log(yyvsp[-1].item); }
+{ yyval.item= new Item_func_des_encrypt(yyvsp[-1].item); }
     break;
-
-  case 556:
+case 542:
 #line 1924 "sql_yacc.yy"
-    { yyval.item= new Item_func_log(yyvsp[-3].item, yyvsp[-1].item); }
+{ yyval.item= new Item_func_des_encrypt(yyvsp[-3].item,yyvsp[-1].item); }
     break;
-
-  case 557:
+case 543:
 #line 1926 "sql_yacc.yy"
-    { 
+{ yyval.item= new Item_func_export_set(yyvsp[-5].item, yyvsp[-3].item, yyvsp[-1].item); }
+    break;
+case 544:
+#line 1928 "sql_yacc.yy"
+{ yyval.item= new Item_func_export_set(yyvsp[-7].item, yyvsp[-5].item, yyvsp[-3].item, yyvsp[-1].item); }
+    break;
+case 545:
+#line 1930 "sql_yacc.yy"
+{ yyval.item= new Item_func_export_set(yyvsp[-9].item, yyvsp[-7].item, yyvsp[-5].item, yyvsp[-3].item, yyvsp[-1].item); }
+    break;
+case 546:
+#line 1932 "sql_yacc.yy"
+{ yyval.item= new Item_func_format(yyvsp[-3].item,atoi(yyvsp[-1].lex_str.str)); }
+    break;
+case 547:
+#line 1934 "sql_yacc.yy"
+{ yyval.item= new Item_func_from_unixtime(yyvsp[-1].item); }
+    break;
+case 548:
+#line 1936 "sql_yacc.yy"
+{
+	    yyval.item= new Item_func_date_format (new Item_func_from_unixtime(yyvsp[-3].item),yyvsp[-1].item,0);
+	  }
+    break;
+case 549:
+#line 1940 "sql_yacc.yy"
+{ yyval.item= new Item_func_field(yyvsp[-3].item, *yyvsp[-1].item_list); }
+    break;
+case 550:
+#line 1942 "sql_yacc.yy"
+{ yyval.item= new Item_func_hour(yyvsp[-1].item); }
+    break;
+case 551:
+#line 1944 "sql_yacc.yy"
+{ yyval.item= new Item_func_if(yyvsp[-5].item,yyvsp[-3].item,yyvsp[-1].item); }
+    break;
+case 552:
+#line 1946 "sql_yacc.yy"
+{ yyval.item= new Item_func_insert(yyvsp[-7].item,yyvsp[-5].item,yyvsp[-3].item,yyvsp[-1].item); }
+    break;
+case 553:
+#line 1949 "sql_yacc.yy"
+{ yyval.item= new Item_date_add_interval(yyvsp[0].item,yyvsp[-3].item,yyvsp[-2].interval,0); }
+    break;
+case 554:
+#line 1951 "sql_yacc.yy"
+{ yyval.item= new Item_func_interval(yyvsp[-3].item,* yyvsp[-1].item_list); }
+    break;
+case 555:
+#line 1953 "sql_yacc.yy"
+{
+	    yyval.item= new Item_int((char*) "last_insert_id()",
+			     current_thd->insert_id(),21);
+	    current_thd->safe_to_cache_query=0;
+	  }
+    break;
+case 556:
+#line 1959 "sql_yacc.yy"
+{
+	    yyval.item= new Item_func_set_last_insert_id(yyvsp[-1].item);
+	    current_thd->safe_to_cache_query=0;
+	  }
+    break;
+case 557:
+#line 1964 "sql_yacc.yy"
+{ yyval.item= new Item_func_left(yyvsp[-3].item,yyvsp[-1].item); }
+    break;
+case 558:
+#line 1966 "sql_yacc.yy"
+{ yyval.item= new Item_func_locate(yyvsp[-1].item,yyvsp[-3].item); }
+    break;
+case 559:
+#line 1968 "sql_yacc.yy"
+{ yyval.item= new Item_func_locate(yyvsp[-3].item,yyvsp[-5].item,yyvsp[-1].item); }
+    break;
+case 560:
+#line 1970 "sql_yacc.yy"
+{ yyvsp[-1].item_list->push_front(yyvsp[-3].item); yyval.item= new Item_func_max(*yyvsp[-1].item_list); }
+    break;
+case 561:
+#line 1972 "sql_yacc.yy"
+{ yyvsp[-1].item_list->push_front(yyvsp[-3].item); yyval.item= new Item_func_min(*yyvsp[-1].item_list); }
+    break;
+case 562:
+#line 1974 "sql_yacc.yy"
+{ yyval.item= new Item_func_log(yyvsp[-1].item); }
+    break;
+case 563:
+#line 1976 "sql_yacc.yy"
+{ yyval.item= new Item_func_log(yyvsp[-3].item, yyvsp[-1].item); }
+    break;
+case 564:
+#line 1978 "sql_yacc.yy"
+{ 
 	    yyval.item= new Item_master_pos_wait(yyvsp[-3].item, yyvsp[-1].item);
 	    current_thd->safe_to_cache_query=0; 
 	  }
     break;
-
-  case 558:
-#line 1931 "sql_yacc.yy"
-    { 
+case 565:
+#line 1983 "sql_yacc.yy"
+{ 
 	    yyval.item= new Item_master_pos_wait(yyvsp[-5].item, yyvsp[-3].item, yyvsp[-1].item);
 	    current_thd->safe_to_cache_query=0; 
 	  }
     break;
-
-  case 559:
-#line 1936 "sql_yacc.yy"
-    { yyval.item= new Item_func_minute(yyvsp[-1].item); }
-    break;
-
-  case 560:
-#line 1938 "sql_yacc.yy"
-    { yyval.item= new Item_func_month(yyvsp[-1].item); }
+case 566:
+#line 1988 "sql_yacc.yy"
+{ yyval.item= new Item_func_minute(yyvsp[-1].item); }
+    break;
+case 567:
+#line 1990 "sql_yacc.yy"
+{ yyval.item= new Item_func_month(yyvsp[-1].item); }
     break;
-
-  case 561:
-#line 1940 "sql_yacc.yy"
-    { yyval.item= new Item_func_now(); current_thd->safe_to_cache_query=0;}
+case 568:
+#line 1992 "sql_yacc.yy"
+{ yyval.item= new Item_func_now(); current_thd->safe_to_cache_query=0;}
     break;
-
-  case 562:
-#line 1942 "sql_yacc.yy"
-    { yyval.item= new Item_func_now(yyvsp[-1].item); current_thd->safe_to_cache_query=0;}
+case 569:
+#line 1994 "sql_yacc.yy"
+{ yyval.item= new Item_func_now(yyvsp[-1].item); current_thd->safe_to_cache_query=0;}
     break;
-
-  case 563:
-#line 1944 "sql_yacc.yy"
-    {
+case 570:
+#line 1996 "sql_yacc.yy"
+{
 	    yyval.item= new Item_func_password(yyvsp[-1].item);
 	   }
     break;
-
-  case 564:
-#line 1948 "sql_yacc.yy"
-    { yyval.item = new Item_func_locate(yyvsp[-1].item,yyvsp[-3].item); }
-    break;
-
-  case 565:
-#line 1950 "sql_yacc.yy"
-    { yyval.item= new Item_func_rand(yyvsp[-1].item); current_thd->safe_to_cache_query=0;}
-    break;
-
-  case 566:
-#line 1952 "sql_yacc.yy"
-    { yyval.item= new Item_func_rand(); current_thd->safe_to_cache_query=0;}
-    break;
-
-  case 567:
-#line 1954 "sql_yacc.yy"
-    { yyval.item= new Item_func_replace(yyvsp[-5].item,yyvsp[-3].item,yyvsp[-1].item); }
+case 571:
+#line 2000 "sql_yacc.yy"
+{ yyval.item = new Item_func_locate(yyvsp[-1].item,yyvsp[-3].item); }
+    break;
+case 572:
+#line 2002 "sql_yacc.yy"
+{ yyval.item= new Item_func_rand(yyvsp[-1].item); current_thd->safe_to_cache_query=0;}
+    break;
+case 573:
+#line 2004 "sql_yacc.yy"
+{ yyval.item= new Item_func_rand(); current_thd->safe_to_cache_query=0;}
     break;
-
-  case 568:
-#line 1956 "sql_yacc.yy"
-    { yyval.item= new Item_func_right(yyvsp[-3].item,yyvsp[-1].item); }
+case 574:
+#line 2006 "sql_yacc.yy"
+{ yyval.item= new Item_func_replace(yyvsp[-5].item,yyvsp[-3].item,yyvsp[-1].item); }
     break;
-
-  case 569:
-#line 1958 "sql_yacc.yy"
-    { yyval.item= new Item_func_round(yyvsp[-1].item, new Item_int((char*)"0",0,1),0); }
+case 575:
+#line 2008 "sql_yacc.yy"
+{ yyval.item= new Item_func_right(yyvsp[-3].item,yyvsp[-1].item); }
     break;
-
-  case 570:
-#line 1959 "sql_yacc.yy"
-    { yyval.item= new Item_func_round(yyvsp[-3].item,yyvsp[-1].item,0); }
+case 576:
+#line 2010 "sql_yacc.yy"
+{ yyval.item= new Item_func_round(yyvsp[-1].item, new Item_int((char*)"0",0,1),0); }
     break;
-
-  case 571:
-#line 1961 "sql_yacc.yy"
-    { yyval.item= new Item_func_second(yyvsp[-1].item); }
+case 577:
+#line 2011 "sql_yacc.yy"
+{ yyval.item= new Item_func_round(yyvsp[-3].item,yyvsp[-1].item,0); }
     break;
-
-  case 572:
-#line 1963 "sql_yacc.yy"
-    { yyval.item= new Item_func_substr(yyvsp[-5].item,yyvsp[-3].item,yyvsp[-1].item); }
+case 578:
+#line 2013 "sql_yacc.yy"
+{ yyval.item= new Item_func_second(yyvsp[-1].item); }
     break;
-
-  case 573:
-#line 1965 "sql_yacc.yy"
-    { yyval.item= new Item_func_substr(yyvsp[-3].item,yyvsp[-1].item); }
+case 579:
+#line 2015 "sql_yacc.yy"
+{ yyval.item= new Item_func_substr(yyvsp[-5].item,yyvsp[-3].item,yyvsp[-1].item); }
     break;
-
-  case 574:
-#line 1967 "sql_yacc.yy"
-    { yyval.item= new Item_func_substr(yyvsp[-5].item,yyvsp[-3].item,yyvsp[-1].item); }
+case 580:
+#line 2017 "sql_yacc.yy"
+{ yyval.item= new Item_func_substr(yyvsp[-3].item,yyvsp[-1].item); }
     break;
-
-  case 575:
-#line 1969 "sql_yacc.yy"
-    { yyval.item= new Item_func_substr(yyvsp[-3].item,yyvsp[-1].item); }
+case 581:
+#line 2019 "sql_yacc.yy"
+{ yyval.item= new Item_func_substr(yyvsp[-5].item,yyvsp[-3].item,yyvsp[-1].item); }
     break;
-
-  case 576:
-#line 1971 "sql_yacc.yy"
-    { yyval.item= new Item_func_substr_index(yyvsp[-5].item,yyvsp[-3].item,yyvsp[-1].item); }
+case 582:
+#line 2021 "sql_yacc.yy"
+{ yyval.item= new Item_func_substr(yyvsp[-3].item,yyvsp[-1].item); }
     break;
-
-  case 577:
-#line 1973 "sql_yacc.yy"
-    { yyval.item= new Item_func_trim(yyvsp[-1].item,new Item_string(" ",1)); }
+case 583:
+#line 2023 "sql_yacc.yy"
+{ yyval.item= new Item_func_substr_index(yyvsp[-5].item,yyvsp[-3].item,yyvsp[-1].item); }
     break;
-
-  case 578:
-#line 1975 "sql_yacc.yy"
-    { yyval.item= new Item_func_ltrim(yyvsp[-1].item,yyvsp[-3].item); }
+case 584:
+#line 2025 "sql_yacc.yy"
+{ yyval.item= new Item_func_trim(yyvsp[-1].item,new Item_string(" ",1)); }
     break;
-
-  case 579:
-#line 1977 "sql_yacc.yy"
-    { yyval.item= new Item_func_rtrim(yyvsp[-1].item,yyvsp[-3].item); }
+case 585:
+#line 2027 "sql_yacc.yy"
+{ yyval.item= new Item_func_ltrim(yyvsp[-1].item,yyvsp[-3].item); }
     break;
-
-  case 580:
-#line 1979 "sql_yacc.yy"
-    { yyval.item= new Item_func_trim(yyvsp[-1].item,yyvsp[-3].item); }
+case 586:
+#line 2029 "sql_yacc.yy"
+{ yyval.item= new Item_func_rtrim(yyvsp[-1].item,yyvsp[-3].item); }
     break;
-
-  case 581:
-#line 1981 "sql_yacc.yy"
-    { yyval.item= new Item_func_trim(yyvsp[-1].item,yyvsp[-3].item); }
+case 587:
+#line 2031 "sql_yacc.yy"
+{ yyval.item= new Item_func_trim(yyvsp[-1].item,yyvsp[-3].item); }
     break;
-
-  case 582:
-#line 1983 "sql_yacc.yy"
-    { yyval.item= new Item_func_round(yyvsp[-3].item,yyvsp[-1].item,1); }
+case 588:
+#line 2033 "sql_yacc.yy"
+{ yyval.item= new Item_func_trim(yyvsp[-1].item,yyvsp[-3].item); }
+    break;
+case 589:
+#line 2035 "sql_yacc.yy"
+{ yyval.item= new Item_func_round(yyvsp[-3].item,yyvsp[-1].item,1); }
     break;
-
-  case 583:
-#line 1985 "sql_yacc.yy"
-    {
+case 590:
+#line 2037 "sql_yacc.yy"
+{
 	    if (yyvsp[-1].item_list != NULL)
 	      yyval.item = new Item_sum_udf_str(yyvsp[-3].udf, *yyvsp[-1].item_list);
 	    else
 	      yyval.item = new Item_sum_udf_str(yyvsp[-3].udf);
 	  }
     break;
-
-  case 584:
-#line 1992 "sql_yacc.yy"
-    {
+case 591:
+#line 2044 "sql_yacc.yy"
+{
 	    if (yyvsp[-1].item_list != NULL)
 	      yyval.item = new Item_sum_udf_float(yyvsp[-3].udf, *yyvsp[-1].item_list);
 	    else
 	      yyval.item = new Item_sum_udf_float(yyvsp[-3].udf);
 	  }
     break;
-
-  case 585:
-#line 1999 "sql_yacc.yy"
-    {
+case 592:
+#line 2051 "sql_yacc.yy"
+{
 	    if (yyvsp[-1].item_list != NULL)
 	      yyval.item = new Item_sum_udf_int(yyvsp[-3].udf, *yyvsp[-1].item_list);
 	    else
 	      yyval.item = new Item_sum_udf_int(yyvsp[-3].udf);
 	  }
     break;
-
-  case 586:
-#line 2006 "sql_yacc.yy"
-    {
+case 593:
+#line 2058 "sql_yacc.yy"
+{
 	    if (yyvsp[-1].item_list != NULL)
 	      yyval.item = new Item_func_udf_str(yyvsp[-3].udf, *yyvsp[-1].item_list);
 	    else
 	      yyval.item = new Item_func_udf_str(yyvsp[-3].udf);
 	  }
     break;
-
-  case 587:
-#line 2013 "sql_yacc.yy"
-    {
+case 594:
+#line 2065 "sql_yacc.yy"
+{
 	    if (yyvsp[-1].item_list != NULL)
 	      yyval.item = new Item_func_udf_float(yyvsp[-3].udf, *yyvsp[-1].item_list);
 	    else
 	      yyval.item = new Item_func_udf_float(yyvsp[-3].udf);
 	  }
     break;
-
-  case 588:
-#line 2020 "sql_yacc.yy"
-    {
+case 595:
+#line 2072 "sql_yacc.yy"
+{
 	    if (yyvsp[-1].item_list != NULL)
 	      yyval.item = new Item_func_udf_int(yyvsp[-3].udf, *yyvsp[-1].item_list);
 	    else
 	      yyval.item = new Item_func_udf_int(yyvsp[-3].udf);
 	  }
     break;
-
-  case 589:
-#line 2027 "sql_yacc.yy"
-    { 
+case 596:
+#line 2079 "sql_yacc.yy"
+{ 
             yyval.item= new Item_func_unique_users(yyvsp[-7].item,atoi(yyvsp[-5].lex_str.str),atoi(yyvsp[-3].lex_str.str), * yyvsp[-1].item_list);
 	  }
     break;
-
-  case 590:
-#line 2031 "sql_yacc.yy"
-    {
+case 597:
+#line 2083 "sql_yacc.yy"
+{
 	    yyval.item= new Item_func_unix_timestamp();
 	    current_thd->safe_to_cache_query=0;
 	  }
     break;
-
-  case 591:
-#line 2036 "sql_yacc.yy"
-    { yyval.item= new Item_func_unix_timestamp(yyvsp[-1].item); }
-    break;
-
-  case 592:
-#line 2038 "sql_yacc.yy"
-    { yyval.item= new Item_func_user(); current_thd->safe_to_cache_query=0; }
-    break;
-
-  case 593:
-#line 2040 "sql_yacc.yy"
-    { 
+case 598:
+#line 2088 "sql_yacc.yy"
+{ yyval.item= new Item_func_unix_timestamp(yyvsp[-1].item); }
+    break;
+case 599:
+#line 2090 "sql_yacc.yy"
+{ yyval.item= new Item_func_user(); current_thd->safe_to_cache_query=0; }
+    break;
+case 600:
+#line 2092 "sql_yacc.yy"
+{ 
 	    LEX *lex=Lex;
 	    yyval.item= new Item_func_week(yyvsp[-1].item,new Item_int((char*) "0", 
                                    lex->thd->variables.default_week_format,1));
 	  }
     break;
-
-  case 594:
-#line 2046 "sql_yacc.yy"
-    { yyval.item= new Item_func_week(yyvsp[-3].item,yyvsp[-1].item); }
-    break;
-
-  case 595:
-#line 2048 "sql_yacc.yy"
-    { yyval.item= new Item_func_year(yyvsp[-1].item); }
-    break;
-
-  case 596:
-#line 2050 "sql_yacc.yy"
-    { yyval.item= new Item_func_yearweek(yyvsp[-1].item,new Item_int((char*) "0",0,1)); }
+case 601:
+#line 2098 "sql_yacc.yy"
+{ yyval.item= new Item_func_week(yyvsp[-3].item,yyvsp[-1].item); }
+    break;
+case 602:
+#line 2100 "sql_yacc.yy"
+{ yyval.item= new Item_func_year(yyvsp[-1].item); }
+    break;
+case 603:
+#line 2102 "sql_yacc.yy"
+{ yyval.item= new Item_func_yearweek(yyvsp[-1].item,new Item_int((char*) "0",0,1)); }
     break;
-
-  case 597:
-#line 2052 "sql_yacc.yy"
-    { yyval.item= new Item_func_yearweek(yyvsp[-3].item, yyvsp[-1].item); }
+case 604:
+#line 2104 "sql_yacc.yy"
+{ yyval.item= new Item_func_yearweek(yyvsp[-3].item, yyvsp[-1].item); }
     break;
-
-  case 598:
-#line 2054 "sql_yacc.yy"
-    { 
+case 605:
+#line 2106 "sql_yacc.yy"
+{ 
 	    yyval.item=new Item_func_benchmark(yyvsp[-3].ulong_num,yyvsp[-1].item);
 	    current_thd->safe_to_cache_query=0;
 	  }
     break;
-
-  case 599:
-#line 2059 "sql_yacc.yy"
-    { yyval.item=new Item_extract( yyvsp[-3].interval, yyvsp[-1].item); }
+case 606:
+#line 2111 "sql_yacc.yy"
+{ yyval.item=new Item_extract( yyvsp[-3].interval, yyvsp[-1].item); }
     break;
-
-  case 600:
-#line 2062 "sql_yacc.yy"
-    { yyval.item_list= NULL; }
+case 607:
+#line 2114 "sql_yacc.yy"
+{ yyval.item_list= NULL; }
     break;
-
-  case 601:
-#line 2063 "sql_yacc.yy"
-    { yyval.item_list= yyvsp[0].item_list;}
+case 608:
+#line 2115 "sql_yacc.yy"
+{ yyval.item_list= yyvsp[0].item_list;}
     break;
-
-  case 602:
-#line 2067 "sql_yacc.yy"
-    { yyval.item=new Item_sum_avg(yyvsp[-1].item); }
+case 609:
+#line 2119 "sql_yacc.yy"
+{ yyval.item=new Item_sum_avg(yyvsp[-1].item); }
     break;
-
-  case 603:
-#line 2069 "sql_yacc.yy"
-    { yyval.item=new Item_sum_and(yyvsp[-1].item); }
+case 610:
+#line 2121 "sql_yacc.yy"
+{ yyval.item=new Item_sum_and(yyvsp[-1].item); }
     break;
-
-  case 604:
-#line 2071 "sql_yacc.yy"
-    { yyval.item=new Item_sum_or(yyvsp[-1].item); }
+case 611:
+#line 2123 "sql_yacc.yy"
+{ yyval.item=new Item_sum_or(yyvsp[-1].item); }
     break;
-
-  case 605:
-#line 2073 "sql_yacc.yy"
-    { yyval.item=new Item_sum_count(new Item_int((int32) 0L,1)); }
+case 612:
+#line 2125 "sql_yacc.yy"
+{ yyval.item=new Item_sum_count(new Item_int((int32) 0L,1)); }
     break;
-
-  case 606:
-#line 2075 "sql_yacc.yy"
-    { yyval.item=new Item_sum_count(yyvsp[-1].item); }
+case 613:
+#line 2127 "sql_yacc.yy"
+{ yyval.item=new Item_sum_count(yyvsp[-1].item); }
     break;
-
-  case 607:
-#line 2077 "sql_yacc.yy"
-    { Select->in_sum_expr++; }
+case 614:
+#line 2129 "sql_yacc.yy"
+{ Select->in_sum_expr++; }
     break;
-
-  case 608:
-#line 2079 "sql_yacc.yy"
-    { Select->in_sum_expr--; }
+case 615:
+#line 2131 "sql_yacc.yy"
+{ Select->in_sum_expr--; }
     break;
-
-  case 609:
-#line 2081 "sql_yacc.yy"
-    { yyval.item=new Item_sum_count_distinct(* yyvsp[-2].item_list); }
+case 616:
+#line 2133 "sql_yacc.yy"
+{ yyval.item=new Item_sum_count_distinct(* yyvsp[-2].item_list); }
     break;
-
-  case 610:
-#line 2083 "sql_yacc.yy"
-    { yyval.item= new Item_sum_unique_users(yyvsp[-7].item,atoi(yyvsp[-5].lex_str.str),atoi(yyvsp[-3].lex_str.str),yyvsp[-1].item); }
+case 617:
+#line 2135 "sql_yacc.yy"
+{ yyval.item= new Item_sum_unique_users(yyvsp[-7].item,atoi(yyvsp[-5].lex_str.str),atoi(yyvsp[-3].lex_str.str),yyvsp[-1].item); }
     break;
-
-  case 611:
-#line 2085 "sql_yacc.yy"
-    { yyval.item=new Item_sum_min(yyvsp[-1].item); }
+case 618:
+#line 2137 "sql_yacc.yy"
+{ Select->in_sum_expr++; }
     break;
-
-  case 612:
-#line 2087 "sql_yacc.yy"
-    { yyval.item=new Item_sum_max(yyvsp[-1].item); }
+case 619:
+#line 2139 "sql_yacc.yy"
+{ Select->in_sum_expr--; }
     break;
-
-  case 613:
-#line 2089 "sql_yacc.yy"
-    { yyval.item=new Item_sum_std(yyvsp[-1].item); }
+case 620:
+#line 2141 "sql_yacc.yy"
+{ yyval.item=new Item_sum_ordered_checksum(*yyvsp[-2].item_list); }
     break;
-
-  case 614:
-#line 2091 "sql_yacc.yy"
-    { yyval.item=new Item_sum_sum(yyvsp[-1].item); }
+case 621:
+#line 2143 "sql_yacc.yy"
+{ Select->in_sum_expr++; }
     break;
-
-  case 615:
-#line 2095 "sql_yacc.yy"
-    { Select->in_sum_expr++; }
+case 622:
+#line 2145 "sql_yacc.yy"
+{ Select->in_sum_expr--; }
     break;
-
-  case 616:
-#line 2097 "sql_yacc.yy"
-    {
+case 623:
+#line 2147 "sql_yacc.yy"
+{ yyval.item=new Item_sum_unordered_checksum(*yyvsp[-2].item_list); }
+    break;
+case 624:
+#line 2149 "sql_yacc.yy"
+{ Select->in_sum_expr++; }
+    break;
+case 625:
+#line 2151 "sql_yacc.yy"
+{ Select->in_sum_expr--; }
+    break;
+case 626:
+#line 2153 "sql_yacc.yy"
+{ yyval.item=new Item_func_hash(*yyvsp[-2].item_list); }
+    break;
+case 627:
+#line 2155 "sql_yacc.yy"
+{ yyval.item=new Item_sum_min(yyvsp[-1].item); }
+    break;
+case 628:
+#line 2157 "sql_yacc.yy"
+{ yyval.item=new Item_sum_max(yyvsp[-1].item); }
+    break;
+case 629:
+#line 2159 "sql_yacc.yy"
+{ yyval.item=new Item_sum_std(yyvsp[-1].item); }
+    break;
+case 630:
+#line 2161 "sql_yacc.yy"
+{ yyval.item=new Item_sum_sum(yyvsp[-1].item); }
+    break;
+case 631:
+#line 2165 "sql_yacc.yy"
+{ Select->in_sum_expr++; }
+    break;
+case 632:
+#line 2167 "sql_yacc.yy"
+{
 	  Select->in_sum_expr--;
 	  yyval.item=yyvsp[0].item;
 	}
     break;
-
-  case 617:
-#line 2103 "sql_yacc.yy"
-    { yyval.cast_type=ITEM_CAST_BINARY; }
-    break;
-
-  case 618:
-#line 2104 "sql_yacc.yy"
-    { yyval.cast_type=ITEM_CAST_CHAR; }
-    break;
-
-  case 619:
-#line 2105 "sql_yacc.yy"
-    { yyval.cast_type=ITEM_CAST_SIGNED_INT; }
+case 633:
+#line 2173 "sql_yacc.yy"
+{ yyval.cast_type=ITEM_CAST_BINARY; }
     break;
-
-  case 620:
-#line 2106 "sql_yacc.yy"
-    { yyval.cast_type=ITEM_CAST_SIGNED_INT; }
+case 634:
+#line 2174 "sql_yacc.yy"
+{ yyval.cast_type=ITEM_CAST_CHAR; }
     break;
-
-  case 621:
-#line 2107 "sql_yacc.yy"
-    { yyval.cast_type=ITEM_CAST_UNSIGNED_INT; }
+case 635:
+#line 2175 "sql_yacc.yy"
+{ yyval.cast_type=ITEM_CAST_SIGNED_INT; }
     break;
-
-  case 622:
-#line 2108 "sql_yacc.yy"
-    { yyval.cast_type=ITEM_CAST_UNSIGNED_INT; }
+case 636:
+#line 2176 "sql_yacc.yy"
+{ yyval.cast_type=ITEM_CAST_SIGNED_INT; }
     break;
-
-  case 623:
-#line 2109 "sql_yacc.yy"
-    { yyval.cast_type=ITEM_CAST_DATE; }
+case 637:
+#line 2177 "sql_yacc.yy"
+{ yyval.cast_type=ITEM_CAST_UNSIGNED_INT; }
     break;
-
-  case 624:
-#line 2110 "sql_yacc.yy"
-    { yyval.cast_type=ITEM_CAST_TIME; }
+case 638:
+#line 2178 "sql_yacc.yy"
+{ yyval.cast_type=ITEM_CAST_UNSIGNED_INT; }
     break;
-
-  case 625:
-#line 2111 "sql_yacc.yy"
-    { yyval.cast_type=ITEM_CAST_DATETIME; }
+case 639:
+#line 2179 "sql_yacc.yy"
+{ yyval.cast_type=ITEM_CAST_DATE; }
     break;
-
-  case 626:
-#line 2115 "sql_yacc.yy"
-    { Select->expr_list.push_front(new List<Item>); }
+case 640:
+#line 2180 "sql_yacc.yy"
+{ yyval.cast_type=ITEM_CAST_TIME; }
     break;
-
-  case 627:
-#line 2117 "sql_yacc.yy"
-    { yyval.item_list= Select->expr_list.pop(); }
+case 641:
+#line 2181 "sql_yacc.yy"
+{ yyval.cast_type=ITEM_CAST_DATETIME; }
     break;
-
-  case 628:
-#line 2120 "sql_yacc.yy"
-    { Select->expr_list.head()->push_back(yyvsp[0].item); }
+case 642:
+#line 2185 "sql_yacc.yy"
+{ Select->expr_list.push_front(new List<Item>); }
     break;
-
-  case 629:
-#line 2121 "sql_yacc.yy"
-    { Select->expr_list.head()->push_back(yyvsp[0].item); }
+case 643:
+#line 2187 "sql_yacc.yy"
+{ yyval.item_list= Select->expr_list.pop(); }
     break;
-
-  case 630:
-#line 2124 "sql_yacc.yy"
-    { yyval.item_list= yyvsp[0].item_list; }
+case 644:
+#line 2190 "sql_yacc.yy"
+{ Select->expr_list.head()->push_back(yyvsp[0].item); }
     break;
-
-  case 631:
-#line 2125 "sql_yacc.yy"
-    { yyval.item_list= yyvsp[-1].item_list; }
+case 645:
+#line 2191 "sql_yacc.yy"
+{ Select->expr_list.head()->push_back(yyvsp[0].item); }
     break;
-
-  case 632:
-#line 2128 "sql_yacc.yy"
-    { Select->expr_list.push_front(new List<Item>); }
+case 646:
+#line 2194 "sql_yacc.yy"
+{ yyval.item_list= yyvsp[0].item_list; }
     break;
-
-  case 633:
-#line 2130 "sql_yacc.yy"
-    { yyval.item_list= Select->expr_list.pop(); }
+case 647:
+#line 2195 "sql_yacc.yy"
+{ yyval.item_list= yyvsp[-1].item_list; }
     break;
-
-  case 634:
-#line 2133 "sql_yacc.yy"
-    { Select->expr_list.head()->push_back(yyvsp[0].item); }
+case 648:
+#line 2198 "sql_yacc.yy"
+{ Select->expr_list.push_front(new List<Item>); }
     break;
-
-  case 635:
-#line 2134 "sql_yacc.yy"
-    { Select->expr_list.head()->push_back(yyvsp[0].item); }
+case 649:
+#line 2200 "sql_yacc.yy"
+{ yyval.item_list= Select->expr_list.pop(); }
     break;
-
-  case 636:
-#line 2137 "sql_yacc.yy"
-    { yyval.item= NULL; }
+case 650:
+#line 2203 "sql_yacc.yy"
+{ Select->expr_list.head()->push_back(yyvsp[0].item); }
     break;
-
-  case 637:
-#line 2138 "sql_yacc.yy"
-    { yyval.item= yyvsp[0].item; }
+case 651:
+#line 2204 "sql_yacc.yy"
+{ Select->expr_list.head()->push_back(yyvsp[0].item); }
     break;
-
-  case 638:
-#line 2141 "sql_yacc.yy"
-    { yyval.item= NULL; }
+case 652:
+#line 2207 "sql_yacc.yy"
+{ yyval.item= NULL; }
     break;
-
-  case 639:
-#line 2142 "sql_yacc.yy"
-    { yyval.item= yyvsp[0].item; }
+case 653:
+#line 2208 "sql_yacc.yy"
+{ yyval.item= yyvsp[0].item; }
     break;
-
-  case 640:
-#line 2145 "sql_yacc.yy"
-    { Select->when_list.push_front(new List<Item>); }
+case 654:
+#line 2211 "sql_yacc.yy"
+{ yyval.item= NULL; }
     break;
-
-  case 641:
-#line 2147 "sql_yacc.yy"
-    { yyval.item_list= Select->when_list.pop(); }
+case 655:
+#line 2212 "sql_yacc.yy"
+{ yyval.item= yyvsp[0].item; }
+    break;
+case 656:
+#line 2215 "sql_yacc.yy"
+{ Select->when_list.push_front(new List<Item>); }
+    break;
+case 657:
+#line 2217 "sql_yacc.yy"
+{ yyval.item_list= Select->when_list.pop(); }
     break;
-
-  case 642:
-#line 2151 "sql_yacc.yy"
-    {
+case 658:
+#line 2221 "sql_yacc.yy"
+{
 	    SELECT_LEX *sel=Select;	    
 	    sel->when_list.head()->push_back(yyvsp[-2].item);
 	    sel->when_list.head()->push_back(yyvsp[0].item);
 	}
     break;
-
-  case 643:
-#line 2157 "sql_yacc.yy"
-    {
+case 659:
+#line 2227 "sql_yacc.yy"
+{
 	    SELECT_LEX *sel=Select;
 	    sel->when_list.head()->push_back(yyvsp[-2].item);
 	    sel->when_list.head()->push_back(yyvsp[0].item);
 	  }
     break;
-
-  case 644:
-#line 2164 "sql_yacc.yy"
-    { yyval.item=new Item_string(" ",1); }
+case 660:
+#line 2234 "sql_yacc.yy"
+{ yyval.item=new Item_string(" ",1); }
     break;
-
-  case 645:
-#line 2165 "sql_yacc.yy"
-    { yyval.item=yyvsp[0].item; }
+case 661:
+#line 2235 "sql_yacc.yy"
+{ yyval.item=yyvsp[0].item; }
     break;
-
-  case 646:
-#line 2168 "sql_yacc.yy"
-    { yyval.table_list=yyvsp[-1].table_list; }
+case 662:
+#line 2238 "sql_yacc.yy"
+{ yyval.table_list=yyvsp[-1].table_list; }
     break;
-
-  case 647:
-#line 2169 "sql_yacc.yy"
-    { yyval.table_list=yyvsp[0].table_list; }
+case 663:
+#line 2239 "sql_yacc.yy"
+{ yyval.table_list=yyvsp[0].table_list; }
     break;
-
-  case 648:
-#line 2170 "sql_yacc.yy"
-    { yyval.table_list=yyvsp[0].table_list; }
+case 664:
+#line 2240 "sql_yacc.yy"
+{ yyval.table_list=yyvsp[0].table_list; }
     break;
-
-  case 649:
-#line 2171 "sql_yacc.yy"
-    { yyval.table_list=yyvsp[0].table_list; }
+case 665:
+#line 2241 "sql_yacc.yy"
+{ yyval.table_list=yyvsp[0].table_list; }
     break;
-
-  case 650:
-#line 2173 "sql_yacc.yy"
-    { yyval.table_list=yyvsp[0].table_list ; yyvsp[-2].table_list->next->straight=1; }
+case 666:
+#line 2243 "sql_yacc.yy"
+{ yyval.table_list=yyvsp[0].table_list ; yyvsp[-2].table_list->next->straight=1; }
     break;
-
-  case 651:
-#line 2175 "sql_yacc.yy"
-    { add_join_on(yyvsp[-2].table_list,yyvsp[0].item); yyval.table_list=yyvsp[-2].table_list; }
+case 667:
+#line 2245 "sql_yacc.yy"
+{ add_join_on(yyvsp[-2].table_list,yyvsp[0].item); yyval.table_list=yyvsp[-2].table_list; }
     break;
-
-  case 652:
-#line 2178 "sql_yacc.yy"
-    {
+case 668:
+#line 2248 "sql_yacc.yy"
+{
 	    SELECT_LEX *sel=Select;
 	    sel->db1=yyvsp[-3].table_list->db; sel->table1=yyvsp[-3].table_list->alias;
 	    sel->db2=yyvsp[-1].table_list->db; sel->table2=yyvsp[-1].table_list->alias;
 	  }
     break;
-
-  case 653:
-#line 2184 "sql_yacc.yy"
-    { add_join_on(yyvsp[-5].table_list,yyvsp[-1].item); yyval.table_list=yyvsp[-5].table_list; }
+case 669:
+#line 2254 "sql_yacc.yy"
+{ add_join_on(yyvsp[-5].table_list,yyvsp[-1].item); yyval.table_list=yyvsp[-5].table_list; }
     break;
-
-  case 654:
-#line 2187 "sql_yacc.yy"
-    { add_join_on(yyvsp[-2].table_list,yyvsp[0].item); yyvsp[-2].table_list->outer_join|=JOIN_TYPE_LEFT; yyval.table_list=yyvsp[-2].table_list; }
+case 670:
+#line 2257 "sql_yacc.yy"
+{ add_join_on(yyvsp[-2].table_list,yyvsp[0].item); yyvsp[-2].table_list->outer_join|=JOIN_TYPE_LEFT; yyval.table_list=yyvsp[-2].table_list; }
     break;
-
-  case 655:
-#line 2189 "sql_yacc.yy"
-    {
+case 671:
+#line 2259 "sql_yacc.yy"
+{
 	    SELECT_LEX *sel=Select;
 	    sel->db1=yyvsp[-4].table_list->db; sel->table1=yyvsp[-4].table_list->alias;
 	    sel->db2=yyvsp[0].table_list->db; sel->table2=yyvsp[0].table_list->alias;
 	  }
     break;
-
-  case 656:
-#line 2195 "sql_yacc.yy"
-    { add_join_on(yyvsp[-5].table_list,yyvsp[-1].item); yyvsp[-5].table_list->outer_join|=JOIN_TYPE_LEFT; yyval.table_list=yyvsp[-5].table_list; }
+case 672:
+#line 2265 "sql_yacc.yy"
+{ add_join_on(yyvsp[-5].table_list,yyvsp[-1].item); yyvsp[-5].table_list->outer_join|=JOIN_TYPE_LEFT; yyval.table_list=yyvsp[-5].table_list; }
     break;
-
-  case 657:
-#line 2197 "sql_yacc.yy"
-    {
+case 673:
+#line 2267 "sql_yacc.yy"
+{
 	    add_join_natural(yyvsp[-5].table_list,yyvsp[-5].table_list->next);
 	    yyvsp[-5].table_list->next->outer_join|=JOIN_TYPE_LEFT;
 	    yyval.table_list=yyvsp[0].table_list;
 	  }
     break;
-
-  case 658:
-#line 2203 "sql_yacc.yy"
-    { add_join_on(yyvsp[-6].table_list,yyvsp[0].item); yyvsp[-6].table_list->outer_join|=JOIN_TYPE_RIGHT; yyval.table_list=yyvsp[-2].table_list; }
+case 674:
+#line 2273 "sql_yacc.yy"
+{ add_join_on(yyvsp[-6].table_list,yyvsp[0].item); yyvsp[-6].table_list->outer_join|=JOIN_TYPE_RIGHT; yyval.table_list=yyvsp[-2].table_list; }
     break;
-
-  case 659:
-#line 2205 "sql_yacc.yy"
-    {
+case 675:
+#line 2275 "sql_yacc.yy"
+{
 	    SELECT_LEX *sel=Select;
 	    sel->db1=yyvsp[-4].table_list->db; sel->table1=yyvsp[-4].table_list->alias;
 	    sel->db2=yyvsp[0].table_list->db; sel->table2=yyvsp[0].table_list->alias;
 	  }
     break;
-
-  case 660:
-#line 2211 "sql_yacc.yy"
-    { add_join_on(yyvsp[-9].table_list,yyvsp[-1].item); yyvsp[-9].table_list->outer_join|=JOIN_TYPE_RIGHT; yyval.table_list=yyvsp[-5].table_list; }
+case 676:
+#line 2281 "sql_yacc.yy"
+{ add_join_on(yyvsp[-9].table_list,yyvsp[-1].item); yyvsp[-9].table_list->outer_join|=JOIN_TYPE_RIGHT; yyval.table_list=yyvsp[-5].table_list; }
     break;
-
-  case 661:
-#line 2213 "sql_yacc.yy"
-    {
+case 677:
+#line 2283 "sql_yacc.yy"
+{
 	    add_join_natural(yyvsp[-5].table_list->next,yyvsp[-5].table_list);
 	    yyvsp[-5].table_list->outer_join|=JOIN_TYPE_RIGHT;
 	    yyval.table_list=yyvsp[0].table_list;
 	  }
     break;
-
-  case 662:
-#line 2219 "sql_yacc.yy"
-    { add_join_natural(yyvsp[-3].table_list,yyvsp[-3].table_list->next); yyval.table_list=yyvsp[0].table_list; }
-    break;
-
-  case 663:
-#line 2222 "sql_yacc.yy"
-    {}
-    break;
-
-  case 664:
-#line 2223 "sql_yacc.yy"
-    {}
-    break;
-
-  case 665:
-#line 2224 "sql_yacc.yy"
-    {}
+case 678:
+#line 2289 "sql_yacc.yy"
+{ add_join_natural(yyvsp[-3].table_list,yyvsp[-3].table_list->next); yyval.table_list=yyvsp[0].table_list; }
+    break;
+case 679:
+#line 2292 "sql_yacc.yy"
+{}
+    break;
+case 680:
+#line 2293 "sql_yacc.yy"
+{}
+    break;
+case 681:
+#line 2294 "sql_yacc.yy"
+{}
     break;
-
-  case 666:
-#line 2228 "sql_yacc.yy"
-    {
+case 682:
+#line 2298 "sql_yacc.yy"
+{
 	  SELECT_LEX *sel=Select;
 	  sel->use_index_ptr=sel->ignore_index_ptr=0;
 	  sel->table_join_options= 0;
 	}
     break;
-
-  case 667:
-#line 2234 "sql_yacc.yy"
-    {
+case 683:
+#line 2304 "sql_yacc.yy"
+{
 	  SELECT_LEX *sel=Select;
 	  if (!(yyval.table_list=add_table_to_list(yyvsp[-2].table, yyvsp[-1].lex_str_ptr, sel->table_join_options,
 				     TL_UNLOCK, sel->use_index_ptr,
@@ -12290,195 +11316,162 @@
 	    YYABORT;
 	}
     break;
-
-  case 668:
-#line 2242 "sql_yacc.yy"
-    { add_join_on(yyvsp[-3].table_list,yyvsp[-1].item); yyvsp[-3].table_list->outer_join|=JOIN_TYPE_LEFT; yyval.table_list=yyvsp[-3].table_list; }
-    break;
-
-  case 669:
-#line 2245 "sql_yacc.yy"
-    {}
-    break;
-
-  case 670:
-#line 2246 "sql_yacc.yy"
-    {}
-    break;
-
-  case 671:
-#line 2249 "sql_yacc.yy"
-    {}
+case 684:
+#line 2312 "sql_yacc.yy"
+{ add_join_on(yyvsp[-3].table_list,yyvsp[-1].item); yyvsp[-3].table_list->outer_join|=JOIN_TYPE_LEFT; yyval.table_list=yyvsp[-3].table_list; }
+    break;
+case 685:
+#line 2315 "sql_yacc.yy"
+{}
+    break;
+case 686:
+#line 2316 "sql_yacc.yy"
+{}
+    break;
+case 687:
+#line 2319 "sql_yacc.yy"
+{}
     break;
-
-  case 672:
-#line 2251 "sql_yacc.yy"
-    {
+case 688:
+#line 2321 "sql_yacc.yy"
+{
 	    SELECT_LEX *sel=Select;
 	    sel->use_index= *yyvsp[0].string_list;
 	    sel->use_index_ptr= &sel->use_index;
 	  }
     break;
-
-  case 673:
-#line 2257 "sql_yacc.yy"
-    {
+case 689:
+#line 2327 "sql_yacc.yy"
+{
 	    SELECT_LEX *sel=Select;
 	    sel->use_index= *yyvsp[0].string_list;
 	    sel->use_index_ptr= &sel->use_index;
 	    sel->table_join_options|= TL_OPTION_FORCE_INDEX;
 	  }
     break;
-
-  case 674:
-#line 2264 "sql_yacc.yy"
-    {
+case 690:
+#line 2334 "sql_yacc.yy"
+{
 	    SELECT_LEX *sel=Select;
 	    sel->ignore_index= *yyvsp[0].string_list;
 	    sel->ignore_index_ptr= &sel->ignore_index;
 	  }
     break;
-
-  case 675:
-#line 2272 "sql_yacc.yy"
-    { Select->interval_list.empty(); }
-    break;
-
-  case 676:
-#line 2273 "sql_yacc.yy"
-    { yyval.string_list= &Select->interval_list; }
-    break;
-
-  case 677:
-#line 2277 "sql_yacc.yy"
-    { Select->interval_list.push_back(new String((const char*) yyvsp[0].lex_str.str,yyvsp[0].lex_str.length)); }
-    break;
-
-  case 678:
-#line 2279 "sql_yacc.yy"
-    { Select->interval_list.push_back(new String((const char*) yyvsp[0].lex_str.str,yyvsp[0].lex_str.length)); }
+case 691:
+#line 2342 "sql_yacc.yy"
+{ Select->interval_list.empty(); }
+    break;
+case 692:
+#line 2343 "sql_yacc.yy"
+{ yyval.string_list= &Select->interval_list; }
+    break;
+case 693:
+#line 2347 "sql_yacc.yy"
+{ Select->interval_list.push_back(new String((const char*) yyvsp[0].lex_str.str,yyvsp[0].lex_str.length)); }
+    break;
+case 694:
+#line 2349 "sql_yacc.yy"
+{ Select->interval_list.push_back(new String((const char*) yyvsp[0].lex_str.str,yyvsp[0].lex_str.length)); }
     break;
-
-  case 679:
-#line 2281 "sql_yacc.yy"
-    { Select->interval_list.push_back(new String("PRIMARY",7)); }
+case 695:
+#line 2351 "sql_yacc.yy"
+{ Select->interval_list.push_back(new String("PRIMARY",7)); }
     break;
-
-  case 680:
-#line 2285 "sql_yacc.yy"
-    {
+case 696:
+#line 2355 "sql_yacc.yy"
+{
 	    SELECT_LEX *sel=Select;
 	    if (!(yyval.item= new Item_func_eq(new Item_field(sel->db1,sel->table1, yyvsp[0].lex_str.str), new Item_field(sel->db2,sel->table2,yyvsp[0].lex_str.str))))
 	      YYABORT;
 	  }
     break;
-
-  case 681:
-#line 2291 "sql_yacc.yy"
-    {
+case 697:
+#line 2361 "sql_yacc.yy"
+{
 	    SELECT_LEX *sel=Select;
 	    if (!(yyval.item= new Item_cond_and(new Item_func_eq(new Item_field(sel->db1,sel->table1,yyvsp[0].lex_str.str), new Item_field(sel->db2,sel->table2,yyvsp[0].lex_str.str)), yyvsp[-2].item)))
 	      YYABORT;
 	  }
     break;
-
-  case 682:
-#line 2298 "sql_yacc.yy"
-    { yyval.interval=INTERVAL_DAY_HOUR; }
-    break;
-
-  case 683:
-#line 2299 "sql_yacc.yy"
-    { yyval.interval=INTERVAL_DAY_MINUTE; }
-    break;
-
-  case 684:
-#line 2300 "sql_yacc.yy"
-    { yyval.interval=INTERVAL_DAY_SECOND; }
-    break;
-
-  case 685:
-#line 2301 "sql_yacc.yy"
-    { yyval.interval=INTERVAL_DAY; }
-    break;
-
-  case 686:
-#line 2302 "sql_yacc.yy"
-    { yyval.interval=INTERVAL_HOUR_MINUTE; }
-    break;
-
-  case 687:
-#line 2303 "sql_yacc.yy"
-    { yyval.interval=INTERVAL_HOUR_SECOND; }
+case 698:
+#line 2368 "sql_yacc.yy"
+{ yyval.interval=INTERVAL_DAY_HOUR; }
     break;
-
-  case 688:
-#line 2304 "sql_yacc.yy"
-    { yyval.interval=INTERVAL_HOUR; }
+case 699:
+#line 2369 "sql_yacc.yy"
+{ yyval.interval=INTERVAL_DAY_MINUTE; }
     break;
-
-  case 689:
-#line 2305 "sql_yacc.yy"
-    { yyval.interval=INTERVAL_MINUTE_SECOND; }
+case 700:
+#line 2370 "sql_yacc.yy"
+{ yyval.interval=INTERVAL_DAY_SECOND; }
     break;
-
-  case 690:
-#line 2306 "sql_yacc.yy"
-    { yyval.interval=INTERVAL_MINUTE; }
+case 701:
+#line 2371 "sql_yacc.yy"
+{ yyval.interval=INTERVAL_DAY; }
     break;
-
-  case 691:
-#line 2307 "sql_yacc.yy"
-    { yyval.interval=INTERVAL_MONTH; }
+case 702:
+#line 2372 "sql_yacc.yy"
+{ yyval.interval=INTERVAL_HOUR_MINUTE; }
     break;
-
-  case 692:
-#line 2308 "sql_yacc.yy"
-    { yyval.interval=INTERVAL_SECOND; }
+case 703:
+#line 2373 "sql_yacc.yy"
+{ yyval.interval=INTERVAL_HOUR_SECOND; }
     break;
-
-  case 693:
-#line 2309 "sql_yacc.yy"
-    { yyval.interval=INTERVAL_YEAR_MONTH; }
+case 704:
+#line 2374 "sql_yacc.yy"
+{ yyval.interval=INTERVAL_HOUR; }
     break;
-
-  case 694:
-#line 2310 "sql_yacc.yy"
-    { yyval.interval=INTERVAL_YEAR; }
+case 705:
+#line 2375 "sql_yacc.yy"
+{ yyval.interval=INTERVAL_MINUTE_SECOND; }
     break;
-
-  case 698:
-#line 2318 "sql_yacc.yy"
-    { yyval.lex_str_ptr=0; }
+case 706:
+#line 2376 "sql_yacc.yy"
+{ yyval.interval=INTERVAL_MINUTE; }
     break;
-
-  case 699:
-#line 2320 "sql_yacc.yy"
-    { yyval.lex_str_ptr= (LEX_STRING*) sql_memdup(&yyvsp[0].lex_str,sizeof(LEX_STRING)); }
+case 707:
+#line 2377 "sql_yacc.yy"
+{ yyval.interval=INTERVAL_MONTH; }
     break;
-
-  case 702:
-#line 2328 "sql_yacc.yy"
-    { Select->where= 0; }
+case 708:
+#line 2378 "sql_yacc.yy"
+{ yyval.interval=INTERVAL_SECOND; }
+    break;
+case 709:
+#line 2379 "sql_yacc.yy"
+{ yyval.interval=INTERVAL_YEAR_MONTH; }
+    break;
+case 710:
+#line 2380 "sql_yacc.yy"
+{ yyval.interval=INTERVAL_YEAR; }
+    break;
+case 714:
+#line 2388 "sql_yacc.yy"
+{ yyval.lex_str_ptr=0; }
+    break;
+case 715:
+#line 2390 "sql_yacc.yy"
+{ yyval.lex_str_ptr= (LEX_STRING*) sql_memdup(&yyvsp[0].lex_str,sizeof(LEX_STRING)); }
+    break;
+case 718:
+#line 2398 "sql_yacc.yy"
+{ Select->where= 0; }
     break;
-
-  case 703:
-#line 2330 "sql_yacc.yy"
-    {
+case 719:
+#line 2400 "sql_yacc.yy"
+{
 	    Select->where= yyvsp[0].item;
 	    if (yyvsp[0].item)
 	      yyvsp[0].item->top_level_item();
 	  }
     break;
-
-  case 705:
-#line 2339 "sql_yacc.yy"
-    { Select->create_refs=1; }
+case 721:
+#line 2409 "sql_yacc.yy"
+{ Select->create_refs=1; }
     break;
-
-  case 706:
-#line 2340 "sql_yacc.yy"
-    {
+case 722:
+#line 2410 "sql_yacc.yy"
+{
 	  SELECT_LEX *sel=Select;
 	  sel->having= yyvsp[0].item;
 	  sel->create_refs=0;
@@ -12486,53 +11479,45 @@
 	    yyvsp[0].item->top_level_item();
 	}
     break;
-
-  case 707:
-#line 2350 "sql_yacc.yy"
-    { yyval.simple_string= yyvsp[0].lex_str.str; }
+case 723:
+#line 2420 "sql_yacc.yy"
+{ yyval.simple_string= yyvsp[0].lex_str.str; }
     break;
-
-  case 708:
-#line 2351 "sql_yacc.yy"
-    { yyval.simple_string= (char*) "\\"; }
+case 724:
+#line 2421 "sql_yacc.yy"
+{ yyval.simple_string= (char*) "\\"; }
     break;
-
-  case 711:
-#line 2364 "sql_yacc.yy"
-    { if (add_group_to_list(yyvsp[-1].item,(bool) yyvsp[0].num)) YYABORT; }
+case 727:
+#line 2434 "sql_yacc.yy"
+{ if (add_group_to_list(yyvsp[-1].item,(bool) yyvsp[0].num)) YYABORT; }
     break;
-
-  case 712:
-#line 2366 "sql_yacc.yy"
-    { if (add_group_to_list(yyvsp[-1].item,(bool) yyvsp[0].num)) YYABORT; }
+case 728:
+#line 2436 "sql_yacc.yy"
+{ if (add_group_to_list(yyvsp[-1].item,(bool) yyvsp[0].num)) YYABORT; }
     break;
-
-  case 713:
-#line 2369 "sql_yacc.yy"
-    {}
+case 729:
+#line 2439 "sql_yacc.yy"
+{}
     break;
-
-  case 714:
-#line 2371 "sql_yacc.yy"
-    {
+case 730:
+#line 2441 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    net_printf(&lex->thd->net, ER_NOT_SUPPORTED_YET, "CUBE");
 	    YYABORT;	/* To be deleted in 4.1 */
 	  }
     break;
-
-  case 715:
-#line 2377 "sql_yacc.yy"
-    {
+case 731:
+#line 2447 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    net_printf(&lex->thd->net, ER_NOT_SUPPORTED_YET, "ROLLUP");
 	    YYABORT;	/* To be deleted in 4.1 */
 	  }
     break;
-
-  case 718:
-#line 2394 "sql_yacc.yy"
-    { 
+case 734:
+#line 2464 "sql_yacc.yy"
+{ 
 	  LEX *lex=Lex;
 	  if (lex->select->olap != UNSPECIFIED_OLAP_TYPE)
 	  {
@@ -12544,40 +11529,33 @@
 	  lex->select->sort_default=1;
 	}
     break;
-
-  case 720:
-#line 2408 "sql_yacc.yy"
-    { if (add_order_to_list(yyvsp[-1].item,(bool) yyvsp[0].num)) YYABORT; }
+case 736:
+#line 2478 "sql_yacc.yy"
+{ if (add_order_to_list(yyvsp[-1].item,(bool) yyvsp[0].num)) YYABORT; }
+    break;
+case 737:
+#line 2480 "sql_yacc.yy"
+{ if (add_order_to_list(yyvsp[-1].item,(bool) yyvsp[0].num)) YYABORT; }
+    break;
+case 738:
+#line 2483 "sql_yacc.yy"
+{ yyval.num =  1; }
+    break;
+case 739:
+#line 2484 "sql_yacc.yy"
+{ yyval.num =1; }
+    break;
+case 740:
+#line 2485 "sql_yacc.yy"
+{ yyval.num =0; }
+    break;
+case 741:
+#line 2489 "sql_yacc.yy"
+{}
     break;
-
-  case 721:
-#line 2410 "sql_yacc.yy"
-    { if (add_order_to_list(yyvsp[-1].item,(bool) yyvsp[0].num)) YYABORT; }
-    break;
-
-  case 722:
-#line 2413 "sql_yacc.yy"
-    { yyval.num =  1; }
-    break;
-
-  case 723:
-#line 2414 "sql_yacc.yy"
-    { yyval.num =1; }
-    break;
-
-  case 724:
-#line 2415 "sql_yacc.yy"
-    { yyval.num =0; }
-    break;
-
-  case 725:
-#line 2419 "sql_yacc.yy"
-    {}
-    break;
-
-  case 726:
-#line 2421 "sql_yacc.yy"
-    {
+case 742:
+#line 2491 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    if (lex->select->olap != UNSPECIFIED_OLAP_TYPE)
 	    {
@@ -12587,105 +11565,88 @@
 	    }
 	  }
     break;
-
-  case 727:
-#line 2431 "sql_yacc.yy"
-    {}
+case 743:
+#line 2501 "sql_yacc.yy"
+{}
     break;
-
-  case 728:
-#line 2436 "sql_yacc.yy"
-    {
+case 744:
+#line 2506 "sql_yacc.yy"
+{
             SELECT_LEX *sel= Select;
             sel->select_limit= yyvsp[0].ulong_num;
             sel->offset_limit= 0L;
 	  }
     break;
-
-  case 729:
-#line 2442 "sql_yacc.yy"
-    {
+case 745:
+#line 2512 "sql_yacc.yy"
+{
 	    SELECT_LEX *sel= Select;
 	    sel->select_limit= yyvsp[0].ulong_num;
 	    sel->offset_limit= yyvsp[-2].ulong_num;
 	  }
     break;
-
-  case 730:
-#line 2448 "sql_yacc.yy"
-    {
+case 746:
+#line 2518 "sql_yacc.yy"
+{
 	    SELECT_LEX *sel= Select;
 	    sel->select_limit= yyvsp[-2].ulong_num;
 	    sel->offset_limit= yyvsp[0].ulong_num;
 	  }
     break;
-
-  case 731:
-#line 2457 "sql_yacc.yy"
-    {
+case 747:
+#line 2527 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  lex->select->select_limit= HA_POS_ERROR;
 	}
     break;
-
-  case 732:
-#line 2462 "sql_yacc.yy"
-    { Select->select_limit= (ha_rows) yyvsp[0].ulonglong_number; }
-    break;
-
-  case 733:
-#line 2465 "sql_yacc.yy"
-    { yyval.ulong_num= strtoul(yyvsp[0].lex_str.str,NULL,10); }
-    break;
-
-  case 734:
-#line 2466 "sql_yacc.yy"
-    { yyval.ulong_num= (ulong) strtoll(yyvsp[0].lex_str.str,NULL,10); }
-    break;
-
-  case 735:
-#line 2467 "sql_yacc.yy"
-    { yyval.ulong_num= (ulong) strtoull(yyvsp[0].lex_str.str,NULL,10); }
-    break;
-
-  case 736:
-#line 2468 "sql_yacc.yy"
-    { yyval.ulong_num= strtoul(yyvsp[0].lex_str.str,NULL,10); }
-    break;
-
-  case 737:
-#line 2469 "sql_yacc.yy"
-    { yyval.ulong_num= strtoul(yyvsp[0].lex_str.str,NULL,10); }
-    break;
-
-  case 738:
-#line 2472 "sql_yacc.yy"
-    { yyval.ulonglong_number= (ulonglong) strtoul(yyvsp[0].lex_str.str,NULL,10); }
-    break;
-
-  case 739:
-#line 2473 "sql_yacc.yy"
-    { yyval.ulonglong_number= strtoull(yyvsp[0].lex_str.str,NULL,10); }
-    break;
-
-  case 740:
-#line 2474 "sql_yacc.yy"
-    { yyval.ulonglong_number= (ulonglong) strtoll(yyvsp[0].lex_str.str,NULL,10); }
-    break;
-
-  case 741:
-#line 2475 "sql_yacc.yy"
-    { yyval.ulonglong_number= strtoull(yyvsp[0].lex_str.str,NULL,10); }
-    break;
-
-  case 742:
-#line 2476 "sql_yacc.yy"
-    { yyval.ulonglong_number= strtoull(yyvsp[0].lex_str.str,NULL,10); }
+case 748:
+#line 2532 "sql_yacc.yy"
+{ Select->select_limit= (ha_rows) yyvsp[0].ulonglong_number; }
+    break;
+case 749:
+#line 2535 "sql_yacc.yy"
+{ yyval.ulong_num= strtoul(yyvsp[0].lex_str.str,NULL,10); }
+    break;
+case 750:
+#line 2536 "sql_yacc.yy"
+{ yyval.ulong_num= (ulong) strtoll(yyvsp[0].lex_str.str,NULL,10); }
+    break;
+case 751:
+#line 2537 "sql_yacc.yy"
+{ yyval.ulong_num= (ulong) strtoull(yyvsp[0].lex_str.str,NULL,10); }
+    break;
+case 752:
+#line 2538 "sql_yacc.yy"
+{ yyval.ulong_num= strtoul(yyvsp[0].lex_str.str,NULL,10); }
+    break;
+case 753:
+#line 2539 "sql_yacc.yy"
+{ yyval.ulong_num= strtoul(yyvsp[0].lex_str.str,NULL,10); }
+    break;
+case 754:
+#line 2542 "sql_yacc.yy"
+{ yyval.ulonglong_number= (ulonglong) strtoul(yyvsp[0].lex_str.str,NULL,10); }
+    break;
+case 755:
+#line 2543 "sql_yacc.yy"
+{ yyval.ulonglong_number= strtoull(yyvsp[0].lex_str.str,NULL,10); }
+    break;
+case 756:
+#line 2544 "sql_yacc.yy"
+{ yyval.ulonglong_number= (ulonglong) strtoll(yyvsp[0].lex_str.str,NULL,10); }
+    break;
+case 757:
+#line 2545 "sql_yacc.yy"
+{ yyval.ulonglong_number= strtoull(yyvsp[0].lex_str.str,NULL,10); }
+    break;
+case 758:
+#line 2546 "sql_yacc.yy"
+{ yyval.ulonglong_number= strtoull(yyvsp[0].lex_str.str,NULL,10); }
     break;
-
-  case 744:
-#line 2481 "sql_yacc.yy"
-    {
+case 760:
+#line 2551 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->proc_list.elements=0;
 	    lex->proc_list.first=0;
@@ -12695,20 +11656,17 @@
 	    current_thd->safe_to_cache_query=0;
 	  }
     break;
-
-  case 746:
-#line 2494 "sql_yacc.yy"
-    {}
-    break;
-
-  case 747:
-#line 2495 "sql_yacc.yy"
-    {}
+case 762:
+#line 2564 "sql_yacc.yy"
+{}
+    break;
+case 763:
+#line 2565 "sql_yacc.yy"
+{}
     break;
-
-  case 750:
-#line 2503 "sql_yacc.yy"
-    {
+case 766:
+#line 2573 "sql_yacc.yy"
+{
 	    LEX *lex= Lex;
 	    if (add_proc_to_list(lex->thd, yyvsp[0].item))
 	      YYABORT;
@@ -12716,60 +11674,53 @@
 	      yyvsp[0].item->set_name(yyvsp[-1].simple_string,(uint) ((char*) lex->tok_end - yyvsp[-1].simple_string));
 	  }
     break;
-
-  case 751:
-#line 2513 "sql_yacc.yy"
-    {
+case 767:
+#line 2583 "sql_yacc.yy"
+{
 	  THD *thd= current_thd;
 	  thd->safe_to_cache_query= 0; 
 	  if (!(thd->lex.exchange= new sql_exchange(yyvsp[0].lex_str.str,0)))
 	    YYABORT;
 	}
     break;
-
-  case 753:
-#line 2521 "sql_yacc.yy"
-    {
+case 769:
+#line 2591 "sql_yacc.yy"
+{
 	  THD *thd= current_thd;
 	  thd->safe_to_cache_query= 0;
 	  if (!(thd->lex.exchange= new sql_exchange(yyvsp[0].lex_str.str,1)))
 	    YYABORT;
 	}
     break;
-
-  case 754:
-#line 2533 "sql_yacc.yy"
-    {
+case 770:
+#line 2603 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  lex->sql_command = SQLCOM_DO;
 	  if (!(lex->insert_list = new List_item))
 	    YYABORT;
 	}
     break;
-
-  case 755:
-#line 2540 "sql_yacc.yy"
-    {}
+case 771:
+#line 2610 "sql_yacc.yy"
+{}
     break;
-
-  case 756:
-#line 2549 "sql_yacc.yy"
-    {
+case 772:
+#line 2619 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  lex->sql_command = SQLCOM_DROP_TABLE;
 	  lex->drop_temporary= yyvsp[-4].num;
 	  lex->drop_if_exists= yyvsp[-2].num;
 	}
     break;
-
-  case 757:
-#line 2555 "sql_yacc.yy"
-    {}
+case 773:
+#line 2625 "sql_yacc.yy"
+{}
     break;
-
-  case 758:
-#line 2556 "sql_yacc.yy"
-    {
+case 774:
+#line 2626 "sql_yacc.yy"
+{
 	     LEX *lex=Lex;
 	     lex->sql_command= SQLCOM_DROP_INDEX;
 	     lex->drop_list.empty();
@@ -12779,297 +11730,248 @@
 	      YYABORT;
 	  }
     break;
-
-  case 759:
-#line 2566 "sql_yacc.yy"
-    {
+case 775:
+#line 2636 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->sql_command= SQLCOM_DROP_DB;
 	    lex->drop_if_exists=yyvsp[-1].num;
 	    lex->name=yyvsp[0].lex_str.str;
 	 }
     break;
-
-  case 760:
-#line 2573 "sql_yacc.yy"
-    {
+case 776:
+#line 2643 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->sql_command = SQLCOM_DROP_FUNCTION;
 	    lex->udf.name=yyvsp[0].lex_str.str;
 	  }
     break;
-
-  case 763:
-#line 2586 "sql_yacc.yy"
-    { if (!add_table_to_list(yyvsp[0].table,NULL,TL_OPTION_UPDATING)) YYABORT; }
-    break;
-
-  case 764:
-#line 2589 "sql_yacc.yy"
-    { yyval.num= 0; }
-    break;
-
-  case 765:
-#line 2590 "sql_yacc.yy"
-    { yyval.num= 1; }
-    break;
-
-  case 766:
-#line 2594 "sql_yacc.yy"
-    { yyval.num= 0; }
-    break;
-
-  case 767:
-#line 2595 "sql_yacc.yy"
-    { yyval.num= 1; }
+case 779:
+#line 2656 "sql_yacc.yy"
+{ if (!add_table_to_list(yyvsp[0].table,NULL,TL_OPTION_UPDATING)) YYABORT; }
+    break;
+case 780:
+#line 2659 "sql_yacc.yy"
+{ yyval.num= 0; }
+    break;
+case 781:
+#line 2660 "sql_yacc.yy"
+{ yyval.num= 1; }
+    break;
+case 782:
+#line 2664 "sql_yacc.yy"
+{ yyval.num= 0; }
+    break;
+case 783:
+#line 2665 "sql_yacc.yy"
+{ yyval.num= 1; }
     break;
-
-  case 768:
-#line 2602 "sql_yacc.yy"
-    { Lex->sql_command = SQLCOM_INSERT; }
+case 784:
+#line 2672 "sql_yacc.yy"
+{ Lex->sql_command = SQLCOM_INSERT; }
     break;
-
-  case 769:
-#line 2604 "sql_yacc.yy"
-    {
+case 785:
+#line 2674 "sql_yacc.yy"
+{
 	  set_lock_for_tables(yyvsp[-2].lock_type);
 	  Lex->select= &Lex->select_lex;
 	}
     break;
-
-  case 770:
-#line 2609 "sql_yacc.yy"
-    {}
+case 786:
+#line 2679 "sql_yacc.yy"
+{}
     break;
-
-  case 771:
-#line 2614 "sql_yacc.yy"
-    {
+case 787:
+#line 2684 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  lex->sql_command = SQLCOM_REPLACE;
 	  lex->duplicates= DUP_REPLACE;
 	}
     break;
-
-  case 772:
-#line 2620 "sql_yacc.yy"
-    {
+case 788:
+#line 2690 "sql_yacc.yy"
+{
 	  set_lock_for_tables(yyvsp[-1].lock_type);
           Lex->select= &Lex->select_lex;
 	}
     break;
-
-  case 773:
-#line 2625 "sql_yacc.yy"
-    {}
-    break;
-
-  case 774:
-#line 2629 "sql_yacc.yy"
-    { yyval.lock_type= TL_WRITE_CONCURRENT_INSERT; }
-    break;
-
-  case 775:
-#line 2630 "sql_yacc.yy"
-    { yyval.lock_type= TL_WRITE_LOW_PRIORITY; }
-    break;
-
-  case 776:
-#line 2631 "sql_yacc.yy"
-    { yyval.lock_type= TL_WRITE_DELAYED; }
-    break;
-
-  case 777:
-#line 2632 "sql_yacc.yy"
-    { yyval.lock_type= TL_WRITE; }
-    break;
-
-  case 778:
-#line 2636 "sql_yacc.yy"
-    { yyval.lock_type= yyvsp[0].lock_type; }
-    break;
-
-  case 779:
-#line 2637 "sql_yacc.yy"
-    { yyval.lock_type= TL_WRITE_DELAYED; }
+case 789:
+#line 2695 "sql_yacc.yy"
+{}
     break;
-
-  case 780:
-#line 2640 "sql_yacc.yy"
-    {}
+case 790:
+#line 2699 "sql_yacc.yy"
+{ yyval.lock_type= TL_WRITE_CONCURRENT_INSERT; }
     break;
-
-  case 781:
-#line 2641 "sql_yacc.yy"
-    {}
+case 791:
+#line 2700 "sql_yacc.yy"
+{ yyval.lock_type= TL_WRITE_LOW_PRIORITY; }
+    break;
+case 792:
+#line 2701 "sql_yacc.yy"
+{ yyval.lock_type= TL_WRITE_DELAYED; }
+    break;
+case 793:
+#line 2702 "sql_yacc.yy"
+{ yyval.lock_type= TL_WRITE; }
+    break;
+case 794:
+#line 2706 "sql_yacc.yy"
+{ yyval.lock_type= yyvsp[0].lock_type; }
+    break;
+case 795:
+#line 2707 "sql_yacc.yy"
+{ yyval.lock_type= TL_WRITE_DELAYED; }
+    break;
+case 796:
+#line 2710 "sql_yacc.yy"
+{}
+    break;
+case 797:
+#line 2711 "sql_yacc.yy"
+{}
     break;
-
-  case 782:
-#line 2645 "sql_yacc.yy"
-    {
+case 798:
+#line 2715 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  lex->field_list.empty();
 	  lex->many_values.empty();
 	  lex->insert_list=0;
 	}
     break;
-
-  case 783:
-#line 2653 "sql_yacc.yy"
-    {}
-    break;
-
-  case 784:
-#line 2654 "sql_yacc.yy"
-    {}
-    break;
-
-  case 785:
-#line 2655 "sql_yacc.yy"
-    {}
+case 799:
+#line 2723 "sql_yacc.yy"
+{}
+    break;
+case 800:
+#line 2724 "sql_yacc.yy"
+{}
+    break;
+case 801:
+#line 2725 "sql_yacc.yy"
+{}
     break;
-
-  case 786:
-#line 2657 "sql_yacc.yy"
-    {
+case 802:
+#line 2727 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    if (!(lex->insert_list = new List_item) ||
 		lex->many_values.push_back(lex->insert_list))
 	      YYABORT;
 	   }
     break;
-
-  case 788:
-#line 2666 "sql_yacc.yy"
-    { }
-    break;
-
-  case 789:
-#line 2667 "sql_yacc.yy"
-    { }
-    break;
-
-  case 790:
-#line 2668 "sql_yacc.yy"
-    { }
+case 804:
+#line 2736 "sql_yacc.yy"
+{ }
+    break;
+case 805:
+#line 2737 "sql_yacc.yy"
+{ }
     break;
-
-  case 791:
-#line 2671 "sql_yacc.yy"
-    { Lex->field_list.push_back(yyvsp[0].item); }
+case 806:
+#line 2738 "sql_yacc.yy"
+{ }
     break;
-
-  case 792:
-#line 2672 "sql_yacc.yy"
-    { Lex->field_list.push_back(yyvsp[0].item); }
+case 807:
+#line 2741 "sql_yacc.yy"
+{ Lex->field_list.push_back(yyvsp[0].item); }
     break;
-
-  case 793:
-#line 2675 "sql_yacc.yy"
-    {}
+case 808:
+#line 2742 "sql_yacc.yy"
+{ Lex->field_list.push_back(yyvsp[0].item); }
     break;
-
-  case 794:
-#line 2676 "sql_yacc.yy"
-    { Select->braces= 0;}
+case 809:
+#line 2745 "sql_yacc.yy"
+{}
     break;
-
-  case 795:
-#line 2676 "sql_yacc.yy"
-    {}
+case 810:
+#line 2746 "sql_yacc.yy"
+{ Select->braces= 0;}
     break;
-
-  case 796:
-#line 2677 "sql_yacc.yy"
-    { Select->braces= 1;}
+case 811:
+#line 2746 "sql_yacc.yy"
+{}
     break;
-
-  case 797:
-#line 2677 "sql_yacc.yy"
-    {}
+case 812:
+#line 2747 "sql_yacc.yy"
+{ Select->braces= 1;}
+    break;
+case 813:
+#line 2747 "sql_yacc.yy"
+{}
     break;
-
-  case 802:
-#line 2691 "sql_yacc.yy"
-    {
+case 818:
+#line 2761 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  if (lex->field_list.push_back(yyvsp[-2].item) ||
 	      lex->insert_list->push_back(yyvsp[0].item))
 	    YYABORT;
 	 }
     break;
-
-  case 803:
-#line 2698 "sql_yacc.yy"
-    {}
-    break;
-
-  case 804:
-#line 2699 "sql_yacc.yy"
-    {}
-    break;
-
-  case 805:
-#line 2703 "sql_yacc.yy"
-    {}
-    break;
-
-  case 806:
-#line 2704 "sql_yacc.yy"
-    {}
+case 819:
+#line 2768 "sql_yacc.yy"
+{}
+    break;
+case 820:
+#line 2769 "sql_yacc.yy"
+{}
+    break;
+case 821:
+#line 2773 "sql_yacc.yy"
+{}
+    break;
+case 822:
+#line 2774 "sql_yacc.yy"
+{}
     break;
-
-  case 807:
-#line 2709 "sql_yacc.yy"
-    {
+case 823:
+#line 2779 "sql_yacc.yy"
+{
 	    if (!(Lex->insert_list = new List_item))
 	      YYABORT;
 	 }
     break;
-
-  case 808:
-#line 2714 "sql_yacc.yy"
-    {
+case 824:
+#line 2784 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  if (lex->many_values.push_back(lex->insert_list))
 	    YYABORT;
 	 }
     break;
-
-  case 809:
-#line 2721 "sql_yacc.yy"
-    {}
+case 825:
+#line 2791 "sql_yacc.yy"
+{}
     break;
-
-  case 811:
-#line 2726 "sql_yacc.yy"
-    {
+case 827:
+#line 2796 "sql_yacc.yy"
+{
 	  if (Lex->insert_list->push_back(yyvsp[0].item))
 	    YYABORT;
 	}
     break;
-
-  case 812:
-#line 2731 "sql_yacc.yy"
-    {
+case 828:
+#line 2801 "sql_yacc.yy"
+{
 	    if (Lex->insert_list->push_back(yyvsp[0].item))
 	      YYABORT;
 	  }
     break;
-
-  case 813:
-#line 2738 "sql_yacc.yy"
-    { yyval.item= yyvsp[0].item;}
+case 829:
+#line 2808 "sql_yacc.yy"
+{ yyval.item= yyvsp[0].item;}
     break;
-
-  case 814:
-#line 2739 "sql_yacc.yy"
-    {yyval.item= new Item_default(); }
+case 830:
+#line 2809 "sql_yacc.yy"
+{yyval.item= new Item_default(); }
     break;
-
-  case 815:
-#line 2746 "sql_yacc.yy"
-    { 
+case 831:
+#line 2816 "sql_yacc.yy"
+{ 
 	  LEX *lex=Lex;
           lex->sql_command = SQLCOM_UPDATE;
           lex->select->order_list.elements=0;
@@ -13077,10 +11979,9 @@
           lex->select->order_list.next= (byte**) &lex->select->order_list.first;
         }
     break;
-
-  case 816:
-#line 2755 "sql_yacc.yy"
-    {
+case 832:
+#line 2825 "sql_yacc.yy"
+{
 	  if (Lex->select->table_list.elements > 1)
 	  {
 	    LEX *lex=Lex;
@@ -13091,41 +11992,35 @@
 	    set_lock_for_tables(yyvsp[-4].lock_type);
 	}
     break;
-
-  case 817:
-#line 2765 "sql_yacc.yy"
-    {}
+case 833:
+#line 2835 "sql_yacc.yy"
+{}
     break;
-
-  case 818:
-#line 2770 "sql_yacc.yy"
-    {
+case 834:
+#line 2840 "sql_yacc.yy"
+{
 	  if (add_item_to_list(yyvsp[-2].item) || add_value_to_list(yyvsp[0].item))
 	    YYABORT;
 	}
     break;
-
-  case 819:
-#line 2775 "sql_yacc.yy"
-    {
+case 835:
+#line 2845 "sql_yacc.yy"
+{
 	    if (add_item_to_list(yyvsp[-2].item) || add_value_to_list(yyvsp[0].item))
 	      YYABORT;
 	  }
     break;
-
-  case 820:
-#line 2781 "sql_yacc.yy"
-    { yyval.lock_type= current_thd->update_lock_default; }
+case 836:
+#line 2851 "sql_yacc.yy"
+{ yyval.lock_type= current_thd->update_lock_default; }
     break;
-
-  case 821:
-#line 2782 "sql_yacc.yy"
-    { yyval.lock_type= TL_WRITE_LOW_PRIORITY; }
+case 837:
+#line 2852 "sql_yacc.yy"
+{ yyval.lock_type= TL_WRITE_LOW_PRIORITY; }
     break;
-
-  case 822:
-#line 2788 "sql_yacc.yy"
-    { 
+case 838:
+#line 2858 "sql_yacc.yy"
+{ 
 	  LEX *lex=Lex;
 	  lex->sql_command= SQLCOM_DELETE; lex->select->options=0;
 	  lex->lock_option= lex->thd->update_lock_default;
@@ -13134,103 +12029,86 @@
 	  lex->select->order_list.next= (byte**) &lex->select->order_list.first;
 	}
     break;
-
-  case 823:
-#line 2796 "sql_yacc.yy"
-    {}
+case 839:
+#line 2866 "sql_yacc.yy"
+{}
     break;
-
-  case 824:
-#line 2801 "sql_yacc.yy"
-    {
+case 840:
+#line 2871 "sql_yacc.yy"
+{
 	  if (!add_table_to_list(yyvsp[0].table, NULL, TL_OPTION_UPDATING,
 				 Lex->lock_option))
 	    YYABORT;
 	}
     break;
-
-  case 825:
-#line 2807 "sql_yacc.yy"
-    {}
-    break;
-
-  case 826:
-#line 2809 "sql_yacc.yy"
-    { mysql_init_multi_delete(Lex); }
+case 841:
+#line 2877 "sql_yacc.yy"
+{}
+    break;
+case 842:
+#line 2879 "sql_yacc.yy"
+{ mysql_init_multi_delete(Lex); }
     break;
-
-  case 828:
-#line 2812 "sql_yacc.yy"
-    { mysql_init_multi_delete(Lex); }
+case 844:
+#line 2882 "sql_yacc.yy"
+{ mysql_init_multi_delete(Lex); }
     break;
-
-  case 829:
-#line 2814 "sql_yacc.yy"
-    {}
+case 845:
+#line 2884 "sql_yacc.yy"
+{}
     break;
-
-  case 830:
-#line 2818 "sql_yacc.yy"
-    {}
+case 846:
+#line 2888 "sql_yacc.yy"
+{}
     break;
-
-  case 831:
-#line 2819 "sql_yacc.yy"
-    {}
+case 847:
+#line 2889 "sql_yacc.yy"
+{}
     break;
-
-  case 832:
-#line 2823 "sql_yacc.yy"
-    {
+case 848:
+#line 2893 "sql_yacc.yy"
+{
 	   if (!add_table_to_list(new Table_ident(yyvsp[-1].lex_str), NULL,
 				  TL_OPTION_UPDATING, Lex->lock_option))
 	     YYABORT;
          }
     break;
-
-  case 833:
-#line 2829 "sql_yacc.yy"
-    {
+case 849:
+#line 2899 "sql_yacc.yy"
+{
 	     if (!add_table_to_list(new Table_ident(yyvsp[-3].lex_str,yyvsp[-1].lex_str,0), NULL,
 				    TL_OPTION_UPDATING,
 				    Lex->lock_option))
 	      YYABORT;
 	   }
     break;
-
-  case 834:
-#line 2838 "sql_yacc.yy"
-    {}
-    break;
-
-  case 835:
-#line 2839 "sql_yacc.yy"
-    {}
-    break;
-
-  case 836:
-#line 2843 "sql_yacc.yy"
-    {}
+case 850:
+#line 2908 "sql_yacc.yy"
+{}
+    break;
+case 851:
+#line 2909 "sql_yacc.yy"
+{}
+    break;
+case 852:
+#line 2913 "sql_yacc.yy"
+{}
     break;
-
-  case 837:
-#line 2844 "sql_yacc.yy"
-    {}
+case 853:
+#line 2914 "sql_yacc.yy"
+{}
     break;
-
-  case 838:
-#line 2847 "sql_yacc.yy"
-    { Select->options|= OPTION_QUICK; }
+case 854:
+#line 2917 "sql_yacc.yy"
+{ Select->options|= OPTION_QUICK; }
     break;
-
-  case 839:
-#line 2848 "sql_yacc.yy"
-    { Lex->lock_option= TL_WRITE_LOW_PRIORITY; }
+case 855:
+#line 2918 "sql_yacc.yy"
+{ Lex->lock_option= TL_WRITE_LOW_PRIORITY; }
     break;
-
-  case 840:
-#line 2852 "sql_yacc.yy"
-    {
+case 856:
+#line 2922 "sql_yacc.yy"
+{
 	  LEX* lex = Lex;
 	  lex->sql_command= SQLCOM_TRUNCATE;
 	  lex->select->options=0;
@@ -13239,54 +12117,47 @@
           lex->select->order_list.next= (byte**) &lex->select->order_list.first;
 	}
     break;
-
-  case 843:
-#line 2868 "sql_yacc.yy"
-    { Lex->wild=0;}
+case 859:
+#line 2938 "sql_yacc.yy"
+{ Lex->wild=0;}
     break;
-
-  case 844:
-#line 2869 "sql_yacc.yy"
-    {}
+case 860:
+#line 2939 "sql_yacc.yy"
+{}
     break;
-
-  case 845:
-#line 2874 "sql_yacc.yy"
-    { Lex->sql_command= SQLCOM_SHOW_DATABASES; }
+case 861:
+#line 2944 "sql_yacc.yy"
+{ Lex->sql_command= SQLCOM_SHOW_DATABASES; }
     break;
-
-  case 846:
-#line 2876 "sql_yacc.yy"
-    {
+case 862:
+#line 2946 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->sql_command= SQLCOM_SHOW_TABLES;
 	    lex->select->db= yyvsp[-1].simple_string; lex->select->options=0;
 	   }
     break;
-
-  case 847:
-#line 2882 "sql_yacc.yy"
-    {
+case 863:
+#line 2952 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->sql_command= SQLCOM_SHOW_TABLES;
 	    lex->select->options|= SELECT_DESCRIBE;
 	    lex->select->db= yyvsp[-1].simple_string;
 	  }
     break;
-
-  case 848:
-#line 2889 "sql_yacc.yy"
-    {
+case 864:
+#line 2959 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
 	    lex->select->db= yyvsp[-1].simple_string;
 	    lex->select->options=0;
 	  }
     break;
-
-  case 849:
-#line 2896 "sql_yacc.yy"
-    {
+case 865:
+#line 2966 "sql_yacc.yy"
+{
 	    Lex->sql_command= SQLCOM_SHOW_FIELDS;
 	    if (yyvsp[-1].simple_string)
 	      yyvsp[-2].table->change_db(yyvsp[-1].simple_string);
@@ -13294,44 +12165,39 @@
 	      YYABORT;
 	  }
     break;
-
-  case 850:
-#line 2907 "sql_yacc.yy"
-    {
+case 866:
+#line 2977 "sql_yacc.yy"
+{
 	    Lex->sql_command = SQLCOM_SHOW_NEW_MASTER;
 	    Lex->mi.log_file_name = yyvsp[-8].lex_str.str;
 	    Lex->mi.pos = yyvsp[-4].ulonglong_number;
 	    Lex->mi.server_id = yyvsp[0].ulong_num;
           }
     break;
-
-  case 851:
-#line 2914 "sql_yacc.yy"
-    {
+case 867:
+#line 2984 "sql_yacc.yy"
+{
 	    Lex->sql_command = SQLCOM_SHOW_BINLOGS;
           }
     break;
-
-  case 852:
-#line 2918 "sql_yacc.yy"
-    {
+case 868:
+#line 2988 "sql_yacc.yy"
+{
 	    Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
           }
     break;
-
-  case 853:
-#line 2922 "sql_yacc.yy"
-    {
+case 869:
+#line 2992 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->sql_command = SQLCOM_SHOW_BINLOG_EVENTS;
 	    lex->select->select_limit= lex->thd->variables.select_limit;
 	    lex->select->offset_limit= 0L;
           }
     break;
-
-  case 855:
-#line 2929 "sql_yacc.yy"
-    {
+case 871:
+#line 2999 "sql_yacc.yy"
+{
 	    Lex->sql_command= SQLCOM_SHOW_KEYS;
 	    if (yyvsp[0].simple_string)
 	      yyvsp[-1].table->change_db(yyvsp[0].simple_string);
@@ -13339,117 +12205,110 @@
 	      YYABORT;
 	  }
     break;
-
-  case 856:
-#line 2937 "sql_yacc.yy"
-    { Lex->sql_command= SQLCOM_SHOW_STATUS; }
-    break;
-
-  case 857:
-#line 2939 "sql_yacc.yy"
-    { Lex->sql_command = SQLCOM_SHOW_INNODB_STATUS;}
+case 872:
+#line 3007 "sql_yacc.yy"
+{ Lex->sql_command= SQLCOM_SHOW_STATUS; }
+    break;
+case 873:
+#line 3009 "sql_yacc.yy"
+{ Lex->sql_command= SQLCOM_SHOW_USER_STATS; }
+    break;
+case 874:
+#line 3011 "sql_yacc.yy"
+{ Lex->sql_command= SQLCOM_SHOW_TABLE_STATS; }
+    break;
+case 875:
+#line 3013 "sql_yacc.yy"
+{ Lex->sql_command= SQLCOM_SHOW_INDEX_STATS; }
+    break;
+case 876:
+#line 3015 "sql_yacc.yy"
+{ Lex->sql_command = SQLCOM_SHOW_INNODB_STATUS;}
+    break;
+case 877:
+#line 3017 "sql_yacc.yy"
+{ Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
     break;
-
-  case 858:
-#line 2941 "sql_yacc.yy"
-    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
-    break;
-
-  case 859:
-#line 2943 "sql_yacc.yy"
-    {
+case 878:
+#line 3019 "sql_yacc.yy"
+{
 	    THD *thd= current_thd;
 	    thd->lex.sql_command= SQLCOM_SHOW_VARIABLES;
 	    thd->lex.option_type= (enum_var_type) yyvsp[-2].num;
 	  }
     break;
-
-  case 860:
-#line 2949 "sql_yacc.yy"
-    { Lex->sql_command= SQLCOM_SHOW_LOGS; }
+case 879:
+#line 3025 "sql_yacc.yy"
+{ Lex->sql_command= SQLCOM_SHOW_LOGS; }
     break;
-
-  case 861:
-#line 2951 "sql_yacc.yy"
-    {
+case 880:
+#line 3027 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->sql_command= SQLCOM_SHOW_GRANTS;
 	    lex->grant_user=yyvsp[0].lex_user;
 	    lex->grant_user->password.str=NullS;
 	  }
     break;
-
-  case 862:
-#line 2958 "sql_yacc.yy"
-    {
+case 881:
+#line 3034 "sql_yacc.yy"
+{
 	    Lex->sql_command = SQLCOM_SHOW_CREATE;
 	    if(!add_table_to_list(yyvsp[0].table, NULL, 0))
 	      YYABORT;
 	  }
     break;
-
-  case 863:
-#line 2964 "sql_yacc.yy"
-    {
+case 882:
+#line 3040 "sql_yacc.yy"
+{
 	    Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
           }
     break;
-
-  case 864:
-#line 2968 "sql_yacc.yy"
-    {
+case 883:
+#line 3044 "sql_yacc.yy"
+{
 	    Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
           }
     break;
-
-  case 865:
-#line 2973 "sql_yacc.yy"
-    { yyval.simple_string= 0; }
-    break;
-
-  case 866:
-#line 2974 "sql_yacc.yy"
-    { yyval.simple_string= yyvsp[0].lex_str.str; }
-    break;
-
-  case 868:
-#line 2978 "sql_yacc.yy"
-    { Lex->wild= yyvsp[0].string; }
-    break;
-
-  case 869:
-#line 2981 "sql_yacc.yy"
-    { Lex->verbose=0; }
-    break;
-
-  case 870:
-#line 2982 "sql_yacc.yy"
-    { Lex->verbose=1; }
-    break;
-
-  case 873:
-#line 2989 "sql_yacc.yy"
-    { Lex->mi.log_file_name = 0; }
+case 884:
+#line 3049 "sql_yacc.yy"
+{ yyval.simple_string= 0; }
     break;
-
-  case 874:
-#line 2990 "sql_yacc.yy"
-    { Lex->mi.log_file_name = yyvsp[0].lex_str.str; }
+case 885:
+#line 3050 "sql_yacc.yy"
+{ yyval.simple_string= yyvsp[0].lex_str.str; }
     break;
-
-  case 875:
-#line 2993 "sql_yacc.yy"
-    { Lex->mi.pos = 4; /* skip magic number */ }
+case 887:
+#line 3054 "sql_yacc.yy"
+{ Lex->wild= yyvsp[0].string; }
     break;
-
-  case 876:
-#line 2994 "sql_yacc.yy"
-    { Lex->mi.pos = yyvsp[0].ulonglong_number; }
+case 888:
+#line 3057 "sql_yacc.yy"
+{ Lex->verbose=0; }
+    break;
+case 889:
+#line 3058 "sql_yacc.yy"
+{ Lex->verbose=1; }
+    break;
+case 892:
+#line 3065 "sql_yacc.yy"
+{ Lex->mi.log_file_name = 0; }
+    break;
+case 893:
+#line 3066 "sql_yacc.yy"
+{ Lex->mi.log_file_name = yyvsp[0].lex_str.str; }
+    break;
+case 894:
+#line 3069 "sql_yacc.yy"
+{ Lex->mi.pos = 4; /* skip magic number */ }
+    break;
+case 895:
+#line 3070 "sql_yacc.yy"
+{ Lex->mi.pos = yyvsp[0].ulonglong_number; }
     break;
-
-  case 877:
-#line 3000 "sql_yacc.yy"
-    {
+case 896:
+#line 3076 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  lex->wild=0;
 	  lex->verbose=0;
@@ -13458,162 +12317,155 @@
 	    YYABORT;
 	}
     break;
-
-  case 878:
-#line 3008 "sql_yacc.yy"
-    {}
-    break;
-
-  case 879:
-#line 3010 "sql_yacc.yy"
-    { Lex->select_lex.options|= SELECT_DESCRIBE; }
-    break;
-
-  case 882:
-#line 3018 "sql_yacc.yy"
-    {}
-    break;
-
-  case 883:
-#line 3019 "sql_yacc.yy"
-    { Lex->wild= yyvsp[0].string; }
-    break;
-
-  case 884:
-#line 3021 "sql_yacc.yy"
-    { Lex->wild= new String((const char*) yyvsp[0].lex_str.str,yyvsp[0].lex_str.length); }
+case 897:
+#line 3084 "sql_yacc.yy"
+{}
+    break;
+case 898:
+#line 3086 "sql_yacc.yy"
+{ Lex->select_lex.options|= SELECT_DESCRIBE; }
+    break;
+case 901:
+#line 3094 "sql_yacc.yy"
+{}
+    break;
+case 902:
+#line 3095 "sql_yacc.yy"
+{ Lex->wild= yyvsp[0].string; }
+    break;
+case 903:
+#line 3097 "sql_yacc.yy"
+{ Lex->wild= new String((const char*) yyvsp[0].lex_str.str,yyvsp[0].lex_str.length); }
     break;
-
-  case 885:
-#line 3028 "sql_yacc.yy"
-    {
+case 904:
+#line 3104 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  lex->sql_command= SQLCOM_FLUSH; lex->type=0;
 	}
     break;
-
-  case 886:
-#line 3033 "sql_yacc.yy"
-    {}
-    break;
-
-  case 889:
-#line 3041 "sql_yacc.yy"
-    { Lex->type|= REFRESH_TABLES; }
-    break;
-
-  case 890:
-#line 3041 "sql_yacc.yy"
-    {}
-    break;
-
-  case 891:
-#line 3042 "sql_yacc.yy"
-    { Lex->type|= REFRESH_TABLES | REFRESH_READ_LOCK; }
-    break;
-
-  case 892:
-#line 3043 "sql_yacc.yy"
-    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
-    break;
-
-  case 893:
-#line 3044 "sql_yacc.yy"
-    { Lex->type|= REFRESH_HOSTS; }
-    break;
-
-  case 894:
-#line 3045 "sql_yacc.yy"
-    { Lex->type|= REFRESH_GRANT; }
-    break;
-
-  case 895:
-#line 3046 "sql_yacc.yy"
-    { Lex->type|= REFRESH_LOG; }
+case 905:
+#line 3109 "sql_yacc.yy"
+{}
+    break;
+case 908:
+#line 3117 "sql_yacc.yy"
+{ Lex->type|= REFRESH_TABLES; }
+    break;
+case 909:
+#line 3117 "sql_yacc.yy"
+{}
+    break;
+case 910:
+#line 3118 "sql_yacc.yy"
+{ Lex->type|= REFRESH_TABLES | REFRESH_READ_LOCK; }
+    break;
+case 911:
+#line 3119 "sql_yacc.yy"
+{ Lex->type|= REFRESH_QUERY_CACHE_FREE; }
+    break;
+case 912:
+#line 3120 "sql_yacc.yy"
+{ Lex->type|= REFRESH_HOSTS; }
+    break;
+case 913:
+#line 3121 "sql_yacc.yy"
+{ Lex->type|= REFRESH_GRANT; }
+    break;
+case 914:
+#line 3122 "sql_yacc.yy"
+{ Lex->type|= REFRESH_LOG; }
+    break;
+case 915:
+#line 3123 "sql_yacc.yy"
+{ Lex->type|= REFRESH_STATUS; }
     break;
-
-  case 896:
-#line 3047 "sql_yacc.yy"
-    { Lex->type|= REFRESH_STATUS; }
-    break;
-
-  case 897:
-#line 3048 "sql_yacc.yy"
-    { Lex->type|= REFRESH_SLAVE; }
-    break;
-
-  case 898:
-#line 3049 "sql_yacc.yy"
-    { Lex->type|= REFRESH_MASTER; }
-    break;
-
-  case 899:
-#line 3050 "sql_yacc.yy"
-    { Lex->type|= REFRESH_DES_KEY_FILE; }
-    break;
-
-  case 900:
-#line 3051 "sql_yacc.yy"
-    { Lex->type|= REFRESH_USER_RESOURCES; }
-    break;
-
-  case 901:
-#line 3054 "sql_yacc.yy"
-    {;}
+case 916:
+#line 3124 "sql_yacc.yy"
+{ Lex->type|= REFRESH_SLAVE; }
     break;
-
-  case 902:
-#line 3055 "sql_yacc.yy"
-    {;}
+case 917:
+#line 3125 "sql_yacc.yy"
+{ Lex->type|= REFRESH_MASTER; }
+    break;
+case 918:
+#line 3126 "sql_yacc.yy"
+{ Lex->type|= REFRESH_DES_KEY_FILE; }
+    break;
+case 919:
+#line 3127 "sql_yacc.yy"
+{ Lex->type|= REFRESH_USER_RESOURCES; }
+    break;
+case 920:
+#line 3128 "sql_yacc.yy"
+{ Lex->type|= REFRESH_TABLE_STATS; }
+    break;
+case 921:
+#line 3129 "sql_yacc.yy"
+{ Lex->type|= REFRESH_INDEX_STATS; }
+    break;
+case 922:
+#line 3132 "sql_yacc.yy"
+{;}
+    break;
+case 923:
+#line 3133 "sql_yacc.yy"
+{;}
     break;
-
-  case 903:
-#line 3059 "sql_yacc.yy"
-    {
+case 924:
+#line 3137 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  lex->sql_command= SQLCOM_RESET; lex->type=0;
 	}
     break;
-
-  case 904:
-#line 3063 "sql_yacc.yy"
-    {}
+case 925:
+#line 3141 "sql_yacc.yy"
+{}
     break;
-
-  case 907:
-#line 3071 "sql_yacc.yy"
-    { Lex->type|= REFRESH_SLAVE; }
+case 928:
+#line 3149 "sql_yacc.yy"
+{ Lex->type|= REFRESH_SLAVE; }
     break;
-
-  case 908:
-#line 3072 "sql_yacc.yy"
-    { Lex->type|= REFRESH_MASTER; }
+case 929:
+#line 3150 "sql_yacc.yy"
+{}
     break;
-
-  case 909:
-#line 3073 "sql_yacc.yy"
-    { Lex->type|= REFRESH_QUERY_CACHE;}
+case 930:
+#line 3151 "sql_yacc.yy"
+{ Lex->type|= REFRESH_MASTER; }
     break;
-
-  case 910:
-#line 3077 "sql_yacc.yy"
-    {
+case 931:
+#line 3152 "sql_yacc.yy"
+{ Lex->type|= REFRESH_QUERY_CACHE;}
+    break;
+case 932:
+#line 3155 "sql_yacc.yy"
+{}
+    break;
+case 933:
+#line 3157 "sql_yacc.yy"
+{
+         Lex->type |= REFRESH_NO_PURGE_BINLOG;
+       }
+    break;
+case 934:
+#line 3163 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  lex->sql_command = SQLCOM_PURGE;
 	  lex->type=0;
 	}
     break;
-
-  case 911:
-#line 3083 "sql_yacc.yy"
-    {
+case 935:
+#line 3169 "sql_yacc.yy"
+{
 	   Lex->to_log = yyvsp[0].lex_str.str;
          }
     break;
-
-  case 912:
-#line 3091 "sql_yacc.yy"
-    {
+case 936:
+#line 3177 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  if (yyvsp[0].item->fix_fields(lex->thd,0))
 	  { 
@@ -13622,1281 +12474,1054 @@
 	  }
           lex->sql_command=SQLCOM_KILL;
 	  lex->thread_id= (ulong) yyvsp[0].item->val_int();
-	}
-    break;
-
-  case 913:
-#line 3105 "sql_yacc.yy"
-    {
-	  LEX *lex=Lex;
-	  lex->sql_command=SQLCOM_CHANGE_DB; lex->select->db= yyvsp[0].lex_str.str;
-	}
-    break;
-
-  case 914:
-#line 3113 "sql_yacc.yy"
-    {
-	  LEX *lex=Lex;
-	  lex->sql_command= SQLCOM_LOAD;
-	  lex->lock_option= yyvsp[-3].lock_type;
-	  lex->local_file=  yyvsp[-2].num;
-	  if (!(lex->exchange= new sql_exchange(yyvsp[0].lex_str.str,0)))
-	    YYABORT;
-	  lex->field_list.empty();
-	}
-    break;
-
-  case 915:
-#line 3124 "sql_yacc.yy"
-    {
-	  if (!add_table_to_list(yyvsp[-4].table, NULL, TL_OPTION_UPDATING))
-	    YYABORT;
-	}
-    break;
-
-  case 916:
-#line 3130 "sql_yacc.yy"
-    {
-	  Lex->sql_command = SQLCOM_LOAD_MASTER_TABLE;
-	  if (!add_table_to_list(yyvsp[-2].table, NULL, TL_OPTION_UPDATING))
-	    YYABORT;
-
-        }
-    break;
-
-  case 917:
-#line 3138 "sql_yacc.yy"
-    {
-	  Lex->sql_command = SQLCOM_LOAD_MASTER_DATA;
-        }
-    break;
-
-  case 918:
-#line 3143 "sql_yacc.yy"
-    { yyval.num=0;}
-    break;
-
-  case 919:
-#line 3144 "sql_yacc.yy"
-    { yyval.num=1;}
-    break;
-
-  case 920:
-#line 3147 "sql_yacc.yy"
-    { yyval.lock_type= current_thd->update_lock_default; }
-    break;
-
-  case 921:
-#line 3148 "sql_yacc.yy"
-    { yyval.lock_type= TL_WRITE_CONCURRENT_INSERT ; }
-    break;
-
-  case 922:
-#line 3149 "sql_yacc.yy"
-    { yyval.lock_type= TL_WRITE_LOW_PRIORITY; }
-    break;
-
-  case 923:
-#line 3153 "sql_yacc.yy"
-    { Lex->duplicates=DUP_ERROR; }
-    break;
-
-  case 924:
-#line 3154 "sql_yacc.yy"
-    { Lex->duplicates=DUP_REPLACE; }
-    break;
-
-  case 925:
-#line 3155 "sql_yacc.yy"
-    { Lex->duplicates=DUP_IGNORE; }
-    break;
-
-  case 930:
-#line 3166 "sql_yacc.yy"
-    { Lex->exchange->field_term= yyvsp[0].string;}
-    break;
-
-  case 931:
-#line 3168 "sql_yacc.yy"
-    {
-	    LEX *lex=Lex;
-	    lex->exchange->enclosed= yyvsp[0].string;
-	    lex->exchange->opt_enclosed=1;
-	  }
-    break;
-
-  case 932:
-#line 3173 "sql_yacc.yy"
-    { Lex->exchange->enclosed= yyvsp[0].string;}
-    break;
-
-  case 933:
-#line 3174 "sql_yacc.yy"
-    { Lex->exchange->escaped= yyvsp[0].string;}
-    break;
-
-  case 938:
-#line 3185 "sql_yacc.yy"
-    { Lex->exchange->line_term= yyvsp[0].string;}
-    break;
-
-  case 939:
-#line 3186 "sql_yacc.yy"
-    { Lex->exchange->line_start= yyvsp[0].string;}
-    break;
-
-  case 941:
-#line 3191 "sql_yacc.yy"
-    { Lex->exchange->skip_lines=atol(yyvsp[-1].lex_str.str); }
-    break;
-
-  case 942:
-#line 3196 "sql_yacc.yy"
-    { yyval.item = new Item_string(yyvsp[0].lex_str.str,yyvsp[0].lex_str.length); }
-    break;
-
-  case 943:
-#line 3198 "sql_yacc.yy"
-    { ((Item_string*) yyvsp[-1].item)->append(yyvsp[0].lex_str.str,yyvsp[0].lex_str.length); }
-    break;
-
-  case 944:
-#line 3201 "sql_yacc.yy"
-    { yyval.string=  new String(yyvsp[0].lex_str.str,yyvsp[0].lex_str.length); }
-    break;
-
-  case 945:
-#line 3203 "sql_yacc.yy"
-    {
-	    Item *tmp = new Item_varbinary(yyvsp[0].lex_str.str,yyvsp[0].lex_str.length);
-	    yyval.string= tmp ? tmp->val_str((String*) 0) : (String*) 0;
-	  }
-    break;
-
-  case 946:
-#line 3209 "sql_yacc.yy"
-    { yyval.item =	yyvsp[0].item; }
-    break;
-
-  case 947:
-#line 3210 "sql_yacc.yy"
-    { yyval.item =	new Item_int(yyvsp[0].lex_str.str, (longlong) strtol(yyvsp[0].lex_str.str, NULL, 10),yyvsp[0].lex_str.length); }
-    break;
-
-  case 948:
-#line 3211 "sql_yacc.yy"
-    { yyval.item =	new Item_int(yyvsp[0].lex_str.str, (longlong) strtoll(yyvsp[0].lex_str.str,NULL,10), yyvsp[0].lex_str.length); }
-    break;
-
-  case 949:
-#line 3212 "sql_yacc.yy"
-    { yyval.item =	new Item_uint(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length); }
-    break;
-
-  case 950:
-#line 3213 "sql_yacc.yy"
-    { yyval.item =	new Item_real(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length); }
-    break;
-
-  case 951:
-#line 3214 "sql_yacc.yy"
-    { yyval.item =	new Item_float(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length); }
-    break;
-
-  case 952:
-#line 3215 "sql_yacc.yy"
-    { yyval.item =	new Item_null();
-			  Lex->next_state=STATE_OPERATOR_OR_IDENT;}
-    break;
-
-  case 953:
-#line 3217 "sql_yacc.yy"
-    { yyval.item =	new Item_varbinary(yyvsp[0].lex_str.str,yyvsp[0].lex_str.length);}
-    break;
-
-  case 954:
-#line 3218 "sql_yacc.yy"
-    { yyval.item = yyvsp[0].item; }
-    break;
-
-  case 955:
-#line 3219 "sql_yacc.yy"
-    { yyval.item = yyvsp[0].item; }
-    break;
-
-  case 956:
-#line 3220 "sql_yacc.yy"
-    { yyval.item = yyvsp[0].item; }
-    break;
-
-  case 957:
-#line 3227 "sql_yacc.yy"
-    { yyval.item=yyvsp[0].item; }
-    break;
-
-  case 958:
-#line 3228 "sql_yacc.yy"
-    { yyval.item=yyvsp[0].item; }
-    break;
-
-  case 959:
-#line 3231 "sql_yacc.yy"
-    { yyval.item = new Item_field(NullS,yyvsp[-2].lex_str.str,"*"); }
-    break;
-
-  case 960:
-#line 3233 "sql_yacc.yy"
-    { yyval.item = new Item_field((current_thd->client_capabilities &
-   CLIENT_NO_SCHEMA ? NullS : yyvsp[-4].lex_str.str),yyvsp[-2].lex_str.str,"*"); }
-    break;
-
-  case 961:
-#line 3237 "sql_yacc.yy"
-    { yyval.item=yyvsp[0].item; }
-    break;
-
-  case 962:
-#line 3241 "sql_yacc.yy"
-    {
-	  SELECT_LEX *sel=Select;
-	  yyval.item = !sel->create_refs || sel->in_sum_expr > 0 ? (Item*) new Item_field(NullS,NullS,yyvsp[0].lex_str.str) : (Item*) new Item_ref(NullS,NullS,yyvsp[0].lex_str.str);
-	}
-    break;
-
-  case 963:
-#line 3246 "sql_yacc.yy"
-    {
-	  SELECT_LEX *sel=Select;
-	  yyval.item = !sel->create_refs || sel->in_sum_expr > 0 ? (Item*) new Item_field(NullS,yyvsp[-2].lex_str.str,yyvsp[0].lex_str.str) : (Item*) new Item_ref(NullS,yyvsp[-2].lex_str.str,yyvsp[0].lex_str.str);
-	}
-    break;
-
-  case 964:
-#line 3251 "sql_yacc.yy"
-    {
-	  SELECT_LEX *sel=Select;
-	  yyval.item = !sel->create_refs || sel->in_sum_expr > 0 ? (Item*) new Item_field(NullS,yyvsp[-2].lex_str.str,yyvsp[0].lex_str.str) : (Item*) new Item_ref(NullS,yyvsp[-2].lex_str.str,yyvsp[0].lex_str.str);
-	}
-    break;
-
-  case 965:
-#line 3256 "sql_yacc.yy"
-    {
-	  SELECT_LEX *sel=Select;
-	  yyval.item = !sel->create_refs || sel->in_sum_expr > 0 ? (Item*) new Item_field((current_thd->client_capabilities & CLIENT_NO_SCHEMA ? NullS :yyvsp[-4].lex_str.str),yyvsp[-2].lex_str.str,yyvsp[0].lex_str.str) : (Item*) new Item_ref((current_thd->client_capabilities & CLIENT_NO_SCHEMA ? NullS :yyvsp[-4].lex_str.str),yyvsp[-2].lex_str.str,yyvsp[0].lex_str.str);
-	}
-    break;
-
-  case 966:
-#line 3263 "sql_yacc.yy"
-    { yyval.lex_str=yyvsp[0].lex_str;}
-    break;
-
-  case 967:
-#line 3264 "sql_yacc.yy"
-    { yyval.lex_str=yyvsp[0].lex_str;}
-    break;
-
-  case 968:
-#line 3265 "sql_yacc.yy"
-    { yyval.lex_str=yyvsp[0].lex_str;}
-    break;
-
-  case 969:
-#line 3268 "sql_yacc.yy"
-    { yyval.table=new Table_ident(yyvsp[0].lex_str); }
-    break;
-
-  case 970:
-#line 3269 "sql_yacc.yy"
-    { yyval.table=new Table_ident(yyvsp[-2].lex_str,yyvsp[0].lex_str,0);}
-    break;
-
-  case 971:
-#line 3270 "sql_yacc.yy"
-    { yyval.table=new Table_ident(yyvsp[0].lex_str);}
-    break;
-
-  case 972:
-#line 3274 "sql_yacc.yy"
-    { LEX_STRING db={(char*) "",0}; yyval.table=new Table_ident(db,yyvsp[0].lex_str,0); }
-    break;
-
-  case 973:
-#line 3275 "sql_yacc.yy"
-    { yyval.table=new Table_ident(yyvsp[-2].lex_str,yyvsp[0].lex_str,0);}
-    break;
-
-  case 974:
-#line 3279 "sql_yacc.yy"
-    { yyval.lex_str=yyvsp[0].lex_str; }
-    break;
-
-  case 975:
-#line 3281 "sql_yacc.yy"
-    {
-	  LEX *lex= Lex;
-	  yyval.lex_str.str= lex->thd->strmake(yyvsp[0].symbol.str,yyvsp[0].symbol.length);
-	  yyval.lex_str.length=yyvsp[0].symbol.length;
-	  if (lex->next_state != STATE_END)
-	    lex->next_state=STATE_OPERATOR_OR_IDENT;
-	}
-    break;
-
-  case 976:
-#line 3291 "sql_yacc.yy"
-    { yyval.lex_str=yyvsp[0].lex_str;}
-    break;
-
-  case 977:
-#line 3292 "sql_yacc.yy"
-    { yyval.lex_str=yyvsp[0].lex_str;}
-    break;
-
-  case 978:
-#line 3293 "sql_yacc.yy"
-    { yyval.lex_str=yyvsp[0].lex_str;}
-    break;
-
-  case 979:
-#line 3297 "sql_yacc.yy"
-    {
-	  if (!(yyval.lex_user=(LEX_USER*) sql_alloc(sizeof(st_lex_user))))
-	    YYABORT;
-	  yyval.lex_user->user = yyvsp[0].lex_str; yyval.lex_user->host.str=NullS;
-	  }
-    break;
-
-  case 980:
-#line 3303 "sql_yacc.yy"
-    {
-	  if (!(yyval.lex_user=(LEX_USER*) sql_alloc(sizeof(st_lex_user))))
-	      YYABORT;
-	    yyval.lex_user->user = yyvsp[-2].lex_str; yyval.lex_user->host=yyvsp[0].lex_str;
-	  }
-    break;
-
-  case 981:
-#line 3312 "sql_yacc.yy"
-    {}
-    break;
-
-  case 982:
-#line 3313 "sql_yacc.yy"
-    {}
-    break;
-
-  case 983:
-#line 3314 "sql_yacc.yy"
-    {}
-    break;
-
-  case 984:
-#line 3315 "sql_yacc.yy"
-    {}
-    break;
-
-  case 985:
-#line 3316 "sql_yacc.yy"
-    {}
+	}
     break;
-
-  case 986:
-#line 3317 "sql_yacc.yy"
-    {}
+case 937:
+#line 3191 "sql_yacc.yy"
+{
+	  LEX *lex=Lex;
+	  lex->sql_command=SQLCOM_CHANGE_DB; lex->select->db= yyvsp[0].lex_str.str;
+	}
     break;
-
-  case 987:
-#line 3318 "sql_yacc.yy"
-    {}
+case 938:
+#line 3199 "sql_yacc.yy"
+{
+	  LEX *lex=Lex;
+	  lex->sql_command= SQLCOM_LOAD;
+	  lex->lock_option= yyvsp[-3].lock_type;
+	  lex->local_file=  yyvsp[-2].num;
+	  if (!(lex->exchange= new sql_exchange(yyvsp[0].lex_str.str,0)))
+	    YYABORT;
+	  lex->field_list.empty();
+	}
     break;
-
-  case 988:
-#line 3319 "sql_yacc.yy"
-    {}
+case 939:
+#line 3210 "sql_yacc.yy"
+{
+	  if (!add_table_to_list(yyvsp[-4].table, NULL, TL_OPTION_UPDATING))
+	    YYABORT;
+	}
     break;
+case 940:
+#line 3216 "sql_yacc.yy"
+{
+	  Lex->sql_command = SQLCOM_LOAD_MASTER_TABLE;
+	  if (!add_table_to_list(yyvsp[-2].table, NULL, TL_OPTION_UPDATING))
+	    YYABORT;
 
-  case 989:
-#line 3320 "sql_yacc.yy"
-    {}
+        }
     break;
-
-  case 990:
-#line 3321 "sql_yacc.yy"
-    {}
+case 941:
+#line 3224 "sql_yacc.yy"
+{
+	  Lex->sql_command = SQLCOM_LOAD_MASTER_DATA;
+        }
     break;
-
-  case 991:
-#line 3322 "sql_yacc.yy"
-    {}
+case 942:
+#line 3229 "sql_yacc.yy"
+{ yyval.num=0;}
+    break;
+case 943:
+#line 3230 "sql_yacc.yy"
+{ yyval.num=1;}
     break;
-
-  case 992:
-#line 3323 "sql_yacc.yy"
-    {}
+case 944:
+#line 3233 "sql_yacc.yy"
+{ yyval.lock_type= current_thd->update_lock_default; }
     break;
-
-  case 993:
-#line 3324 "sql_yacc.yy"
-    {}
+case 945:
+#line 3234 "sql_yacc.yy"
+{ yyval.lock_type= TL_WRITE_CONCURRENT_INSERT ; }
     break;
-
-  case 994:
-#line 3325 "sql_yacc.yy"
-    {}
+case 946:
+#line 3235 "sql_yacc.yy"
+{ yyval.lock_type= TL_WRITE_LOW_PRIORITY; }
     break;
-
-  case 995:
-#line 3326 "sql_yacc.yy"
-    {}
+case 947:
+#line 3239 "sql_yacc.yy"
+{ Lex->duplicates=DUP_ERROR; }
     break;
-
-  case 996:
-#line 3327 "sql_yacc.yy"
-    {}
+case 948:
+#line 3240 "sql_yacc.yy"
+{ Lex->duplicates=DUP_REPLACE; }
     break;
-
-  case 997:
-#line 3328 "sql_yacc.yy"
-    {}
+case 949:
+#line 3241 "sql_yacc.yy"
+{ Lex->duplicates=DUP_IGNORE; }
     break;
-
-  case 998:
-#line 3329 "sql_yacc.yy"
-    {}
+case 954:
+#line 3252 "sql_yacc.yy"
+{ Lex->exchange->field_term= yyvsp[0].string;}
     break;
-
-  case 999:
-#line 3330 "sql_yacc.yy"
-    {}
+case 955:
+#line 3254 "sql_yacc.yy"
+{
+	    LEX *lex=Lex;
+	    lex->exchange->enclosed= yyvsp[0].string;
+	    lex->exchange->opt_enclosed=1;
+	  }
     break;
-
-  case 1000:
-#line 3331 "sql_yacc.yy"
-    {}
+case 956:
+#line 3259 "sql_yacc.yy"
+{ Lex->exchange->enclosed= yyvsp[0].string;}
+    break;
+case 957:
+#line 3260 "sql_yacc.yy"
+{ Lex->exchange->escaped= yyvsp[0].string;}
+    break;
+case 962:
+#line 3271 "sql_yacc.yy"
+{ Lex->exchange->line_term= yyvsp[0].string;}
+    break;
+case 963:
+#line 3272 "sql_yacc.yy"
+{ Lex->exchange->line_start= yyvsp[0].string;}
+    break;
+case 965:
+#line 3277 "sql_yacc.yy"
+{ Lex->exchange->skip_lines=atol(yyvsp[-1].lex_str.str); }
+    break;
+case 966:
+#line 3282 "sql_yacc.yy"
+{ yyval.item = new Item_string(yyvsp[0].lex_str.str,yyvsp[0].lex_str.length); }
+    break;
+case 967:
+#line 3284 "sql_yacc.yy"
+{ ((Item_string*) yyvsp[-1].item)->append(yyvsp[0].lex_str.str,yyvsp[0].lex_str.length); }
+    break;
+case 968:
+#line 3287 "sql_yacc.yy"
+{ yyval.string=  new String(yyvsp[0].lex_str.str,yyvsp[0].lex_str.length); }
     break;
-
-  case 1001:
-#line 3332 "sql_yacc.yy"
-    {}
+case 969:
+#line 3289 "sql_yacc.yy"
+{
+	    Item *tmp = new Item_varbinary(yyvsp[0].lex_str.str,yyvsp[0].lex_str.length);
+	    yyval.string= tmp ? tmp->val_str((String*) 0) : (String*) 0;
+	  }
     break;
-
-  case 1002:
-#line 3333 "sql_yacc.yy"
-    {}
+case 970:
+#line 3295 "sql_yacc.yy"
+{ yyval.item =	yyvsp[0].item; }
+    break;
+case 971:
+#line 3296 "sql_yacc.yy"
+{ yyval.item =	new Item_int(yyvsp[0].lex_str.str, (longlong) strtol(yyvsp[0].lex_str.str, NULL, 10),yyvsp[0].lex_str.length); }
     break;
-
-  case 1003:
-#line 3334 "sql_yacc.yy"
-    {}
+case 972:
+#line 3297 "sql_yacc.yy"
+{ yyval.item =	new Item_int(yyvsp[0].lex_str.str, (longlong) strtoll(yyvsp[0].lex_str.str,NULL,10), yyvsp[0].lex_str.length); }
     break;
-
-  case 1004:
-#line 3335 "sql_yacc.yy"
-    {}
+case 973:
+#line 3298 "sql_yacc.yy"
+{ yyval.item =	new Item_uint(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length); }
+    break;
+case 974:
+#line 3299 "sql_yacc.yy"
+{ yyval.item =	new Item_real(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length); }
+    break;
+case 975:
+#line 3300 "sql_yacc.yy"
+{ yyval.item =	new Item_float(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length); }
+    break;
+case 976:
+#line 3301 "sql_yacc.yy"
+{ yyval.item =	new Item_null();
+			  Lex->next_state=STATE_OPERATOR_OR_IDENT;}
     break;
-
-  case 1005:
-#line 3336 "sql_yacc.yy"
-    {}
+case 977:
+#line 3303 "sql_yacc.yy"
+{ yyval.item =	new Item_varbinary(yyvsp[0].lex_str.str,yyvsp[0].lex_str.length);}
     break;
-
-  case 1006:
-#line 3337 "sql_yacc.yy"
-    {}
+case 978:
+#line 3304 "sql_yacc.yy"
+{ yyval.item = yyvsp[0].item; }
     break;
-
-  case 1007:
-#line 3338 "sql_yacc.yy"
-    {}
+case 979:
+#line 3305 "sql_yacc.yy"
+{ yyval.item = yyvsp[0].item; }
     break;
-
-  case 1008:
-#line 3339 "sql_yacc.yy"
-    {}
+case 980:
+#line 3306 "sql_yacc.yy"
+{ yyval.item = yyvsp[0].item; }
     break;
-
-  case 1009:
-#line 3340 "sql_yacc.yy"
-    {}
+case 981:
+#line 3313 "sql_yacc.yy"
+{ yyval.item=yyvsp[0].item; }
     break;
-
-  case 1010:
-#line 3341 "sql_yacc.yy"
-    {}
+case 982:
+#line 3314 "sql_yacc.yy"
+{ yyval.item=yyvsp[0].item; }
     break;
-
-  case 1011:
-#line 3342 "sql_yacc.yy"
-    {}
+case 983:
+#line 3317 "sql_yacc.yy"
+{ yyval.item = new Item_field(NullS,yyvsp[-2].lex_str.str,"*"); }
     break;
-
-  case 1012:
-#line 3343 "sql_yacc.yy"
-    {}
+case 984:
+#line 3319 "sql_yacc.yy"
+{ yyval.item = new Item_field((current_thd->client_capabilities &
+   CLIENT_NO_SCHEMA ? NullS : yyvsp[-4].lex_str.str),yyvsp[-2].lex_str.str,"*"); }
     break;
-
-  case 1013:
-#line 3344 "sql_yacc.yy"
-    {}
+case 985:
+#line 3323 "sql_yacc.yy"
+{ yyval.item=yyvsp[0].item; }
     break;
-
-  case 1014:
-#line 3345 "sql_yacc.yy"
-    {}
+case 986:
+#line 3327 "sql_yacc.yy"
+{
+	  SELECT_LEX *sel=Select;
+	  yyval.item = !sel->create_refs || sel->in_sum_expr > 0 ? (Item*) new Item_field(NullS,NullS,yyvsp[0].lex_str.str) : (Item*) new Item_ref(NullS,NullS,yyvsp[0].lex_str.str);
+	}
     break;
-
-  case 1015:
-#line 3346 "sql_yacc.yy"
-    {}
+case 987:
+#line 3332 "sql_yacc.yy"
+{
+	  SELECT_LEX *sel=Select;
+	  yyval.item = !sel->create_refs || sel->in_sum_expr > 0 ? (Item*) new Item_field(NullS,yyvsp[-2].lex_str.str,yyvsp[0].lex_str.str) : (Item*) new Item_ref(NullS,yyvsp[-2].lex_str.str,yyvsp[0].lex_str.str);
+	}
     break;
-
-  case 1016:
-#line 3347 "sql_yacc.yy"
-    {}
+case 988:
+#line 3337 "sql_yacc.yy"
+{
+	  SELECT_LEX *sel=Select;
+	  yyval.item = !sel->create_refs || sel->in_sum_expr > 0 ? (Item*) new Item_field(NullS,yyvsp[-2].lex_str.str,yyvsp[0].lex_str.str) : (Item*) new Item_ref(NullS,yyvsp[-2].lex_str.str,yyvsp[0].lex_str.str);
+	}
     break;
-
-  case 1017:
-#line 3348 "sql_yacc.yy"
-    {}
+case 989:
+#line 3342 "sql_yacc.yy"
+{
+	  SELECT_LEX *sel=Select;
+	  yyval.item = !sel->create_refs || sel->in_sum_expr > 0 ? (Item*) new Item_field((current_thd->client_capabilities & CLIENT_NO_SCHEMA ? NullS :yyvsp[-4].lex_str.str),yyvsp[-2].lex_str.str,yyvsp[0].lex_str.str) : (Item*) new Item_ref((current_thd->client_capabilities & CLIENT_NO_SCHEMA ? NullS :yyvsp[-4].lex_str.str),yyvsp[-2].lex_str.str,yyvsp[0].lex_str.str);
+	}
     break;
-
-  case 1018:
+case 990:
 #line 3349 "sql_yacc.yy"
-    {}
+{ yyval.lex_str=yyvsp[0].lex_str;}
     break;
-
-  case 1019:
+case 991:
 #line 3350 "sql_yacc.yy"
-    {}
+{ yyval.lex_str=yyvsp[0].lex_str;}
     break;
-
-  case 1020:
+case 992:
 #line 3351 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1021:
-#line 3352 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1022:
-#line 3353 "sql_yacc.yy"
-    {}
+{ yyval.lex_str=yyvsp[0].lex_str;}
     break;
-
-  case 1023:
+case 993:
 #line 3354 "sql_yacc.yy"
-    {}
+{ yyval.table=new Table_ident(yyvsp[0].lex_str); }
     break;
-
-  case 1024:
+case 994:
 #line 3355 "sql_yacc.yy"
-    {}
+{ yyval.table=new Table_ident(yyvsp[-2].lex_str,yyvsp[0].lex_str,0);}
     break;
-
-  case 1025:
+case 995:
 #line 3356 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1026:
-#line 3357 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1027:
-#line 3358 "sql_yacc.yy"
-    {}
+{ yyval.table=new Table_ident(yyvsp[0].lex_str);}
     break;
-
-  case 1028:
-#line 3359 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1029:
+case 996:
 #line 3360 "sql_yacc.yy"
-    {}
+{ LEX_STRING db={(char*) "",0}; yyval.table=new Table_ident(db,yyvsp[0].lex_str,0); }
     break;
-
-  case 1030:
+case 997:
 #line 3361 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1031:
-#line 3362 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1032:
-#line 3363 "sql_yacc.yy"
-    {}
+{ yyval.table=new Table_ident(yyvsp[-2].lex_str,yyvsp[0].lex_str,0);}
     break;
-
-  case 1033:
-#line 3364 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1034:
+case 998:
 #line 3365 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1035:
-#line 3366 "sql_yacc.yy"
-    {}
+{ yyval.lex_str=yyvsp[0].lex_str; }
     break;
-
-  case 1036:
+case 999:
 #line 3367 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1037:
-#line 3368 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1038:
-#line 3369 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1039:
-#line 3370 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1040:
-#line 3371 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1041:
-#line 3372 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1042:
-#line 3373 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1043:
-#line 3374 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1044:
-#line 3375 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1045:
-#line 3376 "sql_yacc.yy"
-    {}
+{
+	  LEX *lex= Lex;
+	  yyval.lex_str.str= lex->thd->strmake(yyvsp[0].symbol.str,yyvsp[0].symbol.length);
+	  yyval.lex_str.length=yyvsp[0].symbol.length;
+	  if (lex->next_state != STATE_END)
+	    lex->next_state=STATE_OPERATOR_OR_IDENT;
+	}
     break;
-
-  case 1046:
+case 1000:
 #line 3377 "sql_yacc.yy"
-    {}
+{ yyval.lex_str=yyvsp[0].lex_str;}
     break;
-
-  case 1047:
+case 1001:
 #line 3378 "sql_yacc.yy"
-    {}
+{ yyval.lex_str=yyvsp[0].lex_str;}
     break;
-
-  case 1048:
+case 1002:
 #line 3379 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1049:
-#line 3380 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1050:
-#line 3381 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1051:
-#line 3382 "sql_yacc.yy"
-    {}
+{ yyval.lex_str=yyvsp[0].lex_str;}
     break;
-
-  case 1052:
+case 1003:
 #line 3383 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1053:
-#line 3384 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1054:
-#line 3385 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1055:
-#line 3386 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1056:
-#line 3387 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1057:
-#line 3388 "sql_yacc.yy"
-    {}
+{
+	  if (!(yyval.lex_user=(LEX_USER*) sql_alloc(sizeof(st_lex_user))))
+	    YYABORT;
+	  yyval.lex_user->user = yyvsp[0].lex_str; yyval.lex_user->host.str=NullS;
+	  }
     break;
-
-  case 1058:
+case 1004:
 #line 3389 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1059:
-#line 3390 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1060:
-#line 3391 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1061:
-#line 3392 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1062:
-#line 3393 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1063:
-#line 3394 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1064:
-#line 3395 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1065:
-#line 3396 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1066:
-#line 3397 "sql_yacc.yy"
-    {}
+{
+	  if (!(yyval.lex_user=(LEX_USER*) sql_alloc(sizeof(st_lex_user))))
+	      YYABORT;
+	    yyval.lex_user->user = yyvsp[-2].lex_str; yyval.lex_user->host=yyvsp[0].lex_str;
+	  }
     break;
-
-  case 1067:
+case 1005:
 #line 3398 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1068:
+case 1006:
 #line 3399 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1069:
+case 1007:
 #line 3400 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1070:
+case 1008:
 #line 3401 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1071:
+case 1009:
 #line 3402 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1072:
+case 1010:
 #line 3403 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1073:
+case 1011:
 #line 3404 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1074:
+case 1012:
 #line 3405 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1075:
+case 1013:
 #line 3406 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1076:
+case 1014:
 #line 3407 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1077:
+case 1015:
 #line 3408 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1078:
+case 1016:
 #line 3409 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1079:
+case 1017:
 #line 3410 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1080:
+case 1018:
 #line 3411 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1081:
+case 1019:
 #line 3412 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1082:
+case 1020:
 #line 3413 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1083:
+case 1021:
 #line 3414 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1084:
+case 1022:
 #line 3415 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1085:
+case 1023:
 #line 3416 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1086:
+case 1024:
 #line 3417 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1087:
+case 1025:
 #line 3418 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1088:
+case 1026:
 #line 3419 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1089:
+case 1027:
 #line 3420 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1090:
+case 1028:
 #line 3421 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1091:
+case 1029:
 #line 3422 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1092:
+case 1030:
 #line 3423 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1093:
+case 1031:
 #line 3424 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1094:
+case 1032:
 #line 3425 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1095:
+case 1033:
 #line 3426 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1096:
+case 1034:
 #line 3427 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1097:
+case 1035:
 #line 3428 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1098:
+case 1036:
 #line 3429 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1099:
+case 1037:
 #line 3430 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1100:
+case 1038:
 #line 3431 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1101:
+case 1039:
 #line 3432 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1102:
+case 1040:
 #line 3433 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1103:
+case 1041:
 #line 3434 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1104:
+case 1042:
 #line 3435 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1105:
+case 1043:
 #line 3436 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1106:
+case 1044:
 #line 3437 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1107:
+case 1045:
 #line 3438 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1108:
+case 1046:
 #line 3439 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1109:
+case 1047:
 #line 3440 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1110:
+case 1048:
 #line 3441 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1111:
+case 1049:
 #line 3442 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1112:
+case 1050:
 #line 3443 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1113:
+case 1051:
 #line 3444 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1114:
+case 1052:
 #line 3445 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1115:
+case 1053:
 #line 3446 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1116:
+case 1054:
 #line 3447 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1117:
+case 1055:
 #line 3448 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1118:
+case 1056:
 #line 3449 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1119:
+case 1057:
 #line 3450 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1120:
+case 1058:
 #line 3451 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1121:
+case 1059:
 #line 3452 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1122:
+case 1060:
 #line 3453 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1123:
+case 1061:
 #line 3454 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1124:
+case 1062:
 #line 3455 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1125:
+case 1063:
 #line 3456 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1126:
+case 1064:
 #line 3457 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1127:
+case 1065:
 #line 3458 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1128:
+case 1066:
 #line 3459 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1129:
+case 1067:
 #line 3460 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1130:
+case 1068:
 #line 3461 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1131:
+case 1069:
 #line 3462 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1132:
+case 1070:
 #line 3463 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1133:
+case 1071:
 #line 3464 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1134:
+case 1072:
 #line 3465 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1135:
+case 1073:
 #line 3466 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1136:
+case 1074:
 #line 3467 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1137:
+case 1075:
 #line 3468 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1138:
+case 1076:
 #line 3469 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1139:
+case 1077:
+#line 3470 "sql_yacc.yy"
+{}
+    break;
+case 1078:
+#line 3471 "sql_yacc.yy"
+{}
+    break;
+case 1079:
+#line 3472 "sql_yacc.yy"
+{}
+    break;
+case 1080:
+#line 3473 "sql_yacc.yy"
+{}
+    break;
+case 1081:
+#line 3474 "sql_yacc.yy"
+{}
+    break;
+case 1082:
 #line 3475 "sql_yacc.yy"
-    {
-	  LEX *lex=Lex;
-	  lex->sql_command= SQLCOM_SET_OPTION;
-	  lex->option_type=OPT_DEFAULT;
-	  lex->var_list.empty();
-	}
+{}
     break;
-
-  case 1140:
+case 1083:
+#line 3476 "sql_yacc.yy"
+{}
+    break;
+case 1084:
+#line 3477 "sql_yacc.yy"
+{}
+    break;
+case 1085:
+#line 3478 "sql_yacc.yy"
+{}
+    break;
+case 1086:
+#line 3479 "sql_yacc.yy"
+{}
+    break;
+case 1087:
+#line 3480 "sql_yacc.yy"
+{}
+    break;
+case 1088:
+#line 3481 "sql_yacc.yy"
+{}
+    break;
+case 1089:
 #line 3482 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1141:
+case 1090:
+#line 3483 "sql_yacc.yy"
+{}
+    break;
+case 1091:
+#line 3484 "sql_yacc.yy"
+{}
+    break;
+case 1092:
+#line 3485 "sql_yacc.yy"
+{}
+    break;
+case 1093:
 #line 3486 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1142:
+case 1094:
 #line 3487 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1145:
+case 1095:
+#line 3488 "sql_yacc.yy"
+{}
+    break;
+case 1096:
+#line 3489 "sql_yacc.yy"
+{}
+    break;
+case 1097:
+#line 3490 "sql_yacc.yy"
+{}
+    break;
+case 1098:
+#line 3491 "sql_yacc.yy"
+{}
+    break;
+case 1099:
+#line 3492 "sql_yacc.yy"
+{}
+    break;
+case 1100:
+#line 3493 "sql_yacc.yy"
+{}
+    break;
+case 1101:
 #line 3494 "sql_yacc.yy"
-    {}
+{}
     break;
-
-  case 1146:
+case 1102:
 #line 3495 "sql_yacc.yy"
-    { Lex->option_type= OPT_GLOBAL; }
+{}
     break;
-
-  case 1147:
+case 1103:
 #line 3496 "sql_yacc.yy"
-    { Lex->option_type= OPT_SESSION; }
+{}
     break;
-
-  case 1148:
+case 1104:
 #line 3497 "sql_yacc.yy"
-    { Lex->option_type= OPT_SESSION; }
+{}
     break;
-
-  case 1149:
+case 1105:
+#line 3498 "sql_yacc.yy"
+{}
+    break;
+case 1106:
+#line 3499 "sql_yacc.yy"
+{}
+    break;
+case 1107:
+#line 3500 "sql_yacc.yy"
+{}
+    break;
+case 1108:
 #line 3501 "sql_yacc.yy"
-    { yyval.num=OPT_SESSION; }
+{}
     break;
-
-  case 1150:
+case 1109:
 #line 3502 "sql_yacc.yy"
-    { yyval.num=OPT_SESSION; }
+{}
     break;
-
-  case 1151:
+case 1110:
 #line 3503 "sql_yacc.yy"
-    { yyval.num=OPT_SESSION; }
+{}
     break;
-
-  case 1152:
+case 1111:
 #line 3504 "sql_yacc.yy"
-    { yyval.num=OPT_GLOBAL; }
+{}
     break;
-
-  case 1153:
+case 1112:
+#line 3505 "sql_yacc.yy"
+{}
+    break;
+case 1113:
+#line 3506 "sql_yacc.yy"
+{}
+    break;
+case 1114:
+#line 3507 "sql_yacc.yy"
+{}
+    break;
+case 1115:
 #line 3508 "sql_yacc.yy"
-    { yyval.num=OPT_DEFAULT; }
+{}
     break;
-
-  case 1154:
+case 1116:
 #line 3509 "sql_yacc.yy"
-    { yyval.num=OPT_SESSION; }
+{}
     break;
-
-  case 1155:
+case 1117:
 #line 3510 "sql_yacc.yy"
-    { yyval.num=OPT_SESSION; }
+{}
     break;
-
-  case 1156:
+case 1118:
 #line 3511 "sql_yacc.yy"
-    { yyval.num=OPT_GLOBAL; }
+{}
     break;
-
-  case 1157:
+case 1119:
+#line 3512 "sql_yacc.yy"
+{}
+    break;
+case 1120:
+#line 3513 "sql_yacc.yy"
+{}
+    break;
+case 1121:
+#line 3514 "sql_yacc.yy"
+{}
+    break;
+case 1122:
+#line 3515 "sql_yacc.yy"
+{}
+    break;
+case 1123:
 #line 3516 "sql_yacc.yy"
-    {
+{}
+    break;
+case 1124:
+#line 3517 "sql_yacc.yy"
+{}
+    break;
+case 1125:
+#line 3518 "sql_yacc.yy"
+{}
+    break;
+case 1126:
+#line 3519 "sql_yacc.yy"
+{}
+    break;
+case 1127:
+#line 3520 "sql_yacc.yy"
+{}
+    break;
+case 1128:
+#line 3521 "sql_yacc.yy"
+{}
+    break;
+case 1129:
+#line 3522 "sql_yacc.yy"
+{}
+    break;
+case 1130:
+#line 3523 "sql_yacc.yy"
+{}
+    break;
+case 1131:
+#line 3524 "sql_yacc.yy"
+{}
+    break;
+case 1132:
+#line 3525 "sql_yacc.yy"
+{}
+    break;
+case 1133:
+#line 3526 "sql_yacc.yy"
+{}
+    break;
+case 1134:
+#line 3527 "sql_yacc.yy"
+{}
+    break;
+case 1135:
+#line 3528 "sql_yacc.yy"
+{}
+    break;
+case 1136:
+#line 3529 "sql_yacc.yy"
+{}
+    break;
+case 1137:
+#line 3530 "sql_yacc.yy"
+{}
+    break;
+case 1138:
+#line 3531 "sql_yacc.yy"
+{}
+    break;
+case 1139:
+#line 3532 "sql_yacc.yy"
+{}
+    break;
+case 1140:
+#line 3533 "sql_yacc.yy"
+{}
+    break;
+case 1141:
+#line 3534 "sql_yacc.yy"
+{}
+    break;
+case 1142:
+#line 3535 "sql_yacc.yy"
+{}
+    break;
+case 1143:
+#line 3536 "sql_yacc.yy"
+{}
+    break;
+case 1144:
+#line 3537 "sql_yacc.yy"
+{}
+    break;
+case 1145:
+#line 3538 "sql_yacc.yy"
+{}
+    break;
+case 1146:
+#line 3539 "sql_yacc.yy"
+{}
+    break;
+case 1147:
+#line 3540 "sql_yacc.yy"
+{}
+    break;
+case 1148:
+#line 3541 "sql_yacc.yy"
+{}
+    break;
+case 1149:
+#line 3542 "sql_yacc.yy"
+{}
+    break;
+case 1150:
+#line 3543 "sql_yacc.yy"
+{}
+    break;
+case 1151:
+#line 3544 "sql_yacc.yy"
+{}
+    break;
+case 1152:
+#line 3545 "sql_yacc.yy"
+{}
+    break;
+case 1153:
+#line 3546 "sql_yacc.yy"
+{}
+    break;
+case 1154:
+#line 3547 "sql_yacc.yy"
+{}
+    break;
+case 1155:
+#line 3548 "sql_yacc.yy"
+{}
+    break;
+case 1156:
+#line 3549 "sql_yacc.yy"
+{}
+    break;
+case 1157:
+#line 3550 "sql_yacc.yy"
+{}
+    break;
+case 1158:
+#line 3551 "sql_yacc.yy"
+{}
+    break;
+case 1159:
+#line 3552 "sql_yacc.yy"
+{}
+    break;
+case 1160:
+#line 3553 "sql_yacc.yy"
+{}
+    break;
+case 1161:
+#line 3554 "sql_yacc.yy"
+{}
+    break;
+case 1162:
+#line 3555 "sql_yacc.yy"
+{}
+    break;
+case 1163:
+#line 3556 "sql_yacc.yy"
+{}
+    break;
+case 1164:
+#line 3557 "sql_yacc.yy"
+{}
+    break;
+case 1165:
+#line 3558 "sql_yacc.yy"
+{}
+    break;
+case 1166:
+#line 3564 "sql_yacc.yy"
+{
+	  LEX *lex=Lex;
+	  lex->sql_command= SQLCOM_SET_OPTION;
+	  lex->option_type=OPT_DEFAULT;
+	  lex->var_list.empty();
+	}
+    break;
+case 1167:
+#line 3571 "sql_yacc.yy"
+{}
+    break;
+case 1168:
+#line 3575 "sql_yacc.yy"
+{}
+    break;
+case 1169:
+#line 3576 "sql_yacc.yy"
+{}
+    break;
+case 1172:
+#line 3583 "sql_yacc.yy"
+{}
+    break;
+case 1173:
+#line 3584 "sql_yacc.yy"
+{ Lex->option_type= OPT_GLOBAL; }
+    break;
+case 1174:
+#line 3585 "sql_yacc.yy"
+{ Lex->option_type= OPT_SESSION; }
+    break;
+case 1175:
+#line 3586 "sql_yacc.yy"
+{ Lex->option_type= OPT_SESSION; }
+    break;
+case 1176:
+#line 3590 "sql_yacc.yy"
+{ yyval.num=OPT_SESSION; }
+    break;
+case 1177:
+#line 3591 "sql_yacc.yy"
+{ yyval.num=OPT_SESSION; }
+    break;
+case 1178:
+#line 3592 "sql_yacc.yy"
+{ yyval.num=OPT_SESSION; }
+    break;
+case 1179:
+#line 3593 "sql_yacc.yy"
+{ yyval.num=OPT_GLOBAL; }
+    break;
+case 1180:
+#line 3597 "sql_yacc.yy"
+{ yyval.num=OPT_DEFAULT; }
+    break;
+case 1181:
+#line 3598 "sql_yacc.yy"
+{ yyval.num=OPT_SESSION; }
+    break;
+case 1182:
+#line 3599 "sql_yacc.yy"
+{ yyval.num=OPT_SESSION; }
+    break;
+case 1183:
+#line 3600 "sql_yacc.yy"
+{ yyval.num=OPT_GLOBAL; }
+    break;
+case 1184:
+#line 3605 "sql_yacc.yy"
+{
 	  Lex->var_list.push_back(new set_var_user(new Item_func_set_user_var(yyvsp[-2].lex_str,yyvsp[0].item)));
 	}
     break;
-
-  case 1158:
-#line 3520 "sql_yacc.yy"
-    {
+case 1185:
+#line 3609 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->var_list.push_back(new set_var(lex->option_type, yyvsp[-2].variable, yyvsp[0].item));
 	  }
     break;
-
-  case 1159:
-#line 3525 "sql_yacc.yy"
-    {
+case 1186:
+#line 3614 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->var_list.push_back(new set_var((enum_var_type) yyvsp[-3].num, yyvsp[-2].variable, yyvsp[0].item));
 	  }
     break;
-
-  case 1160:
-#line 3530 "sql_yacc.yy"
-    {
+case 1187:
+#line 3619 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->var_list.push_back(new set_var(lex->option_type,
 						find_sys_var("tx_isolation"),
 						new Item_int((int32) yyvsp[0].tx_isolation)));
 	  }
     break;
-
-  case 1161:
-#line 3537 "sql_yacc.yy"
-    {
+case 1188:
+#line 3626 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  lex->var_list.push_back(new set_var(lex->option_type,
 					      find_sys_var("convert_character_set"),
 					      yyvsp[0].item));
 	}
     break;
-
-  case 1162:
-#line 3544 "sql_yacc.yy"
-    {
+case 1189:
+#line 3633 "sql_yacc.yy"
+{
 	    THD *thd=current_thd;
 	    LEX_USER *user;
 	    if (!(user=(LEX_USER*) sql_alloc(sizeof(LEX_USER))))
@@ -14906,52 +13531,44 @@
 	    thd->lex.var_list.push_back(new set_var_password(user, yyvsp[0].simple_string));
 	  }
     break;
-
-  case 1163:
-#line 3554 "sql_yacc.yy"
-    {
+case 1190:
+#line 3643 "sql_yacc.yy"
+{
 	    Lex->var_list.push_back(new set_var_password(yyvsp[-2].lex_user,yyvsp[0].simple_string));
 	  }
     break;
-
-  case 1164:
-#line 3561 "sql_yacc.yy"
-    {
+case 1191:
+#line 3650 "sql_yacc.yy"
+{
 	  sys_var *tmp=find_sys_var(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length);
 	  if (!tmp)
 	    YYABORT;
 	  yyval.variable=tmp;
 	}
     break;
-
-  case 1165:
-#line 3570 "sql_yacc.yy"
-    { yyval.tx_isolation= ISO_READ_UNCOMMITTED; }
+case 1192:
+#line 3659 "sql_yacc.yy"
+{ yyval.tx_isolation= ISO_READ_UNCOMMITTED; }
     break;
-
-  case 1166:
-#line 3571 "sql_yacc.yy"
-    { yyval.tx_isolation= ISO_READ_COMMITTED; }
+case 1193:
+#line 3660 "sql_yacc.yy"
+{ yyval.tx_isolation= ISO_READ_COMMITTED; }
     break;
-
-  case 1167:
-#line 3572 "sql_yacc.yy"
-    { yyval.tx_isolation= ISO_REPEATABLE_READ; }
+case 1194:
+#line 3661 "sql_yacc.yy"
+{ yyval.tx_isolation= ISO_REPEATABLE_READ; }
     break;
-
-  case 1168:
-#line 3573 "sql_yacc.yy"
-    { yyval.tx_isolation= ISO_SERIALIZABLE; }
+case 1195:
+#line 3662 "sql_yacc.yy"
+{ yyval.tx_isolation= ISO_SERIALIZABLE; }
     break;
-
-  case 1169:
-#line 3577 "sql_yacc.yy"
-    { yyval.simple_string=yyvsp[0].lex_str.str;}
+case 1196:
+#line 3666 "sql_yacc.yy"
+{ yyval.simple_string=yyvsp[0].lex_str.str;}
     break;
-
-  case 1170:
-#line 3579 "sql_yacc.yy"
-    {
+case 1197:
+#line 3668 "sql_yacc.yy"
+{
 	    if (!yyvsp[-1].lex_str.length)
 	      yyval.simple_string=yyvsp[-1].lex_str.str;
 	    else
@@ -14962,90 +13579,75 @@
 	    }
 	  }
     break;
-
-  case 1171:
-#line 3592 "sql_yacc.yy"
-    { yyval.item=yyvsp[0].item; }
+case 1198:
+#line 3681 "sql_yacc.yy"
+{ yyval.item=yyvsp[0].item; }
     break;
-
-  case 1172:
-#line 3593 "sql_yacc.yy"
-    { yyval.item=0; }
+case 1199:
+#line 3682 "sql_yacc.yy"
+{ yyval.item=0; }
     break;
-
-  case 1173:
-#line 3594 "sql_yacc.yy"
-    { yyval.item=new Item_string("ON",2); }
+case 1200:
+#line 3683 "sql_yacc.yy"
+{ yyval.item=new Item_string("ON",2); }
     break;
-
-  case 1174:
-#line 3595 "sql_yacc.yy"
-    { yyval.item=new Item_string("ALL",3); }
+case 1201:
+#line 3684 "sql_yacc.yy"
+{ yyval.item=new Item_string("ALL",3); }
     break;
-
-  case 1175:
-#line 3603 "sql_yacc.yy"
-    {
+case 1202:
+#line 3692 "sql_yacc.yy"
+{
 	  Lex->sql_command=SQLCOM_LOCK_TABLES;
 	}
     break;
-
-  case 1176:
-#line 3607 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1181:
-#line 3620 "sql_yacc.yy"
-    { if (!add_table_to_list(yyvsp[-2].table,yyvsp[-1].lex_str_ptr,0,(thr_lock_type) yyvsp[0].num)) YYABORT; }
-    break;
-
-  case 1182:
-#line 3623 "sql_yacc.yy"
-    { yyval.num=TL_READ_NO_INSERT; }
-    break;
-
-  case 1183:
-#line 3624 "sql_yacc.yy"
-    { yyval.num=current_thd->update_lock_default; }
-    break;
-
-  case 1184:
-#line 3625 "sql_yacc.yy"
-    { yyval.num=TL_WRITE_LOW_PRIORITY; }
-    break;
-
-  case 1185:
-#line 3626 "sql_yacc.yy"
-    { yyval.num= TL_READ; }
-    break;
-
-  case 1186:
-#line 3629 "sql_yacc.yy"
-    { Lex->sql_command=SQLCOM_UNLOCK_TABLES; }
+case 1203:
+#line 3696 "sql_yacc.yy"
+{}
+    break;
+case 1208:
+#line 3709 "sql_yacc.yy"
+{ if (!add_table_to_list(yyvsp[-2].table,yyvsp[-1].lex_str_ptr,0,(thr_lock_type) yyvsp[0].num)) YYABORT; }
+    break;
+case 1209:
+#line 3712 "sql_yacc.yy"
+{ yyval.num=TL_READ_NO_INSERT; }
+    break;
+case 1210:
+#line 3713 "sql_yacc.yy"
+{ yyval.num=current_thd->update_lock_default; }
+    break;
+case 1211:
+#line 3714 "sql_yacc.yy"
+{ yyval.num=TL_WRITE_LOW_PRIORITY; }
+    break;
+case 1212:
+#line 3715 "sql_yacc.yy"
+{ yyval.num= TL_READ; }
+    break;
+case 1213:
+#line 3718 "sql_yacc.yy"
+{ Lex->sql_command=SQLCOM_UNLOCK_TABLES; }
     break;
-
-  case 1187:
-#line 3638 "sql_yacc.yy"
-    {
+case 1214:
+#line 3727 "sql_yacc.yy"
+{
 	  Lex->sql_command = SQLCOM_HA_OPEN;
 	  if (!add_table_to_list(yyvsp[-2].table,yyvsp[0].lex_str_ptr,0))
 	    YYABORT;
 	}
     break;
-
-  case 1188:
-#line 3644 "sql_yacc.yy"
-    {
+case 1215:
+#line 3733 "sql_yacc.yy"
+{
 	  Lex->sql_command = SQLCOM_HA_CLOSE;
 	  if (!add_table_to_list(yyvsp[-1].table,0,0))
 	    YYABORT;
 	}
     break;
-
-  case 1189:
-#line 3650 "sql_yacc.yy"
-    {
+case 1216:
+#line 3739 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  lex->sql_command = SQLCOM_HA_READ;
 	  lex->ha_rkey_mode= HA_READ_KEY_EXACT;	/* Avoid purify warnings */
@@ -15055,96 +13657,79 @@
 	    YYABORT;
         }
     break;
-
-  case 1190:
-#line 3659 "sql_yacc.yy"
-    { }
-    break;
-
-  case 1191:
-#line 3662 "sql_yacc.yy"
-    { Lex->backup_dir= 0; }
-    break;
-
-  case 1192:
-#line 3663 "sql_yacc.yy"
-    { Lex->backup_dir= yyvsp[-1].lex_str.str; }
-    break;
-
-  case 1193:
-#line 3666 "sql_yacc.yy"
-    { Lex->ha_read_mode = RFIRST; }
+case 1217:
+#line 3748 "sql_yacc.yy"
+{ }
     break;
-
-  case 1194:
-#line 3667 "sql_yacc.yy"
-    { Lex->ha_read_mode = RNEXT;  }
+case 1218:
+#line 3751 "sql_yacc.yy"
+{ Lex->backup_dir= 0; }
     break;
-
-  case 1195:
-#line 3670 "sql_yacc.yy"
-    { Lex->ha_read_mode = RFIRST; }
+case 1219:
+#line 3752 "sql_yacc.yy"
+{ Lex->backup_dir= yyvsp[-1].lex_str.str; }
     break;
-
-  case 1196:
-#line 3671 "sql_yacc.yy"
-    { Lex->ha_read_mode = RNEXT;  }
+case 1220:
+#line 3755 "sql_yacc.yy"
+{ Lex->ha_read_mode = RFIRST; }
     break;
-
-  case 1197:
-#line 3672 "sql_yacc.yy"
-    { Lex->ha_read_mode = RPREV;  }
+case 1221:
+#line 3756 "sql_yacc.yy"
+{ Lex->ha_read_mode = RNEXT;  }
     break;
-
-  case 1198:
-#line 3673 "sql_yacc.yy"
-    { Lex->ha_read_mode = RLAST;  }
+case 1222:
+#line 3759 "sql_yacc.yy"
+{ Lex->ha_read_mode = RFIRST; }
     break;
-
-  case 1199:
-#line 3675 "sql_yacc.yy"
-    {
-	  LEX *lex=Lex;
-	  lex->ha_read_mode = RKEY;
-	  lex->ha_rkey_mode=yyvsp[0].ha_rkey_mode;
-	  if (!(lex->insert_list = new List_item))
-	    YYABORT;
-	}
+case 1223:
+#line 3760 "sql_yacc.yy"
+{ Lex->ha_read_mode = RNEXT;  }
     break;
-
-  case 1200:
-#line 3681 "sql_yacc.yy"
-    { }
+case 1224:
+#line 3761 "sql_yacc.yy"
+{ Lex->ha_read_mode = RPREV;  }
     break;
-
-  case 1201:
-#line 3684 "sql_yacc.yy"
-    { yyval.ha_rkey_mode=HA_READ_KEY_EXACT;   }
+case 1225:
+#line 3762 "sql_yacc.yy"
+{ Lex->ha_read_mode = RLAST;  }
     break;
-
-  case 1202:
-#line 3685 "sql_yacc.yy"
-    { yyval.ha_rkey_mode=HA_READ_KEY_OR_NEXT; }
+case 1226:
+#line 3764 "sql_yacc.yy"
+{
+	  LEX *lex=Lex;
+	  lex->ha_read_mode = RKEY;
+	  lex->ha_rkey_mode=yyvsp[0].ha_rkey_mode;
+	  if (!(lex->insert_list = new List_item))
+	    YYABORT;
+	}
     break;
-
-  case 1203:
-#line 3686 "sql_yacc.yy"
-    { yyval.ha_rkey_mode=HA_READ_KEY_OR_PREV; }
+case 1227:
+#line 3770 "sql_yacc.yy"
+{ }
+    break;
+case 1228:
+#line 3773 "sql_yacc.yy"
+{ yyval.ha_rkey_mode=HA_READ_KEY_EXACT;   }
     break;
-
-  case 1204:
-#line 3687 "sql_yacc.yy"
-    { yyval.ha_rkey_mode=HA_READ_AFTER_KEY;   }
+case 1229:
+#line 3774 "sql_yacc.yy"
+{ yyval.ha_rkey_mode=HA_READ_KEY_OR_NEXT; }
     break;
-
-  case 1205:
-#line 3688 "sql_yacc.yy"
-    { yyval.ha_rkey_mode=HA_READ_BEFORE_KEY;  }
+case 1230:
+#line 3775 "sql_yacc.yy"
+{ yyval.ha_rkey_mode=HA_READ_KEY_OR_PREV; }
+    break;
+case 1231:
+#line 3776 "sql_yacc.yy"
+{ yyval.ha_rkey_mode=HA_READ_AFTER_KEY;   }
+    break;
+case 1232:
+#line 3777 "sql_yacc.yy"
+{ yyval.ha_rkey_mode=HA_READ_BEFORE_KEY;  }
     break;
-
-  case 1206:
-#line 3694 "sql_yacc.yy"
-    {
+case 1233:
+#line 3783 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  lex->sql_command = SQLCOM_REVOKE;
 	  lex->users_list.empty();
@@ -15156,15 +13741,13 @@
 	  bzero((char*) &lex->mqh, sizeof(lex->mqh));
 	}
     break;
-
-  case 1207:
-#line 3706 "sql_yacc.yy"
-    {}
+case 1234:
+#line 3795 "sql_yacc.yy"
+{}
     break;
-
-  case 1208:
-#line 3711 "sql_yacc.yy"
-    {
+case 1235:
+#line 3800 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  lex->users_list.empty();
 	  lex->columns.empty();
@@ -15176,170 +13759,137 @@
 	  bzero((char *)&(lex->mqh),sizeof(lex->mqh));
 	}
     break;
-
-  case 1209:
-#line 3724 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1210:
-#line 3728 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1211:
-#line 3729 "sql_yacc.yy"
-    { Lex->grant = GLOBAL_ACLS;}
+case 1236:
+#line 3813 "sql_yacc.yy"
+{}
+    break;
+case 1237:
+#line 3817 "sql_yacc.yy"
+{}
+    break;
+case 1238:
+#line 3818 "sql_yacc.yy"
+{ Lex->grant = GLOBAL_ACLS;}
     break;
-
-  case 1212:
-#line 3730 "sql_yacc.yy"
-    { Lex->grant = GLOBAL_ACLS;}
+case 1239:
+#line 3819 "sql_yacc.yy"
+{ Lex->grant = GLOBAL_ACLS;}
     break;
-
-  case 1215:
-#line 3737 "sql_yacc.yy"
-    { Lex->which_columns = SELECT_ACL;}
+case 1242:
+#line 3826 "sql_yacc.yy"
+{ Lex->which_columns = SELECT_ACL;}
     break;
-
-  case 1216:
-#line 3737 "sql_yacc.yy"
-    {}
+case 1243:
+#line 3826 "sql_yacc.yy"
+{}
     break;
-
-  case 1217:
-#line 3738 "sql_yacc.yy"
-    { Lex->which_columns = INSERT_ACL;}
+case 1244:
+#line 3827 "sql_yacc.yy"
+{ Lex->which_columns = INSERT_ACL;}
     break;
-
-  case 1218:
-#line 3738 "sql_yacc.yy"
-    {}
+case 1245:
+#line 3827 "sql_yacc.yy"
+{}
     break;
-
-  case 1219:
-#line 3739 "sql_yacc.yy"
-    { Lex->which_columns = UPDATE_ACL; }
+case 1246:
+#line 3828 "sql_yacc.yy"
+{ Lex->which_columns = UPDATE_ACL; }
     break;
-
-  case 1220:
-#line 3739 "sql_yacc.yy"
-    {}
+case 1247:
+#line 3828 "sql_yacc.yy"
+{}
     break;
-
-  case 1221:
-#line 3740 "sql_yacc.yy"
-    { Lex->which_columns = REFERENCES_ACL;}
+case 1248:
+#line 3829 "sql_yacc.yy"
+{ Lex->which_columns = REFERENCES_ACL;}
     break;
-
-  case 1222:
-#line 3740 "sql_yacc.yy"
-    {}
+case 1249:
+#line 3829 "sql_yacc.yy"
+{}
     break;
-
-  case 1223:
-#line 3741 "sql_yacc.yy"
-    { Lex->grant |= DELETE_ACL;}
+case 1250:
+#line 3830 "sql_yacc.yy"
+{ Lex->grant |= DELETE_ACL;}
     break;
-
-  case 1224:
-#line 3742 "sql_yacc.yy"
-    {}
+case 1251:
+#line 3831 "sql_yacc.yy"
+{}
     break;
-
-  case 1225:
-#line 3743 "sql_yacc.yy"
-    { Lex->grant |= INDEX_ACL;}
+case 1252:
+#line 3832 "sql_yacc.yy"
+{ Lex->grant |= INDEX_ACL;}
     break;
-
-  case 1226:
-#line 3744 "sql_yacc.yy"
-    { Lex->grant |= ALTER_ACL;}
+case 1253:
+#line 3833 "sql_yacc.yy"
+{ Lex->grant |= ALTER_ACL;}
     break;
-
-  case 1227:
-#line 3745 "sql_yacc.yy"
-    { Lex->grant |= CREATE_ACL;}
+case 1254:
+#line 3834 "sql_yacc.yy"
+{ Lex->grant |= CREATE_ACL;}
     break;
-
-  case 1228:
-#line 3746 "sql_yacc.yy"
-    { Lex->grant |= DROP_ACL;}
+case 1255:
+#line 3835 "sql_yacc.yy"
+{ Lex->grant |= DROP_ACL;}
     break;
-
-  case 1229:
-#line 3747 "sql_yacc.yy"
-    { Lex->grant |= EXECUTE_ACL;}
+case 1256:
+#line 3836 "sql_yacc.yy"
+{ Lex->grant |= EXECUTE_ACL;}
     break;
-
-  case 1230:
-#line 3748 "sql_yacc.yy"
-    { Lex->grant |= RELOAD_ACL;}
+case 1257:
+#line 3837 "sql_yacc.yy"
+{ Lex->grant |= RELOAD_ACL;}
     break;
-
-  case 1231:
-#line 3749 "sql_yacc.yy"
-    { Lex->grant |= SHUTDOWN_ACL;}
+case 1258:
+#line 3838 "sql_yacc.yy"
+{ Lex->grant |= SHUTDOWN_ACL;}
     break;
-
-  case 1232:
-#line 3750 "sql_yacc.yy"
-    { Lex->grant |= PROCESS_ACL;}
+case 1259:
+#line 3839 "sql_yacc.yy"
+{ Lex->grant |= PROCESS_ACL;}
     break;
-
-  case 1233:
-#line 3751 "sql_yacc.yy"
-    { Lex->grant |= FILE_ACL;}
+case 1260:
+#line 3840 "sql_yacc.yy"
+{ Lex->grant |= FILE_ACL;}
     break;
-
-  case 1234:
-#line 3752 "sql_yacc.yy"
-    { Lex->grant |= GRANT_ACL;}
+case 1261:
+#line 3841 "sql_yacc.yy"
+{ Lex->grant |= GRANT_ACL;}
     break;
-
-  case 1235:
-#line 3753 "sql_yacc.yy"
-    { Lex->grant |= SHOW_DB_ACL;}
+case 1262:
+#line 3842 "sql_yacc.yy"
+{ Lex->grant |= SHOW_DB_ACL;}
     break;
-
-  case 1236:
-#line 3754 "sql_yacc.yy"
-    { Lex->grant |= SUPER_ACL;}
+case 1263:
+#line 3843 "sql_yacc.yy"
+{ Lex->grant |= SUPER_ACL;}
     break;
-
-  case 1237:
-#line 3755 "sql_yacc.yy"
-    { Lex->grant |= CREATE_TMP_ACL;}
+case 1264:
+#line 3844 "sql_yacc.yy"
+{ Lex->grant |= CREATE_TMP_ACL;}
     break;
-
-  case 1238:
-#line 3756 "sql_yacc.yy"
-    { Lex->grant |= LOCK_TABLES_ACL; }
+case 1265:
+#line 3845 "sql_yacc.yy"
+{ Lex->grant |= LOCK_TABLES_ACL; }
     break;
-
-  case 1239:
-#line 3757 "sql_yacc.yy"
-    { Lex->grant |= REPL_SLAVE_ACL;}
+case 1266:
+#line 3846 "sql_yacc.yy"
+{ Lex->grant |= REPL_SLAVE_ACL;}
     break;
-
-  case 1240:
-#line 3758 "sql_yacc.yy"
-    { Lex->grant |= REPL_CLIENT_ACL;}
+case 1267:
+#line 3847 "sql_yacc.yy"
+{ Lex->grant |= REPL_CLIENT_ACL;}
     break;
-
-  case 1241:
-#line 3763 "sql_yacc.yy"
-    {}
+case 1268:
+#line 3852 "sql_yacc.yy"
+{}
     break;
-
-  case 1242:
-#line 3764 "sql_yacc.yy"
-    {}
+case 1269:
+#line 3853 "sql_yacc.yy"
+{}
     break;
-
-  case 1245:
-#line 3774 "sql_yacc.yy"
-    {
+case 1272:
+#line 3863 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  if (lex->x509_subject)
 	  {
@@ -15349,10 +13899,9 @@
 	  lex->x509_subject=yyvsp[0].lex_str.str;
 	}
     break;
-
-  case 1246:
-#line 3784 "sql_yacc.yy"
-    {
+case 1273:
+#line 3873 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  if (lex->x509_issuer)
 	  {
@@ -15362,10 +13911,9 @@
 	  lex->x509_issuer=yyvsp[0].lex_str.str;
 	}
     break;
-
-  case 1247:
-#line 3794 "sql_yacc.yy"
-    {
+case 1274:
+#line 3883 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  if (lex->ssl_cipher)
 	  {
@@ -15375,10 +13923,9 @@
 	  lex->ssl_cipher=yyvsp[0].lex_str.str;
 	}
     break;
-
-  case 1248:
-#line 3807 "sql_yacc.yy"
-    {
+case 1275:
+#line 3896 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->select->db=lex->thd->db;
 	    if (lex->grant == GLOBAL_ACLS)
@@ -15390,10 +13937,9 @@
 	    }
 	  }
     break;
-
-  case 1249:
-#line 3819 "sql_yacc.yy"
-    {
+case 1276:
+#line 3908 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->select->db = yyvsp[-2].lex_str.str;
 	    if (lex->grant == GLOBAL_ACLS)
@@ -15405,10 +13951,9 @@
 	    }
 	  }
     break;
-
-  case 1250:
-#line 3831 "sql_yacc.yy"
-    {
+case 1277:
+#line 3920 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    lex->select->db = NULL;
 	    if (lex->grant == GLOBAL_ACLS)
@@ -15420,10 +13965,9 @@
 	    }
 	  }
     break;
-
-  case 1251:
-#line 3843 "sql_yacc.yy"
-    {
+case 1278:
+#line 3932 "sql_yacc.yy"
+{
 	    LEX *lex=Lex;
 	    if (!add_table_to_list(yyvsp[0].table,NULL,0))
 	      YYABORT;
@@ -15431,23 +13975,20 @@
 	      lex->grant =  TABLE_ACLS & ~GRANT_ACL;
 	  }
     break;
-
-  case 1252:
-#line 3853 "sql_yacc.yy"
-    { if (Lex->users_list.push_back(yyvsp[0].lex_user)) YYABORT;}
+case 1279:
+#line 3942 "sql_yacc.yy"
+{ if (Lex->users_list.push_back(yyvsp[0].lex_user)) YYABORT;}
     break;
-
-  case 1253:
-#line 3855 "sql_yacc.yy"
-    {
+case 1280:
+#line 3944 "sql_yacc.yy"
+{
 	    if (Lex->users_list.push_back(yyvsp[0].lex_user))
 	      YYABORT;
 	  }
     break;
-
-  case 1254:
-#line 3864 "sql_yacc.yy"
-    {
+case 1281:
+#line 3953 "sql_yacc.yy"
+{
 	   yyval.lex_user=yyvsp[-3].lex_user; yyvsp[-3].lex_user->password=yyvsp[0].lex_str;
 	   if (yyvsp[0].lex_str.length)
 	   {
@@ -15461,28 +14002,24 @@
 	  }
 	}
     break;
-
-  case 1255:
-#line 3878 "sql_yacc.yy"
-    { yyval.lex_user=yyvsp[-4].lex_user; yyvsp[-4].lex_user->password=yyvsp[0].lex_str ; }
+case 1282:
+#line 3967 "sql_yacc.yy"
+{ yyval.lex_user=yyvsp[-4].lex_user; yyvsp[-4].lex_user->password=yyvsp[0].lex_str ; }
     break;
-
-  case 1256:
-#line 3880 "sql_yacc.yy"
-    { yyval.lex_user=yyvsp[0].lex_user; yyvsp[0].lex_user->password.str=NullS; }
+case 1283:
+#line 3969 "sql_yacc.yy"
+{ yyval.lex_user=yyvsp[0].lex_user; yyvsp[0].lex_user->password.str=NullS; }
     break;
-
-  case 1257:
-#line 3885 "sql_yacc.yy"
-    {
+case 1284:
+#line 3974 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  lex->grant |= lex->which_columns;
 	}
     break;
-
-  case 1261:
-#line 3897 "sql_yacc.yy"
-    {
+case 1288:
+#line 3986 "sql_yacc.yy"
+{
 	  String *new_str = new String((const char*) yyvsp[0].lex_str.str,yyvsp[0].lex_str.length);
 	  List_iterator <LEX_COLUMN> iter(Lex->columns);
 	  class LEX_COLUMN *point;
@@ -15499,135 +14036,114 @@
 	    lex->columns.push_back(new LEX_COLUMN (*new_str,lex->which_columns));
 	}
     break;
-
-  case 1263:
-#line 3917 "sql_yacc.yy"
-    {
+case 1290:
+#line 4006 "sql_yacc.yy"
+{
             Lex->ssl_type=SSL_TYPE_SPECIFIED;
           }
     break;
-
-  case 1264:
-#line 3921 "sql_yacc.yy"
-    {
+case 1291:
+#line 4010 "sql_yacc.yy"
+{
             Lex->ssl_type=SSL_TYPE_ANY;
           }
     break;
-
-  case 1265:
-#line 3925 "sql_yacc.yy"
-    {
+case 1292:
+#line 4014 "sql_yacc.yy"
+{
             Lex->ssl_type=SSL_TYPE_X509;
           }
     break;
-
-  case 1266:
-#line 3929 "sql_yacc.yy"
-    {
+case 1293:
+#line 4018 "sql_yacc.yy"
+{
 	    Lex->ssl_type=SSL_TYPE_NONE;
 	  }
     break;
-
-  case 1267:
-#line 3935 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1269:
-#line 3939 "sql_yacc.yy"
-    {}
+case 1294:
+#line 4024 "sql_yacc.yy"
+{}
+    break;
+case 1296:
+#line 4028 "sql_yacc.yy"
+{}
     break;
-
-  case 1270:
-#line 3940 "sql_yacc.yy"
-    {}
+case 1297:
+#line 4029 "sql_yacc.yy"
+{}
     break;
-
-  case 1271:
-#line 3943 "sql_yacc.yy"
-    { Lex->grant |= GRANT_ACL;}
+case 1298:
+#line 4032 "sql_yacc.yy"
+{ Lex->grant |= GRANT_ACL;}
     break;
-
-  case 1272:
-#line 3945 "sql_yacc.yy"
-    {
+case 1299:
+#line 4034 "sql_yacc.yy"
+{
 	  Lex->mqh.questions=yyvsp[0].ulong_num;
 	  Lex->mqh.bits |= 1;
 	}
     break;
-
-  case 1273:
-#line 3950 "sql_yacc.yy"
-    {
+case 1300:
+#line 4039 "sql_yacc.yy"
+{
 	  Lex->mqh.updates=yyvsp[0].ulong_num;
 	  Lex->mqh.bits |= 2;
 	}
     break;
-
-  case 1274:
-#line 3955 "sql_yacc.yy"
-    {
+case 1301:
+#line 4044 "sql_yacc.yy"
+{
 	  Lex->mqh.connections=yyvsp[0].ulong_num;
 	  Lex->mqh.bits |= 4;
 	}
     break;
-
-  case 1275:
-#line 3961 "sql_yacc.yy"
-    { Lex->sql_command = SQLCOM_BEGIN;}
-    break;
-
-  case 1276:
-#line 3961 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1277:
-#line 3965 "sql_yacc.yy"
-    {}
+case 1302:
+#line 4050 "sql_yacc.yy"
+{ Lex->sql_command = SQLCOM_BEGIN;}
     break;
-
-  case 1278:
-#line 3966 "sql_yacc.yy"
-    {;}
+case 1303:
+#line 4050 "sql_yacc.yy"
+{}
     break;
-
-  case 1279:
-#line 3969 "sql_yacc.yy"
-    { Lex->sql_command = SQLCOM_COMMIT;}
+case 1304:
+#line 4054 "sql_yacc.yy"
+{}
+    break;
+case 1305:
+#line 4055 "sql_yacc.yy"
+{;}
+    break;
+case 1306:
+#line 4058 "sql_yacc.yy"
+{ Lex->sql_command = SQLCOM_COMMIT;}
     break;
-
-  case 1280:
-#line 3973 "sql_yacc.yy"
-    {
+case 1307:
+#line 4062 "sql_yacc.yy"
+{
 	  Lex->sql_command = SQLCOM_ROLLBACK;
 	}
     break;
-
-  case 1281:
-#line 3977 "sql_yacc.yy"
-    {
+case 1308:
+#line 4066 "sql_yacc.yy"
+{
 	  Lex->sql_command = SQLCOM_ROLLBACK_TO_SAVEPOINT;
 	  Lex->savepoint_name = yyvsp[0].lex_str.str;
 	}
     break;
-
-  case 1282:
-#line 3983 "sql_yacc.yy"
-    {
+case 1309:
+#line 4072 "sql_yacc.yy"
+{
 	  Lex->sql_command = SQLCOM_SAVEPOINT;
 	  Lex->savepoint_name = yyvsp[0].lex_str.str;
 	}
     break;
-
-  case 1283:
-#line 3994 "sql_yacc.yy"
-    {}
+case 1310:
+#line 4083 "sql_yacc.yy"
+{}
     break;
-
-  case 1285:
-#line 3999 "sql_yacc.yy"
-    {
+case 1312:
+#line 4088 "sql_yacc.yy"
+{
 	  LEX *lex=Lex;
 	  if (lex->exchange)
 	  {
@@ -15645,30 +14161,25 @@
 	  lex->select->linkage=UNION_TYPE;
 	}
     break;
-
-  case 1286:
-#line 4016 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1287:
-#line 4020 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1288:
-#line 4021 "sql_yacc.yy"
-    {}
-    break;
-
-  case 1289:
-#line 4027 "sql_yacc.yy"
-    {}
+case 1313:
+#line 4105 "sql_yacc.yy"
+{}
+    break;
+case 1314:
+#line 4109 "sql_yacc.yy"
+{}
+    break;
+case 1315:
+#line 4110 "sql_yacc.yy"
+{}
+    break;
+case 1316:
+#line 4116 "sql_yacc.yy"
+{}
     break;
-
-  case 1290:
-#line 4029 "sql_yacc.yy"
-    {
+case 1317:
+#line 4118 "sql_yacc.yy"
+{
     	    LEX *lex=Lex;
 	    if (!lex->select->braces)
 	    {
@@ -15685,36 +14196,109 @@
             }
 	  }
     break;
-
-  case 1292:
-#line 4049 "sql_yacc.yy"
-    {}
+case 1319:
+#line 4138 "sql_yacc.yy"
+{}
+    break;
+case 1320:
+#line 4139 "sql_yacc.yy"
+{}
+    break;
+case 1321:
+#line 4140 "sql_yacc.yy"
+{ Lex->union_option=1; }
     break;
-
-  case 1293:
-#line 4050 "sql_yacc.yy"
-    {}
+case 1322:
+#line 4147 "sql_yacc.yy"
+{
+	  LEX *lex = Lex;
+	  lex->sql_command = SQLCOM_MAKE_MASTER;
+	  bzero((char*) &lex->mi, sizeof(lex->mi));
+       }
     break;
-
-  case 1294:
-#line 4051 "sql_yacc.yy"
-    { Lex->union_option=1; }
+case 1323:
+#line 4153 "sql_yacc.yy"
+{
+       }
     break;
+case 1324:
+#line 4159 "sql_yacc.yy"
+{
+	 Lex->mi.log_file_name = yyvsp[-4].lex_str.str;
+         Lex->mi.server_id = yyvsp[0].ulong_num;
+       }
+    break;
+case 1325:
+#line 4163 "sql_yacc.yy"
+{}
+    break;
+case 1326:
+#line 4165 "sql_yacc.yy"
+{
+	 Lex->mi.log_file_name = yyvsp[-8].lex_str.str;
+         Lex->mi.server_id = yyvsp[-4].ulong_num;
+	 Lex->mi.log_index_name = yyvsp[0].lex_str.str;
+       }
+    break;
+case 1327:
+#line 4170 "sql_yacc.yy"
+{}
+    break;
+case 1328:
+#line 4172 "sql_yacc.yy"
+{
+	 Lex->mi.in_failover = 0;
+       }
+    break;
+case 1329:
+#line 4176 "sql_yacc.yy"
+{
+	 Lex->mi.in_failover = 1;
+       }
+    break;
+case 1330:
+#line 4180 "sql_yacc.yy"
+{
+	 Lex->mi.in_failover = 1;
+	 Lex->mi.kill_session = 1;
+       }
+    break;
+case 1331:
+#line 4187 "sql_yacc.yy"
+{}
+    break;
+case 1332:
+#line 4189 "sql_yacc.yy"
+{
+         Lex->mi.with_old_binlog = 1;
+       }
+    break;
+}
 
+#line 705 "/usr/share/bison/bison.simple"
 
-    }
-
-/* Line 1000 of yacc.c.  */
-#line 15709 "sql_yacc.cc"
 
   yyvsp -= yylen;
   yyssp -= yylen;
+#if YYLSP_NEEDED
+  yylsp -= yylen;
+#endif
 
-
-  YY_STACK_PRINT (yyss, yyssp);
+#if YYDEBUG
+  if (yydebug)
+    {
+      short *yyssp1 = yyss - 1;
+      YYFPRINTF (stderr, "state stack now");
+      while (yyssp1 != yyssp)
+	YYFPRINTF (stderr, " %d", *++yyssp1);
+      YYFPRINTF (stderr, "\n");
+    }
+#endif
 
   *++yyvsp = yyval;
-
+#if YYLSP_NEEDED
+  *++yylsp = yyloc;
+#endif
 
   /* Now `shift' the result of the reduction.  Determine what state
      that goes to, based on the state we popped back to and the rule
@@ -15722,11 +14306,11 @@
 
   yyn = yyr1[yyn];
 
-  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
-  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
+  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
+  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
     yystate = yytable[yystate];
   else
-    yystate = yydefgoto[yyn - YYNTOKENS];
+    yystate = yydefgoto[yyn - YYNTBASE];
 
   goto yynewstate;
 
@@ -15739,151 +14323,145 @@
   if (!yyerrstatus)
     {
       ++yynerrs;
-#if YYERROR_VERBOSE
+
+#ifdef YYERROR_VERBOSE
       yyn = yypact[yystate];
 
-      if (YYPACT_NINF < yyn && yyn < YYLAST)
+      if (yyn > YYFLAG && yyn < YYLAST)
 	{
 	  YYSIZE_T yysize = 0;
-	  int yytype = YYTRANSLATE (yychar);
-	  const char* yyprefix;
 	  char *yymsg;
-	  int yyx;
+	  int yyx, yycount;
 
+	  yycount = 0;
 	  /* Start YYX at -YYN if negative to avoid negative indexes in
 	     YYCHECK.  */
-	  int yyxbegin = yyn < 0 ? -yyn : 0;
-
-	  /* Stay within bounds of both yycheck and yytname.  */
-	  int yychecklim = YYLAST - yyn;
-	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
-	  int yycount = 0;
-
-	  yyprefix = ", expecting ";
-	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
-	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
-	      {
-		yysize += yystrlen (yyprefix) + yystrlen (yytname [yyx]);
-		yycount += 1;
-		if (yycount == 5)
-		  {
-		    yysize = 0;
-		    break;
-		  }
-	      }
-	  yysize += (sizeof ("syntax error, unexpected ")
-		     + yystrlen (yytname[yytype]));
+	  for (yyx = yyn < 0 ? -yyn : 0;
+	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
+	    if (yycheck[yyx + yyn] == yyx)
+	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
+	  yysize += yystrlen ("parse error, unexpected ") + 1;
+	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
 	  yymsg = (char *) YYSTACK_ALLOC (yysize);
 	  if (yymsg != 0)
 	    {
-	      char *yyp = yystpcpy (yymsg, "syntax error, unexpected ");
-	      yyp = yystpcpy (yyp, yytname[yytype]);
+	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
+	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);
 
 	      if (yycount < 5)
 		{
-		  yyprefix = ", expecting ";
-		  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
-		    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
+		  yycount = 0;
+		  for (yyx = yyn < 0 ? -yyn : 0;
+		       yyx < (int) (sizeof (yytname) / sizeof (char *));
+		       yyx++)
+		    if (yycheck[yyx + yyn] == yyx)
 		      {
-			yyp = yystpcpy (yyp, yyprefix);
+			const char *yyq = ! yycount ? ", expecting " : " or ";
+			yyp = yystpcpy (yyp, yyq);
 			yyp = yystpcpy (yyp, yytname[yyx]);
-			yyprefix = " or ";
+			yycount++;
 		      }
 		}
 	      yyerror (yymsg);
 	      YYSTACK_FREE (yymsg);
 	    }
 	  else
-	    yyerror ("syntax error; also virtual memory exhausted");
+	    yyerror ("parse error; also virtual memory exhausted");
 	}
       else
-#endif /* YYERROR_VERBOSE */
-	yyerror ("syntax error");
+#endif /* defined (YYERROR_VERBOSE) */
+	yyerror ("parse error");
     }
+  goto yyerrlab1;
 
 
-
+/*--------------------------------------------------.
+| yyerrlab1 -- error raised explicitly by an action |
+`--------------------------------------------------*/
+yyerrlab1:
   if (yyerrstatus == 3)
     {
       /* If just tried and failed to reuse lookahead token after an
 	 error, discard it.  */
 
-      if (yychar <= YYEOF)
-        {
-          /* If at end of input, pop the error token,
-	     then the rest of the stack, then return failure.  */
-	  if (yychar == YYEOF)
-	     for (;;)
-	       {
-		 YYPOPSTACK;
-		 if (yyssp == yyss)
-		   YYABORT;
-		 YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
-		 yydestruct (yystos[*yyssp], yyvsp);
-	       }
-        }
-      else
-	{
-	  YYDSYMPRINTF ("Error: discarding", yytoken, &yylval, &yylloc);
-	  yydestruct (yytoken, &yylval);
-	  yychar = YYEMPTY;
-
-	}
+      /* return failure if at end of input */
+      if (yychar == YYEOF)
+	YYABORT;
+      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
+		  yychar, yytname[yychar1]));
+      yychar = YYEMPTY;
     }
 
   /* Else will try to reuse lookahead token after shifting the error
      token.  */
-  goto yyerrlab1;
 
+  yyerrstatus = 3;		/* Each real token shifted decrements this */
 
-/*---------------------------------------------------.
-| yyerrorlab -- error raised explicitly by YYERROR.  |
-`---------------------------------------------------*/
-yyerrorlab:
+  goto yyerrhandle;
 
-#ifdef __GNUC__
-  /* Pacify GCC when the user code never invokes YYERROR and the label
-     yyerrorlab therefore never appears in user code.  */
-  if (0)
-     goto yyerrorlab;
-#endif
 
-  yyvsp -= yylen;
-  yyssp -= yylen;
-  yystate = *yyssp;
-  goto yyerrlab1;
+/*-------------------------------------------------------------------.
+| yyerrdefault -- current state does not do anything special for the |
+| error token.                                                       |
+`-------------------------------------------------------------------*/
+yyerrdefault:
+#if 0
+  /* This is wrong; only states that explicitly want error tokens
+     should shift them.  */
+
+  /* If its default is to accept any token, ok.  Otherwise pop it.  */
+  yyn = yydefact[yystate];
+  if (yyn)
+    goto yydefault;
+#endif
 
 
-/*-------------------------------------------------------------.
-| yyerrlab1 -- common code for both syntax error and YYERROR.  |
-`-------------------------------------------------------------*/
-yyerrlab1:
-  yyerrstatus = 3;	/* Each real token shifted decrements this.  */
+/*---------------------------------------------------------------.
+| yyerrpop -- pop the current state because it cannot handle the |
+| error token                                                    |
+`---------------------------------------------------------------*/
+yyerrpop:
+  if (yyssp == yyss)
+    YYABORT;
+  yyvsp--;
+  yystate = *--yyssp;
+#if YYLSP_NEEDED
+  yylsp--;
+#endif
 
-  for (;;)
+#if YYDEBUG
+  if (yydebug)
     {
-      yyn = yypact[yystate];
-      if (yyn != YYPACT_NINF)
-	{
-	  yyn += YYTERROR;
-	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
-	    {
-	      yyn = yytable[yyn];
-	      if (0 < yyn)
-		break;
-	    }
-	}
+      short *yyssp1 = yyss - 1;
+      YYFPRINTF (stderr, "Error: state stack now");
+      while (yyssp1 != yyssp)
+	YYFPRINTF (stderr, " %d", *++yyssp1);
+      YYFPRINTF (stderr, "\n");
+    }
+#endif
 
-      /* Pop the current state because it cannot handle the error token.  */
-      if (yyssp == yyss)
-	YYABORT;
+/*--------------.
+| yyerrhandle.  |
+`--------------*/
+yyerrhandle:
+  yyn = yypact[yystate];
+  if (yyn == YYFLAG)
+    goto yyerrdefault;
 
-      YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
-      yydestruct (yystos[yystate], yyvsp);
-      YYPOPSTACK;
-      yystate = *yyssp;
-      YY_STACK_PRINT (yyss, yyssp);
+  yyn += YYTERROR;
+  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
+    goto yyerrdefault;
+
+  yyn = yytable[yyn];
+  if (yyn < 0)
+    {
+      if (yyn == YYFLAG)
+	goto yyerrpop;
+      yyn = -yyn;
+      goto yyreduce;
     }
+  else if (yyn == 0)
+    goto yyerrpop;
 
   if (yyn == YYFINAL)
     YYACCEPT;
@@ -15891,7 +14469,9 @@
   YYDPRINTF ((stderr, "Shifting error token, "));
 
   *++yyvsp = yylval;
-
+#if YYLSP_NEEDED
+  *++yylsp = yylloc;
+#endif
 
   yystate = yyn;
   goto yynewstate;
@@ -15911,15 +14491,13 @@
   yyresult = 1;
   goto yyreturn;
 
-#ifndef yyoverflow
-/*----------------------------------------------.
-| yyoverflowlab -- parser overflow comes here.  |
-`----------------------------------------------*/
+/*---------------------------------------------.
+| yyoverflowab -- parser overflow comes here.  |
+`---------------------------------------------*/
 yyoverflowlab:
   yyerror ("parser stack overflow");
   yyresult = 2;
   /* Fall through.  */
-#endif
 
 yyreturn:
 #ifndef yyoverflow
@@ -15928,6 +14506,4 @@
 #endif
   return yyresult;
 }
-
-
-
+#line 4192 "sql_yacc.yy"
diff -ruN base/sql/sql_yacc.h mysql40gpl/sql/sql_yacc.h
--- base/sql/sql_yacc.h	2005-09-02 15:44:49.000000000 -0700
+++ mysql40gpl/sql/sql_yacc.h	2007-04-21 13:24:39.000000000 -0700
@@ -1,827 +1,8 @@
-/* A Bison parser, made by GNU Bison 1.875c.  */
+#ifndef BISON_SQL_YACC_H
+# define BISON_SQL_YACC_H
 
-/* Skeleton parser for Yacc-like parsing with Bison,
-   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
-
-   This program is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
-
-   This program is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-   GNU General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with this program; if not, write to the Free Software
-   Foundation, Inc., 59 Temple Place - Suite 330,
-   Boston, MA 02111-1307, USA.  */
-
-/* As a special exception, when this file is copied by Bison into a
-   Bison output file, you may use that output file without restriction.
-   This special exception was added by the Free Software Foundation
-   in version 1.24 of Bison.  */
-
-/* Tokens.  */
-#ifndef YYTOKENTYPE
-# define YYTOKENTYPE
-   /* Put the tokens into the symbol table, so that GDB and other debuggers
-      know about them.  */
-   enum yytokentype {
-     END_OF_INPUT = 258,
-     CLOSE_SYM = 259,
-     HANDLER_SYM = 260,
-     LAST_SYM = 261,
-     NEXT_SYM = 262,
-     PREV_SYM = 263,
-     EQ = 264,
-     EQUAL_SYM = 265,
-     GE = 266,
-     GT_SYM = 267,
-     LE = 268,
-     LT = 269,
-     NE = 270,
-     IS = 271,
-     SHIFT_LEFT = 272,
-     SHIFT_RIGHT = 273,
-     SET_VAR = 274,
-     ABORT_SYM = 275,
-     ADD = 276,
-     AFTER_SYM = 277,
-     ALTER = 278,
-     ANALYZE_SYM = 279,
-     AVG_SYM = 280,
-     BEGIN_SYM = 281,
-     BINLOG_SYM = 282,
-     CHANGE = 283,
-     CLIENT_SYM = 284,
-     COMMENT_SYM = 285,
-     COMMIT_SYM = 286,
-     COUNT_SYM = 287,
-     CREATE = 288,
-     CROSS = 289,
-     CUBE_SYM = 290,
-     DELETE_SYM = 291,
-     DO_SYM = 292,
-     DROP = 293,
-     EVENTS_SYM = 294,
-     EXECUTE_SYM = 295,
-     FLUSH_SYM = 296,
-     INSERT = 297,
-     IO_THREAD = 298,
-     KILL_SYM = 299,
-     LOAD = 300,
-     LOCKS_SYM = 301,
-     LOCK_SYM = 302,
-     MASTER_SYM = 303,
-     MAX_SYM = 304,
-     MIN_SYM = 305,
-     NONE_SYM = 306,
-     OPTIMIZE = 307,
-     PURGE = 308,
-     REPAIR = 309,
-     REPLICATION = 310,
-     RESET_SYM = 311,
-     ROLLBACK_SYM = 312,
-     ROLLUP_SYM = 313,
-     SAVEPOINT_SYM = 314,
-     SELECT_SYM = 315,
-     SHOW = 316,
-     SLAVE = 317,
-     SQL_THREAD = 318,
-     START_SYM = 319,
-     STD_SYM = 320,
-     STOP_SYM = 321,
-     SUM_SYM = 322,
-     SUPER_SYM = 323,
-     TRUNCATE_SYM = 324,
-     UNLOCK_SYM = 325,
-     UPDATE_SYM = 326,
-     ACTION = 327,
-     AGGREGATE_SYM = 328,
-     ALL = 329,
-     AND = 330,
-     AS = 331,
-     ASC = 332,
-     AUTO_INC = 333,
-     AVG_ROW_LENGTH = 334,
-     BACKUP_SYM = 335,
-     BERKELEY_DB_SYM = 336,
-     BINARY = 337,
-     BIT_SYM = 338,
-     BOOL_SYM = 339,
-     BOOLEAN_SYM = 340,
-     BOTH = 341,
-     BY = 342,
-     CACHE_SYM = 343,
-     CASCADE = 344,
-     CAST_SYM = 345,
-     CHARSET = 346,
-     CHECKSUM_SYM = 347,
-     CHECK_SYM = 348,
-     COMMITTED_SYM = 349,
-     COLUMNS = 350,
-     COLUMN_SYM = 351,
-     CONCURRENT = 352,
-     CONSTRAINT = 353,
-     CONVERT_SYM = 354,
-     DATABASES = 355,
-     DATA_SYM = 356,
-     DEFAULT = 357,
-     DELAYED_SYM = 358,
-     DELAY_KEY_WRITE_SYM = 359,
-     DESC = 360,
-     DESCRIBE = 361,
-     DES_KEY_FILE = 362,
-     DISABLE_SYM = 363,
-     DISTINCT = 364,
-     DYNAMIC_SYM = 365,
-     ENABLE_SYM = 366,
-     ENCLOSED = 367,
-     ESCAPED = 368,
-     DIRECTORY_SYM = 369,
-     ESCAPE_SYM = 370,
-     EXISTS = 371,
-     EXTENDED_SYM = 372,
-     FILE_SYM = 373,
-     FIRST_SYM = 374,
-     FIXED_SYM = 375,
-     FLOAT_NUM = 376,
-     FORCE_SYM = 377,
-     FOREIGN = 378,
-     FROM = 379,
-     FULL = 380,
-     FULLTEXT_SYM = 381,
-     GLOBAL_SYM = 382,
-     GRANT = 383,
-     GRANTS = 384,
-     GREATEST_SYM = 385,
-     GROUP = 386,
-     HAVING = 387,
-     HEAP_SYM = 388,
-     HEX_NUM = 389,
-     HIGH_PRIORITY = 390,
-     HOSTS_SYM = 391,
-     IDENT = 392,
-     IGNORE_SYM = 393,
-     INDEX = 394,
-     INDEXES = 395,
-     INFILE = 396,
-     INNER_SYM = 397,
-     INNOBASE_SYM = 398,
-     INTO = 399,
-     IN_SYM = 400,
-     ISOLATION = 401,
-     ISAM_SYM = 402,
-     JOIN_SYM = 403,
-     KEYS = 404,
-     KEY_SYM = 405,
-     LEADING = 406,
-     LEAST_SYM = 407,
-     LEVEL_SYM = 408,
-     LEX_HOSTNAME = 409,
-     LIKE = 410,
-     LINES = 411,
-     LOCAL_SYM = 412,
-     LOG_SYM = 413,
-     LOGS_SYM = 414,
-     LONG_NUM = 415,
-     LONG_SYM = 416,
-     LOW_PRIORITY = 417,
-     MASTER_HOST_SYM = 418,
-     MASTER_USER_SYM = 419,
-     MASTER_LOG_FILE_SYM = 420,
-     MASTER_LOG_POS_SYM = 421,
-     MASTER_PASSWORD_SYM = 422,
-     MASTER_PORT_SYM = 423,
-     MASTER_CONNECT_RETRY_SYM = 424,
-     MASTER_SERVER_ID_SYM = 425,
-     RELAY_LOG_FILE_SYM = 426,
-     RELAY_LOG_POS_SYM = 427,
-     MATCH = 428,
-     MAX_ROWS = 429,
-     MAX_CONNECTIONS_PER_HOUR = 430,
-     MAX_QUERIES_PER_HOUR = 431,
-     MAX_UPDATES_PER_HOUR = 432,
-     MEDIUM_SYM = 433,
-     MERGE_SYM = 434,
-     MEMORY_SYM = 435,
-     MIN_ROWS = 436,
-     MYISAM_SYM = 437,
-     NATIONAL_SYM = 438,
-     NATURAL = 439,
-     NEW_SYM = 440,
-     NCHAR_SYM = 441,
-     NOT = 442,
-     NO_SYM = 443,
-     NULL_SYM = 444,
-     NUM = 445,
-     OFFSET_SYM = 446,
-     ON = 447,
-     OPEN_SYM = 448,
-     OPTION = 449,
-     OPTIONALLY = 450,
-     OR = 451,
-     OR_OR_CONCAT = 452,
-     ORDER_SYM = 453,
-     OUTER = 454,
-     OUTFILE = 455,
-     DUMPFILE = 456,
-     PACK_KEYS_SYM = 457,
-     PARTIAL = 458,
-     PRIMARY_SYM = 459,
-     PRIVILEGES = 460,
-     PROCESS = 461,
-     PROCESSLIST_SYM = 462,
-     QUERY_SYM = 463,
-     RAID_0_SYM = 464,
-     RAID_STRIPED_SYM = 465,
-     RAID_TYPE = 466,
-     RAID_CHUNKS = 467,
-     RAID_CHUNKSIZE = 468,
-     READ_SYM = 469,
-     REAL_NUM = 470,
-     REFERENCES = 471,
-     REGEXP = 472,
-     RELOAD = 473,
-     RENAME = 474,
-     REPEATABLE_SYM = 475,
-     REQUIRE_SYM = 476,
-     RESOURCES = 477,
-     RESTORE_SYM = 478,
-     RESTRICT = 479,
-     REVOKE = 480,
-     ROWS_SYM = 481,
-     ROW_FORMAT_SYM = 482,
-     ROW_SYM = 483,
-     SET = 484,
-     SERIALIZABLE_SYM = 485,
-     SESSION_SYM = 486,
-     SHUTDOWN = 487,
-     SSL_SYM = 488,
-     STARTING = 489,
-     STATUS_SYM = 490,
-     STRAIGHT_JOIN = 491,
-     SUBJECT_SYM = 492,
-     TABLES = 493,
-     TABLE_SYM = 494,
-     TEMPORARY = 495,
-     TERMINATED = 496,
-     TEXT_STRING = 497,
-     TO_SYM = 498,
-     TRAILING = 499,
-     TRANSACTION_SYM = 500,
-     TYPE_SYM = 501,
-     FUNC_ARG0 = 502,
-     FUNC_ARG1 = 503,
-     FUNC_ARG2 = 504,
-     FUNC_ARG3 = 505,
-     UDF_RETURNS_SYM = 506,
-     UDF_SONAME_SYM = 507,
-     UDF_SYM = 508,
-     UNCOMMITTED_SYM = 509,
-     UNION_SYM = 510,
-     UNIQUE_SYM = 511,
-     USAGE = 512,
-     USE_FRM = 513,
-     USE_SYM = 514,
-     USING = 515,
-     VALUES = 516,
-     VARIABLES = 517,
-     WHERE = 518,
-     WITH = 519,
-     WRITE_SYM = 520,
-     X509_SYM = 521,
-     XOR = 522,
-     COMPRESSED_SYM = 523,
-     BIGINT = 524,
-     BLOB_SYM = 525,
-     CHAR_SYM = 526,
-     CHANGED = 527,
-     COALESCE = 528,
-     DATETIME = 529,
-     DATE_SYM = 530,
-     DECIMAL_SYM = 531,
-     DOUBLE_SYM = 532,
-     ENUM = 533,
-     FAST_SYM = 534,
-     FLOAT_SYM = 535,
-     INT_SYM = 536,
-     LIMIT = 537,
-     LONGBLOB = 538,
-     LONGTEXT = 539,
-     MEDIUMBLOB = 540,
-     MEDIUMINT = 541,
-     MEDIUMTEXT = 542,
-     NUMERIC_SYM = 543,
-     PRECISION = 544,
-     QUICK = 545,
-     REAL = 546,
-     SIGNED_SYM = 547,
-     SMALLINT = 548,
-     STRING_SYM = 549,
-     TEXT_SYM = 550,
-     TIMESTAMP = 551,
-     TIME_SYM = 552,
-     TINYBLOB = 553,
-     TINYINT = 554,
-     TINYTEXT = 555,
-     ULONGLONG_NUM = 556,
-     UNSIGNED = 557,
-     VARBINARY = 558,
-     VARCHAR = 559,
-     VARYING = 560,
-     ZEROFILL = 561,
-     AGAINST = 562,
-     ATAN = 563,
-     BETWEEN_SYM = 564,
-     BIT_AND = 565,
-     BIT_OR = 566,
-     CASE_SYM = 567,
-     CONCAT = 568,
-     CONCAT_WS = 569,
-     CURDATE = 570,
-     CURTIME = 571,
-     DATABASE = 572,
-     DATE_ADD_INTERVAL = 573,
-     DATE_SUB_INTERVAL = 574,
-     DAY_HOUR_SYM = 575,
-     DAY_MINUTE_SYM = 576,
-     DAY_SECOND_SYM = 577,
-     DAY_SYM = 578,
-     DECODE_SYM = 579,
-     DES_ENCRYPT_SYM = 580,
-     DES_DECRYPT_SYM = 581,
-     ELSE = 582,
-     ELT_FUNC = 583,
-     ENCODE_SYM = 584,
-     ENCRYPT = 585,
-     EXPORT_SET = 586,
-     EXTRACT_SYM = 587,
-     FIELD_FUNC = 588,
-     FORMAT_SYM = 589,
-     FOR_SYM = 590,
-     FROM_UNIXTIME = 591,
-     GROUP_UNIQUE_USERS = 592,
-     HOUR_MINUTE_SYM = 593,
-     HOUR_SECOND_SYM = 594,
-     HOUR_SYM = 595,
-     IDENTIFIED_SYM = 596,
-     IF = 597,
-     INSERT_METHOD = 598,
-     INTERVAL_SYM = 599,
-     LAST_INSERT_ID = 600,
-     LEFT = 601,
-     LOCATE = 602,
-     MAKE_SET_SYM = 603,
-     MASTER_POS_WAIT = 604,
-     MINUTE_SECOND_SYM = 605,
-     MINUTE_SYM = 606,
-     MODE_SYM = 607,
-     MODIFY_SYM = 608,
-     MONTH_SYM = 609,
-     NOW_SYM = 610,
-     PASSWORD = 611,
-     POSITION_SYM = 612,
-     PROCEDURE = 613,
-     RAND = 614,
-     REPLACE = 615,
-     RIGHT = 616,
-     ROUND = 617,
-     SECOND_SYM = 618,
-     SHARE_SYM = 619,
-     SUBSTRING = 620,
-     SUBSTRING_INDEX = 621,
-     TRIM = 622,
-     UDA_CHAR_SUM = 623,
-     UDA_FLOAT_SUM = 624,
-     UDA_INT_SUM = 625,
-     UDF_CHAR_FUNC = 626,
-     UDF_FLOAT_FUNC = 627,
-     UDF_INT_FUNC = 628,
-     UNIQUE_USERS = 629,
-     UNIX_TIMESTAMP = 630,
-     USER = 631,
-     WEEK_SYM = 632,
-     WHEN_SYM = 633,
-     WORK_SYM = 634,
-     YEAR_MONTH_SYM = 635,
-     YEAR_SYM = 636,
-     YEARWEEK = 637,
-     BENCHMARK_SYM = 638,
-     END = 639,
-     THEN_SYM = 640,
-     SQL_BIG_RESULT = 641,
-     SQL_CACHE_SYM = 642,
-     SQL_CALC_FOUND_ROWS = 643,
-     SQL_NO_CACHE_SYM = 644,
-     SQL_SMALL_RESULT = 645,
-     SQL_BUFFER_RESULT = 646,
-     ISSUER_SYM = 647,
-     CIPHER_SYM = 648,
-     NEG = 649
-   };
-#endif
-#define END_OF_INPUT 258
-#define CLOSE_SYM 259
-#define HANDLER_SYM 260
-#define LAST_SYM 261
-#define NEXT_SYM 262
-#define PREV_SYM 263
-#define EQ 264
-#define EQUAL_SYM 265
-#define GE 266
-#define GT_SYM 267
-#define LE 268
-#define LT 269
-#define NE 270
-#define IS 271
-#define SHIFT_LEFT 272
-#define SHIFT_RIGHT 273
-#define SET_VAR 274
-#define ABORT_SYM 275
-#define ADD 276
-#define AFTER_SYM 277
-#define ALTER 278
-#define ANALYZE_SYM 279
-#define AVG_SYM 280
-#define BEGIN_SYM 281
-#define BINLOG_SYM 282
-#define CHANGE 283
-#define CLIENT_SYM 284
-#define COMMENT_SYM 285
-#define COMMIT_SYM 286
-#define COUNT_SYM 287
-#define CREATE 288
-#define CROSS 289
-#define CUBE_SYM 290
-#define DELETE_SYM 291
-#define DO_SYM 292
-#define DROP 293
-#define EVENTS_SYM 294
-#define EXECUTE_SYM 295
-#define FLUSH_SYM 296
-#define INSERT 297
-#define IO_THREAD 298
-#define KILL_SYM 299
-#define LOAD 300
-#define LOCKS_SYM 301
-#define LOCK_SYM 302
-#define MASTER_SYM 303
-#define MAX_SYM 304
-#define MIN_SYM 305
-#define NONE_SYM 306
-#define OPTIMIZE 307
-#define PURGE 308
-#define REPAIR 309
-#define REPLICATION 310
-#define RESET_SYM 311
-#define ROLLBACK_SYM 312
-#define ROLLUP_SYM 313
-#define SAVEPOINT_SYM 314
-#define SELECT_SYM 315
-#define SHOW 316
-#define SLAVE 317
-#define SQL_THREAD 318
-#define START_SYM 319
-#define STD_SYM 320
-#define STOP_SYM 321
-#define SUM_SYM 322
-#define SUPER_SYM 323
-#define TRUNCATE_SYM 324
-#define UNLOCK_SYM 325
-#define UPDATE_SYM 326
-#define ACTION 327
-#define AGGREGATE_SYM 328
-#define ALL 329
-#define AND 330
-#define AS 331
-#define ASC 332
-#define AUTO_INC 333
-#define AVG_ROW_LENGTH 334
-#define BACKUP_SYM 335
-#define BERKELEY_DB_SYM 336
-#define BINARY 337
-#define BIT_SYM 338
-#define BOOL_SYM 339
-#define BOOLEAN_SYM 340
-#define BOTH 341
-#define BY 342
-#define CACHE_SYM 343
-#define CASCADE 344
-#define CAST_SYM 345
-#define CHARSET 346
-#define CHECKSUM_SYM 347
-#define CHECK_SYM 348
-#define COMMITTED_SYM 349
-#define COLUMNS 350
-#define COLUMN_SYM 351
-#define CONCURRENT 352
-#define CONSTRAINT 353
-#define CONVERT_SYM 354
-#define DATABASES 355
-#define DATA_SYM 356
-#define DEFAULT 357
-#define DELAYED_SYM 358
-#define DELAY_KEY_WRITE_SYM 359
-#define DESC 360
-#define DESCRIBE 361
-#define DES_KEY_FILE 362
-#define DISABLE_SYM 363
-#define DISTINCT 364
-#define DYNAMIC_SYM 365
-#define ENABLE_SYM 366
-#define ENCLOSED 367
-#define ESCAPED 368
-#define DIRECTORY_SYM 369
-#define ESCAPE_SYM 370
-#define EXISTS 371
-#define EXTENDED_SYM 372
-#define FILE_SYM 373
-#define FIRST_SYM 374
-#define FIXED_SYM 375
-#define FLOAT_NUM 376
-#define FORCE_SYM 377
-#define FOREIGN 378
-#define FROM 379
-#define FULL 380
-#define FULLTEXT_SYM 381
-#define GLOBAL_SYM 382
-#define GRANT 383
-#define GRANTS 384
-#define GREATEST_SYM 385
-#define GROUP 386
-#define HAVING 387
-#define HEAP_SYM 388
-#define HEX_NUM 389
-#define HIGH_PRIORITY 390
-#define HOSTS_SYM 391
-#define IDENT 392
-#define IGNORE_SYM 393
-#define INDEX 394
-#define INDEXES 395
-#define INFILE 396
-#define INNER_SYM 397
-#define INNOBASE_SYM 398
-#define INTO 399
-#define IN_SYM 400
-#define ISOLATION 401
-#define ISAM_SYM 402
-#define JOIN_SYM 403
-#define KEYS 404
-#define KEY_SYM 405
-#define LEADING 406
-#define LEAST_SYM 407
-#define LEVEL_SYM 408
-#define LEX_HOSTNAME 409
-#define LIKE 410
-#define LINES 411
-#define LOCAL_SYM 412
-#define LOG_SYM 413
-#define LOGS_SYM 414
-#define LONG_NUM 415
-#define LONG_SYM 416
-#define LOW_PRIORITY 417
-#define MASTER_HOST_SYM 418
-#define MASTER_USER_SYM 419
-#define MASTER_LOG_FILE_SYM 420
-#define MASTER_LOG_POS_SYM 421
-#define MASTER_PASSWORD_SYM 422
-#define MASTER_PORT_SYM 423
-#define MASTER_CONNECT_RETRY_SYM 424
-#define MASTER_SERVER_ID_SYM 425
-#define RELAY_LOG_FILE_SYM 426
-#define RELAY_LOG_POS_SYM 427
-#define MATCH 428
-#define MAX_ROWS 429
-#define MAX_CONNECTIONS_PER_HOUR 430
-#define MAX_QUERIES_PER_HOUR 431
-#define MAX_UPDATES_PER_HOUR 432
-#define MEDIUM_SYM 433
-#define MERGE_SYM 434
-#define MEMORY_SYM 435
-#define MIN_ROWS 436
-#define MYISAM_SYM 437
-#define NATIONAL_SYM 438
-#define NATURAL 439
-#define NEW_SYM 440
-#define NCHAR_SYM 441
-#define NOT 442
-#define NO_SYM 443
-#define NULL_SYM 444
-#define NUM 445
-#define OFFSET_SYM 446
-#define ON 447
-#define OPEN_SYM 448
-#define OPTION 449
-#define OPTIONALLY 450
-#define OR 451
-#define OR_OR_CONCAT 452
-#define ORDER_SYM 453
-#define OUTER 454
-#define OUTFILE 455
-#define DUMPFILE 456
-#define PACK_KEYS_SYM 457
-#define PARTIAL 458
-#define PRIMARY_SYM 459
-#define PRIVILEGES 460
-#define PROCESS 461
-#define PROCESSLIST_SYM 462
-#define QUERY_SYM 463
-#define RAID_0_SYM 464
-#define RAID_STRIPED_SYM 465
-#define RAID_TYPE 466
-#define RAID_CHUNKS 467
-#define RAID_CHUNKSIZE 468
-#define READ_SYM 469
-#define REAL_NUM 470
-#define REFERENCES 471
-#define REGEXP 472
-#define RELOAD 473
-#define RENAME 474
-#define REPEATABLE_SYM 475
-#define REQUIRE_SYM 476
-#define RESOURCES 477
-#define RESTORE_SYM 478
-#define RESTRICT 479
-#define REVOKE 480
-#define ROWS_SYM 481
-#define ROW_FORMAT_SYM 482
-#define ROW_SYM 483
-#define SET 484
-#define SERIALIZABLE_SYM 485
-#define SESSION_SYM 486
-#define SHUTDOWN 487
-#define SSL_SYM 488
-#define STARTING 489
-#define STATUS_SYM 490
-#define STRAIGHT_JOIN 491
-#define SUBJECT_SYM 492
-#define TABLES 493
-#define TABLE_SYM 494
-#define TEMPORARY 495
-#define TERMINATED 496
-#define TEXT_STRING 497
-#define TO_SYM 498
-#define TRAILING 499
-#define TRANSACTION_SYM 500
-#define TYPE_SYM 501
-#define FUNC_ARG0 502
-#define FUNC_ARG1 503
-#define FUNC_ARG2 504
-#define FUNC_ARG3 505
-#define UDF_RETURNS_SYM 506
-#define UDF_SONAME_SYM 507
-#define UDF_SYM 508
-#define UNCOMMITTED_SYM 509
-#define UNION_SYM 510
-#define UNIQUE_SYM 511
-#define USAGE 512
-#define USE_FRM 513
-#define USE_SYM 514
-#define USING 515
-#define VALUES 516
-#define VARIABLES 517
-#define WHERE 518
-#define WITH 519
-#define WRITE_SYM 520
-#define X509_SYM 521
-#define XOR 522
-#define COMPRESSED_SYM 523
-#define BIGINT 524
-#define BLOB_SYM 525
-#define CHAR_SYM 526
-#define CHANGED 527
-#define COALESCE 528
-#define DATETIME 529
-#define DATE_SYM 530
-#define DECIMAL_SYM 531
-#define DOUBLE_SYM 532
-#define ENUM 533
-#define FAST_SYM 534
-#define FLOAT_SYM 535
-#define INT_SYM 536
-#define LIMIT 537
-#define LONGBLOB 538
-#define LONGTEXT 539
-#define MEDIUMBLOB 540
-#define MEDIUMINT 541
-#define MEDIUMTEXT 542
-#define NUMERIC_SYM 543
-#define PRECISION 544
-#define QUICK 545
-#define REAL 546
-#define SIGNED_SYM 547
-#define SMALLINT 548
-#define STRING_SYM 549
-#define TEXT_SYM 550
-#define TIMESTAMP 551
-#define TIME_SYM 552
-#define TINYBLOB 553
-#define TINYINT 554
-#define TINYTEXT 555
-#define ULONGLONG_NUM 556
-#define UNSIGNED 557
-#define VARBINARY 558
-#define VARCHAR 559
-#define VARYING 560
-#define ZEROFILL 561
-#define AGAINST 562
-#define ATAN 563
-#define BETWEEN_SYM 564
-#define BIT_AND 565
-#define BIT_OR 566
-#define CASE_SYM 567
-#define CONCAT 568
-#define CONCAT_WS 569
-#define CURDATE 570
-#define CURTIME 571
-#define DATABASE 572
-#define DATE_ADD_INTERVAL 573
-#define DATE_SUB_INTERVAL 574
-#define DAY_HOUR_SYM 575
-#define DAY_MINUTE_SYM 576
-#define DAY_SECOND_SYM 577
-#define DAY_SYM 578
-#define DECODE_SYM 579
-#define DES_ENCRYPT_SYM 580
-#define DES_DECRYPT_SYM 581
-#define ELSE 582
-#define ELT_FUNC 583
-#define ENCODE_SYM 584
-#define ENCRYPT 585
-#define EXPORT_SET 586
-#define EXTRACT_SYM 587
-#define FIELD_FUNC 588
-#define FORMAT_SYM 589
-#define FOR_SYM 590
-#define FROM_UNIXTIME 591
-#define GROUP_UNIQUE_USERS 592
-#define HOUR_MINUTE_SYM 593
-#define HOUR_SECOND_SYM 594
-#define HOUR_SYM 595
-#define IDENTIFIED_SYM 596
-#define IF 597
-#define INSERT_METHOD 598
-#define INTERVAL_SYM 599
-#define LAST_INSERT_ID 600
-#define LEFT 601
-#define LOCATE 602
-#define MAKE_SET_SYM 603
-#define MASTER_POS_WAIT 604
-#define MINUTE_SECOND_SYM 605
-#define MINUTE_SYM 606
-#define MODE_SYM 607
-#define MODIFY_SYM 608
-#define MONTH_SYM 609
-#define NOW_SYM 610
-#define PASSWORD 611
-#define POSITION_SYM 612
-#define PROCEDURE 613
-#define RAND 614
-#define REPLACE 615
-#define RIGHT 616
-#define ROUND 617
-#define SECOND_SYM 618
-#define SHARE_SYM 619
-#define SUBSTRING 620
-#define SUBSTRING_INDEX 621
-#define TRIM 622
-#define UDA_CHAR_SUM 623
-#define UDA_FLOAT_SUM 624
-#define UDA_INT_SUM 625
-#define UDF_CHAR_FUNC 626
-#define UDF_FLOAT_FUNC 627
-#define UDF_INT_FUNC 628
-#define UNIQUE_USERS 629
-#define UNIX_TIMESTAMP 630
-#define USER 631
-#define WEEK_SYM 632
-#define WHEN_SYM 633
-#define WORK_SYM 634
-#define YEAR_MONTH_SYM 635
-#define YEAR_SYM 636
-#define YEARWEEK 637
-#define BENCHMARK_SYM 638
-#define END 639
-#define THEN_SYM 640
-#define SQL_BIG_RESULT 641
-#define SQL_CACHE_SYM 642
-#define SQL_CALC_FOUND_ROWS 643
-#define SQL_NO_CACHE_SYM 644
-#define SQL_SMALL_RESULT 645
-#define SQL_BUFFER_RESULT 646
-#define ISSUER_SYM 647
-#define CIPHER_SYM 648
-#define NEG 649
-
-
-
-
-#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
-#line 44 "sql_yacc.yy"
-typedef union YYSTYPE {
+#ifndef YYSTYPE
+typedef union {
   int  num;
   ulong ulong_num;
   ulonglong ulonglong_number;
@@ -848,15 +29,411 @@
   enum Item_udftype udf_type;
   thr_lock_type lock_type;
   interval_type interval;
-} YYSTYPE;
-/* Line 1275 of yacc.c.  */
-#line 854 "y.tab.h"
-# define yystype YYSTYPE /* obsolescent; will be withdrawn */
-# define YYSTYPE_IS_DECLARED 1
+} yystype;
+# define YYSTYPE yystype
 # define YYSTYPE_IS_TRIVIAL 1
 #endif
+# define	END_OF_INPUT	257
+# define	CLOSE_SYM	258
+# define	HANDLER_SYM	259
+# define	LAST_SYM	260
+# define	NEXT_SYM	261
+# define	PREV_SYM	262
+# define	EQ	263
+# define	EQUAL_SYM	264
+# define	GE	265
+# define	GT_SYM	266
+# define	LE	267
+# define	LT	268
+# define	NE	269
+# define	IS	270
+# define	SHIFT_LEFT	271
+# define	SHIFT_RIGHT	272
+# define	SET_VAR	273
+# define	ABORT_SYM	274
+# define	ADD	275
+# define	AFTER_SYM	276
+# define	ALTER	277
+# define	ANALYZE_SYM	278
+# define	AVG_SYM	279
+# define	BEGIN_SYM	280
+# define	BINLOG_SYM	281
+# define	CHANGE	282
+# define	CLIENT_SYM	283
+# define	COMMENT_SYM	284
+# define	COMMIT_SYM	285
+# define	COUNT_SYM	286
+# define	CREATE	287
+# define	CROSS	288
+# define	CUBE_SYM	289
+# define	DELETE_SYM	290
+# define	DO_SYM	291
+# define	DROP	292
+# define	EVENTS_SYM	293
+# define	EXECUTE_SYM	294
+# define	FLUSH_SYM	295
+# define	HASH_SYM	296
+# define	IEEE754_TO_STRING_SYM	297
+# define	INSERT	298
+# define	IO_THREAD	299
+# define	KILL_SYM	300
+# define	LOAD	301
+# define	LOCKS_SYM	302
+# define	LOCK_SYM	303
+# define	MAKE	304
+# define	MASTER_SYM	305
+# define	MAX_SYM	306
+# define	MIN_SYM	307
+# define	NONE_SYM	308
+# define	OPTIMIZE	309
+# define	ORDERED_CHECKSUM_SYM	310
+# define	PURGE	311
+# define	REPAIR	312
+# define	REPLICATION	313
+# define	RESET_SYM	314
+# define	ROLLBACK_SYM	315
+# define	ROLLUP_SYM	316
+# define	SAVEPOINT_SYM	317
+# define	SELECT_SYM	318
+# define	SHOW	319
+# define	SLAVE	320
+# define	SQL_THREAD	321
+# define	START_SYM	322
+# define	STD_SYM	323
+# define	STOP_SYM	324
+# define	SUM_SYM	325
+# define	SUPER_SYM	326
+# define	TRUNCATE_SYM	327
+# define	UNLOCK_SYM	328
+# define	UNTIL_SYM	329
+# define	UPDATE_SYM	330
+# define	UNORDERED_CHECKSUM_SYM	331
+# define	ACTION	332
+# define	AGGREGATE_SYM	333
+# define	ALL	334
+# define	AND	335
+# define	AS	336
+# define	ASC	337
+# define	AUTO_INC	338
+# define	AVG_ROW_LENGTH	339
+# define	BACKUP_SYM	340
+# define	BERKELEY_DB_SYM	341
+# define	BINARY	342
+# define	BIT_SYM	343
+# define	BOOL_SYM	344
+# define	BOOLEAN_SYM	345
+# define	BOTH	346
+# define	BY	347
+# define	CACHE_SYM	348
+# define	CASCADE	349
+# define	CAST_SYM	350
+# define	CHARSET	351
+# define	CHECKSUM_SYM	352
+# define	CHECK_SYM	353
+# define	COMMITTED_SYM	354
+# define	COLUMNS	355
+# define	COLUMN_SYM	356
+# define	CONCURRENT	357
+# define	CONSTRAINT	358
+# define	CONVERT_SYM	359
+# define	DATABASES	360
+# define	DATA_SYM	361
+# define	DEFAULT	362
+# define	DELAYED_SYM	363
+# define	DELAY_KEY_WRITE_SYM	364
+# define	DESC	365
+# define	DESCRIBE	366
+# define	DES_KEY_FILE	367
+# define	DISABLE_SYM	368
+# define	DISTINCT	369
+# define	DYNAMIC_SYM	370
+# define	ENABLE_SYM	371
+# define	ENCLOSED	372
+# define	ESCAPED	373
+# define	DIRECTORY_SYM	374
+# define	ESCAPE_SYM	375
+# define	EXISTS	376
+# define	EXTENDED_SYM	377
+# define	FILE_SYM	378
+# define	FIRST_SYM	379
+# define	FIXED_SYM	380
+# define	FLOAT_NUM	381
+# define	FORCE_SYM	382
+# define	FOREIGN	383
+# define	FROM	384
+# define	FULL	385
+# define	FULLTEXT_SYM	386
+# define	GLOBAL_SYM	387
+# define	GRANT	388
+# define	GRANTS	389
+# define	GREATEST_SYM	390
+# define	GROUP	391
+# define	HAVING	392
+# define	HEAP_SYM	393
+# define	HEX_NUM	394
+# define	HIGH_PRIORITY	395
+# define	HOSTS_SYM	396
+# define	IDENT	397
+# define	IGNORE_SYM	398
+# define	INDEX	399
+# define	INDEXES	400
+# define	INDEX_STATS_SYM	401
+# define	INFILE	402
+# define	INNER_SYM	403
+# define	INNOBASE_SYM	404
+# define	INTO	405
+# define	IN_SYM	406
+# define	ISOLATION	407
+# define	ISAM_SYM	408
+# define	JOIN_SYM	409
+# define	KEYS	410
+# define	KEY_SYM	411
+# define	LEADING	412
+# define	LEAST_SYM	413
+# define	LEVEL_SYM	414
+# define	LEX_HOSTNAME	415
+# define	LIKE	416
+# define	LINES	417
+# define	LOCAL_SYM	418
+# define	LOG_SYM	419
+# define	LOGS_SYM	420
+# define	LONG_NUM	421
+# define	LONG_SYM	422
+# define	LOW_PRIORITY	423
+# define	MASTER_HOST_SYM	424
+# define	MASTER_USER_SYM	425
+# define	MASTER_LOG_FILE_SYM	426
+# define	MASTER_LOG_POS_SYM	427
+# define	MASTER_PASSWORD_SYM	428
+# define	MASTER_PORT_SYM	429
+# define	MASTER_CONNECT_RETRY_SYM	430
+# define	MASTER_SERVER_ID_SYM	431
+# define	RELAY_LOG_FILE_SYM	432
+# define	RELAY_LOG_POS_SYM	433
+# define	MATCH	434
+# define	MAX_ROWS	435
+# define	MAX_CONNECTIONS_PER_HOUR	436
+# define	MAX_QUERIES_PER_HOUR	437
+# define	MAX_UPDATES_PER_HOUR	438
+# define	MEDIUM_SYM	439
+# define	MERGE_SYM	440
+# define	MEMORY_SYM	441
+# define	MIN_ROWS	442
+# define	MYISAM_SYM	443
+# define	NATIONAL_SYM	444
+# define	NATURAL	445
+# define	NEW_SYM	446
+# define	NCHAR_SYM	447
+# define	NOT	448
+# define	NO_SYM	449
+# define	NULL_SYM	450
+# define	NUM	451
+# define	OFFSET_SYM	452
+# define	ON	453
+# define	OPEN_SYM	454
+# define	OPTION	455
+# define	OPTIONALLY	456
+# define	OR	457
+# define	OR_OR_CONCAT	458
+# define	ORDER_SYM	459
+# define	OUTER	460
+# define	OUTFILE	461
+# define	DUMPFILE	462
+# define	PACK_KEYS_SYM	463
+# define	PARTIAL	464
+# define	PRIMARY_SYM	465
+# define	PRIVILEGES	466
+# define	PROCESS	467
+# define	PROCESSLIST_SYM	468
+# define	QUERY_SYM	469
+# define	RAID_0_SYM	470
+# define	RAID_STRIPED_SYM	471
+# define	RAID_TYPE	472
+# define	RAID_CHUNKS	473
+# define	RAID_CHUNKSIZE	474
+# define	READ_SYM	475
+# define	REAL_NUM	476
+# define	REFERENCES	477
+# define	REGEXP	478
+# define	RELOAD	479
+# define	RENAME	480
+# define	REPEATABLE_SYM	481
+# define	REQUIRE_SYM	482
+# define	RESOURCES	483
+# define	RESTORE_SYM	484
+# define	RESTRICT	485
+# define	REVOKE	486
+# define	ROWS_SYM	487
+# define	ROW_FORMAT_SYM	488
+# define	ROW_SYM	489
+# define	SET	490
+# define	SERIALIZABLE_SYM	491
+# define	SESSION_SYM	492
+# define	SHUTDOWN	493
+# define	SSL_SYM	494
+# define	STARTING	495
+# define	STATUS_SYM	496
+# define	STRAIGHT_JOIN	497
+# define	SUBJECT_SYM	498
+# define	TABLES	499
+# define	TABLE_SYM	500
+# define	TABLE_STATS_SYM	501
+# define	TEMPORARY	502
+# define	TERMINATED	503
+# define	TEXT_STRING	504
+# define	TO_SYM	505
+# define	TRAILING	506
+# define	TRANSACTION_SYM	507
+# define	TYPE_SYM	508
+# define	FUNC_ARG0	509
+# define	FUNC_ARG1	510
+# define	FUNC_ARG2	511
+# define	FUNC_ARG3	512
+# define	UDF_RETURNS_SYM	513
+# define	UDF_SONAME_SYM	514
+# define	UDF_SYM	515
+# define	UNCOMMITTED_SYM	516
+# define	UNION_SYM	517
+# define	UNIQUE_SYM	518
+# define	USAGE	519
+# define	USER_STATS_SYM	520
+# define	USE_FRM	521
+# define	USE_SYM	522
+# define	USING	523
+# define	VALUES	524
+# define	VARIABLES	525
+# define	WHERE	526
+# define	WITH	527
+# define	WRITE_SYM	528
+# define	X509_SYM	529
+# define	XOR	530
+# define	COMPRESSED_SYM	531
+# define	BIGINT	532
+# define	BLOB_SYM	533
+# define	CHAR_SYM	534
+# define	CHANGED	535
+# define	COALESCE	536
+# define	DATETIME	537
+# define	DATE_SYM	538
+# define	DECIMAL_SYM	539
+# define	DOUBLE_SYM	540
+# define	ENUM	541
+# define	FAST_SYM	542
+# define	FLOAT_SYM	543
+# define	INT_SYM	544
+# define	LIMIT	545
+# define	LONGBLOB	546
+# define	LONGTEXT	547
+# define	MEDIUMBLOB	548
+# define	MEDIUMINT	549
+# define	MEDIUMTEXT	550
+# define	NUMERIC_SYM	551
+# define	PRECISION	552
+# define	QUICK	553
+# define	REAL	554
+# define	SIGNED_SYM	555
+# define	SMALLINT	556
+# define	STRING_SYM	557
+# define	TEXT_SYM	558
+# define	TIMESTAMP	559
+# define	TIME_SYM	560
+# define	TINYBLOB	561
+# define	TINYINT	562
+# define	TINYTEXT	563
+# define	ULONGLONG_NUM	564
+# define	UNSIGNED	565
+# define	VARBINARY	566
+# define	VARCHAR	567
+# define	VARYING	568
+# define	ZEROFILL	569
+# define	AGAINST	570
+# define	ATAN	571
+# define	BETWEEN_SYM	572
+# define	BIT_AND	573
+# define	BIT_OR	574
+# define	CASE_SYM	575
+# define	CONCAT	576
+# define	CONCAT_WS	577
+# define	CURDATE	578
+# define	CURTIME	579
+# define	DATABASE	580
+# define	DATE_ADD_INTERVAL	581
+# define	DATE_SUB_INTERVAL	582
+# define	DAY_HOUR_SYM	583
+# define	DAY_MINUTE_SYM	584
+# define	DAY_SECOND_SYM	585
+# define	DAY_SYM	586
+# define	DECODE_SYM	587
+# define	DES_ENCRYPT_SYM	588
+# define	DES_DECRYPT_SYM	589
+# define	ELSE	590
+# define	ELT_FUNC	591
+# define	ENCODE_SYM	592
+# define	ENCRYPT	593
+# define	EXPORT_SET	594
+# define	EXTRACT_SYM	595
+# define	FIELD_FUNC	596
+# define	FORMAT_SYM	597
+# define	FOR_SYM	598
+# define	FROM_UNIXTIME	599
+# define	GROUP_UNIQUE_USERS	600
+# define	HOUR_MINUTE_SYM	601
+# define	HOUR_SECOND_SYM	602
+# define	HOUR_SYM	603
+# define	IDENTIFIED_SYM	604
+# define	IF	605
+# define	INSERT_METHOD	606
+# define	INTERVAL_SYM	607
+# define	LAST_INSERT_ID	608
+# define	LEFT	609
+# define	LOCATE	610
+# define	MAKE_SET_SYM	611
+# define	MASTER_POS_WAIT	612
+# define	MINUTE_SECOND_SYM	613
+# define	MINUTE_SYM	614
+# define	MODE_SYM	615
+# define	MODIFY_SYM	616
+# define	MONTH_SYM	617
+# define	NOW_SYM	618
+# define	PASSWORD	619
+# define	POSITION_SYM	620
+# define	PROCEDURE	621
+# define	RAND	622
+# define	REPLACE	623
+# define	RIGHT	624
+# define	ROUND	625
+# define	SECOND_SYM	626
+# define	SHARE_SYM	627
+# define	SUBSTRING	628
+# define	SUBSTRING_INDEX	629
+# define	TRIM	630
+# define	UDA_CHAR_SUM	631
+# define	UDA_FLOAT_SUM	632
+# define	UDA_INT_SUM	633
+# define	UDF_CHAR_FUNC	634
+# define	UDF_FLOAT_FUNC	635
+# define	UDF_INT_FUNC	636
+# define	UNIQUE_USERS	637
+# define	UNIX_TIMESTAMP	638
+# define	USER	639
+# define	WEEK_SYM	640
+# define	WHEN_SYM	641
+# define	WORK_SYM	642
+# define	YEAR_MONTH_SYM	643
+# define	YEAR_SYM	644
+# define	YEARWEEK	645
+# define	BENCHMARK_SYM	646
+# define	END	647
+# define	THEN_SYM	648
+# define	SQL_BIG_RESULT	649
+# define	SQL_CACHE_SYM	650
+# define	SQL_CALC_FOUND_ROWS	651
+# define	SQL_NO_CACHE_SYM	652
+# define	SQL_SMALL_RESULT	653
+# define	SQL_BUFFER_RESULT	654
+# define	ISSUER_SYM	655
+# define	CIPHER_SYM	656
+# define	NEG	657
 
 
-
-
-
+#endif /* not BISON_SQL_YACC_H */
diff -ruN base/sql/sql_yacc.yy mysql40gpl/sql/sql_yacc.yy
--- base/sql/sql_yacc.yy	2005-09-02 15:38:00.000000000 -0700
+++ mysql40gpl/sql/sql_yacc.yy	2007-04-21 12:46:35.000000000 -0700
@@ -118,17 +118,21 @@
 %token	EVENTS_SYM
 %token	EXECUTE_SYM
 %token	FLUSH_SYM
+%token  HASH_SYM
+%token  IEEE754_TO_STRING_SYM
 %token	INSERT
 %token	IO_THREAD
 %token	KILL_SYM
 %token	LOAD
 %token	LOCKS_SYM
 %token	LOCK_SYM
+%token  MAKE
 %token	MASTER_SYM
 %token	MAX_SYM
 %token	MIN_SYM
 %token	NONE_SYM
 %token	OPTIMIZE
+%token  ORDERED_CHECKSUM_SYM
 %token	PURGE
 %token	REPAIR
 %token	REPLICATION
@@ -147,7 +151,9 @@
 %token	SUPER_SYM
 %token	TRUNCATE_SYM
 %token	UNLOCK_SYM
+%token  UNTIL_SYM
 %token	UPDATE_SYM
+%token  UNORDERED_CHECKSUM_SYM
 
 %token	ACTION
 %token	AGGREGATE_SYM
@@ -218,6 +224,7 @@
 %token	IGNORE_SYM
 %token	INDEX
 %token	INDEXES
+%token	INDEX_STATS_SYM
 %token	INFILE
 %token	INNER_SYM
 %token	INNOBASE_SYM
@@ -314,9 +321,10 @@
 %token	STARTING
 %token	STATUS_SYM
 %token	STRAIGHT_JOIN
-%token	SUBJECT_SYM
+%token  SUBJECT_SYM
 %token	TABLES
 %token	TABLE_SYM
+%token	TABLE_STATS_SYM
 %token	TEMPORARY
 %token	TERMINATED
 %token	TEXT_STRING
@@ -335,6 +343,7 @@
 %token	UNION_SYM
 %token	UNIQUE_SYM
 %token	USAGE
+%token	USER_STATS_SYM
 %token	USE_FRM
 %token	USE_SYM
 %token	USING
@@ -573,7 +582,7 @@
 	query verb_clause create change select do drop insert replace insert2
 	insert_values update delete truncate rename
 	show describe load alter optimize flush
-	reset purge begin commit rollback savepoint
+	make reset purge begin commit rollback savepoint
 	slave master_def master_defs
 	repair restore backup analyze check start
 	field_list field_list_item field_spec kill column_def key_def
@@ -640,6 +649,7 @@
 	| flush
 	| load
 	| lock
+        | make
 	| kill
 	| optimize
 	| purge  
@@ -1364,6 +1374,8 @@
            lex->sql_command = SQLCOM_SLAVE_START;
 	   lex->type = 0;
          }
+	 slave_until
+	 {}
          |
 	STOP_SYM SLAVE slave_thread_opts
          {
@@ -1400,7 +1412,47 @@
 	| SQL_THREAD	{ Lex->slave_thd_opt|=SLAVE_SQL; }
 	| IO_THREAD   	{ Lex->slave_thd_opt|=SLAVE_IO; }
 	;
-  
+
+slave_until:
+        /*empty*/       {}
+        | UNTIL_SYM slave_until_opts
+          {
+            LEX *lex=Lex;
+	    if  (!lex->mi.log_file_name || !lex->mi.pos)
+            {
+               send_error(&lex->thd->net, ER_SYNTAX_ERROR);
+               YYABORT;
+            }
+          }
+        ;
+
+slave_until_opts:
+       master_file_def
+       | slave_until_opts ',' master_file_def ;
+
+master_file_def:
+       MASTER_LOG_FILE_SYM EQ TEXT_STRING
+       {
+         Lex->mi.log_file_name = $3.str;
+       }
+       | MASTER_LOG_POS_SYM EQ ulonglong_num
+         {
+           Lex->mi.pos = $3;
+           /*
+              If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
+              instead of causing subsequent errors.
+              We need to do it in this file, because only there we know that
+              MASTER_LOG_POS has been explicitely specified. On the contrary
+              in change_master() (sql_repl.cc) we cannot distinguish between 0
+              (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
+              whereas we want to distinguish (specified 0 means "read the binlog
+              from 0" (4 in fact), unspecified means "don't change the position
+              (keep the preceding value)").
+           */
+           Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
+         }
+       ;
+
 restore:
 	RESTORE_SYM table_or_tables
 	{
@@ -2081,6 +2133,24 @@
 	  { $$=new Item_sum_count_distinct(* $5); }
 	| GROUP_UNIQUE_USERS '(' text_literal ',' NUM ',' NUM ',' in_sum_expr ')'
 	  { $$= new Item_sum_unique_users($3,atoi($5.str),atoi($7.str),$9); }
+	| ORDERED_CHECKSUM_SYM '(' 
+	  { Select->in_sum_expr++; }
+           expr_list
+	  { Select->in_sum_expr--; }
+           ')'
+	  { $$=new Item_sum_ordered_checksum(*$4); }
+	| UNORDERED_CHECKSUM_SYM '(' 
+	  { Select->in_sum_expr++; }
+           expr_list
+	  { Select->in_sum_expr--; }
+           ')'
+	  { $$=new Item_sum_unordered_checksum(*$4); }
+	| HASH_SYM '(' 
+	  { Select->in_sum_expr++; }
+           expr_list
+	  { Select->in_sum_expr--; }
+           ')'
+	  { $$=new Item_func_hash(*$4); }
 	| MIN_SYM '(' in_sum_expr ')'
 	  { $$=new Item_sum_min($3); }
 	| MAX_SYM '(' in_sum_expr ')'
@@ -2935,6 +3005,12 @@
 	  }
 	| STATUS_SYM wild
 	  { Lex->sql_command= SQLCOM_SHOW_STATUS; }
+	| USER_STATS_SYM wild
+	  { Lex->sql_command= SQLCOM_SHOW_USER_STATS; }
+	| TABLE_STATS_SYM wild
+	  { Lex->sql_command= SQLCOM_SHOW_TABLE_STATS; }
+	| INDEX_STATS_SYM wild
+	  { Lex->sql_command= SQLCOM_SHOW_INDEX_STATS; }
         | INNOBASE_SYM STATUS_SYM
           { Lex->sql_command = SQLCOM_SHOW_INNODB_STATUS;}
 	| opt_full PROCESSLIST_SYM
@@ -3049,6 +3125,8 @@
         | MASTER_SYM    { Lex->type|= REFRESH_MASTER; }
 	| DES_KEY_FILE	{ Lex->type|= REFRESH_DES_KEY_FILE; }
  	| RESOURCES     { Lex->type|= REFRESH_USER_RESOURCES; };
+ 	| TABLE_STATS_SYM { Lex->type|= REFRESH_TABLE_STATS; };
+ 	| INDEX_STATS_SYM { Lex->type|= REFRESH_INDEX_STATS; };
 
 opt_table_list:
 	/* empty */  {;}
@@ -3069,9 +3147,17 @@
 
 reset_option:
         SLAVE                 { Lex->type|= REFRESH_SLAVE; }
+        reset_slave_option {}
         | MASTER_SYM          { Lex->type|= REFRESH_MASTER; }
 	| QUERY_SYM CACHE_SYM { Lex->type|= REFRESH_QUERY_CACHE;};
 
+reset_slave_option:
+       /* empty */ {}
+       | NO_SYM PURGE BINLOG_SYM 
+       {
+         Lex->type |= REFRESH_NO_PURGE_BINLOG;
+       }
+
 purge:
 	PURGE
 	{
@@ -3362,6 +3448,7 @@
 	| FLUSH_SYM		{}
 	| GRANTS                {}
 	| GLOBAL_SYM		{}
+        | HASH_SYM		{}
 	| HEAP_SYM		{}
 	| HANDLER_SYM		{}
 	| HOSTS_SYM		{}
@@ -3409,6 +3496,7 @@
 	| NONE_SYM		{}
 	| OFFSET_SYM		{}
 	| OPEN_SYM		{}
+	| ORDERED_CHECKSUM_SYM	{}
 	| PACK_KEYS_SYM		{}
 	| PASSWORD		{}
 	| PREV_SYM		{}
@@ -3462,6 +3550,7 @@
 	| TYPE_SYM		{}
 	| UDF_SYM		{}
 	| UNCOMMITTED_SYM	{}
+	| UNORDERED_CHECKSUM_SYM	{}
 	| USE_FRM		{}
 	| VARIABLES		{}
 	| WORK_SYM		{}
@@ -4050,3 +4139,53 @@
 	| DISTINCT {}
 	| ALL { Lex->union_option=1; }
 	;
+
+
+/* make master */
+make:
+       MAKE MASTER_SYM 
+       {
+	  LEX *lex = Lex;
+	  lex->sql_command = SQLCOM_MAKE_MASTER;
+	  bzero((char*) &lex->mi, sizeof(lex->mi));
+       }
+       make_master_defs
+       {
+       }
+       ;
+
+make_master_defs:
+       MASTER_LOG_FILE_SYM EQ TEXT_STRING ',' MASTER_SERVER_ID_SYM EQ ULONG_NUM
+       {
+	 Lex->mi.log_file_name = $3.str;
+         Lex->mi.server_id = $7;
+       }
+       make_master_with_defs {}
+       | MASTER_LOG_FILE_SYM EQ TEXT_STRING ',' MASTER_SERVER_ID_SYM EQ ULONG_NUM ',' INDEX EQ TEXT_STRING
+       {
+	 Lex->mi.log_file_name = $3.str;
+         Lex->mi.server_id = $7;
+	 Lex->mi.log_index_name = $11.str;
+       }
+       make_master_with_defs {}
+       | GRANT SESSION_SYM
+       {
+	 Lex->mi.in_failover = 0;
+       }
+       | REVOKE SESSION_SYM
+       {
+	 Lex->mi.in_failover = 1;
+       }
+       | REVOKE SESSION_SYM WITH KILL_SYM
+       {
+	 Lex->mi.in_failover = 1;
+	 Lex->mi.kill_session = 1;
+       }
+       ;
+
+make_master_with_defs:
+       /* empty */ {}
+       | WITH BINLOG_SYM 
+       {
+         Lex->mi.with_old_binlog = 1;
+       }
diff -ruN base/sql/structs.h mysql40gpl/sql/structs.h
--- base/sql/structs.h	2005-09-02 15:37:56.000000000 -0700
+++ mysql40gpl/sql/structs.h	2007-04-21 09:57:14.000000000 -0700
@@ -177,6 +177,29 @@
   USER_RESOURCES user_resources;
   time_t intime;
 } USER_CONN;
+
+typedef struct st_user_stats {
+  char user[USERNAME_LENGTH + 1];
+  uint total_connections;
+  uint concurrent_connections;
+  time_t connected_time;  // in seconds
+  double busy_time;       // in seconds
+  ha_rows rows_fetched, rows_updated;
+  ulonglong select_commands, update_commands, other_commands;
+  ulonglong commit_trans, rollback_trans;
+} USER_STATS;
+
+typedef struct st_table_stats {
+  char table[NAME_LEN * 2 + 2];  // [db] + '.' + [table] + '\0'
+  ulonglong rows_read, rows_changed;
+  ulonglong rows_changed_x_indexes;
+} TABLE_STATS;
+
+typedef struct st_index_stats {
+  char index[NAME_LEN * 3 + 3];  // [db] + '.' + [table] + '.' + [index] + '\0'
+  ulonglong rows_read;
+} INDEX_STATS;
+
 	/* Bits in form->update */
 #define REG_MAKE_DUPP		1	/* Make a copy of record when read */
 #define REG_NEW_RECORD		2	/* Write a new record if not found */
diff -ruN base/support-files/mysql.server.sh mysql40gpl/support-files/mysql.server.sh
--- base/support-files/mysql.server.sh	2005-09-02 15:38:00.000000000 -0700
+++ mysql40gpl/support-files/mysql.server.sh	2007-04-21 09:57:15.000000000 -0700
@@ -10,7 +10,7 @@
 # started and shut down when the systems goes down.
 
 # Comments to support chkconfig on RedHat Linux
-# chkconfig: 2345 90 20
+# chkconfig: - 90 20
 # description: A very fast and reliable SQL database engine.
 
 # Comments to support LSB init script conventions
@@ -151,7 +151,7 @@
     then
       # Give extra arguments to mysqld with the my.cnf file. This script may
       # be overwritten at next upgrade.
-      $bindir/mysqld_safe --datadir=$datadir --pid-file=$pid_file >/dev/null 2>&1 &
+      su - mysql -c "$bindir/mysqld_safe --datadir=$datadir --pid-file=$pid_file" >/dev/null 2>&1 &
       # Make lock for RedHat / SuSE
       if test -w /var/lock/subsys
       then
@@ -173,11 +173,17 @@
       # mysqld should remove the pid_file when it exits, so wait for it.
 
       sleep 1
-      while [ -s $pid_file -a "$flags" != aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ]
+      while [ -s $pid_file ]
       do
-	[ -z "$flags" ] && echo $echo_n "Wait for mysqld to exit$echo_c" || echo $echo_n ".$echo_c"
-        flags=a$flags
-        sleep 1
+        if pgrep mysqld_safe > /dev/null || pgrep mysqld > /dev/null
+        then   
+    	  [ -z "$flags" ] && echo $echo_n "Wait for mysqld or mysqld_safe to exit$echo_c" || echo $echo_n ".$echo_c"
+          flags=a$flags
+          sleep 1
+        else
+          echo "mysqld and mysqld_safe do not exist, removing $pid_file"
+          rm $pid_file
+        fi
       done
       if [ -s $pid_file ]
          then echo " gave up waiting!"
diff -ruN base/support-files/mysql.spec.sh mysql40gpl/support-files/mysql.spec.sh
--- base/support-files/mysql.spec.sh	2005-09-02 15:38:08.000000000 -0700
+++ mysql40gpl/support-files/mysql.spec.sh	2007-04-21 09:57:15.000000000 -0700
@@ -376,13 +376,13 @@
 
 # Change permissions so that the user that will run the MySQL daemon
 # owns all database files.
-chown -R %{mysqld_user}:%{mysqld_user} $mysql_datadir
+chown -R %{mysqld_user}:%{mysqld_user} $mysql_datadir/.
 
 # Initiate databases
 %{_bindir}/mysql_install_db -IN-RPM --user=%{mysqld_user}
 
 # Change permissions again to fix any new files.
-chown -R %{mysqld_user}:%{mysqld_user} $mysql_datadir
+chown -R %{mysqld_user}:%{mysqld_user} $mysql_datadir/.
 
 # Fix permissions for the permission database so that only the user
 # can read them.
